diff --git a/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/ConsumerClassLoaderFilter.java b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/ConsumerClassLoaderFilter.java
new file mode 100644
index 000000000..c16b5f3e9
--- /dev/null
+++ b/dubbo-cluster/src/main/java/org/apache/dubbo/rpc/cluster/filter/support/ConsumerClassLoaderFilter.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.rpc.cluster.filter.support;
+
+import org.apache.dubbo.common.extension.Activate;
+import org.apache.dubbo.rpc.Invocation;
+import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.cluster.filter.ClusterFilter;
+import org.apache.dubbo.rpc.model.ServiceModel;
+
+import java.util.Optional;
+
+import static org.apache.dubbo.common.constants.CommonConstants.CONSUMER;
+
+@Activate(group = CONSUMER, order = Integer.MIN_VALUE + 100)
+public class ConsumerClassLoaderFilter implements ClusterFilter {
+    @Override
+    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {
+        ClassLoader originClassLoader = Thread.currentThread().getContextClassLoader();
+        try {
+            Optional.ofNullable(invocation.getServiceModel())
+                .map(ServiceModel::getClassLoader)
+                .ifPresent(Thread.currentThread()::setContextClassLoader);
+            return invoker.invoke(invocation);
+        } finally {
+            Thread.currentThread().setContextClassLoader(originClassLoader);
+        }
+    }
+}
diff --git a/dubbo-cluster/src/main/resources/META-INF/dubbo/internal/org.apache.dubbo.rpc.cluster.filter.ClusterFilter b/dubbo-cluster/src/main/resources/META-INF/dubbo/internal/org.apache.dubbo.rpc.cluster.filter.ClusterFilter
index 77cf2ac27..b21c3d843 100644
--- a/dubbo-cluster/src/main/resources/META-INF/dubbo/internal/org.apache.dubbo.rpc.cluster.filter.ClusterFilter
+++ b/dubbo-cluster/src/main/resources/META-INF/dubbo/internal/org.apache.dubbo.rpc.cluster.filter.ClusterFilter
@@ -1,2 +1,3 @@
 consumercontext=org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter
+consumer-classloader=org.apache.dubbo.rpc.cluster.filter.support.ConsumerClassLoaderFilter
 router-snapshot=org.apache.dubbo.rpc.cluster.router.RouterSnapshotFilter
diff --git a/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java b/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
index 9000cfe2c..c019027c0 100644
--- a/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
+++ b/dubbo-config/dubbo-config-api/src/test/java/org/apache/dubbo/config/ReferenceConfigTest.java
@@ -1092,12 +1092,49 @@ class ReferenceConfigTest {
         Assertions.assertNotEquals(classLoader2, result1.getClass().getClassLoader());
         Assertions.assertEquals(classLoader1, innerRequestReference.get().getClass().getClassLoader());
 
+        Thread.currentThread().setContextClassLoader(classLoader1);
+        callBean1.invoke(object1, requestClazzCustom2.newInstance());
+        Assertions.assertEquals(classLoader1, Thread.currentThread().getContextClassLoader());
+
         applicationModel.destroy();
         DubboBootstrap.getInstance().destroy();
         Thread.currentThread().setContextClassLoader(classLoader);
         Thread.currentThread().getContextClassLoader().loadClass(DemoService.class.getName());
     }
 
+    @Test
+    void testClassLoader() {
+        FrameworkModel frameworkModel = new FrameworkModel();
+        ApplicationModel applicationModel = frameworkModel.newApplication();
+        applicationModel.getApplicationConfigManager().setApplication(new ApplicationConfig("Test"));
+
+        ClassLoader originClassLoader = Thread.currentThread().getContextClassLoader();
+        ClassLoader classLoader = new ClassLoader(originClassLoader) {};
+        Thread.currentThread().setContextClassLoader(classLoader);
+
+        ServiceConfig<DemoService> serviceConfig = new ServiceConfig<>(applicationModel.newModule());
+        serviceConfig.setInterface(DemoService.class);
+        serviceConfig.setProtocol(new ProtocolConfig("dubbo", -1));
+        serviceConfig.setRegistry(new RegistryConfig("N/A"));
+        serviceConfig.setRef(new DemoServiceImpl());
+        serviceConfig.export();
+
+        ReferenceConfig<DemoService> referenceConfig = new ReferenceConfig<>(applicationModel.newModule());
+        referenceConfig.setInterface(DemoService.class);
+        referenceConfig.setRegistry(new RegistryConfig("N/A"));
+        DemoService demoService = referenceConfig.get();
+
+        demoService.sayName("Dubbo");
+        Assertions.assertEquals(classLoader, Thread.currentThread().getContextClassLoader());
+
+        Thread.currentThread().setContextClassLoader(null);
+        demoService.sayName("Dubbo");
+        Assertions.assertNull(Thread.currentThread().getContextClassLoader());
+
+        Thread.currentThread().setContextClassLoader(originClassLoader);
+        frameworkModel.destroy();
+    }
+
     private Class<?> compileCustomRequest(ClassLoader classLoader) throws NotFoundException, CannotCompileException {
         CtClassBuilder builder = new CtClassBuilder();
         builder.setClassName(MultiClassLoaderServiceRequest.class.getName() + "A");

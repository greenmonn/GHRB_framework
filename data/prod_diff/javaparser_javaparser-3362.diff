diff --git a/.github/workflows/maven_tests.yml b/.github/workflows/maven_tests.yml
index ad8e25188..4e4b5374f 100644
--- a/.github/workflows/maven_tests.yml
+++ b/.github/workflows/maven_tests.yml
@@ -15,6 +15,9 @@ on:
     paths-ignore:
       - '**.md'
 
+  # Enable manual triggering (important for contributors to enable a check on their fork)
+  workflow_dispatch:
+
 jobs:
   maven_test:
     strategy:
diff --git a/changelog.md b/changelog.md
index 3f0d26d85..367bd8ae0 100644
--- a/changelog.md
+++ b/changelog.md
@@ -7,6 +7,9 @@ Next Release (Version 3.23.1)
 ### Deprecated
 ### Removed
 ### Fixed
+
+* `record` may be used as variable name in Java 16 (PR [#3362](https://github.com/javaparser/javaparser/pull/3362) by [@koppor](github.com/koppor/))
+
 ### Security
 
 
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/body/RecordDeclarationTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/body/RecordDeclarationTest.java
index c41bd47c8..f1aa113ad 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/body/RecordDeclarationTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/body/RecordDeclarationTest.java
@@ -701,6 +701,15 @@ public class RecordDeclarationTest {
 
     }
 
+    @Test
+    void instanceFieldIsNotAllowedInRecord() {
+        String s = "record X { int record; }";
+
+        assertThrows(AssertionFailedError.class, () -> {
+            CompilationUnit cu = TestParser.parseCompilationUnit(s);
+        });
+    }
+
     private void assertCompilationFails(String s) {
         assertThrows(AssertionFailedError.class, () -> {
             CompilationUnit cu = TestParser.parseCompilationUnit(s);
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java14PreviewValidatorTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java14PreviewValidatorTest.java
index 0773731d2..1ef53e568 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java14PreviewValidatorTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java14PreviewValidatorTest.java
@@ -45,19 +45,43 @@ class Java14PreviewValidatorTest {
     class Record {
 
         @Nested
-        class RecordAsIdentifierForbidden {
+        class RecordAsTypeIdentifierForbidden {
             @Test
-            void recordUsedAsClassName() {
+            void recordUsedAsClassIdentifier() {
                 String s = "public class record {}";
                 ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
-                TestUtils.assertProblems(result, "(line 1,col 14) 'record' cannot be used as an identifier as it is a keyword.");
+                TestUtils.assertProblems(result, "(line 1,col 14) 'record' is a restricted identifier and cannot be used for type declarations");
             }
 
             @Test
-            void recordUsedAsFieldName() {
+            void recordUsedAsEnumIdentifier() {
+                String s = "public enum record {}";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertProblems(result, "(line 1,col 13) 'record' is a restricted identifier and cannot be used for type declarations");
+            }
+
+            @Test
+            void recordUsedAsRecordIdentifier() {
+                String s = "public record record() {}";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertProblems(result, "(line 1,col 15) 'record' is a restricted identifier and cannot be used for type declarations");
+            }
+        }
+
+        @Nested
+        class RecordUsedAsIdentifierAllowedAsFieldDeclarations {
+            @Test
+            void recordUsedAsFieldIdentifierInClass() {
                 String s = "class X { int record; }";
                 ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
-                TestUtils.assertProblems(result, "(line 1,col 15) 'record' cannot be used as an identifier as it is a keyword.");
+                TestUtils.assertNoProblems(result);
+            }
+
+            @Test
+            void recordUsedAsFieldIdentifierInInterface() {
+                String s = "interface X { int record; }";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertNoProblems(result);
             }
         }
 
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java15PreviewValidatorTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java15PreviewValidatorTest.java
index f8157ff64..2fceef860 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java15PreviewValidatorTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java15PreviewValidatorTest.java
@@ -25,21 +25,17 @@ import com.github.javaparser.JavaParser;
 import com.github.javaparser.ParseResult;
 import com.github.javaparser.ParserConfiguration;
 import com.github.javaparser.ast.CompilationUnit;
-import com.github.javaparser.ast.stmt.Statement;
 import com.github.javaparser.utils.TestUtils;
 import org.junit.jupiter.api.Nested;
 import org.junit.jupiter.api.Test;
 
 import static com.github.javaparser.ParseStart.COMPILATION_UNIT;
-import static com.github.javaparser.ParseStart.STATEMENT;
 import static com.github.javaparser.ParserConfiguration.LanguageLevel.JAVA_15_PREVIEW;
-import static com.github.javaparser.ParserConfiguration.LanguageLevel.JAVA_16;
 import static com.github.javaparser.Providers.provider;
-import static com.github.javaparser.utils.TestUtils.assertProblems;
 
 class Java15PreviewValidatorTest {
 
-    private final JavaParser javaParser = new JavaParser(new ParserConfiguration().setLanguageLevel(JAVA_16));
+    private final JavaParser javaParser = new JavaParser(new ParserConfiguration().setLanguageLevel(JAVA_15_PREVIEW));
 
     /**
      * Records are available within Java 14 (preview), Java 15 (2nd preview), and Java 16 (release).
@@ -49,22 +45,45 @@ class Java15PreviewValidatorTest {
     class Record {
 
         @Nested
-        class RecordAsIdentifierForbidden {
+        class RecordAsTypeIdentifierForbidden {
             @Test
-            void recordUsedAsClassName() {
+            void recordUsedAsClassIdentifier() {
                 String s = "public class record {}";
                 ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
-                TestUtils.assertProblems(result, "(line 1,col 14) 'record' cannot be used as an identifier as it is a keyword.");
+                TestUtils.assertProblems(result, "(line 1,col 14) 'record' is a restricted identifier and cannot be used for type declarations");
             }
 
             @Test
-            void recordUsedAsFieldName() {
-                String s = "class X { int record; }";
+            void recordUsedAsEnumIdentifier() {
+                String s = "public enum record {}";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertProblems(result, "(line 1,col 13) 'record' is a restricted identifier and cannot be used for type declarations");
+            }
+
+            @Test
+            void recordUsedAsRecordIdentifier() {
+                String s = "public record record() {}";
                 ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
-                TestUtils.assertProblems(result, "(line 1,col 15) 'record' cannot be used as an identifier as it is a keyword.");
+                TestUtils.assertProblems(result, "(line 1,col 15) 'record' is a restricted identifier and cannot be used for type declarations");
             }
         }
 
+        @Nested
+        class RecordUsedAsIdentifierAllowedAsFieldDeclarations {
+            @Test
+            void recordUsedAsFieldIdentifierInClass() {
+                String s = "class X { int record; }";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertNoProblems(result);
+            }
+
+            @Test
+            void recordUsedAsFieldIdentifierInInterface() {
+                String s = "interface X { int record; }";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertNoProblems(result);
+            }
+        }
 
         @Nested
         class RecordDeclarationPermitted {
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java16ValidatorTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java16ValidatorTest.java
index 8e9847687..6be775e9b 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java16ValidatorTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java16ValidatorTest.java
@@ -57,22 +57,45 @@ class Java16ValidatorTest {
     class Record {
 
         @Nested
-        class RecordAsIdentifierForbidden {
+        class RecordAsTypeIdentifierForbidden {
             @Test
-            void recordUsedAsClassName() {
+            void recordUsedAsClassIdentifier() {
                 String s = "public class record {}";
                 ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
-                TestUtils.assertProblems(result, "(line 1,col 14) 'record' cannot be used as an identifier as it is a keyword.");
+                TestUtils.assertProblems(result, "(line 1,col 14) 'record' is a restricted identifier and cannot be used for type declarations");
             }
 
             @Test
-            void recordUsedAsFieldName() {
-                String s = "class X { int record; }";
+            void recordUsedAsEnumIdentifier() {
+                String s = "public enum record {}";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertProblems(result, "(line 1,col 13) 'record' is a restricted identifier and cannot be used for type declarations");
+            }
+
+            @Test
+            void recordUsedAsRecordIdentifier() {
+                String s = "public record record() {}";
                 ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
-                TestUtils.assertProblems(result, "(line 1,col 15) 'record' cannot be used as an identifier as it is a keyword.");
+                TestUtils.assertProblems(result, "(line 1,col 15) 'record' is a restricted identifier and cannot be used for type declarations");
             }
         }
 
+        @Nested
+        class RecordUsedAsIdentifierAllowedAsFieldDeclarations {
+            @Test
+            void recordUsedAsFieldIdentifierInClass() {
+                String s = "class X { int record; }";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertNoProblems(result);
+            }
+
+            @Test
+            void recordUsedAsFieldIdentifierInInterface() {
+                String s = "interface X { int record; }";
+                ParseResult<CompilationUnit> result = javaParser.parse(COMPILATION_UNIT, provider(s));
+                TestUtils.assertNoProblems(result);
+            }
+        }
 
         @Nested
         class RecordDeclarationPermitted {
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/issues/Issue3255Test.java b/javaparser-core-testing/src/test/java/com/github/javaparser/issues/Issue3255Test.java
index 9196d9825..02279394b 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/issues/Issue3255Test.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/issues/Issue3255Test.java
@@ -6,6 +6,7 @@ import com.github.javaparser.ast.CompilationUnit;
 import com.github.javaparser.utils.LineSeparator;
 import org.junit.jupiter.api.Test;
 
+import static com.github.javaparser.utils.TestParser.parseStatement;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class Issue3255Test {
@@ -43,4 +44,25 @@ public class Issue3255Test {
         CompilationUnit compilationUnit = parseResult.getResult().get();
         System.out.println(compilationUnit);
     }
+
+    @Test
+    void recordIsAValidVariableNameWhenParsingAStatement() {
+        parseStatement("Object record;");
+    }
+
+    @Test
+    public void recordIsAValidVariableNameWhenUsedInAClass() {
+        JavaParser javaParser = new JavaParser();
+        ParseResult<CompilationUnit> parseResult = javaParser.parse("class Test {" + EOL +
+                "    private void goodInJava16() {" + EOL +
+                "        Object record;" + EOL +
+                "    }" + EOL +
+                "}");
+
+        assertEquals(0, parseResult.getProblems().size());
+
+        CompilationUnit compilationUnit = parseResult.getResult().get();
+        System.out.println(compilationUnit);
+    }
+
 }
diff --git a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/RecordAsTypeIdentifierNotAllowed.java b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/RecordAsTypeIdentifierNotAllowed.java
new file mode 100644
index 000000000..5af8ddcc3
--- /dev/null
+++ b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/RecordAsTypeIdentifierNotAllowed.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (C) 2021 The JavaParser Team.
+ * Copyright (C) 2021 Oliver Kopp
+ *
+ * This file is part of JavaParser.
+ *
+ * JavaParser can be used either under the terms of
+ * a) the GNU Lesser General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ * b) the terms of the Apache License
+ *
+ * You should have received a copy of both licenses in LICENCE.LGPL and
+ * LICENCE.APACHE. Please refer to those files for details.
+ *
+ * JavaParser is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ */
+
+package com.github.javaparser.ast.validator;
+
+import com.github.javaparser.ast.Node;
+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
+import com.github.javaparser.ast.body.EnumDeclaration;
+import com.github.javaparser.ast.body.RecordDeclaration;
+import com.github.javaparser.ast.body.TypeDeclaration;
+import com.github.javaparser.ast.expr.Name;
+import com.github.javaparser.ast.expr.SimpleName;
+
+import static com.github.javaparser.utils.CodeGenerationUtils.f;
+
+/**
+ * Validates that "record" cannot be used as identifier for type declarations (e.g., classes, enums, and records).
+ * For details, see <a href="https://openjdk.java.net/jeps/395">JEP 395</a>
+ */
+public class RecordAsTypeIdentifierNotAllowed extends VisitorValidator {
+    private final String error;
+
+    public RecordAsTypeIdentifierNotAllowed() {
+        error = "'record' is a restricted identifier and cannot be used for type declarations";
+    }
+
+    @Override
+    public void visit(Name n, ProblemReporter arg) {
+        if (n.getIdentifier().equals("record") && !validUsage(n)) {
+            arg.report(n, error);
+        }
+        super.visit(n, arg);
+    }
+
+    @Override
+    public void visit(SimpleName n, ProblemReporter arg) {
+        if (n.getIdentifier().equals("record") && !validUsage(n)) {
+            arg.report(n, error);
+        }
+        super.visit(n, arg);
+    }
+
+    private boolean validUsage(Node node) {
+        if (!node.getParentNode().isPresent()) {
+            return true;
+        }
+        Node parent = node.getParentNode().get();
+
+        return !(parent instanceof TypeDeclaration);
+    }
+}
diff --git a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/language_level_validations/Java14Validator.java b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/language_level_validations/Java14Validator.java
index b2557a911..ae104fbd0 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/language_level_validations/Java14Validator.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/language_level_validations/Java14Validator.java
@@ -22,7 +22,7 @@
 package com.github.javaparser.ast.validator.language_level_validations;
 
 import com.github.javaparser.ast.body.RecordDeclaration;
-import com.github.javaparser.ast.validator.ReservedKeywordValidator;
+import com.github.javaparser.ast.validator.RecordAsTypeIdentifierNotAllowed;
 import com.github.javaparser.ast.validator.SingleNodeTypeValidator;
 import com.github.javaparser.ast.validator.Validator;
 import com.github.javaparser.ast.validator.language_level_validations.chunks.RecordDeclarationValidator;
@@ -45,7 +45,7 @@ public class Java14Validator extends Java13Validator {
      * </blockquote>
      * https://docs.oracle.com/javase/specs/jls/se15/preview/specs/records-jls.html#jls-3.8
      */
-    final Validator recordAsTypeIdentifierNotAllowed = new ReservedKeywordValidator("record");
+    final Validator recordAsTypeIdentifierNotAllowed = new RecordAsTypeIdentifierNotAllowed();
 
     final Validator recordDeclarationValidator = new SingleNodeTypeValidator<>(RecordDeclaration.class, new RecordDeclarationValidator());
 
diff --git a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/language_level_validations/Java16Validator.java b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/language_level_validations/Java16Validator.java
index cd5aebc78..83a0be6eb 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/ast/validator/language_level_validations/Java16Validator.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/ast/validator/language_level_validations/Java16Validator.java
@@ -21,11 +21,6 @@
 
 package com.github.javaparser.ast.validator.language_level_validations;
 
-import com.github.javaparser.ast.body.RecordDeclaration;
-import com.github.javaparser.ast.validator.SingleNodeTypeValidator;
-import com.github.javaparser.ast.validator.Validator;
-import com.github.javaparser.ast.validator.language_level_validations.chunks.RecordDeclarationValidator;
-
 /**
  * This validator validates according to Java 16 syntax rules.
  *

diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/Issue3387Test.java b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/Issue3387Test.java
new file mode 100755
index 000000000..86e891060
--- /dev/null
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/Issue3387Test.java
@@ -0,0 +1,72 @@
+package com.github.javaparser.printer.lexicalpreservation;
+
+import static com.github.javaparser.utils.TestUtils.assertEqualsStringIgnoringEol;
+
+import java.util.StringJoiner;
+
+/*
+ * Copyright (C) 2007-2010 JÃºlio Vilmar Gesser.
+ * Copyright (C) 2011, 2013-2019 The JavaParser Team.
+ *
+ * This file is part of JavaParser.
+ *
+ * JavaParser can be used either under the terms of
+ * a) the GNU Lesser General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ * b) the terms of the Apache License
+ *
+ * You should have received a copy of both licenses in LICENCE.LGPL and
+ * LICENCE.APACHE. Please refer to those files for details.
+ *
+ * JavaParser is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ */
+
+import org.junit.jupiter.api.Test;
+
+import com.github.javaparser.StaticJavaParser;
+import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.ast.body.MethodDeclaration;
+import com.github.javaparser.javadoc.Javadoc;
+import com.github.javaparser.javadoc.description.JavadocDescription;
+
+public class Issue3387Test extends AbstractLexicalPreservingTest {
+
+    @Test
+    public void test3387() {
+        String input = new StringJoiner("\n")
+                .add("class A {")
+                .add("")
+                .add("\tpublic void setTheNumber(int number) {")
+                .add("\t\tnumber = number;")
+                .add("\t}")
+                .add("")
+                .add("}").toString();
+        
+        String expected = "class A {\n" + 
+                "\n" + 
+                "\t/**\n" + 
+                "\t * Change Javadoc\n" + 
+                "\t */\n" + 
+                "\tpublic void setTheNumber(int number) {\n" + 
+                "\t\tnumber = number;\n" + 
+                "\t}\n" + 
+                "\n" + 
+                "}";
+
+            CompilationUnit cu = StaticJavaParser.parse(input);
+            LexicalPreservingPrinter.setup(cu);
+
+            MethodDeclaration md = cu.findFirst(MethodDeclaration.class).get();
+            // create new javadoc comment
+            Javadoc javadoc = new Javadoc(JavadocDescription.parseText("Change Javadoc"));
+            md.setJavadocComment("\t", javadoc);
+            System.out.println(LexicalPreservingPrinter.print(cu));
+            assertEqualsStringIgnoringEol(expected, LexicalPreservingPrinter.print(cu));
+    }
+
+
+}
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java
index 46257e83f..9c6aae360 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinter.java
@@ -296,13 +296,25 @@ public class LexicalPreservingPrinter {
             if (index <= 0) {
                 return;
             }
+            
+            TextElement currentSpaceCandidate = null;
 
             for (int i = index - 1; i >= 0; i--) {
                 TextElement spaceCandidate = nodeText.getTextElement(i);
+                if (spaceCandidate.isSpaceOrTab()) {
+                    // save the current indentation char
+                    currentSpaceCandidate = nodeText.getTextElement(i);
+                }
                 if (!spaceCandidate.isSpaceOrTab()) {
                     if (spaceCandidate.isNewline() && i != index - 1) {
                         for (int j = 0; j < (index - 1) - i; j++) {
-                            nodeText.addElement(index, new TokenTextElement(JavaToken.Kind.SPACE.getKind()));
+                            if (currentSpaceCandidate != null) {
+                                // use the current (or last) indentation character 
+                                nodeText.addElement(index, new TokenTextElement(JavaToken.Kind.SPACE.getKind(), currentSpaceCandidate.expand()));
+                            } else {
+                                // use the default indentation character 
+                                nodeText.addElement(index, new TokenTextElement(JavaToken.Kind.SPACE.getKind()));
+                            }
                         }
                     }
                     break;

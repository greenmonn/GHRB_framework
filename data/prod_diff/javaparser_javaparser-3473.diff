diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/expr/ArrayCreationExprTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/expr/ArrayCreationExprTest.java
new file mode 100644
index 000000000..06cfe6c96
--- /dev/null
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/expr/ArrayCreationExprTest.java
@@ -0,0 +1,37 @@
+package com.github.javaparser.ast.expr;
+
+import com.github.javaparser.ast.ArrayCreationLevel;
+import com.github.javaparser.ast.NodeList;
+import com.github.javaparser.ast.type.PrimitiveType;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+class ArrayCreationExprTest {
+
+    @Test
+    void correctlyCreatesExpressionWithDefaultConstructor() {
+        ArrayCreationExpr expr = new ArrayCreationExpr();
+
+        assertEquals("new empty[] {}", expr.toString());
+    }
+
+    @Test
+    void correctlyCreatesExpressionWithSimpleConstructor() {
+        ArrayCreationExpr expr = new ArrayCreationExpr(PrimitiveType.byteType());
+
+        assertEquals("new byte[] {}", expr.toString());
+    }
+
+    @Test
+    void correctlyCreatesExpressionWithFullConstructor() {
+        ArrayInitializerExpr initializer = new ArrayInitializerExpr(new NodeList<>(
+                new IntegerLiteralExpr("1"),
+                new IntegerLiteralExpr("2"),
+                new IntegerLiteralExpr("3")
+        ));
+        ArrayCreationExpr expr = new ArrayCreationExpr(PrimitiveType.intType(), new NodeList<>(new ArrayCreationLevel()), initializer);
+
+        assertEquals("new int[] { 1, 2, 3 }", expr.toString());
+    }
+}
\ No newline at end of file
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java1_0ValidatorTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java1_0ValidatorTest.java
index ef7da4950..4ba1bb6c6 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java1_0ValidatorTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/validator/Java1_0ValidatorTest.java
@@ -110,14 +110,6 @@ class Java1_0ValidatorTest {
         assertProblems(result, "(line 1,col 1) Reflection is not supported.");
     }
 
-    @Test
-    void nonEmptyList() {
-        ArrayCreationExpr expr = new ArrayCreationExpr(PrimitiveType.booleanType());
-        List<Problem> problems = new ArrayList<>();
-        new Java1_0Validator().accept(expr, new ProblemReporter(problems::add));
-        assertEquals("ArrayCreationExpr.levels can not be empty.", problems.get(0).getMessage());
-    }
-
     @Test
     void noForEach() {
         ParseResult<Statement> result = javaParser.parse(STATEMENT, provider("for(X x : xs){}"));
diff --git a/javaparser-core/src/main/java/com/github/javaparser/ast/expr/ArrayCreationExpr.java b/javaparser-core/src/main/java/com/github/javaparser/ast/expr/ArrayCreationExpr.java
index 7665e5b7d..1b8f2ecfa 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/ast/expr/ArrayCreationExpr.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/ast/expr/ArrayCreationExpr.java
@@ -57,7 +57,7 @@ public class ArrayCreationExpr extends Expression {
     private ArrayInitializerExpr initializer;
 
     public ArrayCreationExpr() {
-        this(null, new ClassOrInterfaceType(), new NodeList<>(), new ArrayInitializerExpr());
+        this(null, new ClassOrInterfaceType(), new NodeList<>(new ArrayCreationLevel()), new ArrayInitializerExpr());
     }
 
     @AllFieldsConstructor
@@ -66,7 +66,7 @@ public class ArrayCreationExpr extends Expression {
     }
 
     public ArrayCreationExpr(Type elementType) {
-        this(null, elementType, new NodeList<>(), new ArrayInitializerExpr());
+        this(null, elementType, new NodeList<>(new ArrayCreationLevel()), new ArrayInitializerExpr());
     }
 
     /**
@@ -148,9 +148,13 @@ public class ArrayCreationExpr extends Expression {
             return this;
         }
         notifyPropertyChange(ObservableProperty.LEVELS, this.levels, levels);
-        if (this.levels != null)
+        if (this.levels != null) {
             this.levels.setParentNode(null);
+        }
         this.levels = levels;
+        if (this.levels.isEmpty()) {
+            this.levels = new NodeList<>(new ArrayCreationLevel());
+        }
         setAsParentNodeOf(levels);
         return this;
     }

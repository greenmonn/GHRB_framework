diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java
index cceaab4f2..d120eeb91 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java
@@ -634,7 +634,7 @@ class LexicalPreservingPrinterTest extends AbstractLexicalPreservingTest {
                         }));
         assertEquals("public class TestPage extends Page {" + SYSTEM_EOL +
                 SYSTEM_EOL +
-                "   @Override()" + SYSTEM_EOL +
+                "   @Override" + SYSTEM_EOL +
                 "   protected void test() {}" + SYSTEM_EOL +
                 SYSTEM_EOL +
                 "   @Override" + SYSTEM_EOL +
@@ -1013,10 +1013,10 @@ class LexicalPreservingPrinterTest extends AbstractLexicalPreservingTest {
                                 methodDeclaration -> methodDeclaration.addAnnotation("Override"))));
         assertEquals("public class TestPage extends Page {" + SYSTEM_EOL +
                 SYSTEM_EOL +
-                "   @Override()" + SYSTEM_EOL +
+                "   @Override" + SYSTEM_EOL +
                 "   protected void test() {}" + SYSTEM_EOL +
                 SYSTEM_EOL +
-                "   @Override()" + SYSTEM_EOL +
+                "   @Override" + SYSTEM_EOL +
                 "   protected void initializePage() {}" + SYSTEM_EOL +
                 "}", LexicalPreservingPrinter.print(cu));
     }
@@ -1037,7 +1037,7 @@ class LexicalPreservingPrinterTest extends AbstractLexicalPreservingTest {
 
         cu.getTypes().forEach(type -> type.addAndGetAnnotation(Deprecated.class));
 
-        assertEquals("@Deprecated()" + SYSTEM_EOL +
+        assertEquals("@Deprecated" + SYSTEM_EOL +
                 "public final class A {}", LexicalPreservingPrinter.print(cu));
 
     }
@@ -1048,7 +1048,7 @@ class LexicalPreservingPrinterTest extends AbstractLexicalPreservingTest {
 
         cu.getTypes().forEach(type -> type.addAndGetAnnotation(Deprecated.class));
 
-        assertEquals("@Deprecated()" + SYSTEM_EOL +
+        assertEquals("@Deprecated" + SYSTEM_EOL +
                 "public abstract class A {}", LexicalPreservingPrinter.print(cu));
     }
 
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/ArrayCreationLevelTransformationsTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/ArrayCreationLevelTransformationsTest.java
index 3e3fb0535..8436b6f29 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/ArrayCreationLevelTransformationsTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/ArrayCreationLevelTransformationsTest.java
@@ -71,7 +71,7 @@ class ArrayCreationLevelTransformationsTest extends AbstractLexicalPreservingTes
     void addingAnnotation() {
         ArrayCreationLevel it = consider("[]");
         it.addAnnotation("myAnno");
-        assertTransformedToString("@myAnno()"+ Utils.SYSTEM_EOL +"[]", it);
+        assertTransformedToString("@myAnno"+ Utils.SYSTEM_EOL +"[]", it);
     }
 
     @Test
@@ -85,7 +85,7 @@ class ArrayCreationLevelTransformationsTest extends AbstractLexicalPreservingTes
     void replacingAnnotation() {
         ArrayCreationLevel it = consider("@myAnno []");
         it.getAnnotations().set(0, new NormalAnnotationExpr(new Name("myOtherAnno"), new NodeList<>()));
-        assertTransformedToString("@myOtherAnno() []", it);
+        assertTransformedToString("@myOtherAnno []", it);
     }
 
 }
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/body/AnnotationMemberDeclarationTransformationsTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/body/AnnotationMemberDeclarationTransformationsTest.java
index 3b4e56bad..6c390646d 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/body/AnnotationMemberDeclarationTransformationsTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/body/AnnotationMemberDeclarationTransformationsTest.java
@@ -115,7 +115,7 @@ class AnnotationMemberDeclarationTransformationsTest extends AbstractLexicalPres
     void addingAnnotation() {
         AnnotationMemberDeclaration it = consider("int foo();");
         it.addAnnotation("myAnno");
-        assertTransformedToString("@myAnno()" + SYSTEM_EOL + "int foo();", it);
+        assertTransformedToString("@myAnno" + SYSTEM_EOL + "int foo();", it);
     }
 
     @Test
@@ -123,7 +123,7 @@ class AnnotationMemberDeclarationTransformationsTest extends AbstractLexicalPres
         AnnotationMemberDeclaration it = consider("int foo();");
         it.addAnnotation("myAnno");
         it.addAnnotation("myAnno2");
-        assertTransformedToString("@myAnno()" + SYSTEM_EOL + "@myAnno2()" + SYSTEM_EOL + "int foo();", it);
+        assertTransformedToString("@myAnno" + SYSTEM_EOL + "@myAnno2" + SYSTEM_EOL + "int foo();", it);
     }
 
     @Test
@@ -144,7 +144,7 @@ class AnnotationMemberDeclarationTransformationsTest extends AbstractLexicalPres
     void replacingAnnotation() {
         AnnotationMemberDeclaration it = consider("@myAnno int foo();");
         it.getAnnotations().set(0, new NormalAnnotationExpr(new Name("myOtherAnno"), new NodeList<>()));
-        assertTransformedToString("@myOtherAnno() int foo();", it);
+        assertTransformedToString("@myOtherAnno int foo();", it);
     }
 
     // Javadoc
diff --git a/javaparser-core-testing/src/test/resources/com/github/javaparser/printer/JavaConcepts_prettyprinted b/javaparser-core-testing/src/test/resources/com/github/javaparser/printer/JavaConcepts_prettyprinted
index e180a0832..014fd9cb8 100644
--- a/javaparser-core-testing/src/test/resources/com/github/javaparser/printer/JavaConcepts_prettyprinted
+++ b/javaparser-core-testing/src/test/resources/com/github/javaparser/printer/JavaConcepts_prettyprinted
@@ -52,7 +52,7 @@ public class JavaConcepts<T extends List<int[]>, X> extends Base implements Seri
 
     List<String> diamond1 = new LinkedList<>();
 
-    @Deprecated()
+    @Deprecated
     static class Ugly {
 
         static int x = 0;
@@ -91,7 +91,7 @@ public class JavaConcepts<T extends List<int[]>, X> extends Base implements Seri
         }
     }
 
-    @Deprecated()
+    @Deprecated
     int[][][][] arr2 = new int[10][2][1][0];
 
     volatile float fff = 0x1.fffeP+127f;
diff --git a/javaparser-core/src/main/java/com/github/javaparser/printer/ConcreteSyntaxModel.java b/javaparser-core/src/main/java/com/github/javaparser/printer/ConcreteSyntaxModel.java
index a777b8b2b..ca1e9ba81 100644
--- a/javaparser-core/src/main/java/com/github/javaparser/printer/ConcreteSyntaxModel.java
+++ b/javaparser-core/src/main/java/com/github/javaparser/printer/ConcreteSyntaxModel.java
@@ -127,7 +127,7 @@ public class ConcreteSyntaxModel {
         concreteSyntaxModelByClass.put(Modifier.class, attribute(ObservableProperty.KEYWORD));
         concreteSyntaxModelByClass.put(Name.class, sequence(comment(), conditional(ObservableProperty.QUALIFIER, IS_PRESENT, sequence(child(ObservableProperty.QUALIFIER), token(GeneratedJavaParserConstants.DOT))), attribute(ObservableProperty.IDENTIFIER), orphanCommentsEnding()));
         concreteSyntaxModelByClass.put(NameExpr.class, sequence(comment(), child(ObservableProperty.NAME), orphanCommentsEnding()));
-        concreteSyntaxModelByClass.put(NormalAnnotationExpr.class, sequence(comment(), token(GeneratedJavaParserConstants.AT), child(ObservableProperty.NAME), token(GeneratedJavaParserConstants.LPAREN), list(ObservableProperty.PAIRS, sequence(comma(), space())), token(GeneratedJavaParserConstants.RPAREN)));
+        concreteSyntaxModelByClass.put(NormalAnnotationExpr.class, sequence(comment(), token(GeneratedJavaParserConstants.AT), child(ObservableProperty.NAME), conditional(ObservableProperty.PAIRS, IS_NOT_EMPTY, token(GeneratedJavaParserConstants.LPAREN)), list(ObservableProperty.PAIRS, sequence(comma(), space())), conditional(ObservableProperty.PAIRS, IS_NOT_EMPTY, token(GeneratedJavaParserConstants.RPAREN))));
         concreteSyntaxModelByClass.put(NullLiteralExpr.class, sequence(comment(), token(GeneratedJavaParserConstants.NULL)));
         concreteSyntaxModelByClass.put(ObjectCreationExpr.class, sequence(comment(), conditional(ObservableProperty.SCOPE, IS_PRESENT, sequence(child(ObservableProperty.SCOPE), token(GeneratedJavaParserConstants.DOT))), token(GeneratedJavaParserConstants.NEW), space(), list(ObservableProperty.TYPE_ARGUMENTS, sequence(comma(), space()), token(LT), token(GT)), conditional(ObservableProperty.TYPE_ARGUMENTS, IS_NOT_EMPTY, space()), child(ObservableProperty.TYPE), token(GeneratedJavaParserConstants.LPAREN), list(ObservableProperty.ARGUMENTS, sequence(comma(), space()), none(), none()), token(GeneratedJavaParserConstants.RPAREN), conditional(ObservableProperty.ANONYMOUS_CLASS_BODY, IS_PRESENT, sequence(space(), token(LBRACE), newline(), indent(), list(ObservableProperty.ANONYMOUS_CLASS_BODY, newline(), newline(), newline(), newline()), unindent(), token(RBRACE)))));
         concreteSyntaxModelByClass.put(SimpleName.class, attribute(ObservableProperty.IDENTIFIER));

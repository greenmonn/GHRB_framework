diff --git a/gson/src/test/java/com/google/gson/functional/EnumTest.java b/gson/src/test/java/com/google/gson/functional/EnumTest.java
index 8a1c6e1..fd21a5c 100644
--- a/gson/src/test/java/com/google/gson/functional/EnumTest.java
+++ b/gson/src/test/java/com/google/gson/functional/EnumTest.java
@@ -31,7 +31,10 @@ import com.google.gson.reflect.TypeToken;
 import java.lang.reflect.Type;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Collections;
+import java.util.EnumMap;
 import java.util.EnumSet;
+import java.util.Map;
 import java.util.Set;
 import junit.framework.TestCase;
 /**
@@ -150,6 +153,8 @@ public class EnumTest extends TestCase {
   public void testEnumSet() {
     EnumSet<Roshambo> foo = EnumSet.of(Roshambo.ROCK, Roshambo.PAPER);
     String json = gson.toJson(foo);
+    assertEquals("[\"ROCK\",\"PAPER\"]", json);
+
     Type type = new TypeToken<EnumSet<Roshambo>>() {}.getType();
     EnumSet<Roshambo> bar = gson.fromJson(json, type);
     assertTrue(bar.contains(Roshambo.ROCK));
@@ -157,6 +162,18 @@ public class EnumTest extends TestCase {
     assertFalse(bar.contains(Roshambo.SCISSORS));
   }
 
+  public void testEnumMap() throws Exception {
+    EnumMap<MyEnum, String> map = new EnumMap<MyEnum, String>(MyEnum.class);
+    map.put(MyEnum.VALUE1, "test");
+    String json = gson.toJson(map);
+    assertEquals("{\"VALUE1\":\"test\"}", json);
+
+    Type type = new TypeToken<EnumMap<MyEnum, String>>() {}.getType();
+    EnumMap<?, ?> actualMap = gson.fromJson("{\"VALUE1\":\"test\"}", type);
+    Map<?, ?> expectedMap = Collections.singletonMap(MyEnum.VALUE1, "test");
+    assertEquals(expectedMap, actualMap);
+  }
+
   public enum Roshambo {
     ROCK {
       @Override Roshambo defeats() {

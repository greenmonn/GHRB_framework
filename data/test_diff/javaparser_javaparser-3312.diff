diff --git a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/Issue3308Test.java b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/Issue3308Test.java
new file mode 100644
index 0000000..07085ee
--- /dev/null
+++ b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/Issue3308Test.java
@@ -0,0 +1,108 @@
+package com.github.javaparser.symbolsolver;
+
+import com.github.javaparser.ParserConfiguration;
+import com.github.javaparser.StaticJavaParser;
+import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.ast.expr.FieldAccessExpr;
+import com.github.javaparser.resolution.declarations.ResolvedValueDeclaration;
+import com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver;
+import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
+
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+public class Issue3308Test {
+
+    @Test
+    void shallowArray() {
+        StaticJavaParser.getConfiguration().setLanguageLevel(ParserConfiguration.LanguageLevel.JAVA_9);
+        CombinedTypeSolver combinedTypeSolver = new CombinedTypeSolver();
+        combinedTypeSolver.add(new ReflectionTypeSolver());
+        StaticJavaParser.getConfiguration().setSymbolResolver(new JavaSymbolSolver(combinedTypeSolver));
+        String classStr = "public class JavaParser {\n" +
+                "\n" +
+                "    public void bad (int index) {\n" +
+                "        LastRecovered recovered = new LastRecovered();\n" +
+                "        recovered.perPriority[index].recovered = 10;\n" +
+                "    }\n" +
+                "\n" +
+                "    private class LastRecovered {\n" +
+                "        LastRecoveredEntry[] perPriority = new LastRecoveredEntry[10];\n" +
+                "    }\n" +
+                "\n" +
+                "    private class LastRecoveredEntry {\n" +
+                "        private int recovered = 0;\n" +
+                "    }\n" +
+                "}";
+
+        CompilationUnit node = StaticJavaParser.parse(classStr);
+        List<FieldAccessExpr> all = node.findAll(FieldAccessExpr.class);
+        assertEquals(2, all.size());
+
+        ResolvedValueDeclaration resolved;
+        FieldAccessExpr fieldAccessExpr;
+
+        fieldAccessExpr = all.get(0);
+        Assertions.assertEquals("recovered", fieldAccessExpr.getNameAsString());
+        resolved = fieldAccessExpr.resolve();
+        assertTrue(resolved.getType().isPrimitive());
+        assertEquals("java.lang.Integer", resolved.getType().asPrimitive().getBoxTypeQName());
+
+
+        fieldAccessExpr = all.get(1);
+        Assertions.assertEquals("perPriority", fieldAccessExpr.getNameAsString());
+        resolved = fieldAccessExpr.resolve();
+        assertTrue(resolved.getType().isArray());
+    }
+
+
+
+
+    @Test
+    void deepArray() {
+        StaticJavaParser.getConfiguration().setLanguageLevel(ParserConfiguration.LanguageLevel.JAVA_9);
+        CombinedTypeSolver combinedTypeSolver = new CombinedTypeSolver();
+        combinedTypeSolver.add(new ReflectionTypeSolver());
+        StaticJavaParser.getConfiguration().setSymbolResolver(new JavaSymbolSolver(combinedTypeSolver));
+        String classStr = "class JavaParser {\n" +
+                "\n" +
+                "    public void bad (int index) {\n" +
+                "        LastRecovered recovered = new LastRecovered();\n" +
+                "        recovered.perPriority[index][0][0][0].recovered = 10;\n" +
+                "    }\n" +
+                "\n" +
+                "    private class LastRecovered {\n" +
+                "        LastRecoveredEntry[][][][] perPriority = new LastRecoveredEntry[10][10][10][10];\n" +
+                "    }\n" +
+                "\n" +
+                "    private class LastRecoveredEntry {\n" +
+                "        private int recovered = 0;\n" +
+                "    }\n" +
+                "}";
+
+        CompilationUnit node = StaticJavaParser.parse(classStr);
+        List<FieldAccessExpr> all = node.findAll(FieldAccessExpr.class);
+        assertEquals(2, all.size());
+
+        ResolvedValueDeclaration resolved;
+        FieldAccessExpr fieldAccessExpr;
+
+        fieldAccessExpr = all.get(0);
+        Assertions.assertEquals("recovered", fieldAccessExpr.getNameAsString());
+        resolved = fieldAccessExpr.resolve();
+        assertTrue(resolved.getType().isPrimitive());
+        assertEquals("java.lang.Integer", resolved.getType().asPrimitive().getBoxTypeQName());
+
+
+        fieldAccessExpr = all.get(1);
+        Assertions.assertEquals("perPriority", fieldAccessExpr.getNameAsString());
+        resolved = fieldAccessExpr.resolve();
+        assertTrue(resolved.getType().isArray());
+
+    }
+
+}
diff --git a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/Issue343Test.java b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/Issue343Test.java
index eac8410..8c5759b 100644
--- a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/Issue343Test.java
+++ b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/Issue343Test.java
@@ -22,6 +22,7 @@
 package com.github.javaparser.symbolsolver;
 
 import com.github.javaparser.ast.expr.*;
+import com.github.javaparser.resolution.UnsolvedSymbolException;
 import com.github.javaparser.resolution.types.ResolvedType;
 import com.github.javaparser.symbolsolver.javaparsermodel.JavaParserFacade;
 import com.github.javaparser.symbolsolver.model.resolution.TypeSolver;
@@ -34,7 +35,13 @@ import static com.github.javaparser.StaticJavaParser.parseExpression;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
-class Issue343Test extends AbstractResolutionTest{
+/**
+ * Note this issue number refers to the archived `javasymbolsolver` repository,
+ * whose issues prior to it being integrated into JavaParser itself are numbered separately:
+ *
+ * https://github.com/javaparser/javasymbolsolver/issues/343
+ */
+class Issue343Test extends AbstractResolutionTest {
 
     private TypeSolver typeResolver;
     private JavaParserFacade javaParserFacade;
@@ -61,13 +68,13 @@ class Issue343Test extends AbstractResolutionTest{
 
     @Test
     void toResolveDoubleWeNeedTheAST() {
-        assertThrows(IllegalStateException.class, () -> getExpressionType(typeResolver, parseExpression("new Double[]{2.0d, 3.0d}[1]")));
+        assertThrows(UnsolvedSymbolException.class, () -> getExpressionType(typeResolver, parseExpression("new Double[]{2.0d, 3.0d}[1]")));
     }
 
 
     @Test
     void toResolveFloatWeNeedTheAST() {
-        assertThrows(IllegalStateException.class, () -> getExpressionType(typeResolver, parseExpression("new Float[]{2.0d, 3.0d}")));
+        assertThrows(UnsolvedSymbolException.class, () -> getExpressionType(typeResolver, parseExpression("new Float[]{2.0d, 3.0d}[1]")));
     }
 
     @Test

diff --git a/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateViaObjectReader.java b/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateViaObjectReader.java
index c824c78..b945546 100644
--- a/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateViaObjectReader.java
+++ b/src/test/java/com/fasterxml/jackson/databind/convert/TestUpdateViaObjectReader.java
@@ -9,6 +9,7 @@ import com.fasterxml.jackson.core.*;
 import com.fasterxml.jackson.databind.*;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
+import com.fasterxml.jackson.databind.deser.std.StdNodeBasedDeserializer;
 import com.fasterxml.jackson.databind.module.SimpleModule;
 
 import static org.junit.Assert.assertArrayEquals;
@@ -115,6 +116,61 @@ public class TestUpdateViaObjectReader extends BaseMapTest
         }
     }
 
+    @JsonDeserialize(using = Custom3814DeserializerA.class)
+    static class Bean3814A {
+        public int age;
+
+        public Bean3814A(int age) {
+            this.age = age;
+        }
+
+        public void updateTo(JsonNode root) {
+            age = root.get("age").asInt();
+        }
+    }
+
+    static class Custom3814DeserializerA extends StdNodeBasedDeserializer<Bean3814A> {
+        public Custom3814DeserializerA() {
+            super(Bean3814A.class);
+        }
+
+        @Override
+        public Bean3814A convert(JsonNode root, DeserializationContext ctxt) throws IOException {
+            return null;
+        }
+
+        @Override
+        public Bean3814A convert(JsonNode root, DeserializationContext ctxt, Bean3814A oldValue) throws IOException {
+            oldValue.updateTo(root);
+            return oldValue;
+        }
+    }
+
+    @JsonDeserialize(using = Custom3814DeserializerB.class)
+    static class Bean3814B {
+        public int age;
+
+        public Bean3814B(int age) {
+            this.age = age;
+        }
+
+        public void updateTo(JsonNode root) {
+            age = root.get("age").asInt();
+        }
+    }
+
+    static class Custom3814DeserializerB extends StdNodeBasedDeserializer<Bean3814B> {
+        public Custom3814DeserializerB() {
+            super(Bean3814B.class);
+        }
+
+        @Override
+        public Bean3814B convert(JsonNode root, DeserializationContext ctxt) throws IOException {
+            return null;
+        }
+
+    }
+
     /*
     /********************************************************
     /* Test methods
@@ -233,7 +289,7 @@ public class TestUpdateViaObjectReader extends BaseMapTest
     }
 
     // [databind#744]
-    public void testIssue744() throws IOException
+    public void testIssue744() throws Exception
     {
         ObjectMapper mapper = new ObjectMapper();
         SimpleModule module = new SimpleModule();
@@ -274,7 +330,7 @@ public class TestUpdateViaObjectReader extends BaseMapTest
     }
 
     // [databind#1831]
-    public void test1831UsingNode() throws IOException {
+    public void test1831UsingNode() throws Exception {
         String catJson = MAPPER.writeValueAsString(new Cat());
         JsonNode jsonNode = MAPPER.readTree(catJson);
         AnimalWrapper optionalCat = new AnimalWrapper();
@@ -283,10 +339,38 @@ public class TestUpdateViaObjectReader extends BaseMapTest
         assertSame(optionalCat, result);
     }
 
-    public void test1831UsingString() throws IOException {
+    public void test1831UsingString() throws Exception {
         String catJson = MAPPER.writeValueAsString(new Cat());
         AnimalWrapper optionalCat = new AnimalWrapper();
         AnimalWrapper result = MAPPER.readerForUpdating(optionalCat).readValue(catJson);
         assertSame(optionalCat, result);
     }
+
+    // [databind#3814]
+    public void testReaderForUpdating3814() throws Exception {
+        // Arrange
+        JsonNode root = MAPPER.readTree(a2q("{'age': 30 }"));
+        Bean3814A obj = new Bean3814A(25);
+
+        // Act
+        Bean3814A newObj = MAPPER.readerForUpdating(obj).readValue(root);
+
+        // Assert
+        assertSame(obj, newObj);
+        assertEquals(30, newObj.age);
+    }
+
+    // [databind#3814]
+    public void testReaderForUpdating3814DoesNotOverride() throws Exception {
+        // Arrange
+        JsonNode root = MAPPER.readTree(a2q("{'age': 30 }"));
+        Bean3814B obj = new Bean3814B(25);
+
+        // Act
+        Bean3814B newObj = MAPPER.readerForUpdating(obj).readValue(root);
+
+        // Assert
+        assertNotSame(obj, newObj);
+        assertNull(newObj);
+    }
 }

diff --git a/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java b/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
index d70979d..d93ba5c 100644
--- a/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestJavaType.java
@@ -3,7 +3,12 @@ package com.fasterxml.jackson.databind.type;
 import java.lang.reflect.Method;
 import java.util.*;
 import java.util.concurrent.atomic.AtomicReference;
+import java.util.stream.DoubleStream;
+import java.util.stream.IntStream;
+import java.util.stream.LongStream;
+import java.util.stream.Stream;
 
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.fasterxml.jackson.databind.BaseMapTest;
 import com.fasterxml.jackson.databind.JavaType;
 
@@ -55,6 +60,9 @@ public class TestJavaType
     @SuppressWarnings("serial")
     static class AtomicStringReference extends AtomicReference<String> { }
 
+    static interface StringStream extends Stream<String> { }
+    static interface StringIterator extends Iterator<String> { }
+
     /*
     /**********************************************************
     /* Test methods
@@ -94,6 +102,7 @@ public class TestJavaType
         assertFalse(baseType.isContainerType());
         assertFalse(baseType.isEnumType());
         assertFalse(baseType.isInterface());
+        assertFalse(baseType.isIterationType());
         assertFalse(baseType.isPrimitive());
         assertFalse(baseType.isReferenceType());
         assertFalse(baseType.hasContentType());
@@ -125,6 +134,7 @@ public class TestJavaType
         JavaType arrayT = ArrayType.construct(tf.constructType(String.class), null);
         assertNotNull(arrayT);
         assertTrue(arrayT.isContainerType());
+        assertFalse(arrayT.isIterationType());
         assertFalse(arrayT.isReferenceType());
         assertTrue(arrayT.hasContentType());
 
@@ -146,6 +156,7 @@ public class TestJavaType
         TypeFactory tf = TypeFactory.defaultInstance();
         JavaType mapT = tf.constructType(HashMap.class);
         assertTrue(mapT.isContainerType());
+        assertFalse(mapT.isIterationType());
         assertFalse(mapT.isReferenceType());
         assertTrue(mapT.hasContentType());
 
@@ -170,6 +181,7 @@ public class TestJavaType
         assertTrue(enumT.getRawClass().isEnum());
         assertTrue(enumT.isEnumType());
         assertTrue(enumT.isEnumImplType());
+        assertFalse(enumT.isIterationType());
 
         assertFalse(enumT.hasHandlers());
         assertTrue(enumT.isTypeOrSubTypeOf(MyEnum.class));
@@ -240,6 +252,7 @@ public class TestJavaType
         assertEquals("Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;", t.getGenericSignature());
     }
 
+    @Deprecated
     public void testAnchorTypeForRefTypes() throws Exception
     {
         TypeFactory tf = TypeFactory.defaultInstance();
@@ -285,4 +298,66 @@ public class TestJavaType
         // Should we even verify this or not?
         assertEquals("V", bindings.getBoundName(0));
     }
+
+    // for [databind#3950]: resolve `Iterator`, `Stream`
+    public void testIterationTypesDirect() throws Exception
+    {
+        TypeFactory tf = TypeFactory.defaultInstance();
+
+        // First, type-erased types
+        _verifyIteratorType(tf.constructType(Iterator.class),
+                Iterator.class, Object.class);
+        _verifyIteratorType(tf.constructType(Stream.class),
+                Stream.class, Object.class);
+
+        // Then generic but direct
+        JavaType t = _verifyIteratorType(tf.constructType(new TypeReference<Iterator<String>>() { }),
+                Iterator.class, String.class);
+        assertEquals("java.util.Iterator<java.lang.String>", t.toCanonical());
+        assertEquals("Ljava/util/Iterator;", t.getErasedSignature());
+        assertEquals("Ljava/util/Iterator<Ljava/lang/String;>;", t.getGenericSignature());
+        _verifyIteratorType(tf.constructType(new TypeReference<Stream<Long>>() { }),
+                Stream.class, Long.class);
+
+        // Then numeric typed:
+        _verifyIteratorType(tf.constructType(DoubleStream.class),
+                DoubleStream.class, Double.class);
+        _verifyIteratorType(tf.constructType(IntStream.class),
+                IntStream.class, Integer.class);
+        _verifyIteratorType(tf.constructType(LongStream.class),
+                LongStream.class, Long.class);
+    }
+
+    // for [databind#3950]: resolve `Iterator`, `Stream`
+    public void testIterationTypesFromValues() throws Exception
+    {
+        TypeFactory tf = TypeFactory.defaultInstance();
+        List<String> strings = Arrays.asList("foo", "bar");
+        // We will get type-erased, alas, so:
+        Iterator<String> stringIT = strings.iterator();
+        _verifyIteratorType(tf.constructType(stringIT.getClass()),
+                stringIT.getClass(), Object.class);
+        Stream<String> stringStream = strings.stream();
+        _verifyIteratorType(tf.constructType(stringStream.getClass()),
+                stringStream.getClass(), Object.class);
+    }
+
+    // for [databind#3950]: resolve `Iterator`, `Stream`
+    public void testIterationSubTypes() throws Exception
+    {
+        TypeFactory tf = TypeFactory.defaultInstance();
+        _verifyIteratorType(tf.constructType(StringIterator.class),
+                StringIterator.class, String.class);
+        _verifyIteratorType(tf.constructType(StringStream.class),
+                StringStream.class, String.class);
+    }
+
+    private JavaType _verifyIteratorType(JavaType type,
+            Class<?> expType, Class<?> expContentType) {
+        assertTrue(type.isIterationType());
+        assertEquals(IterationType.class, type.getClass());
+        assertEquals(expType, type.getRawClass());
+        assertEquals(expContentType, type.getContentType().getRawClass());
+        return type;
+    }
 }
diff --git a/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java b/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
index d0032d0..849ea40 100644
--- a/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
+++ b/src/test/java/com/fasterxml/jackson/databind/type/TestTypeFactory.java
@@ -142,11 +142,13 @@ public class TestTypeFactory
         assertSame(String.class, mt.getContentType().getRawClass());
     }
 
+    // note: changed for [databind#3950]
     public void testIterator()
     {
         TypeFactory tf = TypeFactory.defaultInstance();
         JavaType t = tf.constructType(new TypeReference<Iterator<String>>() { });
-        assertEquals(SimpleType.class, t.getClass());
+        assertEquals(IterationType.class, t.getClass());
+        assertTrue(t.isIterationType());
         assertSame(Iterator.class, t.getRawClass());
         assertEquals(1, t.containedTypeCount());
         assertEquals(tf.constructType(String.class), t.containedType(0));

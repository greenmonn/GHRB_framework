diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
index 4694142..21b31cc 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
@@ -81,6 +81,33 @@ class SSLFactoryIT {
     }
 
     @Test
+    @Tag("it-with-badssl.com")
+    void executeHttpsRequestWithMutualAuthenticationWhileHavingTrustMaterialSpecifiedInDifferentOrderWhileUsingAnEmptyTrustManagerShouldStillPassAs() throws IOException {
+        LogCaptor logCaptor = LogCaptor.forName("nl.altindag.ssl");
+
+        SSLFactory sslFactory = SSLFactory.builder()
+                .withIdentityMaterial(KEYSTORE_LOCATION + "badssl-identity.p12", "badssl.com".toCharArray())
+                .withTrustMaterial(KeyStoreUtils.createKeyStore()) // Adding additional trust material forces usage of CompositeX509ExtendedTrustManager and verbose logging
+                .withTrustMaterial(KEYSTORE_LOCATION + "badssl-truststore.p12", "badssl.com".toCharArray())
+                .build();
+
+        HttpsURLConnection connection = (HttpsURLConnection) new URL("https://client.badssl.com/").openConnection();
+        connection.setSSLSocketFactory(sslFactory.getSslSocketFactory());
+        connection.setHostnameVerifier(sslFactory.getHostnameVerifier());
+        connection.setRequestMethod("GET");
+
+        int statusCode = connection.getResponseCode();
+        logCaptor.close();
+
+        if (statusCode == 400) {
+            fail("Certificate may have expired and needs to be updated");
+        } else {
+            assertThat(statusCode).isEqualTo(200);
+            assertThat(logCaptor.getLogs()).containsExactly("Received the following server certificate: [CN=*.badssl.com, O=Lucas Garron Torres, L=Walnut Creek, ST=California, C=US]");
+        }
+    }
+
+    @Test
     void executeRequestToTwoServersWithMutualAuthenticationWithSingleHttpClientAndSingleSslConfiguration() throws IOException {
         ExecutorService executorService = Executors.newSingleThreadExecutor();
 
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
index 54b7f30..32d3b3e 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
@@ -343,6 +343,7 @@ class TrustManagerUtilsShould {
 
         assertThat(trustManager).isNotNull();
     }
+
     @Test
     void createTrustManagerFromManagerParametersWithSecurityProvider() throws NoSuchAlgorithmException, KeyStoreException, InvalidAlgorithmParameterException {
         KeyStore trustStore = KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + TRUSTSTORE_FILE_NAME, TRUSTSTORE_PASSWORD);

diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
index 0e225db..431088f 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
@@ -32,6 +32,7 @@ import nl.altindag.ssl.trustmanager.TrustStoreTrustOptions;
 import nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager;
 import nl.altindag.ssl.util.KeyManagerUtils;
 import nl.altindag.ssl.util.KeyStoreUtils;
+import nl.altindag.ssl.util.MacCertificateUtils;
 import nl.altindag.ssl.util.TrustManagerUtils;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -532,13 +533,19 @@ class SSLFactoryShould {
     @Test
     void buildSSLFactoryWithTrustMaterialFromOnlySystemTrustedCertificates() {
         String operatingSystem = System.getProperty("os.name").toLowerCase();
-        if (operatingSystem.contains("mac") || operatingSystem.contains("windows")) {
-            try (MockedStatic<KeyStoreUtils> mockedStatic = mockStatic(KeyStoreUtils.class, invocation -> {
+        if (operatingSystem.contains("mac") || operatingSystem.contains("windows") || operatingSystem.contains("linux")) {
+            try (MockedStatic<MacCertificateUtils> macCertificateUtilsMockedStatic = mockStatic(MacCertificateUtils.class);
+                 MockedStatic<KeyStoreUtils> keyStoreUtilsMockedStatic = mockStatic(KeyStoreUtils.class, invocation -> {
                 Method method = invocation.getMethod();
                 if ("createKeyStore".equals(method.getName())
                         && method.getParameterCount() == 2
                         && operatingSystem.contains("mac")) {
                     return KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + TRUSTSTORE_FILE_NAME, TRUSTSTORE_PASSWORD);
+                } else if ("createTrustStore".equals(method.getName())
+                        && method.getParameterCount() == 1
+                        && method.getParameters()[0].getType().equals(List.class)
+                        && operatingSystem.contains("mac")) {
+                    return KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + "truststore-without-password.jks", null);
                 } else {
                     return invocation.callRealMethod();
                 }
@@ -557,15 +564,6 @@ class SSLFactoryShould {
                 assertThat(sslFactory.getKeyManagerFactory()).isNotPresent();
             }
         }
-
-        if (operatingSystem.contains("linux")) {
-            SSLFactory.Builder sslFactoryBuilder = SSLFactory.builder()
-                    .withSystemTrustMaterial();
-
-            assertThatThrownBy(sslFactoryBuilder::build)
-                    .isInstanceOf(GenericSecurityException.class)
-                    .hasMessage("Could not create instance of SSLFactory because Identity and Trust material are not present. Please provide at least a Trust material.");
-        }
     }
 
     @Test
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/CertificateUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/CertificateUtilsShould.java
index 25db0ef..e31cfd3 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/CertificateUtilsShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/CertificateUtilsShould.java
@@ -207,24 +207,26 @@ class CertificateUtilsShould {
     void getSystemTrustedCertificates() {
         String operatingSystem = System.getProperty("os.name").toLowerCase();
 
-        try (MockedStatic<KeyStoreUtils> mockedStatic = mockStatic(KeyStoreUtils.class, invocation -> {
+        try (MockedStatic<MacCertificateUtils> macCertificateUtilsMockedStatic = mockStatic(MacCertificateUtils.class);
+             MockedStatic<KeyStoreUtils> keyStoreUtilsMockedStatic = mockStatic(KeyStoreUtils.class, invocation -> {
             Method method = invocation.getMethod();
             if ("createKeyStore".equals(method.getName())
                     && method.getParameterCount() == 2
                     && operatingSystem.contains("mac")) {
                 return KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + TRUSTSTORE_FILE_NAME, TRUSTSTORE_PASSWORD);
+            } else if ("createTrustStore".equals(method.getName())
+                    && method.getParameterCount() == 1
+                    && method.getParameters()[0].getType().equals(List.class)
+                    && operatingSystem.contains("mac")) {
+                return KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + "truststore-without-password.jks", null);
             } else {
                 return invocation.callRealMethod();
             }
         })) {
             List<X509Certificate> certificates = CertificateUtils.getSystemTrustedCertificates();
-            if (operatingSystem.contains("mac") || operatingSystem.contains("windows")) {
+            if (operatingSystem.contains("mac") || operatingSystem.contains("windows") || operatingSystem.contains("linux")) {
                 assertThat(certificates).isNotEmpty();
             }
-
-            if (operatingSystem.contains("linux")) {
-                assertThat(certificates).isEmpty();
-            }
         }
 
     }
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/KeyStoreUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/KeyStoreUtilsShould.java
index 5c7beeb..dc188c9 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/KeyStoreUtilsShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/KeyStoreUtilsShould.java
@@ -60,6 +60,7 @@ import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.mockStatic;
+import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.when;
 
 /**
@@ -188,18 +189,21 @@ class KeyStoreUtilsShould {
 
         KeyStore androidCAStore = mock(KeyStore.class);
 
-        try (MockedStatic<KeyStoreUtils> keyStoreUtilsMock = mockStatic(KeyStoreUtils.class, invocation -> {
+        try (MockedStatic<LinuxCertificateUtils> linuxCertificateUtilsMockedStatic = mockStatic(LinuxCertificateUtils.class);
+             MockedStatic<KeyStoreUtils> keyStoreUtilsMock = mockStatic(KeyStoreUtils.class, invocation -> {
             Method method = invocation.getMethod();
             if ("loadSystemKeyStores".equals(method.getName()) && method.getParameterCount() == 0) {
                 return invocation.callRealMethod();
             } else if ("createKeyStore".equals(method.getName()) && method.getParameterCount() == 2 && "AndroidCAStore".equals(invocation.getArgument(0))) {
                 return androidCAStore;
+            } else if ("createTrustStore".equals(method.getName()) && method.getParameterCount() == 1) {
+                return mock(KeyStore.class);
             } else {
                 return invocation.getMock();
             }
         })) {
-            List<KeyStore> keyStores = KeyStoreUtils.loadSystemKeyStores();
-            assertThat(keyStores).isEmpty();
+            KeyStoreUtils.loadSystemKeyStores();
+            keyStoreUtilsMock.verify(() -> KeyStoreUtils.createKeyStore("AndroidCAStore", null), times(0));
         } finally {
             resetOsName();
         }
@@ -208,37 +212,51 @@ class KeyStoreUtilsShould {
     @Test
     void loadMacSystemKeyStore() {
         System.setProperty("os.name", "mac");
-        KeyStore macKeyStore = mock(KeyStore.class);
+        KeyStore keychainStore = mock(KeyStore.class);
+        KeyStore systemTrustStore = mock(KeyStore.class);
 
-        try (MockedStatic<KeyStoreUtils> keyStoreUtilsMock = mockStatic(KeyStoreUtils.class, invocation -> {
+        try (MockedStatic<MacCertificateUtils> macCertificateUtilsMockedStatic = mockStatic(MacCertificateUtils.class);
+             MockedStatic<KeyStoreUtils> keyStoreUtilsMockedStatic = mockStatic(KeyStoreUtils.class, invocation -> {
             Method method = invocation.getMethod();
             if ("loadSystemKeyStores".equals(method.getName()) && method.getParameterCount() == 0) {
                 return invocation.callRealMethod();
             } else if ("createKeyStore".equals(method.getName()) && method.getParameterCount() == 2 && "KeychainStore".equals(invocation.getArgument(0))) {
-                return macKeyStore;
+                return keychainStore;
+            } else if ("createTrustStore".equals(method.getName()) && method.getParameterCount() == 1 && method.getParameters()[0].getType().equals(List.class)) {
+                return systemTrustStore;
             } else {
                 return invocation.getMock();
             }
         })) {
             List<KeyStore> keyStores = KeyStoreUtils.loadSystemKeyStores();
-            assertThat(keyStores).containsExactly(macKeyStore);
+            assertThat(keyStores).containsExactly(keychainStore, systemTrustStore);
+            macCertificateUtilsMockedStatic.verify(MacCertificateUtils::getCertificates, times(1));
         }
 
         resetOsName();
     }
 
     @Test
-    void loadLinuxSystemKeyStoreReturnsEmptyList() {
+    void loadLinuxSystemKeyStoreReturns() {
         System.setProperty("os.name", "linux");
 
-        LogCaptor logCaptor = LogCaptor.forClass(KeyStoreUtils.class);
-
-        List<KeyStore> trustStores = KeyStoreUtils.loadSystemKeyStores();
-
-        assertThat(trustStores).isEmpty();
-        assertThat(logCaptor.getWarnLogs())
-                .hasSize(1)
-                .contains("No system KeyStores available for [linux]");
+        KeyStore systemTrustStore = mock(KeyStore.class);
+
+        try (MockedStatic<LinuxCertificateUtils> linuxCertificateUtilsMockedStatic = mockStatic(LinuxCertificateUtils.class);
+             MockedStatic<KeyStoreUtils> keyStoreUtilsMockedStatic = mockStatic(KeyStoreUtils.class, invocation -> {
+                 Method method = invocation.getMethod();
+                 if ("loadSystemKeyStores".equals(method.getName()) && method.getParameterCount() == 0) {
+                     return invocation.callRealMethod();
+                 } else if ("createTrustStore".equals(method.getName()) && method.getParameterCount() == 1 && method.getParameters()[0].getType().equals(List.class)) {
+                     return systemTrustStore;
+                 } else {
+                     return invocation.getMock();
+                 }
+             })) {
+            List<KeyStore> keyStores = KeyStoreUtils.loadSystemKeyStores();
+            assertThat(keyStores).containsExactly(systemTrustStore);
+            linuxCertificateUtilsMockedStatic.verify(LinuxCertificateUtils::getCertificates, times(1));
+        }
 
         resetOsName();
     }
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/LinuxCertificateUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/LinuxCertificateUtilsShould.java
new file mode 100644
index 0000000..cc64d9d
--- /dev/null
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/LinuxCertificateUtilsShould.java
@@ -0,0 +1,302 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.util;
+
+
+import nl.altindag.ssl.IOTestUtils;
+import nl.altindag.ssl.exception.GenericIOException;
+import org.junit.jupiter.api.Test;
+import org.mockito.MockedStatic;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Method;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.security.cert.Certificate;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.mockito.Mockito.mockStatic;
+
+/**
+ * @author Hakan Altindag
+ */
+class LinuxCertificateUtilsShould {
+
+    private static final String OPERATING_SYSTEM = System.getProperty("os.name").toLowerCase();
+
+    @Test
+    void getCertificate() {
+        if (OPERATING_SYSTEM.contains("linux")) {
+            List<Certificate> certificates = LinuxCertificateUtils.getCertificates();
+            assertThat(certificates).isNotEmpty();
+        }
+    }
+
+    @Test
+    void loadCertificateIgnoresInvalidFiles() throws IOException {
+        Path path = IOTestUtils.copyFileToHomeDirectory("pem/", "invalid.pem");
+        List<Certificate> certificates = LinuxCertificateUtils.loadCertificate(path);
+        assertThat(certificates).isEmpty();
+        Files.delete(path);
+    }
+
+    @Test
+    void loadCertificateReadsValidFiles() throws IOException {
+        Path path = IOTestUtils.copyFileToHomeDirectory("pem/", "badssl-certificate.pem");
+        List<Certificate> certificates = LinuxCertificateUtils.loadCertificate(path);
+        assertThat(certificates).isNotEmpty();
+        Files.delete(path);
+    }
+
+    @Test
+    void getCertificatesWhenFileExistAndIsARegularFile() {
+        InputStream inputStream = IOUtils.getResourceAsStream("pem/badssl-certificate.pem");
+        String content = IOUtils.getContent(inputStream);
+        List<Certificate> mockedCertificates = CertificateUtils.parsePemCertificate(content);
+
+        try (MockedStatic<LinuxCertificateUtils> linuxCertificateUtilsMockedStatic = mockStatic(LinuxCertificateUtils.class, invocation -> {
+            Method method = invocation.getMethod();
+            if ("loadCertificate".equals(method.getName())) {
+                return mockedCertificates;
+            } else {
+                return invocation.callRealMethod();
+            }
+        });
+             MockedStatic<Files> filesMockedStatic = mockStatic(Files.class, invocation -> {
+                 Method method = invocation.getMethod();
+                 if ("exists".equals(method.getName())) {
+                     return true;
+                 } else if ("isRegularFile".equals(method.getName())) {
+                     return true;
+                 } else {
+                     return invocation.callRealMethod();
+                 }
+             })) {
+
+            List<Certificate> certificates = LinuxCertificateUtils.getCertificates();
+            assertThat(certificates).isNotEmpty();
+        }
+    }
+
+    @Test
+    void getCertificatesWhenFilesExistUnderADirectory() {
+        InputStream inputStream = IOUtils.getResourceAsStream("pem/badssl-certificate.pem");
+        String content = IOUtils.getContent(inputStream);
+        List<Certificate> mockedCertificates = CertificateUtils.parsePemCertificate(content);
+
+        try (MockedStatic<LinuxCertificateUtils> linuxCertificateUtilsMockedStatic = mockStatic(LinuxCertificateUtils.class, invocation -> {
+            Method method = invocation.getMethod();
+            if ("loadCertificate".equals(method.getName())) {
+                return mockedCertificates;
+            } else {
+                return invocation.callRealMethod();
+            }
+        });
+             MockedStatic<Files> filesMockedStatic = mockStatic(Files.class, invocation -> {
+                 Method method = invocation.getMethod();
+                 if ("exists".equals(method.getName())) {
+                     return true;
+                 } else if ("isRegularFile".equals(method.getName())) {
+                     return true;
+                 } else {
+                     return invocation.callRealMethod();
+                 }
+             })) {
+
+            List<Certificate> certificates = LinuxCertificateUtils.getCertificates();
+            assertThat(certificates).isNotEmpty();
+        }
+    }
+
+    @Test
+    void getCertificatesReturnsEmptyListWhenFileDoesNotExist() {
+        try (MockedStatic<Files> filesMockedStatic = mockStatic(Files.class, invocation -> {
+            Method method = invocation.getMethod();
+            if ("exists".equals(method.getName())) {
+                return false;
+            } else if ("isRegularFile".equals(method.getName())) {
+                return true;
+            } else {
+                return invocation.callRealMethod();
+            }
+        })) {
+
+            List<Certificate> certificates = LinuxCertificateUtils.getCertificates();
+            assertThat(certificates).isEmpty();
+        }
+    }
+
+    @Test
+    void getCertificatesReturnsEmptyListWhenFileExistButIsNotARegularFile() {
+        try (MockedStatic<Files> filesMockedStatic = mockStatic(Files.class, invocation -> {
+            Method method = invocation.getMethod();
+            String methodName = method.getName();
+            if ("exists".equals(methodName)) {
+                return true;
+            } else if ("isRegularFile".equals(methodName)) {
+                return false;
+            } else if ("isDirectory".equals(methodName)) {
+                return true;
+            } else if ("walk".equals(methodName)) {
+                return Stream.of(Paths.get("/etc/ssl/certs/some-certificate.pem"));
+            } else {
+                return invocation.callRealMethod();
+            }
+        })) {
+
+            List<Certificate> certificates = LinuxCertificateUtils.getCertificates();
+            assertThat(certificates).isEmpty();
+        }
+    }
+
+    @Test
+    void getCertificatesReturnsCertificatesWhenFileExistWithinDirectory() {
+        if (!OPERATING_SYSTEM.contains("windows")) {
+            InputStream inputStream = IOUtils.getResourceAsStream("pem/badssl-certificate.pem");
+            String content = IOUtils.getContent(inputStream);
+            List<Certificate> mockedCertificates = CertificateUtils.parsePemCertificate(content);
+
+            try (MockedStatic<LinuxCertificateUtils> linuxCertificateUtilsMockedStatic = mockStatic(LinuxCertificateUtils.class, invocation -> {
+                Method method = invocation.getMethod();
+                if ("loadCertificate".equals(method.getName())) {
+                    return mockedCertificates;
+                } else {
+                    return invocation.callRealMethod();
+                }
+            });
+                 MockedStatic<Files> filesMockedStatic = mockStatic(Files.class, invocation -> {
+                     Method method = invocation.getMethod();
+                     String methodName = method.getName();
+
+                     if (invocation.getArguments().length == 0) {
+                         return invocation.callRealMethod();
+                     }
+
+                     String path = invocation.getArguments()[0].toString();
+                     if ("exists".equals(methodName) && "/etc/ssl/certs".equals(path)) {
+                         return true;
+                     } else if ("isRegularFile".equals(methodName) && "/etc/ssl/certs".equals(path)) {
+                         return false;
+                     } else if ("isDirectory".equals(methodName) && "/etc/ssl/certs".equals(path)) {
+                         return true;
+                     } else if ("walk".equals(methodName)) {
+                         return Stream.of(Paths.get("/etc/ssl/certs/some-certificate.pem"));
+                     } else if ("isRegularFile".equals(methodName) && "/etc/ssl/certs/some-certificate.pem".equals(path)) {
+                         return true;
+                     } else if ("exists".equals(methodName)) {
+                         return false;
+                     } else {
+                         return invocation.callRealMethod();
+                     }
+                 })) {
+
+                List<Certificate> certificates = LinuxCertificateUtils.getCertificates();
+                assertThat(certificates).isNotEmpty();
+            }
+        }
+    }
+
+    @Test
+    void wrapAnIOExceptionInAGenericIOExceptionWhenFilesWalkFails() {
+        if (!OPERATING_SYSTEM.contains("windows")) {
+            try (MockedStatic<Files> filesMockedStatic = mockStatic(Files.class, invocation -> {
+                Method method = invocation.getMethod();
+                String methodName = method.getName();
+
+                if (invocation.getArguments().length == 0) {
+                    return invocation.callRealMethod();
+                }
+
+                String path = invocation.getArguments()[0].toString();
+                if ("exists".equals(methodName) && "/etc/ssl/certs".equals(path)) {
+                    return true;
+                } else if ("isRegularFile".equals(methodName) && "/etc/ssl/certs".equals(path)) {
+                    return false;
+                } else if ("isDirectory".equals(methodName) && "/etc/ssl/certs".equals(path)) {
+                    return true;
+                } else if ("walk".equals(methodName)) {
+                    throw new IOException("KABOOM");
+                } else {
+                    return invocation.callRealMethod();
+                }
+            })) {
+
+                assertThatThrownBy(LinuxCertificateUtils::getCertificates)
+                        .isInstanceOf(GenericIOException.class)
+                        .hasMessageContaining("KABOOM");
+            }
+        }
+    }
+
+    @Test
+    void notGetCertificatesIfPathIsNotARegularFileAndAlsoNotADirectory() {
+        try (MockedStatic<Files> filesMockedStatic = mockStatic(Files.class, invocation -> {
+            Method method = invocation.getMethod();
+            String methodName = method.getName();
+
+            if ("exists".equals(methodName)) {
+                return false;
+            } else if ("isRegularFile".equals(methodName)) {
+                return false;
+            } else if ("isDirectory".equals(methodName)) {
+                return false;
+            } else {
+                return invocation.callRealMethod();
+            }
+        })) {
+
+            List<Certificate> certificates = LinuxCertificateUtils.getCertificates();
+            assertThat(certificates).isEmpty();
+        }
+    }
+
+    @Test
+    void containAListOfToBeSearchPathsForCertificates() {
+        if (!OPERATING_SYSTEM.contains("windows")) {
+            List<String> capturedPaths = new ArrayList<>();
+            try (MockedStatic<Files> filesMockedStatic = mockStatic(Files.class, invocation -> {
+                Method method = invocation.getMethod();
+                if ("exists".equals(method.getName())) {
+                    String absolutePath = invocation.getArguments()[0].toString();
+                    capturedPaths.add(absolutePath);
+                    return false;
+                } else {
+                    return invocation.callRealMethod();
+                }
+            })) {
+
+                LinuxCertificateUtils.getCertificates();
+                assertThat(capturedPaths).containsExactly(
+                        "/etc/ssl/certs",
+                        "/etc/pki/nssdb",
+                        "/usr/local/share/ca-certificates",
+                        "/usr/share/ca-certificates",
+                        "/etc/pki/tls/certs/ca-bundle.crt",
+                        "/etc/pki/ca-trust/source/anchors",
+                        "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem",
+                        System.getProperty("user.home") + "/.pki/nssdb"
+                );
+            }
+        }
+    }
+
+}
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/MacCertificateUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/MacCertificateUtilsShould.java
new file mode 100644
index 0000000..e0ca4c0
--- /dev/null
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/MacCertificateUtilsShould.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.util;
+
+
+import nl.altindag.ssl.exception.GenericException;
+import nl.altindag.ssl.exception.GenericIOException;
+import org.junit.jupiter.api.Test;
+import org.mockito.MockedStatic;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.security.cert.Certificate;
+import java.util.List;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.mockito.Mockito.*;
+
+/**
+ * @author Hakan Altindag
+ */
+class MacCertificateUtilsShould {
+
+    private static final String OPERATING_SYSTEM = System.getProperty("os.name").toLowerCase();
+
+    @Test
+    void getCertificate() {
+        if (OPERATING_SYSTEM.contains("mac")) {
+            List<Certificate> certificates = MacCertificateUtils.getCertificates();
+            assertThat(certificates).isNotEmpty();
+        }
+    }
+
+    @Test
+    void throwsGenericIOExceptionWhenSystemProcessCannotStarted() throws IOException {
+        ProcessBuilder processBuilder = mock(ProcessBuilder.class);
+        when(processBuilder.command(anyString(), anyString(), anyString())).thenReturn(processBuilder);
+        when(processBuilder.directory(any(File.class))).thenReturn(processBuilder);
+        when(processBuilder.start()).thenThrow(new IOException("KABOOM!"));
+
+        try (MockedStatic<MacCertificateUtils> mockedStatic = mockStatic(MacCertificateUtils.class, invocation -> {
+            Method method = invocation.getMethod();
+            if ("createProcess".equals(method.getName()) && method.getParameterCount() == 0) {
+                return processBuilder;
+            } else {
+                return invocation.callRealMethod();
+            }
+        })) {
+
+            assertThatThrownBy(MacCertificateUtils::getCertificates)
+                    .isInstanceOf(GenericIOException.class)
+                    .hasMessageContaining("KABOOM!");
+        }
+    }
+
+    @Test
+    void waitAtMostTillTimeoutThrowsExceptionWhenSomethingWentWrong() throws ExecutionException, InterruptedException, TimeoutException {
+        Future<?> future = mock(Future.class);
+        when(future.get(10, TimeUnit.SECONDS)).thenThrow(new TimeoutException("KABOOM!"));
+
+        assertThatThrownBy(() -> MacCertificateUtils.waitAtMostTillTimeout(future))
+                .isInstanceOf(GenericException.class)
+                .hasMessageContaining("KABOOM!");
+    }
+
+}
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
index 6f5699a..2f9397e 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/TrustManagerUtilsShould.java
@@ -190,25 +190,27 @@ class TrustManagerUtilsShould {
     @Test
     void createTrustManagerWithSystemTrustedCertificate() {
         String operatingSystem = System.getProperty("os.name").toLowerCase();
-        try (MockedStatic<KeyStoreUtils> mockedStatic = mockStatic(KeyStoreUtils.class, invocation -> {
+        try (MockedStatic<MacCertificateUtils> macCertificateUtilsMockedStatic = mockStatic(MacCertificateUtils.class);
+             MockedStatic<KeyStoreUtils> keyStoreUtilsMockedStatic = mockStatic(KeyStoreUtils.class, invocation -> {
             Method method = invocation.getMethod();
             if ("createKeyStore".equals(method.getName())
                     && method.getParameterCount() == 2
                     && operatingSystem.contains("mac")) {
                 return KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + TRUSTSTORE_FILE_NAME, TRUSTSTORE_PASSWORD);
+            } else if ("createTrustStore".equals(method.getName())
+                    && method.getParameterCount() == 1
+                    && method.getParameters()[0].getType().equals(List.class)
+                    && operatingSystem.contains("mac")) {
+                return KeyStoreUtils.loadKeyStore(KEYSTORE_LOCATION + "truststore-without-password.jks", null);
             } else {
                 return invocation.callRealMethod();
             }
         })) {
             Optional<X509ExtendedTrustManager> trustManager = TrustManagerUtils.createTrustManagerWithSystemTrustedCertificates();
-            if (operatingSystem.contains("mac") || operatingSystem.contains("windows")) {
+            if (operatingSystem.contains("mac") || operatingSystem.contains("windows") || operatingSystem.contains("linux")) {
                 assertThat(trustManager).isPresent();
                 assertThat((trustManager).get().getAcceptedIssuers()).hasSizeGreaterThan(0);
             }
-
-            if (operatingSystem.contains("linux")) {
-                assertThat(trustManager).isNotPresent();
-            }
         }
     }
 
@@ -315,13 +317,22 @@ class TrustManagerUtilsShould {
     }
 
     @Test
-    void loadLinuxSystemKeyStoreReturnsOptionalOfEmpty() {
+    void loadLinuxSystemKeyStoreReturnsOptionalOfEmptyIfThereAreNoKeyStoresPresent() {
         System.setProperty("os.name", "linux");
 
-        Optional<X509ExtendedTrustManager> trustManager = TrustManagerUtils.createTrustManagerWithSystemTrustedCertificates();
-        assertThat(trustManager).isNotPresent();
-
-        resetOsName();
+        try (MockedStatic<KeyStoreUtils> keyStoreUtilsMock = mockStatic(KeyStoreUtils.class, invocation -> {
+                 Method method = invocation.getMethod();
+                 if ("loadSystemKeyStores".equals(method.getName()) && method.getParameterCount() == 0) {
+                     return Collections.emptyList();
+                 } else {
+                     return invocation.callRealMethod();
+                 }
+             })) {
+            Optional<X509ExtendedTrustManager> trustManager = TrustManagerUtils.createTrustManagerWithSystemTrustedCertificates();
+            assertThat(trustManager).isNotPresent();
+        } finally {
+            resetOsName();
+        }
     }
 
     @Test

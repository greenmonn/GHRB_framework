diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
index 1abe101..9069e47 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryIT.java
@@ -15,7 +15,7 @@
  */
 package nl.altindag.ssl;
 
-import com.sun.net.httpserver.HttpsServer;
+import nl.altindag.ssl.ServerUtils.Server;
 import nl.altindag.ssl.util.SSLFactoryUtils;
 import nl.altindag.ssl.util.SSLSessionUtils;
 import org.junit.jupiter.api.Test;
@@ -55,8 +55,7 @@ class SSLFactoryIT {
                 .withNeedClientAuthentication()
                 .build();
 
-        HttpsServer server = ServerUtils.createServer(8443, sslFactoryForServer, executorService, "Hello from server");
-        server.start();
+        Server server = ServerUtils.createServer(sslFactoryForServer);
 
         SSLFactory sslFactoryForClient = SSLFactory.builder()
                 .withIdentityMaterial("keystore/client-server/client-one/identity.jks", "secret".toCharArray())
@@ -71,7 +70,7 @@ class SSLFactoryIT {
         int statusCode = connection.getResponseCode();
         assertThat(statusCode).isEqualTo(200);
 
-        server.stop(0);
+        server.stop();
         executorService.shutdownNow();
     }
 
@@ -94,11 +93,8 @@ class SSLFactoryIT {
                 .withProtocols("TLSv1.2")
                 .build();
 
-        HttpsServer serverOne = ServerUtils.createServer(8443, sslFactoryForServerOne, executorService, "Hello from server one");
-        HttpsServer serverTwo = ServerUtils.createServer(8444, sslFactoryForServerTwo, executorService, "Hello from server two");
-
-        serverOne.start();
-        serverTwo.start();
+        Server serverOne = ServerUtils.createServer(sslFactoryForServerOne, 8443, "Hello from server one");
+        Server serverTwo = ServerUtils.createServer(sslFactoryForServerTwo, 8444, "Hello from server two");
 
         SSLFactory sslFactoryForClient = SSLFactory.builder()
                 .withIdentityMaterial("keystore/client-server/client-one/identity.jks", keyStorePassword)
@@ -118,8 +114,8 @@ class SSLFactoryIT {
         assertThat(response.getStatusCode()).isEqualTo(200);
         assertThat(response.getBody()).contains("Hello from server two");
 
-        serverOne.stop(0);
-        serverTwo.stop(0);
+        serverOne.stop();
+        serverTwo.stop();
         executorService.shutdownNow();
     }
 
@@ -144,11 +140,8 @@ class SSLFactoryIT {
                 .withProtocols("TLSv1.2")
                 .build();
 
-        HttpsServer serverOne = ServerUtils.createServer(8443, sslFactoryForServerOne, executorService, "Hello from server one");
-        HttpsServer serverTwo = ServerUtils.createServer(8444, sslFactoryForServerTwo, executorService, "Hello from server two");
-
-        serverOne.start();
-        serverTwo.start();
+        Server serverOne = ServerUtils.createServer(sslFactoryForServerOne, 8443, "Hello from server one");
+        Server serverTwo = ServerUtils.createServer(sslFactoryForServerTwo, 8444, "Hello from server two");
 
         Map<String, List<String>> clientAliasesToHosts = new HashMap<>();
         clientAliasesToHosts.put("client-one", Collections.singletonList("https://localhost:8443/api/hello"));
@@ -189,8 +182,8 @@ class SSLFactoryIT {
         assertThatThrownBy(() -> executeRequest("https://localhost:8444/api/hello", sslSocketFactoryWithIncorrectClientRoutes))
                 .isInstanceOfAny(SocketException.class, SSLException.class);
 
-        serverOne.stop(0);
-        serverTwo.stop(0);
+        serverOne.stop();
+        serverTwo.stop();
         executorService.shutdownNow();
     }
 
@@ -214,11 +207,8 @@ class SSLFactoryIT {
                 .withProtocols("TLSv1.2")
                 .build();
 
-        HttpsServer serverOne = ServerUtils.createServer(8443, sslFactoryForServerOne, executorService, "Hello from server one");
-        HttpsServer serverTwo = ServerUtils.createServer(8444, sslFactoryForServerTwo, executorService, "Hello from server two");
-
-        serverOne.start();
-        serverTwo.start();
+        Server serverOne = ServerUtils.createServer(sslFactoryForServerOne, 8443, "Hello from server one");
+        Server serverTwo = ServerUtils.createServer(sslFactoryForServerTwo, 8444, "Hello from server two");
 
         SSLFactory sslFactoryForClient = SSLFactory.builder()
                 .withIdentityMaterial("keystore/client-server/client-one/identity.jks", keyStorePassword)
@@ -250,8 +240,8 @@ class SSLFactoryIT {
         assertThat(response.getStatusCode()).isEqualTo(200);
         assertThat(response.getBody()).contains("Hello from server two");
 
-        serverOne.stop(0);
-        serverTwo.stop(0);
+        serverOne.stop();
+        serverTwo.stop();
         executorService.shutdownNow();
     }
 
@@ -275,11 +265,8 @@ class SSLFactoryIT {
                 .withProtocols("TLSv1.2")
                 .build();
 
-        HttpsServer serverOne = ServerUtils.createServer(8443, sslFactoryForServerOne, executorService, "Hello from server one");
-        HttpsServer serverTwo = ServerUtils.createServer(8444, sslFactoryForServerTwo, executorService, "Hello from server two");
-
-        serverOne.start();
-        serverTwo.start();
+        Server serverOne = ServerUtils.createServer(sslFactoryForServerOne, 8443, "Hello from server one");
+        Server serverTwo = ServerUtils.createServer(sslFactoryForServerTwo, 8444, "Hello from server two");
 
         SSLFactory sslFactoryForClient = SSLFactory.builder()
                 .withIdentityMaterial("keystore/client-server/client-one/identity.jks", keyStorePassword)
@@ -317,8 +304,8 @@ class SSLFactoryIT {
         assertThat(response.getStatusCode()).isEqualTo(200);
         assertThat(response.getBody()).contains("Hello from server two");
 
-        serverOne.stop(0);
-        serverTwo.stop(0);
+        serverOne.stop();
+        serverTwo.stop();
         executorService.shutdownNow();
     }
 
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
index 1e7fac7..74540d2 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/SSLFactoryShould.java
@@ -29,9 +29,9 @@ import nl.altindag.ssl.trustmanager.DummyX509ExtendedTrustManager;
 import nl.altindag.ssl.trustmanager.EnhanceableX509ExtendedTrustManager;
 import nl.altindag.ssl.trustmanager.HotSwappableX509ExtendedTrustManager;
 import nl.altindag.ssl.trustmanager.LoggingX509ExtendedTrustManager;
-import nl.altindag.ssl.trustmanager.TrustAnchorTrustOptions;
-import nl.altindag.ssl.trustmanager.TrustStoreTrustOptions;
 import nl.altindag.ssl.trustmanager.UnsafeX509ExtendedTrustManager;
+import nl.altindag.ssl.trustmanager.trustoptions.TrustAnchorTrustOptions;
+import nl.altindag.ssl.trustmanager.trustoptions.TrustStoreTrustOptions;
 import nl.altindag.ssl.util.KeyManagerUtils;
 import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.TrustManagerUtils;
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/ServerUtils.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/ServerUtils.java
index 84c49f1..9dbd011 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/ServerUtils.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/ServerUtils.java
@@ -15,50 +15,178 @@
  */
 package nl.altindag.ssl;
 
-import com.sun.net.httpserver.HttpExchange;
-import com.sun.net.httpserver.HttpHandler;
-import com.sun.net.httpserver.HttpsConfigurator;
-import com.sun.net.httpserver.HttpsParameters;
-import com.sun.net.httpserver.HttpsServer;
-
-import java.io.IOException;
-import java.io.OutputStream;
-import java.net.InetSocketAddress;
-import java.nio.charset.StandardCharsets;
-import java.util.concurrent.Executor;
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.codec.http.DefaultFullHttpResponse;
+import io.netty.handler.codec.http.FullHttpResponse;
+import io.netty.handler.codec.http.HttpRequest;
+import io.netty.handler.codec.http.HttpServerCodec;
+import io.netty.handler.codec.http.HttpUtil;
+import io.netty.handler.ssl.ClientAuth;
+import io.netty.handler.ssl.SslContext;
+import io.netty.handler.ssl.SslContextBuilder;
+import io.netty.handler.ssl.SslHandler;
+import io.netty.handler.ssl.SupportedCipherSuiteFilter;
+
+import javax.net.ssl.SSLParameters;
+import javax.net.ssl.X509ExtendedKeyManager;
+
+import static io.netty.channel.ChannelFutureListener.CLOSE;
+import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;
+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;
+import static io.netty.handler.codec.http.HttpHeaderValues.KEEP_ALIVE;
+import static io.netty.handler.codec.http.HttpResponseStatus.CONTINUE;
+import static io.netty.handler.codec.http.HttpResponseStatus.OK;
+import static io.netty.handler.codec.http.HttpVersion.HTTP_1_1;
+import static java.nio.charset.StandardCharsets.UTF_8;
 
 /**
  * @author Hakan Altindag
  */
 public final class ServerUtils {
 
-    private ServerUtils() {}
+    private ServerUtils() {
+    }
+
+    public static Server createServer(SSLFactory sslFactory) {
+        return createServer(sslFactory, 8443, "Hello World!");
+    }
+
+    public static Server createServer(SSLFactory sslFactory, int port, String responseBody) {
+        X509ExtendedKeyManager keyManager = sslFactory.getKeyManager()
+                .orElseThrow(NullPointerException::new);
+
+        SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(keyManager)
+                .ciphers(sslFactory.getCiphers(), SupportedCipherSuiteFilter.INSTANCE)
+                .protocols(sslFactory.getProtocols())
+                .clientAuth(getClientAuth(sslFactory.getSslParameters()));
+
+        sslFactory.getTrustManager().ifPresent(sslContextBuilder::trustManager);
+
+        try {
+            SslContext sslContext = sslContextBuilder.build();
+
+            NioEventLoopGroup bossGroup = new NioEventLoopGroup(1);
+            NioEventLoopGroup workerGroup = new NioEventLoopGroup();
+
+            ServerBootstrap serverBootstrap = new ServerBootstrap();
+            serverBootstrap.option(ChannelOption.SO_BACKLOG, 1024);
+            serverBootstrap.group(bossGroup, workerGroup)
 
-    public static HttpsServer createServer(int port, SSLFactory sslFactory, Executor executor, String payload) throws IOException {
-        InetSocketAddress socketAddress = new InetSocketAddress(port);
-        HttpsServer server = HttpsServer.create(socketAddress, 0);
-        server.setExecutor(executor);
-        server.setHttpsConfigurator(new HttpsConfigurator(sslFactory.getSslContext()) {
-            @Override
-            public void configure(HttpsParameters params) {
-                params.setSSLParameters(sslFactory.getSslParameters());
+                    .channelFactory(NioServerSocketChannel::new)
+                    .childHandler(new ServerInitializer(sslContext, responseBody));
+
+            ChannelFuture httpChannel = serverBootstrap.bind(port).sync();
+            return new Server(httpChannel, bossGroup, workerGroup);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public static class Server {
+
+        private final ChannelFuture httpChannel;
+        private final NioEventLoopGroup bossGroup;
+        private final NioEventLoopGroup workerGroup;
+
+        public Server(ChannelFuture httpChannel, NioEventLoopGroup bossGroup, NioEventLoopGroup workerGroup) {
+            this.httpChannel = httpChannel;
+            this.bossGroup = bossGroup;
+            this.workerGroup = workerGroup;
+        }
+
+        public void stop() {
+            try {
+                httpChannel.channel().close();
+                bossGroup.shutdownGracefully();
+                workerGroup.shutdownGracefully();
+            } catch (Exception e) {
+                throw new RuntimeException(e);
             }
-        });
+        }
+    }
 
-        class HelloWorldController implements HttpHandler {
-            @Override
-            public void handle(HttpExchange exchange) throws IOException {
-                try (OutputStream responseBody = exchange.getResponseBody()) {
+    private static class ServerInitializer extends ChannelInitializer<Channel> {
 
-                    exchange.getResponseHeaders().set("Content-Type", "text/plain");
+        private final SslContext sslContext;
+        private final String responseBody;
 
-                    exchange.sendResponseHeaders(200, payload.length());
-                    responseBody.write(payload.getBytes(StandardCharsets.UTF_8));
+        public ServerInitializer(SslContext sslContext, String responseBody) {
+            this.sslContext = sslContext;
+            this.responseBody = responseBody;
+        }
+
+        @Override
+        protected void initChannel(Channel channel) {
+            channel.pipeline()
+                    .addFirst("ssl", new SslHandler(sslContext.newEngine(channel.alloc())))
+                    .addLast(new HttpServerCodec())
+                    .addLast(new ServerHandler(responseBody));
+        }
+
+    }
+
+    private static class ServerHandler extends ChannelInboundHandlerAdapter {
+
+        private final String responseBody;
+
+        public ServerHandler(String responseBody) {
+
+            this.responseBody = responseBody;
+        }
+
+        @Override
+        public void channelReadComplete(ChannelHandlerContext channelHandlerContext) {
+            channelHandlerContext.flush();
+        }
+
+        @Override
+        public void channelRead(ChannelHandlerContext channelHandlerContext, Object message) {
+            if (message instanceof HttpRequest) {
+                HttpRequest req = (HttpRequest) message;
+
+                if (HttpUtil.is100ContinueExpected(req)) {
+                    channelHandlerContext.write(new DefaultFullHttpResponse(HTTP_1_1, CONTINUE));
+                }
+                boolean keepAlive = HttpUtil.isKeepAlive(req);
+                FullHttpResponse response = new DefaultFullHttpResponse(HTTP_1_1, OK, Unpooled.wrappedBuffer(responseBody.getBytes(UTF_8)));
+                response.headers().set(CONTENT_TYPE, "text/plain");
+                response.headers().set(CONTENT_LENGTH, response.content().readableBytes());
+
+                if (!keepAlive) {
+                    channelHandlerContext.write(response).addListener(CLOSE);
+                } else {
+                    response.headers().set(CONNECTION, KEEP_ALIVE);
+                    channelHandlerContext.write(response);
                 }
             }
         }
-        server.createContext("/api/hello", new HelloWorldController());
-        return server;
+
+        @Override
+        public void exceptionCaught(ChannelHandlerContext channelHandlerContext, Throwable throwable) {
+            throwable.printStackTrace();
+            channelHandlerContext.close();
+        }
+
+    }
+
+    private static ClientAuth getClientAuth(SSLParameters sslParameters) {
+        if (sslParameters.getNeedClientAuth()) {
+            return ClientAuth.REQUIRE;
+        } else if (sslParameters.getWantClientAuth()) {
+            return ClientAuth.OPTIONAL;
+        } else {
+            return ClientAuth.NONE;
+        }
     }
 
 }
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/keymanager/HotSwappableX509ExtendedKeyManagerIT.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/keymanager/HotSwappableX509ExtendedKeyManagerIT.java
index 1cfb72b..fd34532 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/keymanager/HotSwappableX509ExtendedKeyManagerIT.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/keymanager/HotSwappableX509ExtendedKeyManagerIT.java
@@ -15,9 +15,9 @@
  */
 package nl.altindag.ssl.keymanager;
 
-import com.sun.net.httpserver.HttpsServer;
 import nl.altindag.ssl.SSLFactory;
 import nl.altindag.ssl.ServerUtils;
+import nl.altindag.ssl.ServerUtils.Server;
 import nl.altindag.ssl.util.KeyManagerUtils;
 import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.SSLSessionUtils;
@@ -36,8 +36,6 @@ import javax.net.ssl.X509ExtendedKeyManager;
 import java.io.IOException;
 import java.net.URL;
 import java.security.KeyStore;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
@@ -51,8 +49,7 @@ class HotSwappableX509ExtendedKeyManagerIT {
     private static SSLSocketFactory sslSocketFactory;
     private static SSLSessionContext sslSessionContext;
     private static X509ExtendedKeyManager keyManager;
-    private ExecutorService executorService;
-    private HttpsServer server;
+    private Server server;
 
     @BeforeAll
     static void setUpClientSSLSocketFactory() {
@@ -70,22 +67,19 @@ class HotSwappableX509ExtendedKeyManagerIT {
     }
 
     @BeforeEach
-    void startServer() throws IOException {
-        executorService = Executors.newSingleThreadExecutor();
+    void startServer() {
         SSLFactory sslFactoryForServer = SSLFactory.builder()
                 .withIdentityMaterial("keystore/client-server/server-one/identity.jks", "secret".toCharArray())
                 .withTrustMaterial("keystore/client-server/server-one/truststore.jks", "secret".toCharArray())
                 .withNeedClientAuthentication()
                 .build();
 
-        server = ServerUtils.createServer(8443, sslFactoryForServer, executorService, "Hello from server");
-        server.start();
+        server = ServerUtils.createServer(sslFactoryForServer);
     }
 
     @AfterEach
     void stopServer() {
-        server.stop(0);
-        executorService.shutdownNow();
+        server.stop();
     }
 
     @Test
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeValidatorShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeValidatorShould.java
index 9f05c61..f188845 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeValidatorShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeValidatorShould.java
@@ -15,6 +15,7 @@
  */
 package nl.altindag.ssl.trustmanager;
 
+import nl.altindag.ssl.trustmanager.validator.ChainAndAuthTypeValidator;
 import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.TrustManagerUtils;
 import org.junit.jupiter.api.Test;
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeWithSSLEngineValidatorShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeWithSSLEngineValidatorShould.java
index a5929c6..4252912 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeWithSSLEngineValidatorShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeWithSSLEngineValidatorShould.java
@@ -15,6 +15,7 @@
  */
 package nl.altindag.ssl.trustmanager;
 
+import nl.altindag.ssl.trustmanager.validator.ChainAndAuthTypeWithSSLEngineValidator;
 import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.TrustManagerUtils;
 import org.junit.jupiter.api.Test;
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeWithSocketValidatorShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeWithSocketValidatorShould.java
index aa7262c..9c9ccf8 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeWithSocketValidatorShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/ChainAndAuthTypeWithSocketValidatorShould.java
@@ -15,6 +15,7 @@
  */
 package nl.altindag.ssl.trustmanager;
 
+import nl.altindag.ssl.trustmanager.validator.ChainAndAuthTypeWithSocketValidator;
 import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.TrustManagerUtils;
 import org.junit.jupiter.api.Test;
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/EnhanceableX509ExtendedTrustManagerShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/EnhanceableX509ExtendedTrustManagerShould.java
index d6e0f10..e711327 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/EnhanceableX509ExtendedTrustManagerShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/EnhanceableX509ExtendedTrustManagerShould.java
@@ -15,6 +15,9 @@
  */
 package nl.altindag.ssl.trustmanager;
 
+import nl.altindag.ssl.trustmanager.validator.ChainAndAuthTypeValidator;
+import nl.altindag.ssl.trustmanager.validator.ChainAndAuthTypeWithSSLEngineValidator;
+import nl.altindag.ssl.trustmanager.validator.ChainAndAuthTypeWithSocketValidator;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.junit.jupiter.MockitoExtension;
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/HotSwappableX509ExtendedTrustManagerIT.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/HotSwappableX509ExtendedTrustManagerIT.java
index a311d24..cfbd469 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/HotSwappableX509ExtendedTrustManagerIT.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/HotSwappableX509ExtendedTrustManagerIT.java
@@ -15,9 +15,9 @@
  */
 package nl.altindag.ssl.trustmanager;
 
-import com.sun.net.httpserver.HttpsServer;
 import nl.altindag.ssl.SSLFactory;
 import nl.altindag.ssl.ServerUtils;
+import nl.altindag.ssl.ServerUtils.Server;
 import nl.altindag.ssl.util.KeyStoreUtils;
 import nl.altindag.ssl.util.SSLSessionUtils;
 import nl.altindag.ssl.util.TrustManagerUtils;
@@ -26,7 +26,6 @@ import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.MethodOrderer;
 import org.junit.jupiter.api.Order;
-import org.junit.jupiter.api.Tag;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestMethodOrder;
 
@@ -37,13 +36,9 @@ import javax.net.ssl.X509ExtendedTrustManager;
 import java.io.IOException;
 import java.net.URL;
 import java.security.KeyStore;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 
-import static nl.altindag.ssl.TestConstants.KEYSTORE_LOCATION;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.assertj.core.api.Assertions.fail;
 
 /**
  * @author Hakan Altindag
@@ -54,8 +49,7 @@ class HotSwappableX509ExtendedTrustManagerIT {
     private static SSLSocketFactory sslSocketFactory;
     private static SSLSessionContext sslSessionContext;
     private static X509ExtendedTrustManager trustManager;
-    private ExecutorService executorService;
-    private HttpsServer server;
+    private Server server;
 
     @BeforeAll
     static void setUpSSLSocketFactory() {
@@ -73,22 +67,19 @@ class HotSwappableX509ExtendedTrustManagerIT {
     }
 
     @BeforeEach
-    void startServer() throws IOException {
-        executorService = Executors.newSingleThreadExecutor();
+    void startServer() {
         SSLFactory sslFactoryForServer = SSLFactory.builder()
                 .withIdentityMaterial("keystore/client-server/server-one/identity.jks", "secret".toCharArray())
                 .withTrustMaterial("keystore/client-server/server-one/truststore.jks", "secret".toCharArray())
                 .withNeedClientAuthentication()
                 .build();
 
-        server = ServerUtils.createServer(8443, sslFactoryForServer, executorService, "Hello from server");
-        server.start();
+        server = ServerUtils.createServer(sslFactoryForServer);
     }
 
     @AfterEach
     void stopServer() {
-        server.stop(0);
-        executorService.shutdownNow();
+        server.stop();
     }
 
     @Test
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/LoggingX509ExtendedTrustManagerShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/LoggingX509ExtendedTrustManagerShould.java
index 04f304b..46d1681 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/LoggingX509ExtendedTrustManagerShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/trustmanager/LoggingX509ExtendedTrustManagerShould.java
@@ -16,8 +16,8 @@
 package nl.altindag.ssl.trustmanager;
 
 import nl.altindag.log.LogCaptor;
-import nl.altindag.ssl.util.HostUtils;
 import nl.altindag.ssl.util.KeyStoreUtils;
+import nl.altindag.ssl.util.internal.HostUtils;
 import org.junit.jupiter.api.Test;
 import org.mockito.MockedStatic;
 
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/CertificateUtilsIT.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/CertificateUtilsIT.java
index 133ddad..f8c8fde 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/CertificateUtilsIT.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/CertificateUtilsIT.java
@@ -15,19 +15,16 @@
  */
 package nl.altindag.ssl.util;
 
-import com.sun.net.httpserver.HttpsServer;
 import nl.altindag.ssl.SSLFactory;
 import nl.altindag.ssl.ServerUtils;
+import nl.altindag.ssl.ServerUtils.Server;
 import nl.altindag.ssl.exception.GenericCertificateException;
 import org.junit.jupiter.api.Test;
 
-import java.io.IOException;
 import java.security.cert.X509Certificate;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.ExecutorService;
-import java.util.concurrent.Executors;
 import java.util.function.Supplier;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -54,7 +51,8 @@ class CertificateUtilsIT {
             try {
                 certificatesFromRemote = certificateSupplier.get();
                 amountOfRetries++;
-            } catch (GenericCertificateException ignored) {}
+            } catch (GenericCertificateException ignored) {
+            }
         }
 
         assertThat(certificatesFromRemote)
@@ -89,7 +87,8 @@ class CertificateUtilsIT {
             try {
                 certificatesFromRemote = certificateSupplier.get();
                 amountOfRetries++;
-            } catch (GenericCertificateException ignored) {}
+            } catch (GenericCertificateException ignored) {
+            }
         }
 
         assertThat(certificatesFromRemote)
@@ -146,9 +145,7 @@ class CertificateUtilsIT {
     }
 
     @Test
-    void getRemoteSelfSignedCertificate() throws IOException {
-        ExecutorService executorService = Executors.newSingleThreadExecutor();
-
+    void getRemoteSelfSignedCertificate() {
         char[] keyStorePassword = "secret".toCharArray();
         SSLFactory sslFactoryForServerOne = SSLFactory.builder()
                 .withIdentityMaterial("keystore/client-server/server-one/identity.jks", keyStorePassword)
@@ -156,22 +153,18 @@ class CertificateUtilsIT {
                 .withProtocols("TLSv1.2")
                 .build();
 
-        HttpsServer server = ServerUtils.createServer(8443, sslFactoryForServerOne, executorService, "");
-        server.start();
+        Server server = ServerUtils.createServer(sslFactoryForServerOne);
 
         Map<String, List<X509Certificate>> certificatesFromRemote = CertificateUtils.getCertificate("https://localhost:8443");
 
-        server.stop(0);
-        executorService.shutdownNow();
+        server.stop();
 
         assertThat(certificatesFromRemote).containsKeys("https://localhost:8443");
         assertThat(certificatesFromRemote.get("https://localhost:8443")).hasSizeGreaterThan(0);
     }
 
     @Test
-    void getRemoteCustomRootCaSignedCertificate() throws IOException {
-        ExecutorService executorService = Executors.newSingleThreadExecutor();
-
+    void getRemoteCustomRootCaSignedCertificate() {
         char[] keyStorePassword = "secret".toCharArray();
         SSLFactory sslFactoryForServerOne = SSLFactory.builder()
                 .withIdentityMaterial("keystore/client-server/server-three/identity.jks", keyStorePassword)
@@ -179,13 +172,11 @@ class CertificateUtilsIT {
                 .withProtocols("TLSv1.2")
                 .build();
 
-        HttpsServer server = ServerUtils.createServer(8443, sslFactoryForServerOne, executorService, "");
-        server.start();
+        Server server = ServerUtils.createServer(sslFactoryForServerOne);
 
         Map<String, List<X509Certificate>> certificatesFromRemote = CertificateUtils.getCertificate("https://localhost:8443");
 
-        server.stop(0);
-        executorService.shutdownNow();
+        server.stop();
 
         assertThat(certificatesFromRemote).containsKeys("https://localhost:8443");
         assertThat(certificatesFromRemote.get("https://localhost:8443")).hasSizeGreaterThan(0);
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/IOUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/IOUtilsShould.java
deleted file mode 100644
index 9bd14ea..0000000
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/IOUtilsShould.java
+++ /dev/null
@@ -1,153 +0,0 @@
-/*
- * Copyright 2019 Thunderberry.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package nl.altindag.ssl.util;
-
-import nl.altindag.ssl.IOTestUtils;
-import nl.altindag.ssl.TestConstants;
-import nl.altindag.ssl.exception.GenericIOException;
-import org.junit.jupiter.api.Test;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.MockedStatic;
-import org.mockito.Mockito;
-import org.mockito.junit.jupiter.MockitoExtension;
-
-import java.io.ByteArrayInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.security.KeyStore;
-import java.security.KeyStoreException;
-import java.security.NoSuchAlgorithmException;
-import java.security.cert.CertificateException;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatCode;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.Mockito.doThrow;
-import static org.mockito.Mockito.mockStatic;
-
-/**
- * @author Hakan Altindag
- */
-@ExtendWith(MockitoExtension.class)
-class IOUtilsShould {
-
-    @Test
-    void getContent() {
-        ByteArrayInputStream inputStream = new ByteArrayInputStream("Hello".getBytes());
-        String content = IOUtils.getContent(inputStream);
-        assertThat(content).isEqualTo("Hello");
-    }
-
-    @Test
-    void getContentThrowsGenericIOExceptionWhenStreamFailsToClose() throws IOException {
-        ByteArrayInputStream inputStream = Mockito.spy(new ByteArrayInputStream("Hello".getBytes()));
-        doThrow(new IOException("Could not read the content")).when(inputStream).close();
-
-        assertThatThrownBy(() -> IOUtils.getContent(inputStream))
-                .isInstanceOf(GenericIOException.class)
-                .hasRootCauseMessage("Could not read the content");
-    }
-
-    @Test
-    void closeSilentlyDoesNotThrowExceptionWhenCloseFails() throws IOException {
-        ByteArrayInputStream inputStream = Mockito.spy(new ByteArrayInputStream("Hello".getBytes()));
-        doThrow(new IOException("Could not read the content")).when(inputStream).close();
-
-        assertThatCode(() -> IOUtils.closeSilently(inputStream))
-                .doesNotThrowAnyException();
-    }
-
-    @Test
-    void createCopy() {
-        ByteArrayInputStream inputStream = new ByteArrayInputStream("Hello".getBytes());
-        byte[] copy = IOUtils.copyToByteArray(inputStream);
-
-        String content = new String(copy, StandardCharsets.UTF_8);
-        assertThat(content).isEqualTo("Hello");
-    }
-
-    @Test
-    void getResourceAsStream() throws IOException {
-        try (InputStream inputStream = IOUtils.getResourceAsStream("pem/badssl-certificate.pem")) {
-            assertThat(inputStream).isNotNull();
-        }
-    }
-
-    @Test
-    void getFileAsStream() throws IOException {
-        Path path = IOTestUtils.copyFileToHomeDirectory("pem/", "badssl-certificate.pem");
-
-        try (InputStream inputStream = IOUtils.getFileAsStream(path)) {
-            assertThat(inputStream).isNotNull();
-        }
-
-        Files.delete(path);
-    }
-
-    @Test
-    void getFileAsStreamThrowsGenericIOExceptionWhenSomethingGoesWrong() {
-        Path path = Paths.get("/path/to/non-existing.file");
-        assertThatThrownBy(() -> IOUtils.getFileAsStream(path))
-                .isInstanceOf(GenericIOException.class);
-    }
-
-    @Test
-    void createCopyThrowsGenericIOExceptionWhenReadingFails() throws IOException {
-        ByteArrayInputStream inputStream = Mockito.spy(new ByteArrayInputStream("Hello".getBytes()));
-        doThrow(new IOException("Could not read the content")).when(inputStream).read(any());
-
-        assertThatThrownBy(() -> IOUtils.copyToByteArray(inputStream))
-                .isInstanceOf(GenericIOException.class)
-                .hasRootCauseMessage("Could not read the content");
-    }
-
-    @Test
-    void writeThrowsGenericIOExceptionWhenSomethingUnexpectedIsHappening() throws IOException {
-        Path path = Paths.get(TestConstants.HOME_DIRECTORY).resolve(Paths.get("my-non-existing-file.jks"));
-        byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_8);
-        Files.createFile(path);
-
-        try (MockedStatic<Files> filesMockedStatic = mockStatic(Files.class)) {
-            filesMockedStatic.when(() -> IOUtils.write(path, bytes)).thenThrow(new IOException("Kaboom!"));
-
-            assertThatThrownBy(() -> IOUtils.write(path, bytes))
-                    .isInstanceOf(GenericIOException.class);
-        }
-
-        Files.delete(path);
-    }
-
-    @Test
-    void writeWithOutputStreamThrowsGenericIOExceptionWhenSomethingUnexpectedIsHappening() throws IOException, CertificateException, KeyStoreException, NoSuchAlgorithmException {
-        Path path = Paths.get(TestConstants.HOME_DIRECTORY).resolve(Paths.get("my-non-existing-file.jks"));
-
-        char[] password = "hello".toCharArray();
-        KeyStore keyStore = Mockito.mock(KeyStore.class);
-        doThrow(new KeyStoreException("Kaboom!"))
-                .when(keyStore).store(any(), any());
-
-        assertThatThrownBy(() -> IOUtils.write(path, outputStream -> keyStore.store(outputStream, password)))
-                .isInstanceOf(GenericIOException.class);
-
-        Files.delete(path);
-    }
-
-}
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/LinuxCertificateUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/LinuxCertificateUtilsShould.java
index a683b84..4b173d3 100644
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/LinuxCertificateUtilsShould.java
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/LinuxCertificateUtilsShould.java
@@ -18,6 +18,7 @@ package nl.altindag.ssl.util;
 
 import nl.altindag.ssl.IOTestUtils;
 import nl.altindag.ssl.exception.GenericIOException;
+import nl.altindag.ssl.util.internal.IOUtils;
 import org.junit.jupiter.api.Test;
 import org.mockito.MockedStatic;
 
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/UriUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/UriUtilsShould.java
deleted file mode 100644
index 25a8c7e..0000000
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/UriUtilsShould.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- * Copyright 2019 Thunderberry.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package nl.altindag.ssl.util;
-
-import org.junit.jupiter.api.Test;
-import java.net.URI;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
-
-/**
- * @author Hakan Altindag
- */
-class UriUtilsShould {
-
-    @Test
-    void extractHost() {
-        String host = UriUtils.extractHost("https://my-first-domain.com");
-        assertThat(host).isEqualTo("my-first-domain.com");
-    }
-
-    @Test
-    void throwExceptionWhenInvalidUriIsProvided() {
-        assertThatThrownBy(() -> UriUtils.extractHost("https://my-first-domain.com/q/h?s=^IXIC"))
-                .isInstanceOf(IllegalArgumentException.class);
-    }
-
-    @Test
-    void throwExceptionWhenNullIsProvidedWhenValidateIsCalled() {
-        assertThatThrownBy(() -> UriUtils.validate(null))
-                .isInstanceOf(IllegalArgumentException.class)
-                .hasMessage("Host should be present");
-    }
-
-    @Test
-    void throwExceptionWhenHostIsProvidedWithoutAValidPortIsProvidedWhenValidateIsCalled() {
-        URI host = URI.create("https://localhost/");
-        assertThatThrownBy(() -> UriUtils.validate(host))
-                .isInstanceOf(IllegalArgumentException.class)
-                .hasMessage("Port should be defined for the given input: [https://localhost/]");
-    }
-
-    @Test
-    void throwExceptionWhenHostIsProvidedWithoutAValidHostnameIsProvidedWhenValidateIsCalled() {
-        URI host = URI.create("https:/");
-        assertThatThrownBy(() -> UriUtils.validate(host))
-                .isInstanceOf(IllegalArgumentException.class)
-                .hasMessage("Hostname should be defined for the given input: [https:/]");
-    }
-
-}
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/ValidationUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/ValidationUtilsShould.java
deleted file mode 100644
index 60dfe2e..0000000
--- a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/ValidationUtilsShould.java
+++ /dev/null
@@ -1,71 +0,0 @@
-/*
- * Copyright 2019 Thunderberry.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      https://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package nl.altindag.ssl.util;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.assertj.core.api.Assertions.assertThatThrownBy;
-
-import org.junit.jupiter.api.Test;
-
-class ValidationUtilsShould {
-    static class MyException extends  RuntimeException {
-        public MyException(String message) {
-            super(message);
-        }
-    }
-
-    @Test
-    void requireNotNullNoopsWhenNotNull() {
-        assertThat(ValidationUtils.requireNotNull(18, () -> new IllegalArgumentException("Custom message")))
-            .isEqualTo(18);
-    }
-
-    @Test
-    void requireNotNullThrowsSuppliedExceptionWhenNull() {
-        assertThatThrownBy(() -> ValidationUtils.requireNotNull((Long) null, () -> new MyException("Custom message")))
-            .isInstanceOf(MyException.class)
-            .hasMessage("Custom message");
-    }
-
-    @Test
-    void requireNotEmptyNoopsWhenNotNull() {
-        assertThat(ValidationUtils.requireNotEmpty(new String[] {"Hello"}, () -> new IllegalArgumentException("Custom message")))
-                .hasSize(1)
-                .contains("Hello");
-    }
-
-    @Test
-    void requireNotEmptyThrowsSuppliedExceptionWhenEmpty() {
-        assertThatThrownBy(() -> ValidationUtils.requireNotEmpty(new String[] {}, () -> new MyException("Custom message")))
-                .isInstanceOf(MyException.class)
-                .hasMessage("Custom message");
-    }
-
-    @Test
-    void requireNotEmptyThrowsSuppliedExceptionWhenNull() {
-        assertThatThrownBy(() -> ValidationUtils.requireNotEmpty((String []) null, () -> new MyException("Custom message")))
-                .isInstanceOf(MyException.class)
-                .hasMessage("Custom message");
-    }
-
-    @Test
-    void requireNotEmptyThrowsIllegalArgumentExceptionWhenNoCustomExceptionIsProvided() {
-        assertThatThrownBy(() -> ValidationUtils.requireNotEmpty((String []) null, "Custom message"))
-                .isInstanceOf(IllegalArgumentException.class)
-                .hasMessage("Custom message");
-    }
-
-}
\ No newline at end of file
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/IOUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/IOUtilsShould.java
new file mode 100644
index 0000000..f9578cf
--- /dev/null
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/IOUtilsShould.java
@@ -0,0 +1,153 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.util.internal;
+
+import nl.altindag.ssl.IOTestUtils;
+import nl.altindag.ssl.TestConstants;
+import nl.altindag.ssl.exception.GenericIOException;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.MockedStatic;
+import org.mockito.Mockito;
+import org.mockito.junit.jupiter.MockitoExtension;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.security.KeyStore;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.security.cert.CertificateException;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatCode;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.doThrow;
+import static org.mockito.Mockito.mockStatic;
+
+/**
+ * @author Hakan Altindag
+ */
+@ExtendWith(MockitoExtension.class)
+class IOUtilsShould {
+
+    @Test
+    void getContent() {
+        ByteArrayInputStream inputStream = new ByteArrayInputStream("Hello".getBytes());
+        String content = IOUtils.getContent(inputStream);
+        assertThat(content).isEqualTo("Hello");
+    }
+
+    @Test
+    void getContentThrowsGenericIOExceptionWhenStreamFailsToClose() throws IOException {
+        ByteArrayInputStream inputStream = Mockito.spy(new ByteArrayInputStream("Hello".getBytes()));
+        doThrow(new IOException("Could not read the content")).when(inputStream).close();
+
+        assertThatThrownBy(() -> IOUtils.getContent(inputStream))
+                .isInstanceOf(GenericIOException.class)
+                .hasRootCauseMessage("Could not read the content");
+    }
+
+    @Test
+    void closeSilentlyDoesNotThrowExceptionWhenCloseFails() throws IOException {
+        ByteArrayInputStream inputStream = Mockito.spy(new ByteArrayInputStream("Hello".getBytes()));
+        doThrow(new IOException("Could not read the content")).when(inputStream).close();
+
+        assertThatCode(() -> IOUtils.closeSilently(inputStream))
+                .doesNotThrowAnyException();
+    }
+
+    @Test
+    void createCopy() {
+        ByteArrayInputStream inputStream = new ByteArrayInputStream("Hello".getBytes());
+        byte[] copy = IOUtils.copyToByteArray(inputStream);
+
+        String content = new String(copy, StandardCharsets.UTF_8);
+        assertThat(content).isEqualTo("Hello");
+    }
+
+    @Test
+    void getResourceAsStream() throws IOException {
+        try (InputStream inputStream = IOUtils.getResourceAsStream("pem/badssl-certificate.pem")) {
+            assertThat(inputStream).isNotNull();
+        }
+    }
+
+    @Test
+    void getFileAsStream() throws IOException {
+        Path path = IOTestUtils.copyFileToHomeDirectory("pem/", "badssl-certificate.pem");
+
+        try (InputStream inputStream = IOUtils.getFileAsStream(path)) {
+            assertThat(inputStream).isNotNull();
+        }
+
+        Files.delete(path);
+    }
+
+    @Test
+    void getFileAsStreamThrowsGenericIOExceptionWhenSomethingGoesWrong() {
+        Path path = Paths.get("/path/to/non-existing.file");
+        assertThatThrownBy(() -> IOUtils.getFileAsStream(path))
+                .isInstanceOf(GenericIOException.class);
+    }
+
+    @Test
+    void createCopyThrowsGenericIOExceptionWhenReadingFails() throws IOException {
+        ByteArrayInputStream inputStream = Mockito.spy(new ByteArrayInputStream("Hello".getBytes()));
+        doThrow(new IOException("Could not read the content")).when(inputStream).read(any());
+
+        assertThatThrownBy(() -> IOUtils.copyToByteArray(inputStream))
+                .isInstanceOf(GenericIOException.class)
+                .hasRootCauseMessage("Could not read the content");
+    }
+
+    @Test
+    void writeThrowsGenericIOExceptionWhenSomethingUnexpectedIsHappening() throws IOException {
+        Path path = Paths.get(TestConstants.HOME_DIRECTORY).resolve(Paths.get("my-non-existing-file.jks"));
+        byte[] bytes = "Hello World".getBytes(StandardCharsets.UTF_8);
+        Files.createFile(path);
+
+        try (MockedStatic<Files> filesMockedStatic = mockStatic(Files.class)) {
+            filesMockedStatic.when(() -> IOUtils.write(path, bytes)).thenThrow(new IOException("Kaboom!"));
+
+            assertThatThrownBy(() -> IOUtils.write(path, bytes))
+                    .isInstanceOf(GenericIOException.class);
+        }
+
+        Files.delete(path);
+    }
+
+    @Test
+    void writeWithOutputStreamThrowsGenericIOExceptionWhenSomethingUnexpectedIsHappening() throws IOException, CertificateException, KeyStoreException, NoSuchAlgorithmException {
+        Path path = Paths.get(TestConstants.HOME_DIRECTORY).resolve(Paths.get("my-non-existing-file.jks"));
+
+        char[] password = "hello".toCharArray();
+        KeyStore keyStore = Mockito.mock(KeyStore.class);
+        doThrow(new KeyStoreException("Kaboom!"))
+                .when(keyStore).store(any(), any());
+
+        assertThatThrownBy(() -> IOUtils.write(path, outputStream -> keyStore.store(outputStream, password)))
+                .isInstanceOf(GenericIOException.class);
+
+        Files.delete(path);
+    }
+
+}
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/UriUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/UriUtilsShould.java
new file mode 100644
index 0000000..50936e6
--- /dev/null
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/UriUtilsShould.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.util.internal;
+
+import org.junit.jupiter.api.Test;
+
+import java.net.URI;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+
+/**
+ * @author Hakan Altindag
+ */
+class UriUtilsShould {
+
+    @Test
+    void extractHost() {
+        String host = UriUtils.extractHost("https://my-first-domain.com");
+        assertThat(host).isEqualTo("my-first-domain.com");
+    }
+
+    @Test
+    void throwExceptionWhenInvalidUriIsProvided() {
+        assertThatThrownBy(() -> UriUtils.extractHost("https://my-first-domain.com/q/h?s=^IXIC"))
+                .isInstanceOf(IllegalArgumentException.class);
+    }
+
+    @Test
+    void throwExceptionWhenNullIsProvidedWhenValidateIsCalled() {
+        assertThatThrownBy(() -> UriUtils.validate(null))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessage("Host should be present");
+    }
+
+    @Test
+    void throwExceptionWhenHostIsProvidedWithoutAValidPortIsProvidedWhenValidateIsCalled() {
+        URI host = URI.create("https://localhost/");
+        assertThatThrownBy(() -> UriUtils.validate(host))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessage("Port should be defined for the given input: [https://localhost/]");
+    }
+
+    @Test
+    void throwExceptionWhenHostIsProvidedWithoutAValidHostnameIsProvidedWhenValidateIsCalled() {
+        URI host = URI.create("https:/");
+        assertThatThrownBy(() -> UriUtils.validate(host))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessage("Hostname should be defined for the given input: [https:/]");
+    }
+
+}
diff --git a/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/ValidationUtilsShould.java b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/ValidationUtilsShould.java
new file mode 100644
index 0000000..39529fc
--- /dev/null
+++ b/sslcontext-kickstart/src/test/java/nl/altindag/ssl/util/internal/ValidationUtilsShould.java
@@ -0,0 +1,71 @@
+/*
+ * Copyright 2019 Thunderberry.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      https://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package nl.altindag.ssl.util.internal;
+
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+
+class ValidationUtilsShould {
+    static class MyException extends  RuntimeException {
+        public MyException(String message) {
+            super(message);
+        }
+    }
+
+    @Test
+    void requireNotNullNoopsWhenNotNull() {
+        assertThat(ValidationUtils.requireNotNull(18, () -> new IllegalArgumentException("Custom message")))
+            .isEqualTo(18);
+    }
+
+    @Test
+    void requireNotNullThrowsSuppliedExceptionWhenNull() {
+        assertThatThrownBy(() -> ValidationUtils.requireNotNull((Long) null, () -> new MyException("Custom message")))
+            .isInstanceOf(MyException.class)
+            .hasMessage("Custom message");
+    }
+
+    @Test
+    void requireNotEmptyNoopsWhenNotNull() {
+        assertThat(ValidationUtils.requireNotEmpty(new String[] {"Hello"}, () -> new IllegalArgumentException("Custom message")))
+                .hasSize(1)
+                .contains("Hello");
+    }
+
+    @Test
+    void requireNotEmptyThrowsSuppliedExceptionWhenEmpty() {
+        assertThatThrownBy(() -> ValidationUtils.requireNotEmpty(new String[] {}, () -> new MyException("Custom message")))
+                .isInstanceOf(MyException.class)
+                .hasMessage("Custom message");
+    }
+
+    @Test
+    void requireNotEmptyThrowsSuppliedExceptionWhenNull() {
+        assertThatThrownBy(() -> ValidationUtils.requireNotEmpty((String []) null, () -> new MyException("Custom message")))
+                .isInstanceOf(MyException.class)
+                .hasMessage("Custom message");
+    }
+
+    @Test
+    void requireNotEmptyThrowsIllegalArgumentExceptionWhenNoCustomExceptionIsProvided() {
+        assertThatThrownBy(() -> ValidationUtils.requireNotEmpty((String []) null, "Custom message"))
+                .isInstanceOf(IllegalArgumentException.class)
+                .hasMessage("Custom message");
+    }
+
+}
\ No newline at end of file

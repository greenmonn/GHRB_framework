diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java
index 11956bd..a63f5be 100644
--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java
+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java
@@ -103,7 +103,7 @@ public class AbstractJavaCodegenTest {
     }
 
     @Test
-    public void convertVarName() throws Exception {
+    public void convertVarName() {
         Assert.assertEquals(fakeJavaCodegen.toVarName("name"), "name");
         Assert.assertEquals(fakeJavaCodegen.toVarName("$name"), "$name");
         Assert.assertEquals(fakeJavaCodegen.toVarName("nam$$e"), "nam$$e");
@@ -119,10 +119,15 @@ public class AbstractJavaCodegenTest {
         Assert.assertEquals(fakeJavaCodegen.toVarName("1A"), "_1A");
         Assert.assertEquals(fakeJavaCodegen.toVarName("1AAAA"), "_1AAAA");
         Assert.assertEquals(fakeJavaCodegen.toVarName("1AAaa"), "_1aAaa");
+
+        AbstractJavaCodegen withCaml = new P_AbstractJavaCodegen();
+        withCaml.setCamelCaseDollarSign(true);
+        Assert.assertEquals(withCaml.toVarName("$name"), "$Name");
+        Assert.assertEquals(withCaml.toVarName("1AAaa"), "_1AAaa");
     }
 
     @Test
-    public void convertModelName() throws Exception {
+    public void convertModelName() {
         Assert.assertEquals(fakeJavaCodegen.toModelName("name"), "Name");
         Assert.assertEquals(fakeJavaCodegen.toModelName("$name"), "Name");
         Assert.assertEquals(fakeJavaCodegen.toModelName("nam#e"), "Name");
diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/kotlin/KotlinReservedWordsTest.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/kotlin/KotlinReservedWordsTest.java
index bd06fde..0d12b10 100644
--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/kotlin/KotlinReservedWordsTest.java
+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/kotlin/KotlinReservedWordsTest.java
@@ -66,7 +66,7 @@ public class KotlinReservedWordsTest {
         final DefaultCodegen codegen = new KotlinClientCodegen();
         final Schema schema = new Schema();
         final String escaped = "`" + reservedWord + "`";
-        final String titleCased = StringUtils.camelize(reservedWord, false);
+        final String titleCased = StringUtils.camelize(reservedWord);
 
         codegen.setOpenAPI(openAPI);
         CodegenModel model = codegen.fromModel(reservedWord, schema);
@@ -106,7 +106,7 @@ public class KotlinReservedWordsTest {
         final DefaultCodegen codegen = new KotlinClientCodegen();
 
         final String escaped = "`" + reservedWord + "`";
-        final String titleCased = StringUtils.camelize(reservedWord, false);
+        final String titleCased = StringUtils.camelize(reservedWord);
 
         Schema linked = openAPI.getComponents().getSchemas().get("Linked");
 
diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/StringUtilsTest.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/StringUtilsTest.java
index 2001a98..f8a0d6d 100644
--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/StringUtilsTest.java
+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/utils/StringUtilsTest.java
@@ -3,6 +3,8 @@ package org.openapitools.codegen.utils;
 import org.testng.Assert;
 import org.testng.annotations.Test;
 
+import static org.openapitools.codegen.utils.CamelizeOption.LOWERCASE_FIRST_CHAR;
+import static org.openapitools.codegen.utils.CamelizeOption.LOWERCASE_FIRST_LETTER;
 import static org.openapitools.codegen.utils.StringUtils.*;
 
 public class StringUtilsTest {
@@ -21,14 +23,18 @@ public class StringUtilsTest {
         Assert.assertEquals(camelize("some_value"), "SomeValue");
         Assert.assertEquals(camelize("$type"), "$Type");
 
-        Assert.assertEquals(camelize("abcd", true), "abcd");
-        Assert.assertEquals(camelize("some-value", true), "someValue");
-        Assert.assertEquals(camelize("some_value", true), "someValue");
-        Assert.assertEquals(camelize("Abcd", true), "abcd");
-        Assert.assertEquals(camelize("$type", true), "$type");
+        Assert.assertEquals(camelize("abcd", LOWERCASE_FIRST_LETTER), "abcd");
+        Assert.assertEquals(camelize("some-value", LOWERCASE_FIRST_LETTER), "someValue");
+        Assert.assertEquals(camelize("some_value", LOWERCASE_FIRST_LETTER), "someValue");
+        Assert.assertEquals(camelize("Abcd", LOWERCASE_FIRST_LETTER), "abcd");
+        Assert.assertEquals(camelize("$type", LOWERCASE_FIRST_LETTER), "$type");
 
-        Assert.assertEquals(camelize("123", true), "123");
-        Assert.assertEquals(camelize("$123", true), "$123");
+        Assert.assertEquals(camelize("123", LOWERCASE_FIRST_LETTER), "123");
+        Assert.assertEquals(camelize("$123", LOWERCASE_FIRST_LETTER), "$123");
+
+
+        Assert.assertEquals(camelize("some-value", LOWERCASE_FIRST_CHAR), "someValue");
+        Assert.assertEquals(camelize("$type", LOWERCASE_FIRST_CHAR), "$Type");
     }
 
     @Test

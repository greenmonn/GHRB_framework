diff --git a/modules/openapi-generator/src/test/java/org/openapitools/codegen/markdown/MarkdownSampleGeneratorTest.java b/modules/openapi-generator/src/test/java/org/openapitools/codegen/markdown/MarkdownSampleGeneratorTest.java
index 803c000..e7e099a 100644
--- a/modules/openapi-generator/src/test/java/org/openapitools/codegen/markdown/MarkdownSampleGeneratorTest.java
+++ b/modules/openapi-generator/src/test/java/org/openapitools/codegen/markdown/MarkdownSampleGeneratorTest.java
@@ -1,55 +1,29 @@
-/*
 package org.openapitools.codegen.markdown;
 
-import java.io.File;
-import java.io.IOException;
-import java.nio.charset.StandardCharsets;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.util.List;
-
-import org.apache.commons.io.FileUtils;
-import org.openapitools.codegen.DefaultGenerator;
-import org.openapitools.codegen.config.CodegenConfigurator;
+import io.swagger.v3.oas.models.OpenAPI;
+import io.swagger.v3.oas.models.Operation;
+import org.openapitools.codegen.CodegenOperation;
+import org.openapitools.codegen.CodegenParameter;
+import org.openapitools.codegen.TestUtils;
+import org.openapitools.codegen.languages.MarkdownDocumentationCodegen;
 import org.testng.Assert;
-import org.testng.annotations.BeforeClass;
 import org.testng.annotations.Test;
 
 public class MarkdownSampleGeneratorTest {
-    private File outputTempDirectory;
-    private List<File> generatedFiles;
-
-    @BeforeClass
-    public void beforeClassGenerateTestMarkup() throws Exception {
-        // set line break to \n across all platforms
-        System.setProperty("line.separator", "\n");
-
-        this.outputTempDirectory = Files.createTempDirectory("test-markdown-sample-generator.").toFile();
-
-        final CodegenConfigurator configurator = new CodegenConfigurator().setGeneratorName("markdown")
-                .setInputSpec("src/test/resources/3_0/markdown/issue_6096.yaml")
-                .setOutputDir(outputTempDirectory.getAbsolutePath());
-
-        DefaultGenerator generator = new DefaultGenerator();
-        this.generatedFiles = generator.opts(configurator.toClientOptInput()).generate();
-    }
-
-    @Test
-    public void testSampleMarkdownGeneration() throws IOException {
-        Path expectedFiles = new File("src/test/resources/3_0/markdown/expected/").toPath();
-        for (File generated : this.generatedFiles) {
-            if (!generated.toString().endsWith(".md")) {
-                continue;
-            }
-            Path expectedPath = this.outputTempDirectory.toPath().relativize(generated.toPath());
-            File expected = expectedFiles.resolve(expectedPath).toFile();
-
-            Assert.assertTrue(expected.exists(), "Could not find " + expected);
 
-            Assert.assertEquals(FileUtils.readFileToString(generated, StandardCharsets.UTF_8).replace("\n", "").replace("\r", ""),
-                    FileUtils.readFileToString(expected, StandardCharsets.UTF_8).replace("\n", "").replace("\r", ""));
-        }
+    @Test(description = "test special characters in MIME type")
+    public void testSpecialCharactersInMimeType() throws Exception {
+        // for https://github.com/OpenAPITools/openapi-generator/issues/15923
+        // without the fix, the following will throw exception "IllegalArgument character to be escaped is missing"
+        final OpenAPI openAPI = TestUtils.parseFlattenSpec("src/test/resources/3_0/issue_15923.yaml");
+        final MarkdownDocumentationCodegen codegen = new MarkdownDocumentationCodegen();
+        codegen.setOpenAPI(openAPI);
+
+        final String requestPath = "/v1/MyRequest";
+        Operation textOperation = openAPI.getPaths().get(requestPath).getPut();
+        CodegenOperation operation = codegen.fromOperation(requestPath, "put", textOperation, null);
+        CodegenParameter codegenParameter = operation.allParams.get(0);
+        Assert.assertNotNull(codegenParameter);
     }
 
-}
-*/
+}
\ No newline at end of file

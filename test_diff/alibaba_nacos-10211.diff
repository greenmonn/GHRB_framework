diff --git a/client/src/test/java/com/alibaba/nacos/client/auth/ram/injector/NamingResourceInjectorTest.java b/client/src/test/java/com/alibaba/nacos/client/auth/ram/injector/NamingResourceInjectorTest.java
index 97f36ec..ea1d7d9 100644
--- a/client/src/test/java/com/alibaba/nacos/client/auth/ram/injector/NamingResourceInjectorTest.java
+++ b/client/src/test/java/com/alibaba/nacos/client/auth/ram/injector/NamingResourceInjectorTest.java
@@ -49,6 +49,7 @@ public class NamingResourceInjectorTest {
         ramContext.setAccessKey(PropertyKeyConst.ACCESS_KEY);
         ramContext.setSecretKey(PropertyKeyConst.SECRET_KEY);
         stsCredential = new StsCredential();
+        StsConfig.getInstance().setRamRoleName(null);
     }
     
     @After
diff --git a/client/src/test/java/com/alibaba/nacos/client/env/NacosClientPropertiesTest.java b/client/src/test/java/com/alibaba/nacos/client/env/NacosClientPropertiesTest.java
index 8b6d3ef..ce696d9 100644
--- a/client/src/test/java/com/alibaba/nacos/client/env/NacosClientPropertiesTest.java
+++ b/client/src/test/java/com/alibaba/nacos/client/env/NacosClientPropertiesTest.java
@@ -44,18 +44,18 @@ public class NacosClientPropertiesTest {
     
     @Test
     public void testGetPropertyMultiLayer() {
-       
+        
         NacosClientProperties.PROTOTYPE.setProperty("top.layer", "top");
-    
+        
         final NacosClientProperties layerAEnv = NacosClientProperties.PROTOTYPE.derive();
         layerAEnv.setProperty("a.layer", "a");
-    
+        
         final NacosClientProperties layerBEnv = layerAEnv.derive();
         layerBEnv.setProperty("b.layer", "b");
-    
+        
         final NacosClientProperties layerCEnv = layerBEnv.derive();
         layerCEnv.setProperty("c.layer", "c");
-    
+        
         String value = layerCEnv.getProperty("c.layer");
         Assert.assertEquals("c", value);
         
@@ -115,13 +115,6 @@ public class NacosClientPropertiesTest {
     }
     
     @Test
-    public void testGetPropertyDefaultSetting() {
-        
-        final String value = NacosClientProperties.PROTOTYPE.getProperty("nacos.home.default.test");
-        Assert.assertEquals("/home/default_setting", value);
-    }
-    
-    @Test
     public void setProperty() {
         NacosClientProperties.PROTOTYPE.setProperty("nacos.set.property", "true");
         final String ret = NacosClientProperties.PROTOTYPE.getProperty("nacos.set.property");
@@ -130,10 +123,10 @@ public class NacosClientPropertiesTest {
     
     @Test
     public void setPropertyWithScope() {
-    
+        
         final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
         properties.setProperty("nacos.set.property.scope", "config");
-    
+        
         String ret = NacosClientProperties.PROTOTYPE.getProperty("nacos.set.property.scope");
         Assert.assertNull(ret);
         
@@ -145,7 +138,7 @@ public class NacosClientPropertiesTest {
     public void testAddProperties() {
         Properties properties = new Properties();
         properties.setProperty("nacos.add.properties", "true");
-    
+        
         NacosClientProperties.PROTOTYPE.addProperties(properties);
         
         final String ret = NacosClientProperties.PROTOTYPE.getProperty("nacos.add.properties");
@@ -158,10 +151,10 @@ public class NacosClientPropertiesTest {
         
         Properties properties = new Properties();
         properties.setProperty("nacos.add.properties.scope", "config");
-    
+        
         final NacosClientProperties nacosClientProperties = NacosClientProperties.PROTOTYPE.derive();
         nacosClientProperties.addProperties(properties);
-    
+        
         String ret = NacosClientProperties.PROTOTYPE.getProperty("nacos.add.properties.scope");
         Assert.assertNull(ret);
         
@@ -174,13 +167,13 @@ public class NacosClientPropertiesTest {
     public void testTestDerive() {
         Properties properties = new Properties();
         properties.setProperty("nacos.derive.properties.scope", "derive");
-    
+        
         final NacosClientProperties nacosClientProperties = NacosClientProperties.PROTOTYPE.derive(properties);
-    
+        
         final String value = nacosClientProperties.getProperty("nacos.derive.properties.scope");
         
         Assert.assertEquals("derive", value);
-    
+        
     }
     
     @Test
@@ -198,16 +191,16 @@ public class NacosClientPropertiesTest {
     public void testContainsKeyMultiLayers() {
         
         NacosClientProperties.PROTOTYPE.setProperty("top.layer", "top");
-    
+        
         final NacosClientProperties layerAEnv = NacosClientProperties.PROTOTYPE.derive();
         layerAEnv.setProperty("a.layer", "a");
-    
+        
         final NacosClientProperties layerBEnv = layerAEnv.derive();
         layerBEnv.setProperty("b.layer", "b");
-    
+        
         final NacosClientProperties layerCEnv = layerBEnv.derive();
         layerCEnv.setProperty("c.layer", "c");
-    
+        
         boolean exist = layerCEnv.containsKey("c.layer");
         Assert.assertTrue(exist);
         
@@ -219,7 +212,7 @@ public class NacosClientPropertiesTest {
         
         exist = layerCEnv.containsKey("top.layer");
         Assert.assertTrue(exist);
-    
+        
     }
     
     @Test
@@ -227,7 +220,7 @@ public class NacosClientPropertiesTest {
         NacosClientProperties.PROTOTYPE.setProperty("nacos.contains.global.scope", "global");
         final NacosClientProperties namingProperties = NacosClientProperties.PROTOTYPE.derive();
         namingProperties.setProperty("nacos.contains.naming.scope", "naming");
-    
+        
         boolean ret = NacosClientProperties.PROTOTYPE.containsKey("nacos.contains.global.scope");
         Assert.assertTrue(ret);
         
@@ -252,13 +245,13 @@ public class NacosClientPropertiesTest {
     
     @Test
     public void testAsPropertiesWithScope() {
-    
+        
         NacosClientProperties.PROTOTYPE.setProperty("nacos.as.properties.global.scope", "global");
         NacosClientProperties.PROTOTYPE.setProperty("nacos.server.addr.scope", "global");
-    
+        
         final NacosClientProperties configProperties = NacosClientProperties.PROTOTYPE.derive();
         configProperties.setProperty("nacos.server.addr.scope", "config");
-    
+        
         final Properties properties = configProperties.asProperties();
         Assert.assertNotNull(properties);
         
@@ -271,7 +264,7 @@ public class NacosClientPropertiesTest {
     
     @Test
     public void testGetPropertyWithScope() {
-    
+        
         NacosClientProperties.PROTOTYPE.setProperty("nacos.global.scope", "global");
         
         final NacosClientProperties configProperties = NacosClientProperties.PROTOTYPE.derive();
@@ -279,7 +272,7 @@ public class NacosClientPropertiesTest {
         
         final NacosClientProperties namingProperties = NacosClientProperties.PROTOTYPE.derive();
         namingProperties.setProperty("nacos.naming.scope", "naming");
-    
+        
         String ret = NacosClientProperties.PROTOTYPE.getProperty("nacos.global.scope");
         Assert.assertEquals("global", ret);
         
@@ -313,13 +306,9 @@ public class NacosClientPropertiesTest {
         Assert.assertEquals(NacosClientProperties.PROTOTYPE.getPropertyFrom(SourceType.JVM, "nacos.home.default.test"),
                 "/home/jvm_args");
         Assert.assertEquals(
-                NacosClientProperties.PROTOTYPE.getPropertyFrom(SourceType.DEFAULT_SETTING, "nacos.home.default.test"),
-                "/home/default_setting");
-        Assert.assertEquals(
                 NacosClientProperties.PROTOTYPE.getPropertyFrom(SourceType.PROPERTIES, "nacos.home.default.test"),
                 "/home/properties_args");
-        Assert.assertEquals(
-                NacosClientProperties.PROTOTYPE.getPropertyFrom(null, "nacos.home.default.test"),
+        Assert.assertEquals(NacosClientProperties.PROTOTYPE.getPropertyFrom(null, "nacos.home.default.test"),
                 NacosClientProperties.PROTOTYPE.getProperty("nacos.home.default.test"));
     }
     
diff --git a/client/src/test/java/com/alibaba/nacos/client/naming/utils/InitUtilsTest.java b/client/src/test/java/com/alibaba/nacos/client/naming/utils/InitUtilsTest.java
index aefc3b3..b64cca4 100644
--- a/client/src/test/java/com/alibaba/nacos/client/naming/utils/InitUtilsTest.java
+++ b/client/src/test/java/com/alibaba/nacos/client/naming/utils/InitUtilsTest.java
@@ -19,35 +19,67 @@ package com.alibaba.nacos.client.naming.utils;
 import com.alibaba.nacos.api.PropertyKeyConst;
 import com.alibaba.nacos.api.SystemPropertyKeyConst;
 import com.alibaba.nacos.client.env.NacosClientProperties;
+import org.junit.After;
 import org.junit.Assert;
 import org.junit.Test;
 
 public class InitUtilsTest {
     
-    @Test
-    public void testInitWebRootContext() {
-        String ctx = "/aaa";
-        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
-        properties.setProperty(PropertyKeyConst.CONTEXT_PATH, ctx);
-        InitUtils.initWebRootContext(properties);
-        Assert.assertEquals(ctx, UtilAndComs.webContext);
-        Assert.assertEquals(ctx + "/v1/ns", UtilAndComs.nacosUrlBase);
-        Assert.assertEquals(ctx + "/v1/ns/instance", UtilAndComs.nacosUrlInstance);
+    @After
+    public void tearDown() {
+        System.clearProperty(SystemPropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING);
+        System.clearProperty(SystemPropertyKeyConst.ANS_NAMESPACE);
+        System.clearProperty(PropertyKeyConst.NAMESPACE);
+        System.clearProperty(SystemPropertyKeyConst.IS_USE_ENDPOINT_PARSING_RULE);
+        System.clearProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_ENDPOINT_URL);
+        System.clearProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_ENDPOINT_PORT);
+        UtilAndComs.webContext = "/nacos";
+        UtilAndComs.nacosUrlBase = "/nacos/v1/ns";
+        UtilAndComs.nacosUrlInstance = "/nacos/v1/ns/instance";
     }
     
     /**
      * current namespace priority 1. system.Properties 2. user.Properties 3. default value
      */
     @Test
-    public void testInitNamespaceForNamingDefault() {
+    public void testInitNamespaceForDefault() {
         //DEFAULT
         final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        String actual = InitUtils.initNamespaceForNaming(properties);
+        Assert.assertEquals(UtilAndComs.DEFAULT_NAMESPACE_ID, actual);
+    }
+    
+    @Test
+    public void testInitNamespaceFromAnsWithCloudParsing() {
+        String expect = "ans";
+        System.setProperty(SystemPropertyKeyConst.ANS_NAMESPACE, expect);
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        properties.setProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING, "true");
+        String actual = InitUtils.initNamespaceForNaming(properties);
+        Assert.assertEquals(expect, actual);
+    }
+    
+    @Test
+    public void testInitNamespaceFromAliwareWithCloudParsing() {
+        String expect = "aliware";
+        System.setProperty(SystemPropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING, "true");
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        properties.setProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_NAMESPACE, expect);
+        String actual = InitUtils.initNamespaceForNaming(properties);
+        Assert.assertEquals(expect, actual);
+    }
+    
+    @Test
+    public void testInitNamespaceFromJvmNamespaceWithCloudParsing() {
+        String expect = "jvm_namespace";
+        System.setProperty(PropertyKeyConst.NAMESPACE, expect);
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
         String ns = InitUtils.initNamespaceForNaming(properties);
-        Assert.assertEquals("public", ns);
+        Assert.assertEquals(expect, ns);
     }
     
     @Test
-    public void testInitNamespaceForNamingFromProp() {
+    public void testInitNamespaceFromPropNamespaceWithCloudParsing() {
         final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
         String expect = "ns1";
         properties.setProperty(PropertyKeyConst.NAMESPACE, expect);
@@ -56,40 +88,113 @@ public class InitUtilsTest {
     }
     
     @Test
-    public void testInitNamespaceForNamingFromSystem() {
-        try {
-            String expect1 = "ns1";
-            System.setProperty(PropertyKeyConst.NAMESPACE, expect1);
-            final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
-            String ns = InitUtils.initNamespaceForNaming(properties);
-            Assert.assertEquals(expect1, ns);
-        } finally {
-            System.clearProperty(PropertyKeyConst.NAMESPACE);
-        }
+    public void testInitNamespaceFromDefaultNamespaceWithCloudParsing() {
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        properties.setProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING, "true");
+        String actual = InitUtils.initNamespaceForNaming(properties);
+        Assert.assertEquals(UtilAndComs.DEFAULT_NAMESPACE_ID, actual);
     }
     
-    /**
-     * 1. System.property  tenant.id 2. System.property  ans.namespace 2. System.env  ALIBABA_ALIWARE_NAMESPACE
-     */
     @Test
-    public void testInitNamespaceForNamingFromCloud() {
-        try {
-            String expect1 = "ns1";
-            System.setProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING, "true");
-            System.setProperty(SystemPropertyKeyConst.ANS_NAMESPACE, expect1);
-            final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
-            properties.setProperty(PropertyKeyConst.NAMESPACE, "cccccc");
-            String ns = InitUtils.initNamespaceForNaming(properties);
-            Assert.assertEquals(expect1, ns);
-        } finally {
-            System.clearProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING);
-            System.clearProperty(SystemPropertyKeyConst.ANS_NAMESPACE);
-            
-        }
+    public void testInitNamespaceFromJvmNamespaceWithoutCloudParsing() {
+        System.setProperty(SystemPropertyKeyConst.ANS_NAMESPACE, "ans");
+        String expect = "jvm_namespace";
+        System.setProperty(PropertyKeyConst.NAMESPACE, expect);
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        properties.setProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING, "false");
+        String ns = InitUtils.initNamespaceForNaming(properties);
+        Assert.assertEquals(expect, ns);
+    }
+    
+    @Test
+    public void testInitNamespaceFromPropNamespaceWithoutCloudParsing() {
+        System.setProperty(SystemPropertyKeyConst.ANS_NAMESPACE, "ans");
+        System.setProperty(SystemPropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING, "false");
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        String expect = "ns1";
+        properties.setProperty(PropertyKeyConst.NAMESPACE, expect);
+        String ns = InitUtils.initNamespaceForNaming(properties);
+        Assert.assertEquals(expect, ns);
+    }
+    
+    @Test
+    public void testInitNamespaceFromDefaultNamespaceWithoutCloudParsing() {
+        System.setProperty(SystemPropertyKeyConst.ANS_NAMESPACE, "ans");
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        properties.setProperty(PropertyKeyConst.IS_USE_CLOUD_NAMESPACE_PARSING, "false");
+        String actual = InitUtils.initNamespaceForNaming(properties);
+        Assert.assertEquals(UtilAndComs.DEFAULT_NAMESPACE_ID, actual);
+    }
+    
+    @Test
+    public void testInitWebRootContext() {
+        String ctx = "/aaa";
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        properties.setProperty(PropertyKeyConst.CONTEXT_PATH, ctx);
+        InitUtils.initWebRootContext(properties);
+        Assert.assertEquals(ctx, UtilAndComs.webContext);
+        Assert.assertEquals(ctx + "/v1/ns", UtilAndComs.nacosUrlBase);
+        Assert.assertEquals(ctx + "/v1/ns/instance", UtilAndComs.nacosUrlInstance);
+    }
+    
+    @Test
+    public void testInitWebRootContextWithoutValue() {
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        InitUtils.initWebRootContext(properties);
+        Assert.assertEquals("/nacos", UtilAndComs.webContext);
+        Assert.assertEquals("/nacos/v1/ns", UtilAndComs.nacosUrlBase);
+        Assert.assertEquals("/nacos/v1/ns/instance", UtilAndComs.nacosUrlInstance);
+    }
+    
+    @Test
+    public void testInitEndpointForNullProperties() {
+        Assert.assertEquals("", InitUtils.initEndpoint(null));
+    }
+    
+    @Test
+    public void testInitEndpointFromDefaultWithoutCloudParsing() {
+        System.setProperty(SystemPropertyKeyConst.IS_USE_ENDPOINT_PARSING_RULE, "false");
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        String actual = InitUtils.initEndpoint(properties);
+        Assert.assertEquals("", actual);
+    }
+    
+    @Test
+    public void testInitEndpointFromPropertiesWithoutCloudParsing() {
+        System.setProperty(SystemPropertyKeyConst.IS_USE_ENDPOINT_PARSING_RULE, "false");
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        String endpoint = "1.1.1.1";
+        String endpointPort = "1234";
+        properties.setProperty(PropertyKeyConst.ENDPOINT, endpoint);
+        properties.setProperty(PropertyKeyConst.ENDPOINT_PORT, endpointPort);
+        String actual = InitUtils.initEndpoint(properties);
+        Assert.assertEquals(endpoint + ":" + endpointPort, actual);
+    }
+    
+    @Test
+    public void testInitEndpointFromAliwareWithoutCloudParsing() {
+        String endpoint = "aliware_endpoint";
+        String endpointPort = "1234";
+        System.setProperty(SystemPropertyKeyConst.IS_USE_ENDPOINT_PARSING_RULE, "false");
+        System.setProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_ENDPOINT_URL, endpoint);
+        System.setProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_ENDPOINT_PORT, endpointPort);
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        properties.setProperty(PropertyKeyConst.ENDPOINT_PORT, endpointPort + "1");
+        String actual = InitUtils.initEndpoint(properties);
+        Assert.assertEquals("", actual);
     }
     
     @Test
-    public void testInitEndpoint() {
+    public void testInitEndpointFromDefaultWithCloudParsing() {
+        System.setProperty(SystemPropertyKeyConst.IS_USE_ENDPOINT_PARSING_RULE, "true");
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        String actual = InitUtils.initEndpoint(properties);
+        Assert.assertEquals("", actual);
+    }
+    
+    @Test
+    public void testInitEndpointFromPropertiesWithCloudParsing() {
+        System.setProperty(SystemPropertyKeyConst.IS_USE_ENDPOINT_PARSING_RULE, "true");
         final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
         String endpoint = "1.1.1.1";
         String endpointPort = "1234";
@@ -100,6 +205,19 @@ public class InitUtilsTest {
     }
     
     @Test
+    public void testInitEndpointFromAliwareWithCloudParsing() {
+        String endpoint = "aliware_endpoint";
+        String endpointPort = "1234";
+        System.setProperty(SystemPropertyKeyConst.IS_USE_ENDPOINT_PARSING_RULE, "true");
+        System.setProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_ENDPOINT_URL, endpoint);
+        System.setProperty(PropertyKeyConst.SystemEnv.ALIBABA_ALIWARE_ENDPOINT_PORT, endpointPort);
+        final NacosClientProperties properties = NacosClientProperties.PROTOTYPE.derive();
+        properties.setProperty(PropertyKeyConst.ENDPOINT_PORT, endpointPort + "1");
+        String actual = InitUtils.initEndpoint(properties);
+        Assert.assertEquals(endpoint + ":" + endpointPort, actual);
+    }
+    
+    @Test
     public void testInitEndpointAns() {
         try {
             System.setProperty(PropertyKeyConst.IS_USE_ENDPOINT_PARSING_RULE, "true");

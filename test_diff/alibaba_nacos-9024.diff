diff --git a/plugin/encryption/src/test/java/com/alibaba/nacos/plugin/encryption/handler/EncryptionHandlerTest.java b/plugin/encryption/src/test/java/com/alibaba/nacos/plugin/encryption/handler/EncryptionHandlerTest.java
index e3c8867..8eca559 100644
--- a/plugin/encryption/src/test/java/com/alibaba/nacos/plugin/encryption/handler/EncryptionHandlerTest.java
+++ b/plugin/encryption/src/test/java/com/alibaba/nacos/plugin/encryption/handler/EncryptionHandlerTest.java
@@ -30,17 +30,19 @@ import org.junit.Test;
  */
 public class EncryptionHandlerTest {
     
+    private EncryptionPluginService mockEncryptionPluginService;
+    
     @Before
     public void setUp() {
-        EncryptionPluginManager.join(new EncryptionPluginService() {
+        mockEncryptionPluginService = new EncryptionPluginService() {
             @Override
             public String encrypt(String secretKey, String content) {
-                return content;
+                return secretKey + content;
             }
             
             @Override
             public String decrypt(String secretKey, String content) {
-                return content;
+                return content.replaceFirst(secretKey, "");
             }
             
             @Override
@@ -50,19 +52,20 @@ public class EncryptionHandlerTest {
             
             @Override
             public String algorithmName() {
-                return "aes";
+                return "mockAlgo";
             }
-    
+            
             @Override
             public String encryptSecretKey(String secretKey) {
-                return secretKey;
+                return secretKey + secretKey;
             }
-    
+            
             @Override
             public String decryptSecretKey(String secretKey) {
-                return secretKey;
+                return generateSecretKey();
             }
-        });
+        };
+        EncryptionPluginManager.join(mockEncryptionPluginService);
     }
     
     @Test
@@ -76,4 +79,55 @@ public class EncryptionHandlerTest {
         Pair<String, String> pair = EncryptionHandler.decryptHandler("test-dataId", "12345678", "content");
         Assert.assertNotNull(pair);
     }
+    
+    @Test
+    public void testCornerCaseDataIdAlgoParse() {
+        String dataId = "cipher-";
+        Pair<String, String> pair = EncryptionHandler.encryptHandler(dataId, "content");
+        Assert.assertNotNull("should not throw exception when parsing enc algo for dataId '" + dataId + "'", pair);
+    }
+    
+    @Test
+    public void testUnknownAlgorithmNameEnc() {
+        String dataId = "cipher-mySM4-application";
+        String content = "content";
+        Pair<String, String> pair = EncryptionHandler.encryptHandler(dataId, content);
+        Assert.assertNotNull(pair);
+        Assert.assertEquals("should return original content if algorithm is not defined.", content, pair.getSecond());
+    }
+    
+    @Test
+    public void testUnknownAlgorithmNameDecrypt() {
+        String dataId = "cipher-mySM4-application";
+        String content = "content";
+        Pair<String, String> pair = EncryptionHandler.decryptHandler(dataId, "", content);
+        Assert.assertNotNull(pair);
+        Assert.assertEquals("should return original content if algorithm is not defined.", content, pair.getSecond());
+    }
+    
+    @Test
+    public void testEncrypt() {
+        String dataId = "cipher-mockAlgo-application";
+        String content = "content";
+        String sec = mockEncryptionPluginService.generateSecretKey();
+        Pair<String, String> pair = EncryptionHandler.encryptHandler(dataId, content);
+        Assert.assertNotNull(pair);
+        Assert.assertEquals("should return encrypted content.",
+                mockEncryptionPluginService.encrypt(sec, content), pair.getSecond());
+        Assert.assertEquals("should return encrypted secret key.",
+                mockEncryptionPluginService.encryptSecretKey(sec), pair.getFirst());
+    }
+    
+    @Test
+    public void testDecrypt() {
+        String dataId = "cipher-mockAlgo-application";
+        String oContent = "content";
+        String oSec = mockEncryptionPluginService.generateSecretKey();
+        String content = mockEncryptionPluginService.encrypt(oSec, oContent);
+        String sec = mockEncryptionPluginService.encryptSecretKey(oSec);
+        Pair<String, String> pair = EncryptionHandler.decryptHandler(dataId, sec, content);
+        Assert.assertNotNull(pair);
+        Assert.assertEquals("should return original content.", oContent, pair.getSecond());
+        Assert.assertEquals("should return original secret key.", oSec, pair.getFirst());
+    }
 }
\ No newline at end of file

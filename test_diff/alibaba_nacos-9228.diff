diff --git a/core/src/test/java/com/alibaba/nacos/core/cluster/MemberUtilTest.java b/core/src/test/java/com/alibaba/nacos/core/cluster/MemberUtilTest.java
index 88867ef..c1750db 100644
--- a/core/src/test/java/com/alibaba/nacos/core/cluster/MemberUtilTest.java
+++ b/core/src/test/java/com/alibaba/nacos/core/cluster/MemberUtilTest.java
@@ -17,27 +17,33 @@
 package com.alibaba.nacos.core.cluster;
 
 import com.alibaba.nacos.api.exception.NacosException;
-import com.alibaba.nacos.common.notify.NotifyCenter;
-import com.alibaba.nacos.common.utils.StringUtils;
-import com.alibaba.nacos.common.utils.ThreadUtils;
 import com.alibaba.nacos.sys.env.EnvUtil;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Mock;
 import org.mockito.junit.MockitoJUnitRunner;
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.mock.env.MockEnvironment;
-import org.springframework.mock.web.MockServletContext;
 
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileReader;
+import java.io.IOException;
 import java.net.ConnectException;
+import java.util.Collection;
 import java.util.Collections;
-import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicReference;
+import java.util.HashSet;
+import java.util.Set;
 
+import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 @RunWith(MockitoJUnitRunner.class)
 public class MemberUtilTest {
@@ -46,19 +52,27 @@ public class MemberUtilTest {
     
     private static final int PORT = 8848;
     
+    @Mock
+    private ServerMemberManager memberManager;
+    
     private ConfigurableEnvironment environment;
     
     private Member originalMember;
     
-    private ServerMemberManager memberManager;
+    private Set<String> mockMemberAddressInfos;
+    
+    private String nacosHome;
     
     @Before
     public void setUp() throws Exception {
         environment = new MockEnvironment();
         EnvUtil.setEnvironment(environment);
         EnvUtil.setIsStandalone(true);
-        memberManager = new ServerMemberManager(new MockServletContext());
+        nacosHome = EnvUtil.getNacosHome();
+        EnvUtil.setNacosHomePath(nacosHome + File.separator + "MemberUtilTest");
         originalMember = buildMember();
+        mockMemberAddressInfos = new HashSet<>();
+        when(memberManager.getMemberAddressInfos()).thenReturn(mockMemberAddressInfos);
     }
     
     private Member buildMember() {
@@ -67,8 +81,108 @@ public class MemberUtilTest {
     
     @After
     public void tearDown() throws NacosException {
-        NotifyCenter.deregisterPublisher(MembersChangeEvent.class);
-        memberManager.shutdown();
+        EnvUtil.setNacosHomePath(nacosHome);
+    }
+    
+    @Test
+    public void testCopy() {
+        Member expected = Member.builder().build();
+        expected.setIp("2.2.2.2");
+        expected.setPort(9999);
+        expected.setState(NodeState.SUSPICIOUS);
+        expected.setExtendVal(MemberMetaDataConstants.VERSION, "test");
+        expected.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);
+        MemberUtil.copy(expected, originalMember);
+        assertEquals(expected.getIp(), originalMember.getIp());
+        assertEquals(expected.getPort(), originalMember.getPort());
+        assertEquals(expected.getAddress(), originalMember.getAddress());
+        assertEquals(NodeState.SUSPICIOUS, originalMember.getState());
+        assertEquals("test", originalMember.getExtendVal(MemberMetaDataConstants.VERSION));
+        assertTrue(originalMember.getAbilities().getRemoteAbility().isSupportRemoteConnection());
+    }
+    
+    @Test
+    public void testSingleParseWithPort() {
+        Member actual = MemberUtil.singleParse(IP + ":2222");
+        assertEquals(IP, actual.getIp());
+        assertEquals(2222, actual.getPort());
+        assertEquals(IP + ":2222", actual.getAddress());
+        assertEquals(NodeState.UP, actual.getState());
+        assertEquals(true, actual.getExtendVal(MemberMetaDataConstants.READY_TO_UPGRADE));
+        assertEquals("1222", actual.getExtendVal(MemberMetaDataConstants.RAFT_PORT));
+        assertFalse(actual.getAbilities().getRemoteAbility().isSupportRemoteConnection());
+    }
+    
+    @Test
+    public void testSingleParseWithoutPort() {
+        Member actual = MemberUtil.singleParse(IP);
+        assertEquals(IP, actual.getIp());
+        assertEquals(PORT, actual.getPort());
+        assertEquals(IP + ":" + PORT, actual.getAddress());
+        assertEquals(NodeState.UP, actual.getState());
+        assertEquals(true, actual.getExtendVal(MemberMetaDataConstants.READY_TO_UPGRADE));
+        assertEquals("7848", actual.getExtendVal(MemberMetaDataConstants.RAFT_PORT));
+        assertFalse(actual.getAbilities().getRemoteAbility().isSupportRemoteConnection());
+    }
+    
+    @Test
+    public void testIsSupportedLongCon() {
+        assertFalse(MemberUtil.isSupportedLongCon(originalMember));
+        originalMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);
+        assertTrue(MemberUtil.isSupportedLongCon(originalMember));
+        originalMember.getAbilities().setRemoteAbility(null);
+        assertFalse(MemberUtil.isSupportedLongCon(originalMember));
+        originalMember.setAbilities(null);
+        assertFalse(MemberUtil.isSupportedLongCon(originalMember));
+    }
+    
+    @Test
+    public void testMultiParse() {
+        Collection<String> address = new HashSet<>();
+        address.add("1.1.1.1:3306");
+        address.add("1.1.1.1");
+        Collection<Member> actual = MemberUtil.multiParse(address);
+        assertEquals(2, actual.size());
+    }
+    
+    @Test
+    public void testSyncToFile() throws IOException {
+        File file = new File(EnvUtil.getClusterConfFilePath());
+        file.getParentFile().mkdirs();
+        assertTrue(file.createNewFile());
+        MemberUtil.syncToFile(Collections.singleton(originalMember));
+        try (BufferedReader reader = new BufferedReader(new FileReader(EnvUtil.getClusterConfFilePath()))) {
+            String line = "";
+            while ((line = reader.readLine()) != null) {
+                if (!line.startsWith("#")) {
+                    assertEquals(IP + ":" + PORT, line.trim());
+                    return;
+                }
+            }
+            Assert.fail("No found member info in cluster.conf");
+        } finally {
+            file.delete();
+        }
+    }
+    
+    @Test
+    public void testReadServerConf() {
+        Collection<String> address = new HashSet<>();
+        address.add("1.1.1.1:3306");
+        address.add("1.1.1.1");
+        Collection<Member> actual = MemberUtil.readServerConf(address);
+        assertEquals(2, actual.size());
+    }
+    
+    @Test
+    public void testSelectTargetMembers() {
+        Collection<Member> input = new HashSet<>();
+        input.add(originalMember);
+        Member member = buildMember();
+        member.setIp("2.2.2.2");
+        input.add(member);
+        Set<Member> actual = MemberUtil.selectTargetMembers(input, member1 -> member1.getIp().equals(IP));
+        assertEquals(1, actual.size());
     }
     
     @Test
@@ -127,125 +241,105 @@ public class MemberUtilTest {
     }
     
     @Test
+    public void testIsBasicInfoChangedForChangedAbilities() {
+        Member newMember = buildMember();
+        newMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);
+        assertTrue(MemberUtil.isBasicInfoChanged(newMember, originalMember));
+    }
+    
+    @Test
+    public void testIsBasicInfoChangedForChangedNull() {
+        Member newMember = buildMember();
+        assertTrue(MemberUtil.isBasicInfoChanged(newMember, null));
+    }
+    
+    @Test
     public void testMemberOnFailWhenReachMaxFailAccessCnt() {
         final Member remote = buildMember();
-        memberManager.memberJoin(Collections.singletonList(remote));
-        
+        mockMemberAddressInfos.add(remote.getAddress());
+        remote.setState(NodeState.SUSPICIOUS);
         remote.setFailAccessCnt(2);
         MemberUtil.onFail(memberManager, remote);
-        
-        final Member search1 = memberManager.find(remote.getAddress());
-        Assert.assertEquals(3, search1.getFailAccessCnt());
-        Assert.assertEquals(NodeState.SUSPICIOUS, search1.getState());
-        
+        Assert.assertEquals(3, remote.getFailAccessCnt());
+        Assert.assertEquals(NodeState.SUSPICIOUS, remote.getState());
+        verify(memberManager, never()).notifyMemberChange(remote);
+        Assert.assertTrue(mockMemberAddressInfos.isEmpty());
         MemberUtil.onFail(memberManager, remote);
-        
-        final Member search2 = memberManager.find(remote.getAddress());
-        Assert.assertEquals(4, search2.getFailAccessCnt());
-        Assert.assertEquals(NodeState.DOWN, search2.getState());
-        
-        MemberUtil.onSuccess(memberManager, remote);
-        final Member search3 = memberManager.find(remote.getAddress());
-        Assert.assertEquals(0, search3.getFailAccessCnt());
-        Assert.assertEquals(NodeState.UP, search3.getState());
+        Assert.assertEquals(4, remote.getFailAccessCnt());
+        Assert.assertEquals(NodeState.DOWN, remote.getState());
+        verify(memberManager).notifyMemberChange(remote);
     }
     
     @Test
     public void testMemberOnFailWhenConnectRefused() {
         final Member remote = buildMember();
-        memberManager.memberJoin(Collections.singletonList(remote));
-        
+        mockMemberAddressInfos.add(remote.getAddress());
         remote.setFailAccessCnt(1);
         MemberUtil.onFail(memberManager, remote, new ConnectException(MemberUtil.TARGET_MEMBER_CONNECT_REFUSE_ERRMSG));
-        
-        final Member search1 = memberManager.find(remote.getAddress());
-        Assert.assertEquals(2, search1.getFailAccessCnt());
-        Assert.assertEquals(NodeState.DOWN, search1.getState());
-        
-        MemberUtil.onSuccess(memberManager, remote);
-        final Member search2 = memberManager.find(remote.getAddress());
-        Assert.assertEquals(0, search2.getFailAccessCnt());
-        Assert.assertEquals(NodeState.UP, search2.getState());
-    }
-    
-    @Test
-    public void testMemberOnFailListener() throws InterruptedException {
-        
-        final AtomicBoolean received = new AtomicBoolean(false);
-        final AtomicReference<MembersChangeEvent> reference = new AtomicReference<>();
-        
-        NotifyCenter.registerSubscriber(new MemberChangeListener() {
-            @Override
-            public void onEvent(MembersChangeEvent event) {
-                reference.set(event);
-                received.set(true);
-            }
-        });
-        
+        Assert.assertEquals(2, remote.getFailAccessCnt());
+        Assert.assertEquals(NodeState.DOWN, remote.getState());
+        Assert.assertTrue(mockMemberAddressInfos.isEmpty());
+        verify(memberManager).notifyMemberChange(remote);
+    }
+    
+    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
+    @Test
+    public void testMemberOnFailWhenMemberAlreadyNOUP() {
         final Member remote = buildMember();
-        memberManager.memberJoin(Collections.singletonList(remote));
-        
-        remote.setFailAccessCnt(1);
-        MemberUtil.onFail(memberManager, remote, new ConnectException(MemberUtil.TARGET_MEMBER_CONNECT_REFUSE_ERRMSG));
-        ThreadUtils.sleep(4000);
-        Assert.assertTrue(received.get());
-        final MembersChangeEvent event1 = reference.get();
-        final Member member1 = event1.getMembers().stream()
-                .filter(member -> StringUtils.equals(remote.getAddress(), member.getAddress())).findFirst()
-                .orElseThrow(() -> new AssertionError("member is null"));
-        Assert.assertEquals(2, member1.getFailAccessCnt());
-        Assert.assertEquals(NodeState.DOWN, member1.getState());
-        received.set(false);
-        
+        remote.setState(NodeState.DOWN);
+        remote.setFailAccessCnt(4);
+        MemberUtil.onFail(memberManager, remote);
+        verify(memberManager, never()).notifyMemberChange(remote);
+    }
+    
+    @Test
+    public void testMemberOnSuccessFromDown() {
+        final Member remote = buildMember();
+        remote.setState(NodeState.DOWN);
+        remote.setFailAccessCnt(4);
         MemberUtil.onSuccess(memberManager, remote);
-        ThreadUtils.sleep(4000);
-        Assert.assertTrue(received.get());
-        final MembersChangeEvent event2 = reference.get();
-        final Member member2 = event2.getMembers().stream()
-                .filter(member -> StringUtils.equals(remote.getAddress(), member.getAddress())).findFirst()
-                .orElseThrow(() -> new AssertionError("member is null"));
-        Assert.assertEquals(0, member2.getFailAccessCnt());
-        Assert.assertEquals(NodeState.UP, member2.getState());
+        assertEquals(NodeState.UP, remote.getState());
+        assertEquals(0, remote.getFailAccessCnt());
+        verify(memberManager).notifyMemberChange(remote);
     }
     
     @Test
     public void testMemberOnSuccessWhenMemberAlreadyUP() {
-        final AtomicBoolean received = new AtomicBoolean(false);
-        
-        NotifyCenter.registerSubscriber(new MemberChangeListener() {
-            @Override
-            public void onEvent(MembersChangeEvent event) {
-                received.set(true);
-            }
-        });
-        
         final Member remote = buildMember();
         memberManager.updateMember(remote);
-        
         MemberUtil.onSuccess(memberManager, remote);
-        ThreadUtils.sleep(4000);
-        Assert.assertFalse(received.get());
+        verify(memberManager, never()).notifyMemberChange(remote);
     }
     
-    @SuppressWarnings("checkstyle:AbbreviationAsWordInName")
     @Test
-    public void testMemberOnFailWhenMemberAlreadyNOUP() {
-        final AtomicBoolean received = new AtomicBoolean(false);
-        
-        NotifyCenter.registerSubscriber(new MemberChangeListener() {
-            @Override
-            public void onEvent(MembersChangeEvent event) {
-                received.set(true);
-            }
-        });
-        
+    public void testMemberOnSuccessWhenMemberNotUpdated() {
         final Member remote = buildMember();
-        remote.setState(NodeState.SUSPICIOUS);
-        memberManager.updateMember(remote);
-        
-        MemberUtil.onFail(memberManager, remote);
-        ThreadUtils.sleep(4000);
-        Assert.assertFalse(received.get());
+        final Member reportResult = buildMember();
+        MemberUtil.onSuccess(memberManager, remote, reportResult);
+        assertFalse(remote.getAbilities().getRemoteAbility().isSupportRemoteConnection());
+        assertTrue(mockMemberAddressInfos.contains(remote.getAddress()));
+        verify(memberManager, never()).notifyMemberChange(remote);
+    }
+    
+    @Test
+    public void testMemberOnSuccessWhenMemberUpdatedAbilities() {
+        final Member remote = buildMember();
+        final Member reportResult = buildMember();
+        reportResult.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);
+        MemberUtil.onSuccess(memberManager, remote, reportResult);
+        assertTrue(remote.getAbilities().getRemoteAbility().isSupportRemoteConnection());
+        assertTrue(mockMemberAddressInfos.contains(remote.getAddress()));
+        verify(memberManager).notifyMemberChange(remote);
     }
     
+    @Test
+    public void testMemberOnSuccessWhenMemberUpdatedExtendInfo() {
+        final Member remote = buildMember();
+        final Member reportResult = buildMember();
+        reportResult.setExtendVal(MemberMetaDataConstants.VERSION, "test");
+        MemberUtil.onSuccess(memberManager, remote, reportResult);
+        assertEquals("test", remote.getExtendVal(MemberMetaDataConstants.VERSION));
+        assertTrue(mockMemberAddressInfos.contains(remote.getAddress()));
+        verify(memberManager).notifyMemberChange(remote);
+    }
 }
diff --git a/core/src/test/java/com/alibaba/nacos/core/cluster/ServerMemberManagerTest.java b/core/src/test/java/com/alibaba/nacos/core/cluster/ServerMemberManagerTest.java
index 8f39f61..ad4d13f 100644
--- a/core/src/test/java/com/alibaba/nacos/core/cluster/ServerMemberManagerTest.java
+++ b/core/src/test/java/com/alibaba/nacos/core/cluster/ServerMemberManagerTest.java
@@ -16,11 +16,18 @@
 
 package com.alibaba.nacos.core.cluster;
 
+import com.alibaba.nacos.api.ability.ServerAbilities;
 import com.alibaba.nacos.api.exception.NacosException;
+import com.alibaba.nacos.auth.config.AuthConfigs;
+import com.alibaba.nacos.common.http.Callback;
+import com.alibaba.nacos.common.http.client.NacosAsyncRestTemplate;
+import com.alibaba.nacos.common.model.RestResult;
+import com.alibaba.nacos.common.model.RestResultUtils;
 import com.alibaba.nacos.common.notify.EventPublisher;
 import com.alibaba.nacos.common.notify.NotifyCenter;
+import com.alibaba.nacos.common.utils.JacksonUtils;
 import com.alibaba.nacos.sys.env.EnvUtil;
-import com.alibaba.nacos.sys.utils.InetUtils;
+import com.alibaba.nacos.sys.utils.ApplicationUtils;
 import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
@@ -31,7 +38,10 @@ import org.mockito.Mockito;
 import org.mockito.junit.MockitoJUnitRunner;
 import org.springframework.boot.web.context.WebServerInitializedEvent;
 import org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext;
+import org.springframework.context.ConfigurableApplicationContext;
 import org.springframework.core.env.ConfigurableEnvironment;
+import org.springframework.http.HttpStatus;
+import org.springframework.test.util.ReflectionTestUtils;
 
 import javax.servlet.ServletContext;
 import java.util.Collections;
@@ -42,6 +52,9 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.Mockito.doAnswer;
+import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -61,6 +74,12 @@ public class ServerMemberManagerTest {
     @Mock
     private WebServerInitializedEvent mockEvent;
     
+    @Mock
+    private AuthConfigs authConfigs;
+    
+    @Mock
+    private ConfigurableApplicationContext context;
+    
     private ServerMemberManager serverMemberManager;
     
     private static final AtomicBoolean EVENT_PUBLISH = new AtomicBoolean(false);
@@ -69,6 +88,8 @@ public class ServerMemberManagerTest {
     public void setUp() throws Exception {
         when(environment.getProperty("server.port", Integer.class, 8848)).thenReturn(8848);
         when(environment.getProperty("nacos.member-change-event.queue.size", Integer.class, 128)).thenReturn(128);
+        when(context.getBean(AuthConfigs.class)).thenReturn(authConfigs);
+        ApplicationUtils.injectContext(context);
         EnvUtil.setEnvironment(environment);
         EnvUtil.setIsStandalone(true);
         when(servletContext.getContextPath()).thenReturn("");
@@ -86,14 +107,6 @@ public class ServerMemberManagerTest {
     }
     
     @Test
-    public void testInit() {
-        String selfIp = InetUtils.getSelfIP();
-        Member member = serverMemberManager.getSelf();
-        assertEquals(selfIp, member.getIp());
-        assertTrue(member.getAbilities().getRemoteAbility().isSupportRemoteConnection());
-    }
-    
-    @Test
     public void testUpdateNonExistMember() {
         Member newMember = Member.builder().ip("1.1.1.2").port(8848).state(NodeState.UP).build();
         assertFalse(serverMemberManager.update(newMember));
@@ -138,7 +151,7 @@ public class ServerMemberManagerTest {
         Member member = Member.builder().ip("1.1.3.3").port(8848).state(NodeState.DOWN).build();
         boolean joinResult = serverMemberManager.memberJoin(Collections.singletonList(member));
         assertTrue(joinResult);
-    
+        
         List<String> ips = serverMemberManager.getServerListUnhealth();
         assertEquals(1, ips.size());
         
@@ -170,4 +183,73 @@ public class ServerMemberManagerTest {
         int port = EnvUtil.getPort();
         Assert.assertEquals(port, 8848);
     }
+    
+    @Test
+    public void testReportTaskToBelow13Version() {
+        Member testMember = Member.builder().ip("1.1.1.1").port(8848).state(NodeState.UP)
+                .extendInfo(Collections.singletonMap(MemberMetaDataConstants.VERSION, "test")).build();
+        testMember.setAbilities(new ServerAbilities());
+        testMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);
+        serverMemberManager.updateMember(testMember);
+        assertTrue(
+                serverMemberManager.find("1.1.1.1:8848").getExtendInfo().containsKey(MemberMetaDataConstants.VERSION));
+        NacosAsyncRestTemplate mockAsyncRestTemplate = mock(NacosAsyncRestTemplate.class);
+        ReflectionTestUtils.setField(serverMemberManager, "asyncRestTemplate", mockAsyncRestTemplate);
+        doAnswer(invocationOnMock -> {
+            Callback<String> callback = invocationOnMock.getArgument(5);
+            RestResult<String> result = RestResultUtils.failed();
+            result.setCode(HttpStatus.NOT_IMPLEMENTED.value());
+            callback.onReceive(result);
+            return null;
+        }).when(mockAsyncRestTemplate).post(anyString(), any(), any(), any(), any(), any());
+        serverMemberManager.getInfoReportTask().run();
+        assertFalse(
+                serverMemberManager.find("1.1.1.1:8848").getExtendInfo().containsKey(MemberMetaDataConstants.VERSION));
+    }
+    
+    @Test
+    public void testReportTaskWithoutMemberInfo() {
+        Member testMember = Member.builder().ip("1.1.1.1").port(8848).state(NodeState.DOWN)
+                .extendInfo(Collections.singletonMap(MemberMetaDataConstants.VERSION, "test")).build();
+        testMember.setAbilities(new ServerAbilities());
+        testMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);
+        serverMemberManager.updateMember(testMember);
+        assertTrue(
+                serverMemberManager.find("1.1.1.1:8848").getExtendInfo().containsKey(MemberMetaDataConstants.VERSION));
+        NacosAsyncRestTemplate mockAsyncRestTemplate = mock(NacosAsyncRestTemplate.class);
+        ReflectionTestUtils.setField(serverMemberManager, "asyncRestTemplate", mockAsyncRestTemplate);
+        doAnswer(invocationOnMock -> {
+            Callback<String> callback = invocationOnMock.getArgument(5);
+            RestResult<String> result = RestResultUtils.success("true");
+            callback.onReceive(result);
+            return null;
+        }).when(mockAsyncRestTemplate).post(anyString(), any(), any(), any(), any(), any());
+        serverMemberManager.getInfoReportTask().run();
+        assertEquals("test", serverMemberManager.find("1.1.1.1:8848").getExtendVal(MemberMetaDataConstants.VERSION));
+        assertEquals(NodeState.UP, serverMemberManager.find("1.1.1.1:8848").getState());
+    }
+    
+    @Test
+    public void testReportTaskWithMemberInfoChanged() {
+        Member testMember = Member.builder().ip("1.1.1.1").port(8848).state(NodeState.DOWN)
+                .extendInfo(Collections.singletonMap(MemberMetaDataConstants.VERSION, "test")).build();
+        testMember.setAbilities(new ServerAbilities());
+        testMember.getAbilities().getRemoteAbility().setSupportRemoteConnection(true);
+        serverMemberManager.updateMember(testMember);
+        assertTrue(
+                serverMemberManager.find("1.1.1.1:8848").getExtendInfo().containsKey(MemberMetaDataConstants.VERSION));
+        Member newMember = Member.builder().ip("1.1.1.1").port(8848).state(NodeState.DOWN)
+                .extendInfo(Collections.singletonMap(MemberMetaDataConstants.VERSION, "new")).build();
+        NacosAsyncRestTemplate mockAsyncRestTemplate = mock(NacosAsyncRestTemplate.class);
+        ReflectionTestUtils.setField(serverMemberManager, "asyncRestTemplate", mockAsyncRestTemplate);
+        doAnswer(invocationOnMock -> {
+            Callback<String> callback = invocationOnMock.getArgument(5);
+            RestResult<String> result = RestResultUtils.success(JacksonUtils.toJson(newMember));
+            callback.onReceive(result);
+            return null;
+        }).when(mockAsyncRestTemplate).post(anyString(), any(), any(), any(), any(), any());
+        serverMemberManager.getInfoReportTask().run();
+        assertEquals("new", serverMemberManager.find("1.1.1.1:8848").getExtendVal(MemberMetaDataConstants.VERSION));
+        assertEquals(NodeState.UP, serverMemberManager.find("1.1.1.1:8848").getState());
+    }
 }
diff --git a/core/src/test/java/com/alibaba/nacos/core/controller/NacosClusterControllerTest.java b/core/src/test/java/com/alibaba/nacos/core/controller/NacosClusterControllerTest.java
index 4e2e006..bc4eeab 100644
--- a/core/src/test/java/com/alibaba/nacos/core/controller/NacosClusterControllerTest.java
+++ b/core/src/test/java/com/alibaba/nacos/core/controller/NacosClusterControllerTest.java
@@ -18,6 +18,7 @@
 package com.alibaba.nacos.core.controller;
 
 import com.alibaba.nacos.common.model.RestResult;
+import com.alibaba.nacos.common.utils.JacksonUtils;
 import com.alibaba.nacos.core.cluster.Member;
 import com.alibaba.nacos.core.cluster.NodeState;
 import com.alibaba.nacos.core.cluster.ServerMemberManager;
@@ -37,6 +38,8 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 
+import static org.junit.Assert.assertEquals;
+
 /**
  * {@link NacosClusterController} unit test.
  *
@@ -61,9 +64,9 @@ public class NacosClusterControllerTest {
     public void testSelf() {
         Member self = new Member();
         Mockito.when(serverMemberManager.getSelf()).thenReturn(self);
-    
+        
         RestResult<Member> result = nacosClusterController.self();
-        Assert.assertEquals(self, result.getData());
+        assertEquals(self, result.getData());
     }
     
     @Test
@@ -72,17 +75,17 @@ public class NacosClusterControllerTest {
         member1.setIp("1.1.1.1");
         List<Member> members = Arrays.asList(member1);
         Mockito.when(serverMemberManager.allMembers()).thenReturn(members);
-    
+        
         RestResult<Collection<Member>> result = nacosClusterController.listNodes("1.1.1.1");
-        Assert.assertEquals(1, result.getData().size());
+        assertEquals(1, result.getData().size());
     }
     
     @Test
     public void testListSimpleNodes() {
         Mockito.when(serverMemberManager.getMemberAddressInfos()).thenReturn(Collections.singleton("1.1.1.1"));
-    
+        
         RestResult<Collection<String>> result = nacosClusterController.listSimpleNodes();
-        Assert.assertEquals(1, result.getData().size());
+        assertEquals(1, result.getData().size());
     }
     
     @Test
@@ -90,21 +93,23 @@ public class NacosClusterControllerTest {
         Member self = new Member();
         self.setState(NodeState.UP);
         Mockito.when(serverMemberManager.getSelf()).thenReturn(self);
-    
+        
         RestResult<String> result = nacosClusterController.getHealth();
-        Assert.assertEquals(NodeState.UP.name(), result.getData());
+        assertEquals(NodeState.UP.name(), result.getData());
     }
     
     @Test
     public void testReport() {
+        Member self = new Member();
         Mockito.when(serverMemberManager.update(Mockito.any())).thenReturn(true);
-        
+        Mockito.when(serverMemberManager.getSelf()).thenReturn(self);
         Member member = new Member();
         member.setIp("1.1.1.1");
         member.setPort(8848);
         member.setAddress("test");
         RestResult<String> result = nacosClusterController.report(member);
-        Assert.assertTrue(Boolean.parseBoolean(result.getData()));
+        String expected = JacksonUtils.toJson(self);
+        assertEquals(expected, result.getData());
     }
     
     @Test
@@ -117,6 +122,6 @@ public class NacosClusterControllerTest {
     public void testLeave() throws Exception {
         RestResult<String> result = nacosClusterController.leave(Collections.singletonList("1.1.1.1"), true);
         Assert.assertFalse(result.ok());
-        Assert.assertEquals(405, result.getCode());
+        assertEquals(405, result.getCode());
     }
 }

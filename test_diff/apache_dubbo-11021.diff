diff --git a/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/AbstractObservationFilterTest.java b/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/AbstractObservationFilterTest.java
new file mode 100644
index 0000000..19f0a1e
--- /dev/null
+++ b/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/AbstractObservationFilterTest.java
@@ -0,0 +1,80 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.metrics.filter.observation;
+
+import io.micrometer.tracing.test.SampleTestRunner;
+import org.apache.dubbo.config.ApplicationConfig;
+import org.apache.dubbo.rpc.AppResponse;
+import org.apache.dubbo.rpc.BaseFilter;
+import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.RpcInvocation;
+import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.junit.jupiter.api.AfterEach;
+
+import static org.mockito.BDDMockito.given;
+import static org.mockito.Mockito.mock;
+
+abstract class AbstractObservationFilterTest extends SampleTestRunner {
+
+    ApplicationModel applicationModel;
+    RpcInvocation invocation;
+
+    BaseFilter filter;
+
+    Invoker<?> invoker = mock(Invoker.class);
+
+    static final String INTERFACE_NAME = "org.apache.dubbo.MockInterface";
+    static final String METHOD_NAME = "mockMethod";
+    static final String GROUP = "mockGroup";
+    static final String VERSION = "1.0.0";
+
+    @AfterEach
+    public void teardown() {
+        if (applicationModel != null) {
+            applicationModel.destroy();
+        }
+    }
+
+    abstract BaseFilter createFilter(ApplicationModel applicationModel);
+
+    void setupConfig() {
+        ApplicationConfig config = new ApplicationConfig();
+        config.setName("MockObservations");
+
+        applicationModel = ApplicationModel.defaultModel();
+        applicationModel.getApplicationConfigManager().setApplication(config);
+
+        invocation = new RpcInvocation(new MockInvocation());
+        invocation.addInvokedInvoker(invoker);
+
+        applicationModel.getBeanFactory().registerBean(getObservationRegistry());
+
+        filter = createFilter(applicationModel);
+
+        given(invoker.invoke(invocation)).willReturn(new AppResponse("success"));
+
+        initParam();
+    }
+
+    private void initParam() {
+        invocation.setTargetServiceUniqueName(GROUP + "/" + INTERFACE_NAME + ":" + VERSION);
+        invocation.setMethodName(METHOD_NAME);
+        invocation.setParameterTypes(new Class[] {String.class});
+    }
+
+}
diff --git a/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/MockInvocation.java b/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/MockInvocation.java
new file mode 100644
index 0000000..76bbff0
--- /dev/null
+++ b/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/MockInvocation.java
@@ -0,0 +1,168 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.dubbo.metrics.filter.observation;
+
+import java.util.HashMap;
+import java.util.Map;
+
+import org.apache.dubbo.rpc.AttachmentsAdapter;
+import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.RpcInvocation;
+import org.apache.dubbo.rpc.model.ServiceModel;
+
+import static org.apache.dubbo.common.constants.CommonConstants.DUBBO_VERSION_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.GROUP_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.PATH_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.TIMEOUT_KEY;
+import static org.apache.dubbo.common.constants.CommonConstants.VERSION_KEY;
+import static org.apache.dubbo.rpc.Constants.TOKEN_KEY;
+
+/**
+ * MockInvocation.java
+ */
+public class MockInvocation extends RpcInvocation {
+
+    private Map<String, Object> attachments;
+
+    public MockInvocation() {
+        attachments = new HashMap<>();
+        attachments.put(PATH_KEY, "dubbo");
+        attachments.put(GROUP_KEY, "dubbo");
+        attachments.put(VERSION_KEY, "1.0.0");
+        attachments.put(DUBBO_VERSION_KEY, "1.0.0");
+        attachments.put(TOKEN_KEY, "sfag");
+        attachments.put(TIMEOUT_KEY, "1000");
+    }
+
+    @Override
+    public String getTargetServiceUniqueName() {
+        return null;
+    }
+
+    @Override
+    public String getProtocolServiceKey() {
+        return null;
+    }
+
+    public String getMethodName() {
+        return "echo";
+    }
+
+    @Override
+    public String getServiceName() {
+        return "DemoService";
+    }
+
+    public Class<?>[] getParameterTypes() {
+        return new Class[] {String.class};
+    }
+
+    public Object[] getArguments() {
+        return new Object[] {"aa"};
+    }
+
+    public Map<String, String> getAttachments() {
+        return new AttachmentsAdapter.ObjectToStringMap(attachments);
+    }
+
+    @Override
+    public Map<String, Object> getObjectAttachments() {
+        return attachments;
+    }
+
+    @Override
+    public void setAttachment(String key, String value) {
+        setObjectAttachment(key, value);
+    }
+
+    @Override
+    public void setAttachment(String key, Object value) {
+        setObjectAttachment(key, value);
+    }
+
+    @Override
+    public void setObjectAttachment(String key, Object value) {
+        attachments.put(key, value);
+    }
+
+    @Override
+    public void setAttachmentIfAbsent(String key, String value) {
+        setObjectAttachmentIfAbsent(key, value);
+    }
+
+    @Override
+    public void setAttachmentIfAbsent(String key, Object value) {
+        setObjectAttachmentIfAbsent(key, value);
+    }
+
+    @Override
+    public void setObjectAttachmentIfAbsent(String key, Object value) {
+        attachments.put(key, value);
+    }
+
+    public Invoker<?> getInvoker() {
+        return null;
+    }
+
+    @Override
+    public void setServiceModel(ServiceModel serviceModel) {
+
+    }
+
+    @Override
+    public ServiceModel getServiceModel() {
+        return null;
+    }
+
+    @Override
+    public Object put(Object key, Object value) {
+        return null;
+    }
+
+    @Override
+    public Object get(Object key) {
+        return null;
+    }
+
+    @Override
+    public Map<Object, Object> getAttributes() {
+        return null;
+    }
+
+    public String getAttachment(String key) {
+        return (String) getObjectAttachments().get(key);
+    }
+
+    @Override
+    public Object getObjectAttachment(String key) {
+        return attachments.get(key);
+    }
+
+    public String getAttachment(String key, String defaultValue) {
+        return (String) getObjectAttachments().get(key);
+    }
+
+    @Override
+    public Object getObjectAttachment(String key, Object defaultValue) {
+        Object result = attachments.get(key);
+        if (result == null) {
+            return defaultValue;
+        }
+        return result;
+    }
+
+}
diff --git a/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/ObservationReceiverFilterTest.java b/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/ObservationReceiverFilterTest.java
new file mode 100644
index 0000000..4312f14
--- /dev/null
+++ b/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/ObservationReceiverFilterTest.java
@@ -0,0 +1,120 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.metrics.filter.observation;
+
+import io.micrometer.common.KeyValues;
+import io.micrometer.core.tck.MeterRegistryAssert;
+import io.micrometer.tracing.Span;
+import io.micrometer.tracing.Tracer;
+import io.micrometer.tracing.test.simple.SpansAssert;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.AppResponse;
+import org.apache.dubbo.rpc.Filter;
+import org.apache.dubbo.rpc.Invocation;
+import org.apache.dubbo.rpc.Invoker;
+import org.apache.dubbo.rpc.Result;
+import org.apache.dubbo.rpc.RpcContext;
+import org.apache.dubbo.rpc.RpcException;
+import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.assertj.core.api.BDDAssertions;
+
+class ObservationReceiverFilterTest extends AbstractObservationFilterTest {
+
+    @Override
+    public SampleTestRunnerConsumer yourCode() throws Exception {
+        return (buildingBlocks, meterRegistry) -> {
+            setupConfig();
+            setupAttachments(buildingBlocks.getTracer());
+            invoker = new AssertingInvoker(buildingBlocks.getTracer());
+
+            ObservationReceiverFilter senderFilter = (ObservationReceiverFilter) filter;
+            senderFilter.invoke(invoker, invocation);
+            senderFilter.onResponse(null, invoker, invocation);
+
+            MeterRegistryAssert.then(meterRegistry)
+                .hasMeterWithNameAndTags("rpc.server.duration", KeyValues.of("rpc.method", "mockMethod", "rpc.service", "DemoService", "rpc.system", "apache_dubbo"));
+            SpansAssert.then(buildingBlocks.getFinishedSpans())
+                .hasASpanWithNameIgnoreCase("DemoService/mockMethod", spanAssert ->
+                    spanAssert
+                        .hasTag("rpc.method", "mockMethod")
+                        .hasTag("rpc.service", "DemoService")
+                        .hasTag("rpc.system", "apache_dubbo"));
+        };
+    }
+
+    void setupAttachments(Tracer tracer) {
+        RpcContext.getServerAttachment().setUrl(URL.valueOf("test://test:11/test?accesslog=true&group=dubbo&version=1.1&side=consumer"));
+        RpcContext.getServerAttachment().setMethodName("foo");
+        RpcContext.getServerAttachment().setRemoteAddress("foo.bar.com", 8080);
+        RpcContext.getServerAttachment().setAttachment("X-B3-TraceId", tracer.currentSpan().context().traceId());
+        RpcContext.getServerAttachment().setAttachment("X-B3-SpanId", tracer.currentSpan().context().spanId());
+        RpcContext.getServerAttachment().setAttachment("X-B3-Sampled", "1");
+    }
+
+    @Override
+    Filter createFilter(ApplicationModel applicationModel) {
+        return new ObservationReceiverFilter(applicationModel);
+    }
+
+    static class AssertingInvoker implements Invoker {
+
+        private final String expectedTraceId;
+
+        private final String parentSpanId;
+
+        private final Tracer tracer;
+
+        AssertingInvoker(Tracer tracer) {
+            this.tracer = tracer;
+            this.expectedTraceId = tracer.currentSpan().context().traceId();
+            this.parentSpanId = tracer.currentSpan().context().spanId();
+        }
+
+        @Override
+        public URL getUrl() {
+            return null;
+        }
+
+        @Override
+        public boolean isAvailable() {
+            return true;
+        }
+
+        @Override
+        public void destroy() {
+
+        }
+
+        @Override
+        public Class getInterface() {
+            return AssertingInvoker.class;
+        }
+
+        @Override
+        public Result invoke(Invocation invocation) throws RpcException {
+            Span span = this.tracer.currentSpan();
+            BDDAssertions.then(span.context().traceId())
+                .as("Should propagate the trace id from the attributes")
+                .isEqualTo(this.expectedTraceId);
+            BDDAssertions.then(span.context().spanId())
+                .as("A child span must be created")
+                .isNotEqualTo(this.parentSpanId);
+            return new AppResponse("OK");
+        }
+    }
+}
diff --git a/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/ObservationSenderFilterTest.java b/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/ObservationSenderFilterTest.java
new file mode 100644
index 0000000..7e045dc
--- /dev/null
+++ b/dubbo-metrics/dubbo-metrics-api/src/test/java/org/apache/dubbo/metrics/filter/observation/ObservationSenderFilterTest.java
@@ -0,0 +1,64 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.dubbo.metrics.filter.observation;
+
+import io.micrometer.common.KeyValues;
+import io.micrometer.core.tck.MeterRegistryAssert;
+import io.micrometer.tracing.test.simple.SpansAssert;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.rpc.RpcContext;
+import org.apache.dubbo.rpc.cluster.filter.ClusterFilter;
+import org.apache.dubbo.rpc.model.ApplicationModel;
+import org.assertj.core.api.BDDAssertions;
+
+class ObservationSenderFilterTest extends AbstractObservationFilterTest {
+
+    @Override
+    public SampleTestRunnerConsumer yourCode() throws Exception {
+        return (buildingBlocks, meterRegistry) -> {
+            setupConfig();
+            setupAttachments();
+
+            ObservationSenderFilter senderFilter = (ObservationSenderFilter) filter;
+            senderFilter.invoke(invoker, invocation);
+            senderFilter.onResponse(null, invoker, invocation);
+
+            BDDAssertions.then(invocation.getObjectAttachment("X-B3-TraceId")).isNotNull();
+            MeterRegistryAssert.then(meterRegistry)
+                .hasMeterWithNameAndTags("rpc.client.duration", KeyValues.of("net.peer.name", "foo.bar.com", "net.peer.port", "8080", "rpc.method", "mockMethod", "rpc.service", "DemoService", "rpc.system", "apache_dubbo"));
+            SpansAssert.then(buildingBlocks.getFinishedSpans())
+                .hasASpanWithNameIgnoreCase("DemoService/mockMethod", spanAssert ->
+                    spanAssert
+                        .hasTag("net.peer.name", "foo.bar.com")
+                        .hasTag("net.peer.port", "8080")
+                        .hasTag("rpc.method", "mockMethod")
+                        .hasTag("rpc.service", "DemoService")
+                        .hasTag("rpc.system", "apache_dubbo"));
+        };
+    }
+
+    void setupAttachments() {
+        RpcContext.getClientAttachment().setUrl(URL.valueOf("test://test:11/test?accesslog=true&group=dubbo&version=1.1&side=consumer"));
+        RpcContext.getClientAttachment().setRemoteAddress("foo.bar.com", 8080);
+    }
+
+    @Override
+    ClusterFilter createFilter(ApplicationModel applicationModel) {
+        return new ObservationSenderFilter(applicationModel);
+    }
+}

diff --git a/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerTest.java b/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerTest.java
index e834433..e4d8d85 100644
--- a/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerTest.java
+++ b/dubbo-common/src/test/java/org/apache/dubbo/common/logger/LoggerTest.java
@@ -56,7 +56,13 @@ class LoggerTest {
         logger.warn("warn");
         logger.info("info");
         logger.debug("debug");
-        logger.trace("info");
+        logger.trace("trace");
+
+        logger.error("error:{}", "arg1");
+        logger.warn("warn:{}", "arg1");
+        logger.info("info:{}", "arg1");
+        logger.debug("debug:{}", "arg1");
+        logger.trace("trace:{}", "arg1");
 
         logger.error(new Exception("error"));
         logger.warn(new Exception("warn"));
@@ -69,6 +75,12 @@ class LoggerTest {
         logger.info("info", new Exception("info"));
         logger.debug("debug", new Exception("debug"));
         logger.trace("trace", new Exception("trace"));
+
+        logger.error("error:{}","arg1", new Exception("error"));
+        logger.warn("warn:{}", "arg1", new Exception("warn"));
+        logger.info("info:{}", "arg1", new Exception("info"));
+        logger.debug("debug:{}", "arg1", new Exception("debug"));
+        logger.trace("trace:{}", "arg1", new Exception("trace"));
     }
 
     @ParameterizedTest
diff --git a/dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java b/dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java
index 931e343..ce8f5b5 100644
--- a/dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java
+++ b/dubbo-common/src/test/java/org/apache/dubbo/common/logger/slf4j/Slf4jLoggerTest.java
@@ -19,10 +19,7 @@ package org.apache.dubbo.common.logger.slf4j;
 import org.junit.jupiter.api.Test;
 import org.slf4j.spi.LocationAwareLogger;
 
-import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.anyInt;
-import static org.mockito.ArgumentMatchers.anyString;
-import static org.mockito.ArgumentMatchers.isNull;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.internal.verification.VerificationModeFactory.times;
@@ -34,14 +31,22 @@ class Slf4jLoggerTest {
         Slf4jLogger logger = new Slf4jLogger(locationAwareLogger);
 
         logger.error("error");
-
         logger.warn("warn");
         logger.info("info");
         logger.debug("debug");
         logger.trace("info");
 
         verify(locationAwareLogger, times(5)).log(isNull(), anyString(),
-                anyInt(), anyString(), isNull(), isNull());
+            anyInt(), anyString(), isNull(), isNull());
+
+        logger.error("error:{}", "arg1");
+        logger.warn("warn:{}", "arg1");
+        logger.info("info:{}", "arg1");
+        logger.debug("debug:{}", "arg1");
+        logger.trace("info:{}", "arg1");
+
+        verify(locationAwareLogger, times(5)).log(isNull(), anyString(),
+            anyInt(), anyString(), eq(new String[]{"arg1"}), isNull());
 
         logger.error(new Exception("error"));
         logger.warn(new Exception("warn"));
@@ -56,6 +61,15 @@ class Slf4jLoggerTest {
         logger.trace("trace", new Exception("trace"));
 
         verify(locationAwareLogger, times(10)).log(isNull(), anyString(),
-                anyInt(), anyString(), isNull(), any(Throwable.class));
+            anyInt(), anyString(), isNull(), any(Throwable.class));
+
+        logger.error("error:{}","arg1", new Exception("error"));
+        logger.warn("warn:{}", "arg1", new Exception("warn"));
+        logger.info("info:{}", "arg1", new Exception("info"));
+        logger.debug("debug:{}", "arg1", new Exception("debug"));
+        logger.trace("trace:{}", "arg1", new Exception("trace"));
+
+        verify(locationAwareLogger, times(5)).log(isNull(), anyString(),
+            anyInt(), anyString(), eq(new String[]{"arg1"}), any(Throwable.class));
     }
 }

diff --git a/store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java b/store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
index c3bf9d5..8332f38 100644
--- a/store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/BatchPutMessageTest.java
@@ -17,6 +17,14 @@
 
 package org.apache.rocketmq.store;
 
+import java.io.File;
+import java.net.InetSocketAddress;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.Message;
@@ -30,25 +38,16 @@ import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.File;
-import java.net.InetSocketAddress;
-import java.nio.charset.Charset;
-import java.nio.charset.StandardCharsets;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
+import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.apache.rocketmq.common.message.MessageDecoder.messageProperties2String;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.await;
 import static org.junit.Assert.assertTrue;
 
 public class BatchPutMessageTest {
 
     private MessageStore messageStore;
 
-    public static final char NAME_VALUE_SEPARATOR = 1;
-    public static final char PROPERTY_SEPARATOR = 2;
     public final static Charset CHARSET_UTF8 = StandardCharsets.UTF_8;
 
     @Before
@@ -77,7 +76,7 @@ public class BatchPutMessageTest {
         messageStoreConfig.setFlushIntervalConsumeQueue(1);
         messageStoreConfig.setStorePathRootDir(System.getProperty("java.io.tmpdir") + File.separator + "putmessagesteststore");
         messageStoreConfig.setStorePathCommitLog(System.getProperty("java.io.tmpdir") + File.separator
-                + "putmessagesteststore" + File.separator + "commitlog");
+            + "putmessagesteststore" + File.separator + "commitlog");
         messageStoreConfig.setHaListenPort(0);
         return new DefaultMessageStore(messageStoreConfig, new BrokerStatsManager("simpleTest", true), new MyMessageArrivingListener(), new BrokerConfig());
     }
@@ -124,15 +123,22 @@ public class BatchPutMessageTest {
         PutMessageResult putMessageResult = messageStore.putMessages(messageExtBatch);
         assertThat(putMessageResult.isOk()).isTrue();
 
-        Thread.sleep(3 * 1000);
-
         for (long i = 0; i < 10; i++) {
-            MessageExt messageExt = messageStore.lookMessageByOffset(msgLengthArr[(int) i]);
-            assertThat(messageExt).isNotNull();
-            GetMessageResult result = messageStore.getMessage("batch_write_group", topic, queue, i, 1024 * 1024, null);
-            assertThat(result).isNotNull();
-            assertThat(result.getStatus()).isEqualTo(GetMessageStatus.FOUND);
-            result.release();
+            final long index = i;
+            Boolean exist = await().atMost(3, SECONDS).until(() -> {
+                MessageExt messageExt = messageStore.lookMessageByOffset(msgLengthArr[(int) index]);
+                if (messageExt == null) {
+                    return false;
+                }
+                GetMessageResult result = messageStore.getMessage("batch_write_group", topic, queue, index, 1024 * 1024, null);
+                if (result == null) {
+                    return false;
+                }
+                boolean equals = GetMessageStatus.FOUND.equals(result.getStatus());
+                result.release();
+                return equals;
+            }, item -> item);
+            assertTrue(exist);
         }
 
     }
@@ -176,18 +182,26 @@ public class BatchPutMessageTest {
         PutMessageResult putMessageResult = messageStore.putMessages(messageExtBatch);
         assertThat(putMessageResult.isOk()).isTrue();
 
-        Thread.sleep(3 * 1000);
-
         for (long i = 0; i < 10; i++) {
-            MessageExt messageExt = messageStore.lookMessageByOffset(msgLengthArr[(int) i]);
-            assertThat(messageExt).isNotNull();
-            GetMessageResult result = messageStore.getMessage("batch_write_group", topic, queue, i, 1024 * 1024, null);
-            assertThat(result).isNotNull();
-            assertThat(result.getStatus()).isEqualTo(GetMessageStatus.FOUND);
-            result.release();
+            final long index = i;
+            Boolean exist = await().atMost(3, SECONDS).until(() -> {
+                MessageExt messageExt = messageStore.lookMessageByOffset(msgLengthArr[(int) index]);
+                if (messageExt == null) {
+                    return false;
+                }
+                GetMessageResult result = messageStore.getMessage("batch_write_group", topic, queue, index, 1024 * 1024, null);
+                if (result == null) {
+                    return false;
+                }
+                boolean equals = GetMessageStatus.FOUND.equals(result.getStatus());
+                result.release();
+                return equals;
+            }, item -> item);
+            assertTrue(exist);
         }
 
     }
+
     private String generateKey(StringBuilder keyBuilder, MessageExt messageExt) {
         keyBuilder.setLength(0);
         keyBuilder.append(messageExt.getTopic());
diff --git a/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueExtTest.java b/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueExtTest.java
index e213a02..1af6f89 100644
--- a/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueExtTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueExtTest.java
@@ -17,20 +17,19 @@
 
 package org.apache.rocketmq.store;
 
+import java.io.File;
+import java.util.Random;
 import org.apache.rocketmq.common.UtilAll;
 import org.junit.After;
 import org.junit.Test;
 
-import java.io.File;
-import java.util.Random;
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class ConsumeQueueExtTest {
 
     private static final String topic = "abc";
     private static final int queueId = 0;
-    private static final String storePath = "." + File.separator + "unit_test_store";
+    private static final String storePath = System.getProperty("java.io.tmpdir") + File.separator + "unit_test_store";
     private static final int bitMapLength = 64;
     private static final int unitSizeWithBitMap = ConsumeQueueExt.CqExtUnit.MIN_EXT_UNIT_SIZE + bitMapLength / Byte.SIZE;
     private static final int cqExtFileSize = 10 * unitSizeWithBitMap;
diff --git a/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java b/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
index 9cd2e57..c281cec 100644
--- a/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/ConsumeQueueTest.java
@@ -18,13 +18,13 @@
 package org.apache.rocketmq.store;
 
 import java.io.File;
-import java.io.IOException;
 import java.lang.reflect.Method;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
 import java.net.UnknownHostException;
 import java.util.Map;
+import java.util.concurrent.ConcurrentMap;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageConst;
@@ -39,7 +39,9 @@ import org.junit.Assert;
 import org.junit.Test;
 import org.mockito.Mockito;
 
+import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.await;
 
 public class ConsumeQueueTest {
 
@@ -181,7 +183,7 @@ public class ConsumeQueueTest {
         return master;
     }
 
-    protected void putMsg(DefaultMessageStore master) throws Exception {
+    protected void putMsg(DefaultMessageStore master) {
         long totalMsgs = 200;
 
         for (long i = 0; i < totalMsgs; i++) {
@@ -193,7 +195,7 @@ public class ConsumeQueueTest {
         }
     }
 
-    protected void putMsgMultiQueue(DefaultMessageStore master) throws Exception {
+    protected void putMsgMultiQueue(DefaultMessageStore master) {
         for (long i = 0; i < 1; i++) {
             master.putMessage(buildMessageMultiQueue());
         }
@@ -285,7 +287,6 @@ public class ConsumeQueueTest {
         try {
             messageStore = genForMultiQueue();
 
-
             int totalMessages = 10;
 
             for (int i = 0; i < totalMessages; i++) {
@@ -294,7 +295,7 @@ public class ConsumeQueueTest {
             Thread.sleep(5);
 
             ConsumeQueueInterface cq = messageStore.getConsumeQueueTable().get(topic).get(queueId);
-            Method method = ((ConsumeQueue)cq).getClass().getDeclaredMethod("putMessagePositionInfoWrapper", DispatchRequest.class);
+            Method method = ((ConsumeQueue) cq).getClass().getDeclaredMethod("putMessagePositionInfoWrapper", DispatchRequest.class);
 
             assertThat(method).isNotNull();
 
@@ -307,7 +308,7 @@ public class ConsumeQueueTest {
 
             assertThat(cq).isNotNull();
 
-            Object dispatchResult = method.invoke(cq,  dispatchRequest);
+            Object dispatchResult = method.invoke(cq, dispatchRequest);
 
             ConsumeQueueInterface lmqCq1 = messageStore.getConsumeQueueTable().get("%LMQ%123").get(0);
 
@@ -383,15 +384,17 @@ public class ConsumeQueueTest {
         });
 
         try {
-            try {
-                putMsg(master);
-                Thread.sleep(3000L);//wait ConsumeQueue create success.
-            } catch (Exception e) {
-                e.printStackTrace();
-                assertThat(Boolean.FALSE).isTrue();
-            }
 
-            ConsumeQueueInterface cq = master.getConsumeQueueTable().get(topic).get(queueId);
+            putMsg(master);
+            final DefaultMessageStore master1 = master;
+            ConsumeQueueInterface cq = await().atMost(3, SECONDS).until(() -> {
+                ConcurrentMap<Integer, ConsumeQueueInterface> map = master1.getConsumeQueueTable().get(topic);
+                if (map == null) {
+                    return null;
+                }
+                ConsumeQueueInterface anInterface = map.get(queueId);
+                return anInterface;
+            }, item -> null != item);
 
             assertThat(cq).isNotNull();
 
diff --git a/store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java b/store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
index 09d5073..63d496e 100644
--- a/store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/DefaultMessageStoreTest.java
@@ -64,7 +64,7 @@ import static org.junit.Assert.assertTrue;
 public class DefaultMessageStoreTest {
     private final String storeMessage = "Once, there was a chance for me!";
     private final String messageTopic = "FooBar";
-    private int QUEUE_TOTAL = 100;
+    private int queueTotal = 100;
     private AtomicInteger queueId = new AtomicInteger(0);
     private SocketAddress bornHost;
     private SocketAddress storeHost;
@@ -84,7 +84,7 @@ public class DefaultMessageStoreTest {
 
     @Test(expected = OverlappingFileLockException.class)
     public void test_repeat_restart() throws Exception {
-        QUEUE_TOTAL = 1;
+        queueTotal = 1;
         messageBody = storeMessage.getBytes();
 
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
@@ -137,9 +137,9 @@ public class DefaultMessageStoreTest {
         }
         messageStoreConfig.setStorePathRootDir(storePathRootDir);
         return new DefaultMessageStore(messageStoreConfig,
-                new BrokerStatsManager("simpleTest", true),
-                new MyMessageArrivingListener(),
-                new BrokerConfig());
+            new BrokerStatsManager("simpleTest", true),
+            new MyMessageArrivingListener(),
+            new BrokerConfig());
     }
 
     @Test
@@ -147,7 +147,7 @@ public class DefaultMessageStoreTest {
         long ipv4HostMsgs = 10;
         long ipv6HostMsgs = 10;
         long totalMsgs = ipv4HostMsgs + ipv6HostMsgs;
-        QUEUE_TOTAL = 1;
+        queueTotal = 1;
         messageBody = storeMessage.getBytes();
         for (long i = 0; i < ipv4HostMsgs; i++) {
             messageStore.putMessage(buildMessage());
@@ -431,7 +431,7 @@ public class DefaultMessageStoreTest {
         msg.setKeys("Hello");
         msg.setBody(messageBody);
         msg.setKeys(String.valueOf(System.currentTimeMillis()));
-        msg.setQueueId(Math.abs(queueId.getAndIncrement()) % QUEUE_TOTAL);
+        msg.setQueueId(Math.abs(queueId.getAndIncrement()) % queueTotal);
         msg.setSysFlag(0);
         msg.setBornTimestamp(System.currentTimeMillis());
         msg.setStoreHost(storeHost);
@@ -448,7 +448,7 @@ public class DefaultMessageStoreTest {
         msg.setBody(messageBody);
         msg.setMsgId("24084004018081003FAA1DDE2B3F898A00002A9F0000000000000CA0");
         msg.setKeys(String.valueOf(System.currentTimeMillis()));
-        msg.setQueueId(Math.abs(queueId.getAndIncrement()) % QUEUE_TOTAL);
+        msg.setQueueId(Math.abs(queueId.getAndIncrement()) % queueTotal);
         msg.setSysFlag(0);
         msg.setBornHostV6Flag();
         msg.setStoreHostAddressV6Flag();
@@ -480,7 +480,7 @@ public class DefaultMessageStoreTest {
         msgExtBatch.setKeys("Hello");
         msgExtBatch.setBody(msgBatch.getBody());
         msgExtBatch.setKeys(String.valueOf(System.currentTimeMillis()));
-        msgExtBatch.setQueueId(Math.abs(queueId.getAndIncrement()) % QUEUE_TOTAL);
+        msgExtBatch.setQueueId(Math.abs(queueId.getAndIncrement()) % queueTotal);
         msgExtBatch.setSysFlag(0);
         msgExtBatch.setBornTimestamp(System.currentTimeMillis());
         msgExtBatch.setStoreHost(storeHost);
@@ -491,7 +491,7 @@ public class DefaultMessageStoreTest {
     @Test
     public void testGroupCommit() throws Exception {
         long totalMsgs = 10;
-        QUEUE_TOTAL = 1;
+        queueTotal = 1;
         messageBody = storeMessage.getBytes();
         for (long i = 0; i < totalMsgs; i++) {
             messageStore.putMessage(buildMessage());
@@ -767,9 +767,8 @@ public class DefaultMessageStoreTest {
         ((DefaultMessageStore) this.messageStore).getBrokerConfig().setEnableSlaveActingMaster(false);
     }
 
-
     @Test
-    public void testPutMsgWhenAdaptiveDegradation () {
+    public void testPutMsgWhenAdaptiveDegradation() {
         MessageStoreConfig messageStoreConfig = ((DefaultMessageStore) this.messageStore).getMessageStoreConfig();
         messageStoreConfig.setBrokerRole(BrokerRole.SYNC_MASTER);
         messageStoreConfig.setTotalReplicas(2);
@@ -785,7 +784,6 @@ public class DefaultMessageStoreTest {
         messageStoreConfig.setEnableAutoInSyncReplicas(false);
     }
 
-
     @Test
     public void testGetBulkCommitLogData() {
         DefaultMessageStore defaultMessageStore = (DefaultMessageStore) messageStore;
@@ -810,7 +808,7 @@ public class DefaultMessageStoreTest {
     }
 
     @Test
-    public void testPutLongMessage() throws Exception{
+    public void testPutLongMessage() throws Exception {
         MessageExtBrokerInner messageExtBrokerInner = buildMessage();
         CommitLog commitLog = ((DefaultMessageStore) messageStore).getCommitLog();
         MessageStoreConfig messageStoreConfig = ((DefaultMessageStore) messageStore).getMessageStoreConfig();
@@ -835,7 +833,7 @@ public class DefaultMessageStoreTest {
 
         //message properties length more than properties maxSize
         messageExtBrokerInner.setBody(new byte[messageStoreConfig.getMaxMessageSize()]);
-        messageExtBrokerInner.setPropertiesString(new String(new byte[Short.MAX_VALUE+1]));
+        messageExtBrokerInner.setPropertiesString(new String(new byte[Short.MAX_VALUE + 1]));
         PutMessageResult encodeResult4 = putMessageThreadLocal.getEncoder().encode(messageExtBrokerInner);
         assertTrue(encodeResult4.getPutMessageStatus() == PutMessageStatus.PROPERTIES_SIZE_EXCEEDED);
 
@@ -848,7 +846,7 @@ public class DefaultMessageStoreTest {
     }
 
     @Test
-    public void testDynamicMaxMessageSize(){
+    public void testDynamicMaxMessageSize() {
         MessageExtBrokerInner messageExtBrokerInner = buildMessage();
         MessageStoreConfig messageStoreConfig = ((DefaultMessageStore) messageStore).getMessageStoreConfig();
         int originMaxMessageSize = messageStoreConfig.getMaxMessageSize();
diff --git a/store/src/test/java/org/apache/rocketmq/store/HATest.java b/store/src/test/java/org/apache/rocketmq/store/HATest.java
index 231582f..028c9b1 100644
--- a/store/src/test/java/org/apache/rocketmq/store/HATest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/HATest.java
@@ -1,18 +1,33 @@
-/**
- * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements.  See the NOTICE
- * file distributed with this work for additional information regarding copyright ownership. The ASF licenses this file
- * to You under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
- * License.  You may obtain a copy of the License at
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
  *
- * http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
- * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
- * specific language governing permissions and limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
 package org.apache.rocketmq.store;
 
+import java.io.File;
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.net.InetAddress;
+import java.net.InetSocketAddress;
+import java.net.SocketAddress;
+import java.time.Duration;
+import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageDecoder;
@@ -21,46 +36,39 @@ import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.FlushDiskType;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
+import org.apache.rocketmq.store.ha.HAConnectionState;
 import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.File;
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.SocketAddress;
-import java.util.UUID;
-import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.*;
+import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.awaitility.Awaitility.await;
+import static org.junit.Assert.assertArrayEquals;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertTrue;
 
 public class HATest {
-    private final String StoreMessage = "Once, there was a chance for me!";
-    private int QUEUE_TOTAL = 100;
-    private AtomicInteger QueueId = new AtomicInteger(0);
-    private SocketAddress BornHost;
-    private SocketAddress StoreHost;
-    private byte[] MessageBody;
+    private final String storeMessage = "Once, there was a chance for me!";
+    private int queueTotal = 100;
+    private AtomicInteger queueId = new AtomicInteger(0);
+    private SocketAddress bornHost;
+    private SocketAddress storeHost;
+    private byte[] messageBody;
 
     private MessageStore messageStore;
     private MessageStore slaveMessageStore;
     private MessageStoreConfig masterMessageStoreConfig;
     private MessageStoreConfig slaveStoreConfig;
     private BrokerStatsManager brokerStatsManager = new BrokerStatsManager("simpleTest", true);
-    private String storePathRootParentDir = System.getProperty("java.io.tmpdir") + File.separator +
-        UUID.randomUUID().toString().replace("-", "");
+    private String storePathRootParentDir = System.getProperty("java.io.tmpdir") + File.separator + UUID.randomUUID();
     private String storePathRootDir = storePathRootParentDir + File.separator + "store";
 
     @Before
     public void init() throws Exception {
-        StoreHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);
-        BornHost = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 0);
+        storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);
+        bornHost = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 0);
         masterMessageStoreConfig = new MessageStoreConfig();
         masterMessageStoreConfig.setBrokerRole(BrokerRole.SYNC_MASTER);
         masterMessageStoreConfig.setStorePathRootDir(storePathRootDir + File.separator + "master");
@@ -68,6 +76,8 @@ public class HATest {
         masterMessageStoreConfig.setHaListenPort(0);
         masterMessageStoreConfig.setTotalReplicas(2);
         masterMessageStoreConfig.setInSyncReplicas(2);
+        masterMessageStoreConfig.setHaHousekeepingInterval(2 * 1000);
+        masterMessageStoreConfig.setHaSendHeartbeatInterval(1000);
         buildMessageStoreConfig(masterMessageStoreConfig);
         slaveStoreConfig = new MessageStoreConfig();
         slaveStoreConfig.setBrokerRole(BrokerRole.SLAVE);
@@ -76,6 +86,8 @@ public class HATest {
         slaveStoreConfig.setHaListenPort(0);
         slaveStoreConfig.setTotalReplicas(2);
         slaveStoreConfig.setInSyncReplicas(2);
+        slaveStoreConfig.setHaHousekeepingInterval(2 * 1000);
+        slaveStoreConfig.setHaSendHeartbeatInterval(1000);
         buildMessageStoreConfig(slaveStoreConfig);
         messageStore = buildMessageStore(masterMessageStoreConfig, 0L);
         slaveMessageStore = buildMessageStore(slaveStoreConfig, 1L);
@@ -88,45 +100,38 @@ public class HATest {
         slaveMessageStore.updateHaMasterAddress("127.0.0.1:" + masterMessageStoreConfig.getHaListenPort());
         slaveMessageStore.start();
         slaveMessageStore.updateHaMasterAddress("127.0.0.1:" + masterMessageStoreConfig.getHaListenPort());
-        Thread.sleep(6000L);//because the haClient will wait 5s after the first connectMaster failed,sleep 6s
+        await().atMost(6, SECONDS).until(() -> slaveMessageStore.getHaService().getHAClient().getCurrentState() == HAConnectionState.TRANSFER);
     }
 
     @Test
     public void testHandleHA() {
         long totalMsgs = 10;
-        QUEUE_TOTAL = 1;
-        MessageBody = StoreMessage.getBytes();
+        queueTotal = 1;
+        messageBody = storeMessage.getBytes();
         for (long i = 0; i < totalMsgs; i++) {
             messageStore.putMessage(buildMessage());
         }
-
-        for (int i = 0; i < 100 && isCommitLogAvailable((DefaultMessageStore) messageStore); i++) {
-            try {
-                Thread.sleep(100);
-            } catch (InterruptedException ignored) {
-            }
-        }
-
-        for (int i = 0; i < 100 && isCommitLogAvailable((DefaultMessageStore) slaveMessageStore); i++) {
-            try {
-                Thread.sleep(100);
-            } catch (InterruptedException ignored) {
-            }
-        }
-
         for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = slaveMessageStore.getMessage("GROUP_A", "FooBar", 0, i, 1024 * 1024, null);
-            assertThat(result).isNotNull();
-            assertEquals(GetMessageStatus.FOUND, result.getStatus());
-            result.release();
+            final long index = i;
+            Boolean exist = await().atMost(Duration.ofSeconds(5)).until(() -> {
+                GetMessageResult result = slaveMessageStore.getMessage("GROUP_A", "FooBar", 0, index, 1024 * 1024, null);
+                if (result == null) {
+                    return false;
+                }
+                boolean flag = GetMessageStatus.FOUND == result.getStatus();
+                result.release();
+                return flag;
+
+            }, item -> item);
+            assertTrue(exist);
         }
     }
 
     @Test
     public void testSemiSyncReplica() throws Exception {
         long totalMsgs = 5;
-        QUEUE_TOTAL = 1;
-        MessageBody = StoreMessage.getBytes();
+        queueTotal = 1;
+        messageBody = storeMessage.getBytes();
         for (long i = 0; i < totalMsgs; i++) {
             MessageExtBrokerInner msg = buildMessage();
             CompletableFuture<PutMessageResult> putResultFuture = messageStore.asyncPutMessage(msg);
@@ -141,12 +146,11 @@ public class HATest {
             assertEquals(msg.getTags(), slaveMsg.getTags());
             assertEquals(msg.getKeys(), slaveMsg.getKeys());
         }
-
         //shutdown slave, putMessage should return FLUSH_SLAVE_TIMEOUT
         slaveMessageStore.shutdown();
 
         //wait to let master clean the slave's connection
-        Thread.sleep(masterMessageStoreConfig.getHaHousekeepingInterval() + 500);
+        await().atMost(Duration.ofSeconds(3)).until(() -> messageStore.getHaService().getConnectionCount().get() == 0);
         for (long i = 0; i < totalMsgs; i++) {
             CompletableFuture<PutMessageResult> putResultFuture = messageStore.asyncPutMessage(buildMessage());
             PutMessageResult result = putResultFuture.get();
@@ -157,9 +161,9 @@ public class HATest {
     @Test
     public void testSemiSyncReplicaWhenSlaveActingMaster() throws Exception {
         long totalMsgs = 5;
-        QUEUE_TOTAL = 1;
-        MessageBody = StoreMessage.getBytes();
-        ((DefaultMessageStore)messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);
+        queueTotal = 1;
+        messageBody = storeMessage.getBytes();
+        ((DefaultMessageStore) messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);
         for (long i = 0; i < totalMsgs; i++) {
             MessageExtBrokerInner msg = buildMessage();
             CompletableFuture<PutMessageResult> putResultFuture = messageStore.asyncPutMessage(msg);
@@ -187,15 +191,15 @@ public class HATest {
             assertEquals(PutMessageStatus.IN_SYNC_REPLICAS_NOT_ENOUGH, result.getPutMessageStatus());
         }
 
-        ((DefaultMessageStore)messageStore).getBrokerConfig().setEnableSlaveActingMaster(false);
+        ((DefaultMessageStore) messageStore).getBrokerConfig().setEnableSlaveActingMaster(false);
     }
 
     @Test
     public void testSemiSyncReplicaWhenAdaptiveDegradation() throws Exception {
         long totalMsgs = 5;
-        QUEUE_TOTAL = 1;
-        MessageBody = StoreMessage.getBytes();
-        ((DefaultMessageStore)messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);
+        queueTotal = 1;
+        messageBody = storeMessage.getBytes();
+        ((DefaultMessageStore) messageStore).getBrokerConfig().setEnableSlaveActingMaster(true);
         messageStore.getMessageStoreConfig().setEnableAutoInSyncReplicas(true);
         for (long i = 0; i < totalMsgs; i++) {
             MessageExtBrokerInner msg = buildMessage();
@@ -217,20 +221,20 @@ public class HATest {
         messageStore.setAliveReplicaNumInGroup(1);
 
         //wait to let master clean the slave's connection
-        Thread.sleep(masterMessageStoreConfig.getHaHousekeepingInterval() + 500);
+        await().atMost(Duration.ofSeconds(3)).until(() -> messageStore.getHaService().getConnectionCount().get() == 0);
         for (long i = 0; i < totalMsgs; i++) {
             CompletableFuture<PutMessageResult> putResultFuture = messageStore.asyncPutMessage(buildMessage());
             PutMessageResult result = putResultFuture.get();
             assertEquals(PutMessageStatus.PUT_OK, result.getPutMessageStatus());
         }
 
-        ((DefaultMessageStore)messageStore).getBrokerConfig().setEnableSlaveActingMaster(false);
+        ((DefaultMessageStore) messageStore).getBrokerConfig().setEnableSlaveActingMaster(false);
         messageStore.getMessageStoreConfig().setEnableAutoInSyncReplicas(false);
     }
 
     @After
     public void destroy() throws Exception {
-        Thread.sleep(5000L);
+
         slaveMessageStore.shutdown();
         slaveMessageStore.destroy();
         messageStore.shutdown();
@@ -258,13 +262,13 @@ public class HATest {
         MessageExtBrokerInner msg = new MessageExtBrokerInner();
         msg.setTopic("FooBar");
         msg.setTags("TAG1");
-        msg.setBody(MessageBody);
+        msg.setBody(messageBody);
         msg.setKeys(String.valueOf(System.currentTimeMillis()));
-        msg.setQueueId(Math.abs(QueueId.getAndIncrement()) % QUEUE_TOTAL);
+        msg.setQueueId(Math.abs(queueId.getAndIncrement()) % queueTotal);
         msg.setSysFlag(0);
         msg.setBornTimestamp(System.currentTimeMillis());
-        msg.setStoreHost(StoreHost);
-        msg.setBornHost(BornHost);
+        msg.setStoreHost(storeHost);
+        msg.setBornHost(bornHost);
         msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));
         return msg;
     }
diff --git a/store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java b/store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java
index 5660acc..1f8d2e5 100644
--- a/store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/MappedFileQueueTest.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.store;
 
+import java.util.concurrent.CountDownLatch;
 import org.apache.rocketmq.common.ThreadFactoryImpl;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.store.logfile.DefaultMappedFile;
@@ -36,12 +37,15 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import static org.assertj.core.api.Assertions.assertThat;
 
 public class MappedFileQueueTest {
+
+    private String storePath = System.getProperty("java.io.tmpdir") + File.separator + "unit_test_store";
+
     @Test
     public void testGetLastMappedFile() {
         final String fixedMsg = "0123456789abcdef";
 
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/a/", 1024, null);
+            new MappedFileQueue(storePath + File.separator + "a/", 1024, null);
 
         for (int i = 0; i < 1024; i++) {
             MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);
@@ -59,7 +63,7 @@ public class MappedFileQueueTest {
         final String fixedMsg = "abcd";
 
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/b/", 1024, null);
+            new MappedFileQueue(storePath + File.separator + "b/", 1024, null);
 
         for (int i = 0; i < 1024; i++) {
             MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);
@@ -107,7 +111,7 @@ public class MappedFileQueueTest {
     @Test
     public void testFindMappedFileByOffset_StartOffsetIsNonZero() {
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/b/", 1024, null);
+            new MappedFileQueue(storePath + File.separator + "b/", 1024, null);
 
         //Start from a non-zero offset
         MappedFile mappedFile = mappedFileQueue.getLastMappedFile(1024);
@@ -131,7 +135,7 @@ public class MappedFileQueueTest {
         final String fixedMsg = "0123456789abcdef";
 
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/c/", 1024, null);
+            new MappedFileQueue(storePath + File.separator + "c/", 1024, null);
 
         for (int i = 0; i < 1024; i++) {
             MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);
@@ -166,7 +170,7 @@ public class MappedFileQueueTest {
         final String fixedMsg = "abcd";
 
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/d/", 1024, null);
+            new MappedFileQueue(storePath + File.separator + "d/", 1024, null);
 
         for (int i = 0; i < 1024; i++) {
             MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);
@@ -182,7 +186,7 @@ public class MappedFileQueueTest {
     @Test
     public void testDeleteExpiredFileByOffset() {
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/e", 5120, null);
+            new MappedFileQueue(storePath + File.separator + "e/", 5120, null);
 
         for (int i = 0; i < 2048; i++) {
             MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);
@@ -214,7 +218,7 @@ public class MappedFileQueueTest {
     @Test
     public void testDeleteExpiredFileByTime() throws Exception {
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/f/", 1024, null);
+            new MappedFileQueue(storePath + File.separator + "f/", 1024, null);
 
         for (int i = 0; i < 100; i++) {
             MappedFile mappedFile = mappedFileQueue.getLastMappedFile(0);
@@ -242,8 +246,8 @@ public class MappedFileQueueTest {
     @Test
     public void testFindMappedFile_ByIteration() {
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/g/", 1024, null);
-        for (int i =0 ; i < 3; i++) {
+            new MappedFileQueue(storePath + File.separator + "g/", 1024, null);
+        for (int i = 0; i < 3; i++) {
             MappedFile mappedFile = mappedFileQueue.getLastMappedFile(1024 * i);
             mappedFile.setWrotePosition(1024);
         }
@@ -264,9 +268,9 @@ public class MappedFileQueueTest {
         final int mappedFileSize = 102400;
 
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/b/", mappedFileSize, null);
+            new MappedFileQueue(storePath + File.separator + "b/", mappedFileSize, null);
 
-        ThreadPoolExecutor executor = new ThreadPoolExecutor(3,3, 1000 * 60,
+        ThreadPoolExecutor executor = new ThreadPoolExecutor(3, 3, 1000 * 60,
             TimeUnit.MILLISECONDS,
             new LinkedBlockingQueue<Runnable>(),
             new ThreadFactoryImpl("testThreadPool"));
@@ -282,18 +286,18 @@ public class MappedFileQueueTest {
         AtomicBoolean hasException = new AtomicBoolean(false);
 
         executor.submit(() -> {
-                    try {
-                        while (!readOver.get()) {
-                            for (MappedFile mappedFile : mappedFileQueue.getMappedFiles()) {
-                                mappedFile.swapMap();
-                                Thread.sleep(10);
-                                mappedFile.cleanSwapedMap(true);
-                            }
+                try {
+                    while (!readOver.get()) {
+                        for (MappedFile mappedFile : mappedFileQueue.getMappedFiles()) {
+                            mappedFile.swapMap();
+                            Thread.sleep(10);
+                            mappedFile.cleanSwapedMap(true);
                         }
-                    } catch (Throwable t) {
-                        hasException.set(true);
                     }
+                } catch (Throwable t) {
+                    hasException.set(true);
                 }
+            }
         );
         long start = System.currentTimeMillis();
         long maxReadTimeMs = 60 * 1000;
@@ -343,10 +347,9 @@ public class MappedFileQueueTest {
         final int mappedFileSize = 1024000;
 
         MappedFileQueue mappedFileQueue =
-            new MappedFileQueue("target/unit_test_store/b/", mappedFileSize, null);
-
+            new MappedFileQueue(storePath + File.separator + "b/", mappedFileSize, null);
 
-        ThreadPoolExecutor executor = new ThreadPoolExecutor(5,5, 1000 * 60,
+        ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 5, 1000 * 60,
             TimeUnit.MILLISECONDS,
             new LinkedBlockingQueue<Runnable>(),
             new ThreadFactoryImpl("testThreadPool"));
@@ -360,6 +363,7 @@ public class MappedFileQueueTest {
             mappedFile.swapMap();
         }
         AtomicBoolean hasException = new AtomicBoolean(false);
+        CountDownLatch downLatch = new CountDownLatch(5);
         for (int i = 0; i < 5; i++) {
             executor.submit(() -> {
                 try {
@@ -369,17 +373,19 @@ public class MappedFileQueueTest {
                     }
                 } catch (Exception e) {
                     hasException.set(true);
+                }finally {
+                    downLatch.countDown();
                 }
             });
         }
 
-        Thread.sleep(10000);
+        downLatch.await(10, TimeUnit.SECONDS);
         assertThat(hasException.get()).isFalse();
     }
 
     @After
     public void destroy() {
-        File file = new File("target/unit_test_store");
+        File file = new File(storePath);
         UtilAll.deleteFile(file);
     }
 }
diff --git a/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerCommitlogTest.java b/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerCommitlogTest.java
index 377a4ef..95d8856 100644
--- a/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerCommitlogTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerCommitlogTest.java
@@ -19,31 +19,29 @@ package org.apache.rocketmq.store.dledger;
 import io.openmessaging.storage.dledger.DLedgerServer;
 import io.openmessaging.storage.dledger.store.file.DLedgerMmapFileStore;
 import io.openmessaging.storage.dledger.store.file.MmapFileList;
-
 import java.nio.ByteBuffer;
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
 import java.util.concurrent.Callable;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
-
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageExtBatch;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.GetMessageStatus;
-import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
 import org.junit.Assert;
 import org.junit.Test;
 
 import static java.util.concurrent.TimeUnit.SECONDS;
-import static org.awaitility.Awaitility.await;
-
 import static org.apache.rocketmq.store.StoreTestUtil.releaseMmapFilesOnWindows;
+import static org.awaitility.Awaitility.await;
 
 public class DLedgerCommitlogTest extends MessageStoreTestBase {
 
@@ -59,9 +57,10 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
             DLedgerServer dLedgerServer = dLedgerCommitLog.getdLedgerServer();
             DLedgerMmapFileStore dLedgerMmapFileStore = (DLedgerMmapFileStore) dLedgerServer.getdLedgerStore();
             MmapFileList mmapFileList = dLedgerMmapFileStore.getDataFileList();
-            Thread.sleep(2000);
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             doPutMessages(messageStore, topic, 0, 2000, 0);
-            Thread.sleep(100);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 2000 == messageStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(24, mmapFileList.getMappedFiles().size());
             Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(2000, messageStore.getMaxOffsetInQueue(topic, 0));
@@ -78,7 +77,8 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
             DLedgerServer dLedgerServer = dLedgerCommitLog.getdLedgerServer();
             DLedgerMmapFileStore dLedgerMmapFileStore = (DLedgerMmapFileStore) dLedgerServer.getdLedgerStore();
             MmapFileList mmapFileList = dLedgerMmapFileStore.getDataFileList();
-            Thread.sleep(1000);
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             Assert.assertEquals(20, mmapFileList.getMappedFiles().size());
             Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1700, messageStore.getMaxOffsetInQueue(topic, 0));
@@ -94,7 +94,8 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
             DLedgerServer dLedgerServer = dLedgerCommitLog.getdLedgerServer();
             DLedgerMmapFileStore dLedgerMmapFileStore = (DLedgerMmapFileStore) dLedgerServer.getdLedgerStore();
             MmapFileList mmapFileList = dLedgerMmapFileStore.getDataFileList();
-            Thread.sleep(1000);
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             Assert.assertEquals(0, mmapFileList.getMappedFiles().size());
             Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(0, messageStore.getMaxOffsetInQueue(topic, 0));
@@ -103,7 +104,6 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         }
     }
 
-
     @Test
     public void testRecover() throws Exception {
         String base = createBaseDir();
@@ -112,9 +112,11 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         String topic = UUID.randomUUID().toString();
         {
             DefaultMessageStore messageStore = createDledgerMessageStore(base, group, "n0", peers, null, false, 0);
-            Thread.sleep(1000);
+            DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) messageStore.getCommitLog();
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             doPutMessages(messageStore, topic, 0, 1000, 0);
-            Thread.sleep(100);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 1000 == messageStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, messageStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, messageStore.dispatchBehindBytes());
@@ -143,20 +145,21 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         }
     }
 
-
     @Test
     public void testPutAndGetMessage() throws Exception {
         String base = createBaseDir();
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();
         DefaultMessageStore messageStore = createDledgerMessageStore(base, group, "n0", peers, null, false, 0);
-        Thread.sleep(1000);
+        DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) messageStore.getCommitLog();
+        Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+        Assert.assertTrue(success);
         String topic = UUID.randomUUID().toString();
 
         List<PutMessageResult> results = new ArrayList<>();
         for (int i = 0; i < 10; i++) {
             MessageExtBrokerInner msgInner =
-                    i < 5 ? buildMessage() : buildIPv6HostMessage();
+                i < 5 ? buildMessage() : buildIPv6HostMessage();
             msgInner.setTopic(topic);
             msgInner.setQueueId(0);
             PutMessageResult putMessageResult = messageStore.putMessage(msgInner);
@@ -164,7 +167,7 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
             Assert.assertEquals(PutMessageStatus.PUT_OK, putMessageResult.getPutMessageStatus());
             Assert.assertEquals(i, putMessageResult.getAppendMessageResult().getLogicsOffset());
         }
-        Thread.sleep(500);
+        await().atMost(Duration.ofSeconds(10)).until(() -> 10 == messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
         Assert.assertEquals(10, messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.dispatchBehindBytes());
@@ -191,7 +194,9 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();
         DefaultMessageStore messageStore = createDledgerMessageStore(base, group, "n0", peers, null, false, 0);
-        Thread.sleep(1000);
+        DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) messageStore.getCommitLog();
+        Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+        Assert.assertTrue(success);
         String topic = UUID.randomUUID().toString();
         // should be less than 4
         int batchMessageSize = 2;
@@ -199,7 +204,7 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         List<PutMessageResult> results = new ArrayList<>();
         for (int i = 0; i < repeat; i++) {
             MessageExtBatch messageExtBatch =
-                    i < repeat / 10 ? buildBatchMessage(batchMessageSize) : buildIPv6HostBatchMessage(batchMessageSize);
+                i < repeat / 10 ? buildBatchMessage(batchMessageSize) : buildIPv6HostBatchMessage(batchMessageSize);
             messageExtBatch.setTopic(topic);
             messageExtBatch.setQueueId(0);
             PutMessageResult putMessageResult = messageStore.putMessages(messageExtBatch);
@@ -207,7 +212,7 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
             Assert.assertEquals(PutMessageStatus.PUT_OK, putMessageResult.getPutMessageStatus());
             Assert.assertEquals(i * batchMessageSize, putMessageResult.getAppendMessageResult().getLogicsOffset());
         }
-        Thread.sleep(100);
+        await().atMost(Duration.ofSeconds(10)).until(() -> repeat * batchMessageSize == messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
         Assert.assertEquals(repeat * batchMessageSize, messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.dispatchBehindBytes());
@@ -235,13 +240,15 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();
         DefaultMessageStore messageStore = createDledgerMessageStore(base, group, "n0", peers, null, false, 0);
-        Thread.sleep(1000);
+        DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) messageStore.getCommitLog();
+        Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+        Assert.assertTrue(success);
         String topic = UUID.randomUUID().toString();
 
         List<PutMessageResult> results = new ArrayList<>();
         for (int i = 0; i < 10; i++) {
             MessageExtBrokerInner msgInner =
-                    i < 5 ? buildMessage() : buildIPv6HostMessage();
+                i < 5 ? buildMessage() : buildIPv6HostMessage();
             msgInner.setTopic(topic);
             msgInner.setQueueId(0);
             CompletableFuture<PutMessageResult> futureResult = messageStore.asyncPutMessage(msgInner);
@@ -250,7 +257,7 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
             Assert.assertEquals(PutMessageStatus.PUT_OK, putMessageResult.getPutMessageStatus());
             Assert.assertEquals(i, putMessageResult.getAppendMessageResult().getLogicsOffset());
         }
-        Thread.sleep(100);
+        await().atMost(Duration.ofSeconds(10)).until(() -> 10 == messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
         Assert.assertEquals(10, messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.dispatchBehindBytes());
@@ -277,7 +284,9 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();
         DefaultMessageStore messageStore = createDledgerMessageStore(base, group, "n0", peers, null, false, 0);
-        Thread.sleep(1000);
+        DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) messageStore.getCommitLog();
+        Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+        Assert.assertTrue(success);
         String topic = UUID.randomUUID().toString();
         // should be less than 4
         int batchMessageSize = 2;
@@ -286,7 +295,7 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         List<PutMessageResult> results = new ArrayList<>();
         for (int i = 0; i < repeat; i++) {
             MessageExtBatch messageExtBatch =
-                    i < 5 ? buildBatchMessage(batchMessageSize) : buildIPv6HostBatchMessage(batchMessageSize);
+                i < 5 ? buildBatchMessage(batchMessageSize) : buildIPv6HostBatchMessage(batchMessageSize);
             messageExtBatch.setTopic(topic);
             messageExtBatch.setQueueId(0);
             CompletableFuture<PutMessageResult> futureResult = messageStore.asyncPutMessages(messageExtBatch);
@@ -295,7 +304,7 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
             Assert.assertEquals(PutMessageStatus.PUT_OK, putMessageResult.getPutMessageStatus());
             Assert.assertEquals(i * batchMessageSize, putMessageResult.getAppendMessageResult().getLogicsOffset());
         }
-        Thread.sleep(100);
+        await().atMost(Duration.ofSeconds(10)).until(() -> repeat * batchMessageSize == messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
         Assert.assertEquals(repeat * batchMessageSize, messageStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertEquals(0, messageStore.dispatchBehindBytes());
@@ -330,19 +339,15 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         PutMessageResult putMessageResult = leaderStore.putMessage(msgInner);
         Assert.assertEquals(PutMessageStatus.IN_SYNC_REPLICAS_NOT_ENOUGH, putMessageResult.getPutMessageStatus());
 
-        Thread.sleep(1000);
-
         Assert.assertEquals(0, leaderStore.getCommitLog().getMaxOffset());
         Assert.assertEquals(0, leaderStore.getMaxOffsetInQueue(topic, 0));
 
-
         DefaultMessageStore followerStore = createDledgerMessageStore(createBaseDir(), group, "n1", peers, "n0", false, 0);
         await().atMost(10, SECONDS).until(followerCatchesUp(followerStore, topic));
 
         Assert.assertEquals(1, leaderStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertTrue(leaderStore.getCommitLog().getMaxOffset() > 0);
 
-
         leaderStore.destroy();
         followerStore.destroy();
 
@@ -363,19 +368,17 @@ public class DLedgerCommitlogTest extends MessageStoreTestBase {
         PutMessageResult putMessageResult = leaderStore.putMessage(msgInner);
         Assert.assertEquals(PutMessageStatus.IN_SYNC_REPLICAS_NOT_ENOUGH, putMessageResult.getPutMessageStatus());
 
-        Thread.sleep(1000);
+        //Thread.sleep(1000);
 
         Assert.assertEquals(0, leaderStore.getCommitLog().getMaxOffset());
         Assert.assertEquals(0, leaderStore.getMaxOffsetInQueue(topic, 0));
 
-
         DefaultMessageStore followerStore = createDledgerMessageStore(createBaseDir(), group, "n1", peers, "n0", false, 0);
         await().atMost(10, SECONDS).until(followerCatchesUp(followerStore, topic));
 
         Assert.assertEquals(1, leaderStore.getMaxOffsetInQueue(topic, 0));
         Assert.assertTrue(leaderStore.getCommitLog().getMaxOffset() > 0);
 
-
         leaderStore.destroy();
         followerStore.destroy();
 
diff --git a/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java b/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java
index e69101b..880c182 100644
--- a/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/dledger/DLedgerMultiPathTest.java
@@ -17,6 +17,10 @@
 
 package org.apache.rocketmq.store.dledger;
 
+import java.io.File;
+import java.time.Duration;
+import java.util.Objects;
+import java.util.UUID;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.config.FlushDiskType;
@@ -25,29 +29,29 @@ import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.junit.Assert;
 import org.junit.Test;
 
-import java.io.File;
-import java.util.Objects;
-import java.util.UUID;
+import static org.awaitility.Awaitility.await;
 
 public class DLedgerMultiPathTest extends MessageStoreTestBase {
 
     @Test
     public void multiDirsStorageTest() throws Exception {
-        String base =  createBaseDir();
+        String base = createBaseDir();
         String topic = UUID.randomUUID().toString();
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();
         String multiStorePath =
             base + "/multi/a/" + MessageStoreConfig.MULTI_PATH_SPLITTER +
-            base + "/multi/b/" + MessageStoreConfig.MULTI_PATH_SPLITTER +
-            base + "/multi/c/" + MessageStoreConfig.MULTI_PATH_SPLITTER;
+                base + "/multi/b/" + MessageStoreConfig.MULTI_PATH_SPLITTER +
+                base + "/multi/c/" + MessageStoreConfig.MULTI_PATH_SPLITTER;
         {
 
             DefaultMessageStore dLedgerStore = createDLedgerMessageStore(base, group, "n0", peers, multiStorePath, null);
-            Thread.sleep(2000);
+            DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) dLedgerStore.getCommitLog();
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             doPutMessages(dLedgerStore, topic, 0, 1000, 0);
-            Thread.sleep(500);
-            Assert.assertEquals(11, dLedgerStore.getMaxPhyOffset()/dLedgerStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
+            await().atMost(Duration.ofSeconds(10)).until(() -> 1000 == dLedgerStore.getMaxOffsetInQueue(topic, 0));
+            Assert.assertEquals(11, dLedgerStore.getMaxPhyOffset() / dLedgerStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
             Assert.assertEquals(0, dLedgerStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, dLedgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dLedgerStore.dispatchBehindBytes());
@@ -57,17 +61,19 @@ public class DLedgerMultiPathTest extends MessageStoreTestBase {
         {
             String readOnlyPath =
                 base + "/multi/a/" + MessageStoreConfig.MULTI_PATH_SPLITTER +
-                base + "/multi/b/" + MessageStoreConfig.MULTI_PATH_SPLITTER;
+                    base + "/multi/b/" + MessageStoreConfig.MULTI_PATH_SPLITTER;
             multiStorePath =
                 base + "/multi/c/" + MessageStoreConfig.MULTI_PATH_SPLITTER +
-                base + "/multi/d/" + MessageStoreConfig.MULTI_PATH_SPLITTER;
+                    base + "/multi/d/" + MessageStoreConfig.MULTI_PATH_SPLITTER;
 
             DefaultMessageStore dLedgerStore = createDLedgerMessageStore(base, group, "n0", peers, multiStorePath, readOnlyPath);
-            Thread.sleep(2000);
+            DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) dLedgerStore.getCommitLog();
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             doGetMessages(dLedgerStore, topic, 0, 1000, 0);
             long beforeSize = Objects.requireNonNull(new File(base + "/multi/a/").listFiles()).length;
             doPutMessages(dLedgerStore, topic, 0, 1000, 1000);
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 2000 == dLedgerStore.getMaxOffsetInQueue(topic, 0));
             long afterSize = Objects.requireNonNull(new File(base + "/multi/a/").listFiles()).length;
             Assert.assertEquals(beforeSize, afterSize);
             Assert.assertEquals(0, dLedgerStore.getMinOffsetInQueue(topic, 0));
@@ -79,7 +85,8 @@ public class DLedgerMultiPathTest extends MessageStoreTestBase {
 
     }
 
-    protected DefaultMessageStore createDLedgerMessageStore(String base, String group, String selfId, String peers, String dLedgerCommitLogPath, String readOnlyPath) throws Exception {
+    protected DefaultMessageStore createDLedgerMessageStore(String base, String group, String selfId, String peers,
+        String dLedgerCommitLogPath, String readOnlyPath) throws Exception {
         MessageStoreConfig storeConfig = new MessageStoreConfig();
         storeConfig.setMappedFileSizeCommitLog(1024 * 100);
         storeConfig.setMappedFileSizeConsumeQueue(1024);
@@ -94,7 +101,7 @@ public class DLedgerMultiPathTest extends MessageStoreTestBase {
         storeConfig.setdLegerGroup(group);
         storeConfig.setdLegerPeers(peers);
         storeConfig.setdLegerSelfId(selfId);
-        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig,  new BrokerStatsManager("DLedgerCommitLogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
+        DefaultMessageStore defaultMessageStore = new DefaultMessageStore(storeConfig, new BrokerStatsManager("DLedgerCommitLogTest", true), (topic, queueId, logicOffset, tagsCode, msgStoreTime, filterBitMap, properties) -> {
 
         }, new BrokerConfig());
         Assert.assertTrue(defaultMessageStore.load());
diff --git a/store/src/test/java/org/apache/rocketmq/store/dledger/MixCommitlogTest.java b/store/src/test/java/org/apache/rocketmq/store/dledger/MixCommitlogTest.java
index 5fb7356..ecc04fa 100644
--- a/store/src/test/java/org/apache/rocketmq/store/dledger/MixCommitlogTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/dledger/MixCommitlogTest.java
@@ -16,6 +16,7 @@
  */
 package org.apache.rocketmq.store.dledger;
 
+import java.time.Duration;
 import java.util.UUID;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.apache.rocketmq.store.StoreTestBase;
@@ -23,19 +24,21 @@ import org.apache.rocketmq.store.config.StorePathConfigHelper;
 import org.junit.Assert;
 import org.junit.Test;
 
+import static org.awaitility.Awaitility.await;
+
 public class MixCommitlogTest extends MessageStoreTestBase {
 
     @Test
     public void testFallBehindCQ() throws Exception {
-        String base =  createBaseDir();
+        String base = createBaseDir();
         String topic = UUID.randomUUID().toString();
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();
         {
             DefaultMessageStore originalStore = createMessageStore(base, false);
             doPutMessages(originalStore, topic, 0, 1000, 0);
-            Assert.assertEquals(11, originalStore.getMaxPhyOffset()/originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 1000 == originalStore.getMaxOffsetInQueue(topic, 0));
+            Assert.assertEquals(11, originalStore.getMaxPhyOffset() / originalStore.getMessageStoreConfig().getMappedFileSizeCommitLog());
             Assert.assertEquals(0, originalStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, originalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, originalStore.dispatchBehindBytes());
@@ -48,13 +51,16 @@ public class MixCommitlogTest extends MessageStoreTestBase {
         }
         {
             DefaultMessageStore dledgerStore = createDledgerMessageStore(base, group, "n0", peers, null, true, 0);
-            Thread.sleep(2000);
+            DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) dledgerStore.getCommitLog();
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 1000 == dledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dledgerStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, dledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());
             doGetMessages(dledgerStore, topic, 0, 1000, 0);
             doPutMessages(dledgerStore, topic, 0, 1000, 1000);
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 2000 == dledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dledgerStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(2000, dledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());
@@ -63,11 +69,9 @@ public class MixCommitlogTest extends MessageStoreTestBase {
         }
     }
 
-
-
     @Test
     public void testPutAndGet() throws Exception {
-        String base =  createBaseDir();
+        String base = createBaseDir();
         String topic = UUID.randomUUID().toString();
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();
@@ -76,7 +80,7 @@ public class MixCommitlogTest extends MessageStoreTestBase {
         {
             DefaultMessageStore originalStore = createMessageStore(base, false);
             doPutMessages(originalStore, topic, 0, 1000, 0);
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 1000 == originalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, originalStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, originalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, originalStore.dispatchBehindBytes());
@@ -87,7 +91,7 @@ public class MixCommitlogTest extends MessageStoreTestBase {
         }
         {
             DefaultMessageStore recoverOriginalStore = createMessageStore(base, true);
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 1000 == recoverOriginalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, recoverOriginalStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, recoverOriginalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, recoverOriginalStore.dispatchBehindBytes());
@@ -101,9 +105,10 @@ public class MixCommitlogTest extends MessageStoreTestBase {
             Assert.assertEquals(dividedOffset, dLedgerCommitLog.getDividedCommitlogOffset());
             Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());
             Assert.assertEquals(dividedOffset, dLedgerCommitLog.getMaxOffset());
-            Thread.sleep(2000);
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             doPutMessages(dledgerStore, topic, 0, 1000, 1000);
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 2000 == dledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dledgerStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(2000, dledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());
@@ -115,9 +120,10 @@ public class MixCommitlogTest extends MessageStoreTestBase {
             DLedgerCommitLog dLedgerCommitLog = (DLedgerCommitLog) recoverDledgerStore.getCommitLog();
             Assert.assertFalse(dLedgerCommitLog.getdLedgerServer().getdLedgerConfig().isEnableDiskForceClean());
             Assert.assertEquals(dividedOffset, dLedgerCommitLog.getDividedCommitlogOffset());
-            Thread.sleep(2000);
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             doPutMessages(recoverDledgerStore, topic, 0, 1000, 2000);
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 3000 == recoverDledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, recoverDledgerStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(3000, recoverDledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, recoverDledgerStore.dispatchBehindBytes());
@@ -128,7 +134,7 @@ public class MixCommitlogTest extends MessageStoreTestBase {
 
     @Test
     public void testDeleteExpiredFiles() throws Exception {
-        String base =  createBaseDir();
+        String base = createBaseDir();
         String topic = UUID.randomUUID().toString();
         String peers = String.format("n0-localhost:%d", nextPort());
         String group = UUID.randomUUID().toString();
@@ -137,7 +143,7 @@ public class MixCommitlogTest extends MessageStoreTestBase {
         {
             DefaultMessageStore originalStore = createMessageStore(base, false);
             doPutMessages(originalStore, topic, 0, 1000, 0);
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 1000 == originalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, originalStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(1000, originalStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, originalStore.dispatchBehindBytes());
@@ -152,9 +158,10 @@ public class MixCommitlogTest extends MessageStoreTestBase {
             Assert.assertTrue(dledgerStore.getMessageStoreConfig().isCleanFileForciblyEnable());
             Assert.assertFalse(dLedgerCommitLog.getdLedgerServer().getdLedgerConfig().isEnableDiskForceClean());
             Assert.assertEquals(dividedOffset, dLedgerCommitLog.getDividedCommitlogOffset());
-            Thread.sleep(2000);
+            Boolean success = await().atMost(Duration.ofSeconds(4)).until(() -> dLedgerCommitLog.getdLedgerServer().getMemberState().isLeader(), item -> item);
+            Assert.assertTrue(success);
             doPutMessages(dledgerStore, topic, 0, 1000, 1000);
-            Thread.sleep(500);
+            await().atMost(Duration.ofSeconds(10)).until(() -> 2000 == dledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dledgerStore.getMinOffsetInQueue(topic, 0));
             Assert.assertEquals(2000, dledgerStore.getMaxOffsetInQueue(topic, 0));
             Assert.assertEquals(0, dledgerStore.dispatchBehindBytes());
diff --git a/store/src/test/java/org/apache/rocketmq/store/ha/FlowMonitorTest.java b/store/src/test/java/org/apache/rocketmq/store/ha/FlowMonitorTest.java
index 81c9e91..32fe495 100644
--- a/store/src/test/java/org/apache/rocketmq/store/ha/FlowMonitorTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/ha/FlowMonitorTest.java
@@ -17,13 +17,15 @@
 
 package org.apache.rocketmq.store.ha;
 
+import java.time.Duration;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
-import org.apache.rocketmq.store.ha.FlowMonitor;
 import org.junit.Assert;
 import org.junit.Test;
 
+import static org.awaitility.Awaitility.await;
+
 public class FlowMonitorTest {
-    
+
     @Test
     public void testLimit() throws Exception {
         MessageStoreConfig messageStoreConfig = new MessageStoreConfig();
@@ -34,10 +36,9 @@ public class FlowMonitorTest {
         flowMonitor.start();
 
         flowMonitor.addByteCountTransferred(3);
-        Assert.assertEquals(7, flowMonitor.canTransferMaxByteNum());
-
-        Thread.sleep(2000);
-        Assert.assertEquals(10, flowMonitor.canTransferMaxByteNum());
+        Boolean flag = await().atMost(Duration.ofSeconds(2)).until(() -> 7 == flowMonitor.canTransferMaxByteNum(), item -> item);
+        flag &= await().atMost(Duration.ofSeconds(2)).until(() -> 10 == flowMonitor.canTransferMaxByteNum(), item -> item);
+        Assert.assertTrue(flag);
 
         flowMonitor.shutdown();
     }
diff --git a/store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java b/store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java
index 0fa9f29..99b02e4 100644
--- a/store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/ha/autoswitch/AutoSwitchHATest.java
@@ -21,6 +21,7 @@ import java.io.File;
 import java.net.InetAddress;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.time.Duration;
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
@@ -28,6 +29,7 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.common.BrokerConfig;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageDecoder;
@@ -46,15 +48,15 @@ import org.apache.rocketmq.store.stats.BrokerStatsManager;
 import org.junit.After;
 import org.junit.Test;
 
-import static org.assertj.core.api.Assertions.assertThat;
+import static org.awaitility.Awaitility.await;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 public class AutoSwitchHATest {
-    private final String StoreMessage = "Once, there was a chance for me!";
+    private final String storeMessage = "Once, there was a chance for me!";
     private final int defaultMappedFileSize = 1024 * 1024;
-    private int QUEUE_TOTAL = 100;
+    private int queueTotal = 100;
     private AtomicInteger QueueId = new AtomicInteger(0);
     private SocketAddress BornHost;
     private SocketAddress StoreHost;
@@ -68,16 +70,15 @@ public class AutoSwitchHATest {
     private MessageStoreConfig storeConfig3;
     private String store1HaAddress;
     private String store2HaAddress;
-    private String store3HaAddress;
 
     private BrokerStatsManager brokerStatsManager = new BrokerStatsManager("simpleTest", true);
-    private String storePathRootParentDir = System.getProperty("user.home") + File.separator +
-        UUID.randomUUID().toString().replace("-", "");
+    private String tmpdir = System.getProperty("java.io.tmpdir");
+    private String storePathRootParentDir = (StringUtils.endsWith(tmpdir, File.separator) ? tmpdir : tmpdir + File.separator) + UUID.randomUUID();
     private String storePathRootDir = storePathRootParentDir + File.separator + "store";
 
     public void init(int mappedFileSize) throws Exception {
-        QUEUE_TOTAL = 1;
-        MessageBody = StoreMessage.getBytes();
+        queueTotal = 1;
+        MessageBody = storeMessage.getBytes();
         StoreHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);
         BornHost = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 0);
         storeConfig1 = new MessageStoreConfig();
@@ -117,7 +118,6 @@ public class AutoSwitchHATest {
         storeConfig3.setInSyncReplicas(2);
         buildMessageStoreConfig(storeConfig3, mappedFileSize);
         messageStore3 = buildMessageStore(storeConfig3, 3L);
-        this.store3HaAddress = "127.0.0.1:10980";
 
         assertTrue(messageStore1.load());
         assertTrue(messageStore2.load());
@@ -132,8 +132,8 @@ public class AutoSwitchHATest {
     }
 
     public void init(int mappedFileSize, boolean allAckInSyncStateSet) throws Exception {
-        QUEUE_TOTAL = 1;
-        MessageBody = StoreMessage.getBytes();
+        queueTotal = 1;
+        MessageBody = storeMessage.getBytes();
         StoreHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);
         BornHost = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 0);
         storeConfig1 = new MessageStoreConfig();
@@ -167,34 +167,38 @@ public class AutoSwitchHATest {
         ((AutoSwitchHAService) this.messageStore2.getHaService()).setLocalAddress("127.0.0.1:8001");
     }
 
-    private void changeMasterAndPutMessage(DefaultMessageStore master, MessageStoreConfig masterConfig,
+    private boolean changeMasterAndPutMessage(DefaultMessageStore master, MessageStoreConfig masterConfig,
         DefaultMessageStore slave, long slaveId, MessageStoreConfig slaveConfig, int epoch, String masterHaAddress,
-        int totalPutMessageNums) throws Exception {
+        int totalPutMessageNums) {
 
+        boolean flag = true;
         // Change role
         slaveConfig.setBrokerRole(BrokerRole.SLAVE);
         masterConfig.setBrokerRole(BrokerRole.SYNC_MASTER);
-        slave.getHaService().changeToSlave("", epoch, slaveId);
+        flag &= slave.getHaService().changeToSlave("", epoch, slaveId);
         slave.getHaService().updateHaMasterAddress(masterHaAddress);
-        master.getHaService().changeToMaster(epoch);
-        Thread.sleep(6000);
-
+        flag &= master.getHaService().changeToMaster(epoch);
         // Put message on master
         for (int i = 0; i < totalPutMessageNums; i++) {
-            master.putMessage(buildMessage());
+            PutMessageResult result = master.putMessage(buildMessage());
+            flag &= result.isOk();
         }
-        Thread.sleep(1000);
+        return flag;
     }
 
     private void checkMessage(final DefaultMessageStore messageStore, int totalMsgs, int startOffset) {
-        for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = messageStore.getMessage("GROUP_A", "FooBar", 0, startOffset + i, 1024 * 1024, null);
-            assertThat(result).isNotNull();
-            if (!GetMessageStatus.FOUND.equals(result.getStatus())) {
-                System.out.println("Failed i :" + i);
-            }
-            assertTrue(GetMessageStatus.FOUND.equals(result.getStatus()));
-            result.release();
+        for (int i = 0; i < totalMsgs; i++) {
+            final int index = i;
+            Boolean exist = await().atMost(Duration.ofSeconds(20)).until(() -> {
+                GetMessageResult result = messageStore.getMessage("GROUP_A", "FooBar", 0, startOffset + index, 1024 * 1024, null);
+                if (result == null) {
+                    return false;
+                }
+                boolean equals = GetMessageStatus.FOUND.equals(result.getStatus());
+                result.release();
+                return equals;
+            }, item -> item);
+            assertTrue(exist);
         }
     }
 
@@ -203,8 +207,8 @@ public class AutoSwitchHATest {
         init(defaultMappedFileSize, true);
         // Step1, set syncStateSet, if both broker1 and broker2 are in syncStateSet, the confirmOffset will be computed as the min slaveAckOffset(broker2's ack)
         ((AutoSwitchHAService) this.messageStore1.getHaService()).setSyncStateSet(new HashSet<>(Arrays.asList("127.0.0.1:8000", "127.0.0.1:8001")));
-        changeMasterAndPutMessage(this.messageStore1, this.storeConfig1, this.messageStore2, 2, this.storeConfig2, 1, store1HaAddress, 10);
-        Thread.sleep(6000);
+        boolean masterAndPutMessage = changeMasterAndPutMessage(this.messageStore1, this.storeConfig1, this.messageStore2, 2, this.storeConfig2, 1, store1HaAddress, 10);
+        assertTrue(masterAndPutMessage);
         checkMessage(this.messageStore2, 10, 0);
 
         final long confirmOffset = ((AutoSwitchHAService) this.messageStore1.getHaService()).getConfirmOffset();
@@ -212,11 +216,9 @@ public class AutoSwitchHATest {
         // Step2, shutdown store2
         this.messageStore2.shutdown();
 
-        // Put some messages, which should put failed.
-        for (int i = 0; i < 3; i++) {
-            final PutMessageResult putMessageResult = this.messageStore1.putMessage(buildMessage());
-            assertEquals(putMessageResult.getPutMessageStatus(), PutMessageStatus.FLUSH_SLAVE_TIMEOUT);
-        }
+        // Put message, which should put failed.
+        final PutMessageResult putMessageResult = this.messageStore1.putMessage(buildMessage());
+        assertEquals(putMessageResult.getPutMessageStatus(), PutMessageStatus.FLUSH_SLAVE_TIMEOUT);
 
         // The confirmOffset still don't change, because syncStateSet contains broker2, but broker2 shutdown
         assertEquals(confirmOffset, ((AutoSwitchHAService) this.messageStore1.getHaService()).getConfirmOffset());
@@ -230,13 +232,11 @@ public class AutoSwitchHATest {
         messageStore2.start();
         messageStore2.getHaService().changeToMaster(2);
         ((AutoSwitchHAService) messageStore2.getHaService()).setSyncStateSet(new HashSet<>(Collections.singletonList("127.0.0.1:8001")));
-        Thread.sleep(6000);
 
         // Put message on master
         for (int i = 0; i < 10; i++) {
             messageStore2.putMessage(buildMessage());
         }
-        Thread.sleep(200);
 
         // Step4, start store1, it should truncate dirty logs and syncLog from store2
         storeConfig1.setBrokerRole(BrokerRole.SLAVE);
@@ -245,7 +245,6 @@ public class AutoSwitchHATest {
         messageStore1.start();
         messageStore1.getHaService().changeToSlave("", 2, 1L);
         messageStore1.getHaService().updateHaMasterAddress(this.store2HaAddress);
-        Thread.sleep(6000);
 
         checkMessage(this.messageStore1, 20, 0);
     }
@@ -261,16 +260,11 @@ public class AutoSwitchHATest {
         messageStore1.getHaService().changeToMaster(1);
         messageStore2.getHaService().changeToSlave("", 1, 2L);
         messageStore2.getHaService().updateHaMasterAddress(store1HaAddress);
-        Thread.sleep(6000);
         // Put message on master
         for (int i = 0; i < 10; i++) {
             messageStore1.putMessage(buildMessage());
         }
-        Thread.sleep(200);
-
         checkMessage(messageStore2, 10, 0);
-
-        Thread.sleep(1000);
         final Set<String> syncStateSet = ((AutoSwitchHAService) this.messageStore1.getHaService()).getSyncStateSet();
         assertFalse(syncStateSet.contains("127.0.0.1:8001"));
     }
@@ -287,8 +281,6 @@ public class AutoSwitchHATest {
 
         changeMasterAndPutMessage(this.messageStore1, this.storeConfig1, this.messageStore2, 2, this.storeConfig2, 1, store1HaAddress, 10);
         checkMessage(this.messageStore2, 10, 0);
-
-        Thread.sleep(1000);
         // Check syncStateSet
         final Set<String> result = syncStateSet.get();
         assertTrue(result.contains("127.0.0.1:8000"));
@@ -334,7 +326,6 @@ public class AutoSwitchHATest {
         // Step2: add new broker3, link to broker1
         messageStore3.getHaService().changeToSlave("", 1, 3L);
         messageStore3.getHaService().updateHaMasterAddress("127.0.0.1:10912");
-        Thread.sleep(6000);
         checkMessage(messageStore3, 10, 0);
     }
 
@@ -371,7 +362,6 @@ public class AutoSwitchHATest {
         // Step4: add broker3 as slave, only have 10 msg from offset 10;
         messageStore3.getHaService().changeToSlave("", 2, 3L);
         messageStore3.getHaService().updateHaMasterAddress(store1HaAddress);
-        Thread.sleep(6000);
 
         checkMessage(messageStore3, 10, 10);
     }
@@ -408,7 +398,7 @@ public class AutoSwitchHATest {
         // Step4: add broker3 as slave
         messageStore3.getHaService().changeToSlave("", 2, 3L);
         messageStore3.getHaService().updateHaMasterAddress(store1HaAddress);
-        Thread.sleep(6000);
+
         checkMessage(messageStore3, 10, 10);
 
         // Step5: change broker2 as leader, broker3 as follower
@@ -420,7 +410,7 @@ public class AutoSwitchHATest {
         this.storeConfig1.setBrokerRole(BrokerRole.SLAVE);
         this.messageStore1.getHaService().changeToSlave("", 3, 1L);
         this.messageStore1.getHaService().updateHaMasterAddress(this.store2HaAddress);
-        Thread.sleep(6000);
+
         checkMessage(messageStore1, 20, 0);
     }
 
@@ -448,13 +438,12 @@ public class AutoSwitchHATest {
         // Step2: add new broker3, link to broker1. because broker3 request sync from lastFile, so it only synced 10 msg from offset 10;
         messageStore3.getHaService().changeToSlave("", 2, 3L);
         messageStore3.getHaService().updateHaMasterAddress("127.0.0.1:10912");
-        Thread.sleep(6000);
+
         checkMessage(messageStore3, 10, 10);
     }
 
     @After
     public void destroy() throws Exception {
-        Thread.sleep(5000L);
         if (this.messageStore2 != null) {
             messageStore2.shutdown();
             messageStore2.destroy();
@@ -494,7 +483,7 @@ public class AutoSwitchHATest {
         msg.setTags("TAG1");
         msg.setBody(MessageBody);
         msg.setKeys(String.valueOf(System.currentTimeMillis()));
-        msg.setQueueId(Math.abs(QueueId.getAndIncrement()) % QUEUE_TOTAL);
+        msg.setQueueId(Math.abs(QueueId.getAndIncrement()) % queueTotal);
         msg.setSysFlag(0);
         msg.setBornTimestamp(System.currentTimeMillis());
         msg.setStoreHost(StoreHost);
diff --git a/store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeMessageTest.java b/store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeMessageTest.java
index e554ba0..f70485d 100644
--- a/store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeMessageTest.java
+++ b/store/src/test/java/org/apache/rocketmq/store/queue/BatchConsumeMessageTest.java
@@ -17,17 +17,25 @@
 
 package org.apache.rocketmq.store.queue;
 
+import java.io.File;
+import java.util.ArrayDeque;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.Queue;
+import java.util.Random;
+import java.util.UUID;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.attribute.CQType;
 import org.apache.rocketmq.common.message.MessageAccessor;
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageDecoder;
 import org.apache.rocketmq.common.message.MessageExt;
+import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.common.sysflag.MessageSysFlag;
 import org.apache.rocketmq.common.utils.QueueTypeUtils;
 import org.apache.rocketmq.store.GetMessageResult;
 import org.apache.rocketmq.store.GetMessageStatus;
-import org.apache.rocketmq.common.message.MessageExtBrokerInner;
 import org.apache.rocketmq.store.MessageStore;
 import org.apache.rocketmq.store.PutMessageResult;
 import org.apache.rocketmq.store.PutMessageStatus;
@@ -37,15 +45,6 @@ import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.File;
-import java.util.ArrayDeque;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Objects;
-import java.util.Queue;
-import java.util.Random;
-import java.util.UUID;
-
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.awaitility.Awaitility.await;
 
@@ -209,12 +208,18 @@ public class BatchConsumeMessageTest extends QueueTestBase {
         Assert.assertEquals(0, messageStore.getMinOffsetInQueue(topic, 0));
         Assert.assertEquals(190, messageStore.getMaxOffsetInQueue(topic, 0));
 
-        Thread.sleep(5 * 1000);
         int maxBatchDeleteFilesNum = messageStore.getMessageStoreConfig().getMaxBatchDeleteFilesNum();
         messageStore.getCommitLog().deleteExpiredFile(1L, 100, 12000, true, maxBatchDeleteFilesNum);
         Assert.assertEquals(80, messageStore.getOffsetInQueueByTime(topic, 0, timeMid));
-        Thread.sleep(70 * 1000);
-        Assert.assertEquals(180, messageStore.getOffsetInQueueByTime(topic, 0, timeMid));
+
+        // can set periodic interval for executing  DefaultMessageStore.this.cleanFilesPeriodically() method, we can execute following code.
+        // default periodic interval is 60s, This code snippet will take 60 seconds。
+        /*final long a = timeMid;
+        await().atMost(Duration.ofMinutes(2)).until(()->{
+            long time = messageStore.getOffsetInQueueByTime(topic, 0, a);
+            return 180 ==time;
+        });
+        Assert.assertEquals(180, messageStore.getOffsetInQueueByTime(topic, 0, timeMid));*/
     }
 
     @Test
@@ -290,7 +295,7 @@ public class BatchConsumeMessageTest extends QueueTestBase {
                 timeStart = putMessageResult.getAppendMessageResult().getStoreTimestamp();
             }
             if (i == 30) {
-                timeMid = putMessageResult.getAppendMessageResult().getStoreTimestamp();;
+                timeMid = putMessageResult.getAppendMessageResult().getStoreTimestamp();
             }
 
         }

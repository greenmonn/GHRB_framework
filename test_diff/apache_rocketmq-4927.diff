diff --git a/srvutil/src/test/java/logback-test.xml b/srvutil/src/test/java/logback-test.xml
new file mode 100644
index 0000000..2835f5d
--- /dev/null
+++ b/srvutil/src/test/java/logback-test.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+  Licensed to the Apache Software Foundation (ASF) under one or more
+  contributor license agreements.  See the NOTICE file distributed with
+  this work for additional information regarding copyright ownership.
+  The ASF licenses this file to You under the Apache License, Version 2.0
+  (the "License"); you may not use this file except in compliance with
+  the License.  You may obtain a copy of the License at
+
+      http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+  -->
+<configuration>
+    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
+        <encoder>
+            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
+        </encoder>
+    </appender>
+
+    <root level="debug">
+        <appender-ref ref="STDOUT" />
+    </root>
+</configuration>
\ No newline at end of file
diff --git a/srvutil/src/test/java/org/apache/rocketmq/srvutil/FileWatchServiceTest.java b/srvutil/src/test/java/org/apache/rocketmq/srvutil/FileWatchServiceTest.java
index 791abcf..ff5abf7 100644
--- a/srvutil/src/test/java/org/apache/rocketmq/srvutil/FileWatchServiceTest.java
+++ b/srvutil/src/test/java/org/apache/rocketmq/srvutil/FileWatchServiceTest.java
@@ -20,6 +20,8 @@ package org.apache.rocketmq.srvutil;
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
 import java.util.concurrent.Semaphore;
 import java.util.concurrent.TimeUnit;
 import org.junit.Rule;
@@ -39,17 +41,16 @@ public class FileWatchServiceTest {
     public void watchSingleFile() throws Exception {
         final File file = tempFolder.newFile();
         final Semaphore waitSemaphore = new Semaphore(0);
-        FileWatchService fileWatchService = new FileWatchService(new String[] {file.getAbsolutePath()}, new FileWatchService.Listener() {
-            @Override
-            public void onChanged(String path) {
-                assertThat(file.getAbsolutePath()).isEqualTo(path);
-                waitSemaphore.release();
-            }
+        FileWatchService fileWatchService = new FileWatchService(new String[] {file.getAbsolutePath()}, path -> {
+            assertThat(file.getAbsolutePath()).isEqualTo(path);
+            waitSemaphore.release();
         });
         fileWatchService.start();
+        fileWatchService.awaitStarted(1000);
         modifyFile(file);
         boolean result = waitSemaphore.tryAcquire(1, 1000, TimeUnit.MILLISECONDS);
         assertThat(result).isTrue();
+        fileWatchService.shutdown();
     }
 
     @Test
@@ -57,46 +58,42 @@ public class FileWatchServiceTest {
         File file = tempFolder.newFile();
         final Semaphore waitSemaphore = new Semaphore(0);
         FileWatchService fileWatchService = new FileWatchService(new String[] {file.getAbsolutePath()},
-            new FileWatchService.Listener() {
-            @Override
-            public void onChanged(String path) {
-                waitSemaphore.release();
-            }
-        });
+            path -> waitSemaphore.release());
         fileWatchService.start();
-        file.delete();
+        fileWatchService.awaitStarted(1000);
+        assertThat(file.delete()).isTrue();
         boolean result = waitSemaphore.tryAcquire(1, 1000, TimeUnit.MILLISECONDS);
         assertThat(result).isFalse();
-        file.createNewFile();
+        assertThat(file.createNewFile()).isTrue();
         modifyFile(file);
         result = waitSemaphore.tryAcquire(1, 2000, TimeUnit.MILLISECONDS);
         assertThat(result).isTrue();
+        fileWatchService.shutdown();
     }
 
     @Test
     public void watchTwoFile_FileDeleted() throws Exception {
         File fileA = tempFolder.newFile();
         File fileB = tempFolder.newFile();
+        Files.write(fileA.toPath(), "Hello, World!".getBytes(StandardCharsets.UTF_8));
+        Files.write(fileB.toPath(), "Hello, World!".getBytes(StandardCharsets.UTF_8));
         final Semaphore waitSemaphore = new Semaphore(0);
         FileWatchService fileWatchService = new FileWatchService(
             new String[] {fileA.getAbsolutePath(), fileB.getAbsolutePath()},
-            new FileWatchService.Listener() {
-                @Override
-                public void onChanged(String path) {
-                    waitSemaphore.release();
-                }
-            });
+            path -> waitSemaphore.release());
         fileWatchService.start();
-        fileA.delete();
+        fileWatchService.awaitStarted(1000);
+        assertThat(fileA.delete()).isTrue();
         boolean result = waitSemaphore.tryAcquire(1, 1000, TimeUnit.MILLISECONDS);
         assertThat(result).isFalse();
         modifyFile(fileB);
         result = waitSemaphore.tryAcquire(1, 1000, TimeUnit.MILLISECONDS);
         assertThat(result).isTrue();
-        fileA.createNewFile();
+        assertThat(fileA.createNewFile()).isTrue();
         modifyFile(fileA);
         result = waitSemaphore.tryAcquire(1, 1000, TimeUnit.MILLISECONDS);
         assertThat(result).isTrue();
+        fileWatchService.shutdown();
     }
 
     @Test
@@ -106,17 +103,16 @@ public class FileWatchServiceTest {
         final Semaphore waitSemaphore = new Semaphore(0);
         FileWatchService fileWatchService = new FileWatchService(
             new String[] {fileA.getAbsolutePath(), fileB.getAbsolutePath()},
-            new FileWatchService.Listener() {
-            @Override
-            public void onChanged(String path) {
+            path -> {
                 assertThat(path).isEqualTo(fileA.getAbsolutePath());
                 waitSemaphore.release();
-            }
-        });
+            });
         fileWatchService.start();
+        fileWatchService.awaitStarted(1000);
         modifyFile(fileA);
         boolean result = waitSemaphore.tryAcquire(1, 1000, TimeUnit.MILLISECONDS);
         assertThat(result).isTrue();
+        fileWatchService.shutdown();
     }
 
     @Test
@@ -126,13 +122,9 @@ public class FileWatchServiceTest {
         final Semaphore waitSemaphore = new Semaphore(0);
         FileWatchService fileWatchService = new FileWatchService(
             new String[] {fileA.getAbsolutePath(), fileB.getAbsolutePath()},
-            new FileWatchService.Listener() {
-                @Override
-                public void onChanged(String path) {
-                    waitSemaphore.release();
-                }
-            });
+            path -> waitSemaphore.release());
         fileWatchService.start();
+        fileWatchService.awaitStarted(1000);
         modifyFile(fileA);
         modifyFile(fileB);
         boolean result = waitSemaphore.tryAcquire(2, 1000, TimeUnit.MILLISECONDS);

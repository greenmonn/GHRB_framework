diff --git a/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQAsyncSendProducer.java b/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQAsyncSendProducer.java
index 9907cac..d28a5fd 100644
--- a/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQAsyncSendProducer.java
+++ b/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQAsyncSendProducer.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.client.rmq;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -108,7 +109,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
         Message metaqMsg = (Message) msg;
         try {
             producer.send(metaqMsg, sendCallback);
-            msgBodys.addData(new String(metaqMsg.getBody()));
+            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
         } catch (Exception e) {
             e.printStackTrace();
@@ -119,7 +120,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
         this.msgSize = msgSize;
 
         for (int i = 0; i < msgSize; i++) {
-            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes());
+            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));
             this.asyncSend(msg);
         }
     }
@@ -128,7 +129,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
         Message metaqMsg = (Message) msg;
         try {
             producer.send(metaqMsg, selector, arg, sendCallback);
-            msgBodys.addData(new String(metaqMsg.getBody()));
+            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
         } catch (Exception e) {
             e.printStackTrace();
@@ -138,7 +139,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
     public void asyncSend(int msgSize, MessageQueueSelector selector) {
         this.msgSize = msgSize;
         for (int i = 0; i < msgSize; i++) {
-            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes());
+            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));
             this.asyncSend(msg, selector, i);
         }
     }
@@ -147,7 +148,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
         Message metaqMsg = (Message) msg;
         try {
             producer.send(metaqMsg, mq, sendCallback);
-            msgBodys.addData(new String(metaqMsg.getBody()));
+            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
         } catch (Exception e) {
             e.printStackTrace();
@@ -157,7 +158,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
     public void asyncSend(int msgSize, MessageQueue mq) {
         this.msgSize = msgSize;
         for (int i = 0; i < msgSize; i++) {
-            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes());
+            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));
             this.asyncSend(msg, mq);
         }
     }
@@ -178,7 +179,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
         Message metaqMsg = (Message) msg;
         try {
             producer.sendOneway(metaqMsg);
-            msgBodys.addData(new String(metaqMsg.getBody()));
+            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
         } catch (Exception e) {
             e.printStackTrace();
@@ -187,7 +188,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
 
     public void sendOneWay(int msgSize) {
         for (int i = 0; i < msgSize; i++) {
-            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes());
+            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));
             this.sendOneWay(msg);
         }
     }
@@ -196,7 +197,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
         Message metaqMsg = (Message) msg;
         try {
             producer.sendOneway(metaqMsg, mq);
-            msgBodys.addData(new String(metaqMsg.getBody()));
+            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
         } catch (Exception e) {
             e.printStackTrace();
@@ -205,7 +206,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
 
     public void sendOneWay(int msgSize, MessageQueue mq) {
         for (int i = 0; i < msgSize; i++) {
-            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes());
+            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));
             this.sendOneWay(msg, mq);
         }
     }
@@ -214,7 +215,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
         Message metaqMsg = (Message) msg;
         try {
             producer.sendOneway(metaqMsg, selector, arg);
-            msgBodys.addData(new String(metaqMsg.getBody()));
+            msgBodys.addData(new String(metaqMsg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
         } catch (Exception e) {
             e.printStackTrace();
@@ -223,7 +224,7 @@ public class RMQAsyncSendProducer extends AbstractMQProducer {
 
     public void sendOneWay(int msgSize, MessageQueueSelector selector) {
         for (int i = 0; i < msgSize; i++) {
-            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes());
+            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));
             this.sendOneWay(msg, selector, i);
         }
     }
diff --git a/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalProducer.java b/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalProducer.java
index 001db95..eb8cf44 100644
--- a/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalProducer.java
+++ b/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQNormalProducer.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.client.rmq;
 
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.Map;
 import org.apache.log4j.Logger;
@@ -105,9 +106,9 @@ public class RMQNormalProducer extends AbstractMQProducer {
             sendResult.setMsgId(metaqResult.getMsgId());
             sendResult.setSendResult(metaqResult.getSendStatus().equals(SendStatus.SEND_OK));
             sendResult.setBrokerIp(metaqResult.getMessageQueue().getBrokerName());
-            msgBodys.addData(new String(message.getBody()));
+            msgBodys.addData(new String(message.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
-            originMsgIndex.put(new String(message.getBody()), metaqResult);
+            originMsgIndex.put(new String(message.getBody(), StandardCharsets.UTF_8), metaqResult);
         } catch (Exception e) {
             if (isDebug) {
                 e.printStackTrace();
@@ -151,9 +152,9 @@ public class RMQNormalProducer extends AbstractMQProducer {
             sendResult.setMsgId(metaqResult.getMsgId());
             sendResult.setSendResult(metaqResult.getSendStatus().equals(SendStatus.SEND_OK));
             sendResult.setBrokerIp(metaqResult.getMessageQueue().getBrokerName());
-            msgBodys.addData(new String(msg.getBody()));
+            msgBodys.addData(new String(msg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
-            originMsgIndex.put(new String(msg.getBody()), metaqResult);
+            originMsgIndex.put(new String(msg.getBody(), StandardCharsets.UTF_8), metaqResult);
         } catch (Exception e) {
             if (isDebug) {
                 e.printStackTrace();
diff --git a/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQTransactionalProducer.java b/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQTransactionalProducer.java
index dcc76b2..69563e0 100644
--- a/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQTransactionalProducer.java
+++ b/test/src/main/java/org/apache/rocketmq/test/client/rmq/RMQTransactionalProducer.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.client.rmq;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.log4j.Logger;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.LocalTransactionState;
@@ -82,10 +83,10 @@ public class RMQTransactionalProducer extends AbstractMQProducer {
             sendResult.setSendResult(true);
             sendResult.setBrokerIp(metaqResult.getMessageQueue().getBrokerName());
             if (commitMsg) {
-                msgBodys.addData(new String(message.getBody()));
+                msgBodys.addData(new String(message.getBody(), StandardCharsets.UTF_8));
             }
             originMsgs.addData(msg);
-            originMsgIndex.put(new String(message.getBody()), metaqResult);
+            originMsgIndex.put(new String(message.getBody(), StandardCharsets.UTF_8), metaqResult);
         } catch (MQClientException e) {
             if (isDebug) {
                 e.printStackTrace();
diff --git a/test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQProducer.java b/test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQProducer.java
index 1e0a19a..258000b 100644
--- a/test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQProducer.java
+++ b/test/src/main/java/org/apache/rocketmq/test/clientinterface/AbstractMQProducer.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.clientinterface;
 
+import java.nio.charset.StandardCharsets;
 import java.util.Date;
 import java.util.List;
 import org.apache.rocketmq.common.message.MessageQueue;
@@ -98,7 +99,7 @@ public abstract class AbstractMQProducer extends MQCollector implements MQProduc
         Object objMsg = null;
         if (this instanceof RMQNormalProducer) {
             org.apache.rocketmq.common.message.Message msg = new org.apache.rocketmq.common.message.Message(
-                topic, (RandomUtil.getStringByUUID() + "." + new Date()).getBytes());
+                topic, (RandomUtil.getStringByUUID() + "." + new Date()).getBytes(StandardCharsets.UTF_8));
             objMsg = msg;
             if (tag != null) {
                 msg.setTags(tag);
diff --git a/test/src/main/java/org/apache/rocketmq/test/factory/MQMessageFactory.java b/test/src/main/java/org/apache/rocketmq/test/factory/MQMessageFactory.java
index f998fcb..ca472f0 100644
--- a/test/src/main/java/org/apache/rocketmq/test/factory/MQMessageFactory.java
+++ b/test/src/main/java/org/apache/rocketmq/test/factory/MQMessageFactory.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.factory;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -33,7 +34,7 @@ public class MQMessageFactory {
     public static List<Object> getRMQMessage(String tag, String topic, int msgSize) {
         List<Object> msgs = new ArrayList<Object>();
         for (int i = 0; i < msgSize; i++) {
-            msgs.add(new Message(topic, tag, RandomUtil.getStringByUUID().getBytes()));
+            msgs.add(new Message(topic, tag, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8)));
         }
 
         return msgs;
@@ -43,7 +44,7 @@ public class MQMessageFactory {
         List<Object> msgs = new ArrayList<Object>();
         for (int i = 0; i < msgSize; i++) {
             for (String tag : tags) {
-                msgs.add(new Message(topic, tag, RandomUtil.getStringByUUID().getBytes()));
+                msgs.add(new Message(topic, tag, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8)));
             }
         }
         return msgs;
@@ -52,7 +53,7 @@ public class MQMessageFactory {
     public static List<Object> getMessageBody(List<Object> msgs) {
         List<Object> msgBodys = new ArrayList<Object>();
         for (Object msg : msgs) {
-            msgBodys.add(new String(((Message) msg).getBody()));
+            msgBodys.add(new String(((Message) msg).getBody(), StandardCharsets.UTF_8));
         }
 
         return msgBodys;
@@ -69,7 +70,7 @@ public class MQMessageFactory {
     public static List<Object> getDelayMsg(String topic, int delayLevel, int msgSize) {
         List<Object> msgs = new ArrayList<Object>();
         for (int i = 0; i < msgSize; i++) {
-            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes());
+            Message msg = new Message(topic, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));
             msg.setDelayTimeLevel(delayLevel);
             msgs.add(msg);
         }
@@ -79,7 +80,7 @@ public class MQMessageFactory {
     public static List<Object> getKeyMsg(String topic, String key, int msgSize) {
         List<Object> msgs = new ArrayList<Object>();
         for (int i = 0; i < msgSize; i++) {
-            Message msg = new Message(topic, null, key, RandomUtil.getStringByUUID().getBytes());
+            Message msg = new Message(topic, null, key, RandomUtil.getStringByUUID().getBytes(StandardCharsets.UTF_8));
             msgs.add(msg);
         }
         return msgs;
@@ -111,7 +112,7 @@ public class MQMessageFactory {
     public static List<Object> getMsg(String topic, int msgSize, String tag) {
         List<Object> msgs = new ArrayList<Object>();
         while (msgSize > 0) {
-            Message msg = new Message(topic, (index++).toString().getBytes());
+            Message msg = new Message(topic, (index++).toString().getBytes(StandardCharsets.UTF_8));
             if (tag != null) {
                 msg.setTags(tag);
             }
diff --git a/test/src/main/java/org/apache/rocketmq/test/factory/MessageFactory.java b/test/src/main/java/org/apache/rocketmq/test/factory/MessageFactory.java
index 8f71700..f5b5428 100644
--- a/test/src/main/java/org/apache/rocketmq/test/factory/MessageFactory.java
+++ b/test/src/main/java/org/apache/rocketmq/test/factory/MessageFactory.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.factory;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -30,13 +31,11 @@ public class MessageFactory {
     }
 
     public static Message getStringMessage(String topic, String body) {
-        Message msg = new Message(topic, body.getBytes());
-        return msg;
+        return new Message(topic, body.getBytes(StandardCharsets.UTF_8));
     }
 
     public static Message getStringMessageByTag(String topic, String tags, String body) {
-        Message msg = new Message(topic, tags, body.getBytes());
-        return msg;
+        return new Message(topic, tags, body.getBytes(StandardCharsets.UTF_8));
     }
 
     public static Message getRandomMessageByTag(String topic, String tags) {
diff --git a/test/src/main/java/org/apache/rocketmq/test/listener/AbstractListener.java b/test/src/main/java/org/apache/rocketmq/test/listener/AbstractListener.java
index a186e73..dd26939 100644
--- a/test/src/main/java/org/apache/rocketmq/test/listener/AbstractListener.java
+++ b/test/src/main/java/org/apache/rocketmq/test/listener/AbstractListener.java
@@ -28,7 +28,7 @@ import org.apache.rocketmq.test.clientinterface.MQCollector;
 import org.apache.rocketmq.test.util.TestUtil;
 
 public class AbstractListener extends MQCollector implements MessageListener {
-    public static Logger logger = Logger.getLogger(AbstractListener.class);
+    public static final Logger logger = Logger.getLogger(AbstractListener.class);
     protected boolean isDebug = true;
     protected String listenerName = null;
     protected Collection<Object> allSendMsgs = null;
diff --git a/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQDelayListener.java b/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQDelayListener.java
index ad36928..78cbb4e 100644
--- a/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQDelayListener.java
+++ b/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQDelayListener.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.listener.rmq.concurrent;
 
+import java.nio.charset.StandardCharsets;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyStatus;
 import org.apache.rocketmq.client.consumer.listener.MessageListenerConcurrently;
@@ -53,7 +54,7 @@ public class RMQDelayListener extends AbstractListener implements MessageListene
                 logger.info(listenerName + ":" + msg);
             }
 
-            msgBodys.addData(new String(msg.getBody()));
+            msgBodys.addData(new String(msg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
             msgDelayTimes.addData(Math.abs(recvTime - msg.getBornTimestamp()));
         }
diff --git a/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListener.java b/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListener.java
index 07de524..e49a90a 100644
--- a/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListener.java
+++ b/test/src/main/java/org/apache/rocketmq/test/listener/rmq/concurrent/RMQNormalListener.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.listener.rmq.concurrent;
 
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.client.consumer.listener.ConsumeConcurrentlyContext;
@@ -61,10 +62,10 @@ public class RMQNormalListener extends AbstractListener implements MessageListen
                 }
             }
 
-            msgBodys.addData(new String(msg.getBody()));
+            msgBodys.addData(new String(msg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
             if (originMsgIndex != null) {
-                originMsgIndex.put(new String(msg.getBody()), msg);
+                originMsgIndex.put(new String(msg.getBody(), StandardCharsets.UTF_8), msg);
             }
         }
         return consumeStatus;
diff --git a/test/src/main/java/org/apache/rocketmq/test/listener/rmq/order/RMQOrderListener.java b/test/src/main/java/org/apache/rocketmq/test/listener/rmq/order/RMQOrderListener.java
index f483866..b4d5442 100644
--- a/test/src/main/java/org/apache/rocketmq/test/listener/rmq/order/RMQOrderListener.java
+++ b/test/src/main/java/org/apache/rocketmq/test/listener/rmq/order/RMQOrderListener.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.listener.rmq.order;
 
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -56,7 +57,7 @@ public class RMQOrderListener extends AbstractListener implements MessageListene
             msgQueue = msgs.get(key);
         }
 
-        msgQueue.add(new String(msg.getBody()));
+        msgQueue.add(new String(msg.getBody(), StandardCharsets.UTF_8));
         msgs.put(key, msgQueue);
     }
 
@@ -77,7 +78,7 @@ public class RMQOrderListener extends AbstractListener implements MessageListene
             }
 
             putMsg(msg);
-            msgBodys.addData(new String(msg.getBody()));
+            msgBodys.addData(new String(msg.getBody(), StandardCharsets.UTF_8));
             originMsgs.addData(msg);
         }
 
diff --git a/test/src/main/java/org/apache/rocketmq/test/lmq/benchmark/BenchLmqStore.java b/test/src/main/java/org/apache/rocketmq/test/lmq/benchmark/BenchLmqStore.java
index d9335eb..df71fb3 100644
--- a/test/src/main/java/org/apache/rocketmq/test/lmq/benchmark/BenchLmqStore.java
+++ b/test/src/main/java/org/apache/rocketmq/test/lmq/benchmark/BenchLmqStore.java
@@ -16,6 +16,9 @@
  */
 package org.apache.rocketmq.test.lmq.benchmark;
 
+import com.google.common.math.IntMath;
+import com.google.common.math.LongMath;
+import java.nio.charset.StandardCharsets;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.client.consumer.DefaultMQPullConsumer;
 import org.apache.rocketmq.client.consumer.PullCallback;
@@ -127,9 +130,9 @@ public class BenchLmqStore {
         if (enableSub && lmqNum > 0 && StringUtils.isNotBlank(brokerName)) {
             for (int i = 0; i < lmqNum; i++) {
                 long idx = rid.incrementAndGet();
-                String queue = LMQ_PREFIX + queuePrefix + idx % lmqNum;
+                String queue = LMQ_PREFIX + queuePrefix + LongMath.mod(idx, lmqNum);
                 MessageQueue mq = new MessageQueue(queue, brokerName, 0);
-                int queueHash = Math.abs(queue.hashCode()) % consumerThreadNum;
+                int queueHash = IntMath.mod(queue.hashCode(), consumerThreadNum);
                 pullEvent.putIfAbsent(queueHash, new ConcurrentHashMap<>());
                 pullEvent.get(queueHash).put(mq, idx);
             }
@@ -142,7 +145,7 @@ public class BenchLmqStore {
         for (int j = 0; j < size; j += 10) {
             sb.append("hello baby");
         }
-        byte[] body = sb.toString().getBytes();
+        byte[] body = sb.toString().getBytes(StandardCharsets.UTF_8);
         String pubKey = "pub";
         ExecutorService sendPool = Executors.newFixedThreadPool(sendThreadNum);
         for (int i = 0; i < sendThreadNum; i++) {
@@ -172,7 +175,7 @@ public class BenchLmqStore {
                         if (enableSub) {
                             MessageQueue mq = new MessageQueue(queue, sendResult.getMessageQueue().getBrokerName(),
                                     lmqNum > 0 ? 0 : sendResult.getMessageQueue().getQueueId());
-                            int queueHash = Math.abs(queue.hashCode()) % consumerThreadNum;
+                            int queueHash = IntMath.mod(queue.hashCode(), consumerThreadNum);
                             pullEvent.putIfAbsent(queueHash, new ConcurrentHashMap<>());
                             pullEvent.get(queueHash).put(mq, idx);
                         }
diff --git a/test/src/main/java/org/apache/rocketmq/test/schema/SchemaDefiner.java b/test/src/main/java/org/apache/rocketmq/test/schema/SchemaDefiner.java
index 0180fa8..85d2677 100644
--- a/test/src/main/java/org/apache/rocketmq/test/schema/SchemaDefiner.java
+++ b/test/src/main/java/org/apache/rocketmq/test/schema/SchemaDefiner.java
@@ -53,11 +53,11 @@ import org.apache.rocketmq.tools.admin.DefaultMQAdminExt;
 import org.reflections.Reflections;
 
 public class SchemaDefiner {
-    public static Map<Class<?>, Set<String>> ignoredFields = new HashMap<>();
+    public static final Map<Class<?>, Set<String>> ignoredFields = new HashMap<>();
     //Use name as the key instead of X.class directly. X.class is not equal to field.getType().
-    public static Set<String> fieldClassNames = new HashSet<>();
-    public static List<Class<?>> apiClassList = new ArrayList<>();
-    public static List<Class<?>> protocolClassList = new ArrayList<>();
+    public static final Set<String> fieldClassNames = new HashSet<>();
+    public static final List<Class<?>> apiClassList = new ArrayList<>();
+    public static final List<Class<?>> protocolClassList = new ArrayList<>();
 
     public static void doLoad() {
         {
diff --git a/test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java b/test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java
index 5184afc..06fcaf4 100644
--- a/test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java
+++ b/test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java
@@ -19,12 +19,16 @@ package org.apache.rocketmq.test.schema;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.FileWriter;
 import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -201,9 +205,11 @@ public class SchemaTools {
     public static void write(Map<String, TreeMap<String, String>> schemaMap, String base, String label) throws Exception {
         for (Map.Entry<String, TreeMap<String, String>> entry : schemaMap.entrySet()) {
             TreeMap<String, String> map = entry.getValue();
-            File file = new File(String.format("%s/%s/%s.schema", base, label, entry.getKey()));
-            FileWriter fileWriter = new FileWriter(file);
-            fileWriter.write("/*\n" +
+            final String fileName = String.format("%s/%s/%s.schema", base, label, entry.getKey());
+            File file = new File(fileName);
+            FileOutputStream fileStream = new FileOutputStream(file);
+            Writer writer = new OutputStreamWriter(fileStream, StandardCharsets.UTF_8);
+            writer.write("/*\n" +
                 " * Licensed to the Apache Software Foundation (ASF) under one or more\n" +
                 " * contributor license agreements.  See the NOTICE file distributed with\n" +
                 " * this work for additional information regarding copyright ownership.\n" +
@@ -220,9 +226,9 @@ public class SchemaTools {
                 " * limitations under the License.\n" +
                 " */\n\n\n");
             for (Map.Entry<String, String> kv: map.entrySet()) {
-                fileWriter.append(String.format("%s : %s\n", kv.getKey(), kv.getValue()));
+                writer.append(String.format("%s : %s\n", kv.getKey(), kv.getValue()));
             }
-            fileWriter.close();
+            writer.close();
         }
     }
 
@@ -230,7 +236,7 @@ public class SchemaTools {
         File dir = new File(String.format("%s/%s", base, label));
         Map<String, TreeMap<String, String>> schemaMap = new TreeMap<>();
         for (File file: dir.listFiles()) {
-            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)));
+            BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file), StandardCharsets.UTF_8));
             String line = null;
             TreeMap<String, String> kvs = new TreeMap<>();
             while ((line = br.readLine()) != null) {
diff --git a/test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java b/test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java
index c90c5c9..8aa2840 100644
--- a/test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java
+++ b/test/src/main/java/org/apache/rocketmq/test/util/DuplicateMessageInfo.java
@@ -21,6 +21,7 @@ import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.charset.StandardCharsets;
 import java.text.DecimalFormat;
 import java.util.HashMap;
 import java.util.LinkedList;
@@ -108,7 +109,7 @@ public class DuplicateMessageInfo<T> {
             for (int i = 0; i < msgListSize; i++)
                 strToWrite += strBQueue.get(i).toString() + "\r\n";
 
-            byteToWrite = strToWrite.getBytes();
+            byteToWrite = strToWrite.getBytes(StandardCharsets.UTF_8);
             out.write(byteToWrite);
             out.close();
         }
diff --git a/test/src/main/java/org/apache/rocketmq/test/util/FileUtil.java b/test/src/main/java/org/apache/rocketmq/test/util/FileUtil.java
index de11010..49f986b 100644
--- a/test/src/main/java/org/apache/rocketmq/test/util/FileUtil.java
+++ b/test/src/main/java/org/apache/rocketmq/test/util/FileUtil.java
@@ -18,8 +18,12 @@
 package org.apache.rocketmq.test.util;
 
 import java.io.File;
+import java.io.FileOutputStream;
 import java.io.FileWriter;
 import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
+import java.nio.charset.StandardCharsets;
 import java.util.Map.Entry;
 import java.util.Properties;
 
@@ -77,9 +81,10 @@ public class FileUtil {
     }
 
     private void writeFile(File file, String content, boolean append) {
-        FileWriter writer = null;
+        Writer writer = null;
         try {
-            writer = new FileWriter(file.getAbsoluteFile(), append);
+            FileOutputStream fileStream = new FileOutputStream(file, append);
+            writer = new OutputStreamWriter(fileStream, StandardCharsets.UTF_8);
             writer.write(content);
             writer.flush();
         } catch (IOException e) {
diff --git a/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java b/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java
index 591b3b7..604ee5c 100644
--- a/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java
+++ b/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.test.util;
 
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.LinkedHashMap;
@@ -94,10 +95,10 @@ public final class TestUtil {
         try {
             byte[] b = new byte[1024];
             int n = System.in.read(b);
-            String s = new String(b, 0, n - 1).replace("\r", "").replace("\n", "");
+            String s = new String(b, 0, n - 1, StandardCharsets.UTF_8).replace("\r", "").replace("\n", "");
             while (!s.equals(keyWord)) {
                 n = System.in.read(b);
-                s = new String(b, 0, n - 1);
+                s = new String(b, 0, n - 1, StandardCharsets.UTF_8);
             }
         } catch (IOException e) {
             e.printStackTrace();

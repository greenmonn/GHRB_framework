diff --git a/test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java b/test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java
index 7fe49b1..8e6eec3 100644
--- a/test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java
@@ -17,8 +17,10 @@
 
 package org.apache.rocketmq.test.smoke;
 
+import java.time.Duration;
 import java.util.List;
-import org.apache.log4j.Logger;
+import java.util.concurrent.atomic.AtomicReference;
+import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.admin.ConsumeStats;
 import org.apache.rocketmq.common.message.MessageClientExt;
 import org.apache.rocketmq.common.message.MessageConst;
@@ -33,11 +35,14 @@ import org.junit.After;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.awaitility.Awaitility;
 
 import static com.google.common.truth.Truth.assertThat;
 
 public class NormalMessageSendAndRecvIT extends BaseConf {
-    private static Logger logger = Logger.getLogger(NormalMessageSendAndRecvIT.class);
+    private static final Logger logger = LoggerFactory.getLogger(NormalMessageSendAndRecvIT.class);
     private RMQNormalConsumer consumer = null;
     private RMQNormalProducer producer = null;
     private String topic = null;
@@ -57,17 +62,32 @@ public class NormalMessageSendAndRecvIT extends BaseConf {
 
     @After
     public void tearDown() {
-        super.shutdown();
+        BaseConf.shutdown();
     }
 
     @Test
     public void testSynSendMessage() throws Exception {
+        AtomicReference<List<MessageQueue>> messageQueueList = new AtomicReference<>();
+        AtomicReference<ConsumeStats> consumeStats = new AtomicReference<>();
+        Awaitility.await().atMost(Duration.ofSeconds(120))
+            .until(() -> {
+                try {
+                    consumeStats.set(defaultMQAdminExt.examineConsumeStats(group));
+                    messageQueueList.set(producer.getProducer().fetchPublishMessageQueues(topic));
+                    return !messageQueueList.get().isEmpty() && null != consumeStats.get()
+                        && consumeStats.get().getOffsetTable().keySet().containsAll(messageQueueList.get());
+                } catch (MQClientException e) {
+                    logger.debug("Exception raised while checking producer and consumer are started", e);
+                }
+                return false;
+            });
+
         int msgSize = 10;
-        List<MessageQueue> messageQueueList = producer.getProducer().fetchPublishMessageQueues(topic);
-        for (MessageQueue messageQueue: messageQueueList) {
+        for (MessageQueue messageQueue : messageQueueList.get()) {
             producer.send(msgSize, messageQueue);
         }
-        Assert.assertEquals("Not all sent succeeded", msgSize * messageQueueList.size(), producer.getAllUndupMsgBody().size());
+        Assert.assertEquals("Not all sent succeeded", msgSize * messageQueueList.get().size(),
+            producer.getAllUndupMsgBody().size());
         consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -79,12 +99,12 @@ public class NormalMessageSendAndRecvIT extends BaseConf {
         }
         //shutdown to persist the offset
         consumer.getConsumer().shutdown();
-        ConsumeStats consumeStats = defaultMQAdminExt.examineConsumeStats(group);
+        consumeStats.set(defaultMQAdminExt.examineConsumeStats(group));
         //+1 for the retry topic
-        for (MessageQueue messageQueue: messageQueueList) {
-            Assert.assertTrue(consumeStats.getOffsetTable().containsKey(messageQueue));
-            Assert.assertEquals(msgSize, consumeStats.getOffsetTable().get(messageQueue).getConsumerOffset());
-            Assert.assertEquals(msgSize, consumeStats.getOffsetTable().get(messageQueue).getBrokerOffset());
+        for (MessageQueue messageQueue : messageQueueList.get()) {
+            Assert.assertTrue(consumeStats.get().getOffsetTable().containsKey(messageQueue));
+            Assert.assertEquals(msgSize, consumeStats.get().getOffsetTable().get(messageQueue).getConsumerOffset());
+            Assert.assertEquals(msgSize, consumeStats.get().getOffsetTable().get(messageQueue).getBrokerOffset());
         }
 
     }

diff --git a/acl/src/test/java/org/apache/rocketmq/acl/common/AclSignerTest.java b/acl/src/test/java/org/apache/rocketmq/acl/common/AclSignerTest.java
index 4c9a73f..2680d6b 100644
--- a/acl/src/test/java/org/apache/rocketmq/acl/common/AclSignerTest.java
+++ b/acl/src/test/java/org/apache/rocketmq/acl/common/AclSignerTest.java
@@ -22,12 +22,12 @@ import org.junit.Test;
 public class AclSignerTest {
 
     @Test(expected = Exception.class)
-    public void calSignatureExceptionTest(){
+    public void calSignatureExceptionTest() {
         AclSigner.calSignature(new byte[]{},"");
     }
 
     @Test
-    public void calSignatureTest(){
+    public void calSignatureTest() {
         String expectedSignature = "IUc8rrO/0gDch8CjObLQsW2rsiA=";
         Assert.assertEquals(expectedSignature, AclSigner.calSignature("RocketMQ", "12345678"));
         Assert.assertEquals(expectedSignature, AclSigner.calSignature("RocketMQ".getBytes(), "12345678"));
diff --git a/acl/src/test/java/org/apache/rocketmq/acl/common/PermissionTest.java b/acl/src/test/java/org/apache/rocketmq/acl/common/PermissionTest.java
index c824065..77e5b54 100644
--- a/acl/src/test/java/org/apache/rocketmq/acl/common/PermissionTest.java
+++ b/acl/src/test/java/org/apache/rocketmq/acl/common/PermissionTest.java
@@ -37,10 +37,10 @@ public class PermissionTest {
         Assert.assertEquals(perm, Permission.SUB);
 
         perm = Permission.parsePermFromString("PUB|SUB");
-        Assert.assertEquals(perm, Permission.PUB|Permission.SUB);
+        Assert.assertEquals(perm, Permission.PUB | Permission.SUB);
 
         perm = Permission.parsePermFromString("SUB|PUB");
-        Assert.assertEquals(perm, Permission.PUB|Permission.SUB);
+        Assert.assertEquals(perm, Permission.PUB | Permission.SUB);
 
         perm = Permission.parsePermFromString("DENY");
         Assert.assertEquals(perm, Permission.DENY);
@@ -64,13 +64,13 @@ public class PermissionTest {
         boo = Permission.checkPermission(Permission.SUB, Permission.SUB);
         Assert.assertTrue(boo);
 
-        boo = Permission.checkPermission(Permission.PUB, (byte) (Permission.PUB|Permission.SUB));
+        boo = Permission.checkPermission(Permission.PUB, (byte) (Permission.PUB | Permission.SUB));
         Assert.assertTrue(boo);
 
-        boo = Permission.checkPermission(Permission.SUB, (byte) (Permission.PUB|Permission.SUB));
+        boo = Permission.checkPermission(Permission.SUB, (byte) (Permission.PUB | Permission.SUB));
         Assert.assertTrue(boo);
 
-        boo = Permission.checkPermission(Permission.ANY, (byte) (Permission.PUB|Permission.SUB));
+        boo = Permission.checkPermission(Permission.ANY, (byte) (Permission.PUB | Permission.SUB));
         Assert.assertTrue(boo);
 
         boo = Permission.checkPermission(Permission.ANY, Permission.SUB);
@@ -112,7 +112,7 @@ public class PermissionTest {
         Assert.assertEquals(perm, Permission.DENY);
 
         perm = resourcePermMap.get(PlainAccessResource.getRetryTopic("groupB"));
-        Assert.assertEquals(perm,Permission.PUB|Permission.SUB);
+        Assert.assertEquals(perm,Permission.PUB | Permission.SUB);
 
         perm = resourcePermMap.get(PlainAccessResource.getRetryTopic("groupC"));
         Assert.assertEquals(perm, Permission.PUB);
@@ -128,7 +128,7 @@ public class PermissionTest {
         Assert.assertEquals(perm, Permission.DENY);
 
         perm = resourcePermMap.get("topicB");
-        Assert.assertEquals(perm, Permission.PUB|Permission.SUB);
+        Assert.assertEquals(perm, Permission.PUB | Permission.SUB);
 
         perm = resourcePermMap.get("topicC");
         Assert.assertEquals(perm, Permission.PUB);
@@ -156,7 +156,7 @@ public class PermissionTest {
     }
 
     @Test
-    public void AclExceptionTest(){
+    public void AclExceptionTest() {
         AclException aclException = new AclException("CAL_SIGNATURE_FAILED",10015);
         AclException aclExceptionWithMessage = new AclException("CAL_SIGNATURE_FAILED",10015,"CAL_SIGNATURE_FAILED Exception");
         Assert.assertEquals(aclException.getCode(),10015);
diff --git a/acl/src/test/java/org/apache/rocketmq/acl/common/SessionCredentialsTest.java b/acl/src/test/java/org/apache/rocketmq/acl/common/SessionCredentialsTest.java
index a1a4bde..79512f1 100644
--- a/acl/src/test/java/org/apache/rocketmq/acl/common/SessionCredentialsTest.java
+++ b/acl/src/test/java/org/apache/rocketmq/acl/common/SessionCredentialsTest.java
@@ -24,17 +24,17 @@ import java.util.Properties;
 public class SessionCredentialsTest {
 
     @Test
-    public void equalsTest(){
-        SessionCredentials sessionCredentials=new SessionCredentials("RocketMQ","12345678");
+    public void equalsTest() {
+        SessionCredentials sessionCredentials = new SessionCredentials("RocketMQ","12345678");
         sessionCredentials.setSecurityToken("abcd");
-        SessionCredentials other=new SessionCredentials("RocketMQ","12345678","abcd");
+        SessionCredentials other = new SessionCredentials("RocketMQ","12345678","abcd");
         Assert.assertTrue(sessionCredentials.equals(other));
     }
 
     @Test
-    public void updateContentTest(){
-        SessionCredentials sessionCredentials=new SessionCredentials();
-        Properties properties=new Properties();
+    public void updateContentTest() {
+        SessionCredentials sessionCredentials = new SessionCredentials();
+        Properties properties = new Properties();
         properties.setProperty(SessionCredentials.ACCESS_KEY,"RocketMQ");
         properties.setProperty(SessionCredentials.SECRET_KEY,"12345678");
         properties.setProperty(SessionCredentials.SECURITY_TOKEN,"abcd");
@@ -42,9 +42,9 @@ public class SessionCredentialsTest {
     }
 
     @Test
-    public void SessionCredentialHashCodeTest(){
-        SessionCredentials sessionCredentials=new SessionCredentials();
-        Properties properties=new Properties();
+    public void SessionCredentialHashCodeTest() {
+        SessionCredentials sessionCredentials = new SessionCredentials();
+        Properties properties = new Properties();
         properties.setProperty(SessionCredentials.ACCESS_KEY,"RocketMQ");
         properties.setProperty(SessionCredentials.SECRET_KEY,"12345678");
         properties.setProperty(SessionCredentials.SECURITY_TOKEN,"abcd");
@@ -53,16 +53,16 @@ public class SessionCredentialsTest {
     }
 
     @Test
-    public void SessionCredentialEqualsTest(){
-        SessionCredentials sessionCredential1 =new SessionCredentials();
-        Properties properties1=new Properties();
+    public void SessionCredentialEqualsTest() {
+        SessionCredentials sessionCredential1  = new SessionCredentials();
+        Properties properties1 = new Properties();
         properties1.setProperty(SessionCredentials.ACCESS_KEY,"RocketMQ");
         properties1.setProperty(SessionCredentials.SECRET_KEY,"12345678");
         properties1.setProperty(SessionCredentials.SECURITY_TOKEN,"abcd");
         sessionCredential1.updateContent(properties1);
 
-        SessionCredentials sessionCredential2 =new SessionCredentials();
-        Properties properties2=new Properties();
+        SessionCredentials sessionCredential2 = new SessionCredentials();
+        Properties properties2 = new Properties();
         properties2.setProperty(SessionCredentials.ACCESS_KEY,"RocketMQ");
         properties2.setProperty(SessionCredentials.SECRET_KEY,"12345678");
         properties2.setProperty(SessionCredentials.SECURITY_TOKEN,"abcd");
@@ -75,9 +75,9 @@ public class SessionCredentialsTest {
     }
 
     @Test
-    public void SessionCredentialToStringTest(){
-        SessionCredentials sessionCredential1 =new SessionCredentials();
-        Properties properties1=new Properties();
+    public void SessionCredentialToStringTest() {
+        SessionCredentials sessionCredential1 = new SessionCredentials();
+        Properties properties1 = new Properties();
         properties1.setProperty(SessionCredentials.ACCESS_KEY,"RocketMQ");
         properties1.setProperty(SessionCredentials.SECRET_KEY,"12345678");
         properties1.setProperty(SessionCredentials.SECURITY_TOKEN,"abcd");
diff --git a/acl/src/test/java/org/apache/rocketmq/acl/plain/AclTestHelper.java b/acl/src/test/java/org/apache/rocketmq/acl/plain/AclTestHelper.java
index 250478a..a1bfc53 100644
--- a/acl/src/test/java/org/apache/rocketmq/acl/plain/AclTestHelper.java
+++ b/acl/src/test/java/org/apache/rocketmq/acl/plain/AclTestHelper.java
@@ -80,15 +80,15 @@ public final class AclTestHelper {
 
     public static void recursiveDelete(File file) {
         if (file.isFile()) {
-          file.delete();
+            file.delete();
         } else {
-          File[] files = file.listFiles();
-          if (null != files) {
-            for (File f : files) {
-              recursiveDelete(f);
+            File[] files = file.listFiles();
+            if (null != files) {
+                for (File f : files) {
+                    recursiveDelete(f);
+                }
             }
-          }
-          file.delete();
+            file.delete();
         }
     }
 
diff --git a/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessControlFlowTest.java b/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessControlFlowTest.java
index 504990f..d1c6631 100644
--- a/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessControlFlowTest.java
+++ b/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainAccessControlFlowTest.java
@@ -276,7 +276,6 @@ public class PlainAccessControlFlowTest {
         try {
             PlainAccessResource accessResource = (PlainAccessResource) plainAccessValidator.parse(
                 RemotingCommand.decode(buf), remoteAddr);
-            System.out.println(accessResource.getWhiteRemoteAddress());
             plainAccessValidator.validate(accessResource);
         } catch (RemotingCommandException e) {
             e.printStackTrace();
diff --git a/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java b/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java
index ef44498..f30b6f5 100644
--- a/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java
+++ b/acl/src/test/java/org/apache/rocketmq/acl/plain/PlainPermissionManagerTest.java
@@ -45,10 +45,10 @@ import org.junit.Test;
 public class PlainPermissionManagerTest {
 
     PlainPermissionManager plainPermissionManager;
-    PlainAccessResource PUBPlainAccessResource;
-    PlainAccessResource SUBPlainAccessResource;
-    PlainAccessResource ANYPlainAccessResource;
-    PlainAccessResource DENYPlainAccessResource;
+    PlainAccessResource pubPlainAccessResource;
+    PlainAccessResource subPlainAccessResource;
+    PlainAccessResource anyPlainAccessResource;
+    PlainAccessResource denyPlainAccessResource;
     PlainAccessResource plainAccessResource = new PlainAccessResource();
     PlainAccessConfig plainAccessConfig = new PlainAccessConfig();
     Set<Integer> adminCode = new HashSet<>();
@@ -70,10 +70,10 @@ public class PlainPermissionManagerTest {
         // DELETE_SUBSCRIPTIONGROUP
         adminCode.add(207);
 
-        PUBPlainAccessResource = clonePlainAccessResource(Permission.PUB);
-        SUBPlainAccessResource = clonePlainAccessResource(Permission.SUB);
-        ANYPlainAccessResource = clonePlainAccessResource(Permission.ANY);
-        DENYPlainAccessResource = clonePlainAccessResource(Permission.DENY);
+        pubPlainAccessResource = clonePlainAccessResource(Permission.PUB);
+        subPlainAccessResource = clonePlainAccessResource(Permission.SUB);
+        anyPlainAccessResource = clonePlainAccessResource(Permission.ANY);
+        denyPlainAccessResource = clonePlainAccessResource(Permission.DENY);
 
         String folder = "conf";
         confHome = AclTestHelper.copyResources(folder, true);
@@ -150,7 +150,7 @@ public class PlainPermissionManagerTest {
     public void checkPermAdmin() {
         PlainAccessResource plainAccessResource = new PlainAccessResource();
         plainAccessResource.setRequestCode(17);
-        plainPermissionManager.checkPerm(plainAccessResource, PUBPlainAccessResource);
+        plainPermissionManager.checkPerm(plainAccessResource, pubPlainAccessResource);
     }
 
     @Test
@@ -158,15 +158,15 @@ public class PlainPermissionManagerTest {
 
         PlainAccessResource plainAccessResource = new PlainAccessResource();
         plainAccessResource.addResourceAndPerm("topicA", Permission.PUB);
-        plainPermissionManager.checkPerm(plainAccessResource, PUBPlainAccessResource);
+        plainPermissionManager.checkPerm(plainAccessResource, pubPlainAccessResource);
         plainAccessResource.addResourceAndPerm("topicB", Permission.SUB);
-        plainPermissionManager.checkPerm(plainAccessResource, ANYPlainAccessResource);
+        plainPermissionManager.checkPerm(plainAccessResource, anyPlainAccessResource);
 
         plainAccessResource = new PlainAccessResource();
         plainAccessResource.addResourceAndPerm("topicB", Permission.SUB);
-        plainPermissionManager.checkPerm(plainAccessResource, SUBPlainAccessResource);
+        plainPermissionManager.checkPerm(plainAccessResource, subPlainAccessResource);
         plainAccessResource.addResourceAndPerm("topicA", Permission.PUB);
-        plainPermissionManager.checkPerm(plainAccessResource, ANYPlainAccessResource);
+        plainPermissionManager.checkPerm(plainAccessResource, anyPlainAccessResource);
 
     }
 
@@ -175,7 +175,7 @@ public class PlainPermissionManagerTest {
 
         plainAccessResource = new PlainAccessResource();
         plainAccessResource.addResourceAndPerm("topicF", Permission.PUB);
-        plainPermissionManager.checkPerm(plainAccessResource, SUBPlainAccessResource);
+        plainPermissionManager.checkPerm(plainAccessResource, subPlainAccessResource);
     }
 
     @Test(expected = AclException.class)
@@ -358,7 +358,7 @@ public class PlainPermissionManagerTest {
     public void deleteAccessConfigTest() throws InterruptedException {
         // delete not exist accessConfig
         final boolean flag1 = plainPermissionManager.deleteAccessConfig("test_delete");
-        assert flag1 == false;
+        assert !flag1;
 
         plainAccessConfig.setAccessKey("test_delete");
         plainAccessConfig.setSecretKey("12345678");
@@ -371,14 +371,14 @@ public class PlainPermissionManagerTest {
 
         //delete existed accessConfig
         final boolean flag2 = plainPermissionManager.deleteAccessConfig("test_delete");
-        assert flag2 == true;
+        assert flag2;
 
     }
 
     @Test
     public void updateGlobalWhiteAddrsConfigTest() {
         final boolean flag = plainPermissionManager.updateGlobalWhiteAddrsConfig(Lists.newArrayList("192.168.1.2"));
-        assert flag == true;
+        assert flag;
         final AclConfig config = plainPermissionManager.getAllAclConfig();
         Assert.assertEquals(true, config.getGlobalWhiteAddrs().contains("192.168.1.2"));
     }

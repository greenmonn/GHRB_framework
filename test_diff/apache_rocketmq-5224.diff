diff --git a/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java b/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
index 98e3d77..c1e7048 100644
--- a/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
+++ b/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
@@ -54,21 +54,20 @@ public class AutoSwitchRoleBase {
         UUID.randomUUID().toString().replace("-", "");
     private static final AtomicInteger PORT_COUNTER = new AtomicInteger(35000);
     private final String storePathRootDir = storePathRootParentDir + File.separator + "store";
-    private final String StoreMessage = "Once, there was a chance for me!";
-    private final byte[] MessageBody = StoreMessage.getBytes();
-    private final AtomicInteger QueueId = new AtomicInteger(0);
-    private static final Random random = new Random();
+    private static final String STORE_MESSAGE = "Once, there was a chance for me!";
+    private static final byte[] MESSAGE_BODY = STORE_MESSAGE.getBytes();
+    private final AtomicInteger queueId = new AtomicInteger(0);
     protected List<BrokerController> brokerList;
-    private SocketAddress BornHost;
-    private SocketAddress StoreHost;
-    private static Integer No= 0;
+    private SocketAddress bornHost;
+    private SocketAddress storeHost;
+    private static Integer no = 0;
     
     
     protected void initialize() {
         this.brokerList = new ArrayList<>();
         try {
-            StoreHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);
-            BornHost = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 0);
+            storeHost = new InetSocketAddress(InetAddress.getLocalHost(), 8123);
+            bornHost = new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 0);
         } catch (Exception ignored) {
         }
     }
@@ -81,22 +80,22 @@ public class AutoSwitchRoleBase {
         Random random = new Random();
         int tempPort;
         int port;
-        try{
-            while (true){
-                tempPort = random.nextInt(maxPort)%(maxPort-minPort+1) + minPort;
+        try {
+            while (true) {
+                tempPort = random.nextInt(maxPort) % (maxPort - minPort + 1) + minPort;
                 ServerSocket serverSocket =  new ServerSocket(tempPort);
                 port = serverSocket.getLocalPort();
                 serverSocket.close();
                 break;
             }
-        }catch (Exception ignored){
-            if (No>200){
+        } catch (Exception ignored) {
+            if (no > 200) {
                 throw new IOException("This server's open ports are temporarily full!");
             }
-            No++;
+            no++;
             port = nextPort(minPort,maxPort);
         }
-        No = 0;
+        no = 0;
         return port;
     }
 
@@ -164,14 +163,14 @@ public class AutoSwitchRoleBase {
         MessageExtBrokerInner msg = new MessageExtBrokerInner();
         msg.setTopic("FooBar");
         msg.setTags("TAG1");
-        msg.setBody(MessageBody);
+        msg.setBody(MESSAGE_BODY);
         msg.setKeys(String.valueOf(System.currentTimeMillis()));
-        int QUEUE_TOTAL = 1;
-        msg.setQueueId(Math.abs(QueueId.getAndIncrement()) % QUEUE_TOTAL);
+        int queueTotal = 1;
+        msg.setQueueId(Math.abs(queueId.getAndIncrement()) % queueTotal);
         msg.setSysFlag(0);
         msg.setBornTimestamp(System.currentTimeMillis());
-        msg.setStoreHost(StoreHost);
-        msg.setBornHost(BornHost);
+        msg.setStoreHost(storeHost);
+        msg.setBornHost(bornHost);
         msg.setPropertiesString(MessageDecoder.messageProperties2String(msg.getProperties()));
         return msg;
     }
@@ -188,9 +187,6 @@ public class AutoSwitchRoleBase {
         for (long i = 0; i < totalMsgs; i++) {
             GetMessageResult result = messageStore.getMessage("GROUP_A", "FooBar", 0, startOffset + i, 1024 * 1024, null);
             assertThat(result).isNotNull();
-            if (!GetMessageStatus.FOUND.equals(result.getStatus())) {
-                System.out.println("Failed i :" + i);
-            }
             assertEquals(GetMessageStatus.FOUND, result.getStatus());
             result.release();
         }
diff --git a/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleIntegrationTest.java b/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleIntegrationTest.java
index dfa1d84..e8cfbeb 100644
--- a/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleIntegrationTest.java
+++ b/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleIntegrationTest.java
@@ -42,8 +42,6 @@ import org.apache.rocketmq.store.ha.HAClient;
 import org.apache.rocketmq.store.ha.HAConnectionState;
 import org.apache.rocketmq.store.ha.autoswitch.AutoSwitchHAService;
 import org.apache.rocketmq.store.logfile.MappedFile;
-import org.apache.rocketmq.test.base.BaseConf;
-import org.junit.After;
 import org.junit.Test;
 
 import static org.awaitility.Awaitility.await;
@@ -97,7 +95,6 @@ public class AutoSwitchRoleIntegrationTest extends AutoSwitchRoleBase {
     }
 
     public void mockData() throws Exception {
-        System.out.println("Begin test");
         final MessageStore messageStore = brokerController1.getMessageStore();
         putMessage(messageStore);
         Thread.sleep(3000);
@@ -112,7 +109,6 @@ public class AutoSwitchRoleIntegrationTest extends AutoSwitchRoleBase {
             if (haClient != null && haClient.getCurrentState().equals(HAConnectionState.TRANSFER)) {
                 return true;
             } else {
-                System.out.println("slave not ready");
                 Thread.sleep(2000);
                 tryTimes++;
             }
@@ -134,7 +130,7 @@ public class AutoSwitchRoleIntegrationTest extends AutoSwitchRoleBase {
         
         // Shutdown controller2
         ScheduledExecutorService singleThread = Executors.newSingleThreadScheduledExecutor();
-        while (!singleThread.awaitTermination(6* 1000, TimeUnit.MILLISECONDS)) {
+        while (!singleThread.awaitTermination(6 * 1000, TimeUnit.MILLISECONDS)) {
             this.brokerController2.shutdown();
             singleThread.shutdown();
         }
@@ -249,7 +245,6 @@ public class AutoSwitchRoleIntegrationTest extends AutoSwitchRoleBase {
     public void shutdown() throws InterruptedException {
         for (BrokerController controller : this.brokerList) {
             controller.shutdown();
-            System.out.println("Shutdown broker " + controller.getBrokerConfig().getListenPort());
             UtilAll.deleteFile(new File(controller.getMessageStoreConfig().getStorePathRootDir()));
         }
         if (this.namesrvController != null) {
diff --git a/test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java b/test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java
index 4495b37..818bdbd 100644
--- a/test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java
+++ b/test/src/test/java/org/apache/rocketmq/test/base/BaseConf.java
@@ -57,56 +57,55 @@ import org.slf4j.LoggerFactory;
 import static org.awaitility.Awaitility.await;
 
 public class BaseConf {
-    public final static String nsAddr;
-    protected final static String broker1Name;
-    protected final static String broker2Name;
+    public final static String NAMESRV_ADDR;
+    protected final static String BROKER1_NAME;
+    protected final static String BROKER2_NAME;
     //the logic queue test need at least three brokers
-    protected final static String broker3Name;
-    protected final static String clusterName;
-    protected final static int brokerNum;
-    protected final static int waitTime = 5;
-    protected final static int consumeTime = 2 * 60 * 1000;
+    protected final static String BROKER3_NAME;
+    protected final static String CLUSTER_NAME;
+    protected final static int BROKER_NUM = 3;
+    protected final static int WAIT_TIME = 5;
+    protected final static int CONSUME_TIME = 2 * 60 * 1000;
     protected final static int QUEUE_NUMBERS = 8;
-    protected final static NamesrvController namesrvController;
-    protected final static BrokerController brokerController1;
-    protected final static BrokerController brokerController2;
-    protected final static BrokerController brokerController3;
-    protected final static List<BrokerController> brokerControllerList;
-    protected final static Map<String, BrokerController> brokerControllerMap;
-    protected final static List<Object> mqClients = new ArrayList<Object>();
-    protected final static boolean debug = false;
+    protected static NamesrvController namesrvController;
+    protected static BrokerController brokerController1;
+    protected static BrokerController brokerController2;
+    protected static BrokerController brokerController3;
+    protected static List<BrokerController> brokerControllerList;
+    protected static Map<String, BrokerController> brokerControllerMap;
+    protected static List<Object> mqClients = new ArrayList<Object>();
+    protected static boolean debug = false;
     private final static Logger log = LoggerFactory.getLogger(BaseConf.class);
 
     static {
         System.setProperty(RemotingCommand.REMOTING_VERSION_KEY, Integer.toString(MQVersion.CURRENT_VERSION));
         namesrvController = IntegrationTestBase.createAndStartNamesrv();
-        nsAddr = "127.0.0.1:" + namesrvController.getNettyServerConfig().getListenPort();
-        log.debug("Name server started, listening: {}", nsAddr);
+        NAMESRV_ADDR = "127.0.0.1:" + namesrvController.getNettyServerConfig().getListenPort();
+        log.debug("Name server started, listening: {}", NAMESRV_ADDR);
 
-        brokerController1 = IntegrationTestBase.createAndStartBroker(nsAddr);
+        brokerController1 = IntegrationTestBase.createAndStartBroker(NAMESRV_ADDR);
         log.debug("Broker {} started, listening: {}", brokerController1.getBrokerConfig().getBrokerName(),
             brokerController1.getBrokerConfig().getListenPort());
 
-        brokerController2 = IntegrationTestBase.createAndStartBroker(nsAddr);
+        brokerController2 = IntegrationTestBase.createAndStartBroker(NAMESRV_ADDR);
         log.debug("Broker {} started, listening: {}", brokerController2.getBrokerConfig().getBrokerName(),
             brokerController2.getBrokerConfig().getListenPort());
 
-        brokerController3 = IntegrationTestBase.createAndStartBroker(nsAddr);
+        brokerController3 = IntegrationTestBase.createAndStartBroker(NAMESRV_ADDR);
         log.debug("Broker {} started, listening: {}", brokerController2.getBrokerConfig().getBrokerName(),
             brokerController2.getBrokerConfig().getListenPort());
 
-        clusterName = brokerController1.getBrokerConfig().getBrokerClusterName();
-        broker1Name = brokerController1.getBrokerConfig().getBrokerName();
-        broker2Name = brokerController2.getBrokerConfig().getBrokerName();
-        broker3Name = brokerController3.getBrokerConfig().getBrokerName();
-        brokerNum = 3;
+        CLUSTER_NAME = brokerController1.getBrokerConfig().getBrokerClusterName();
+        BROKER1_NAME = brokerController1.getBrokerConfig().getBrokerName();
+        BROKER2_NAME = brokerController2.getBrokerConfig().getBrokerName();
+        BROKER3_NAME = brokerController3.getBrokerConfig().getBrokerName();
         brokerControllerList = ImmutableList.of(brokerController1, brokerController2, brokerController3);
         brokerControllerMap = brokerControllerList.stream().collect(Collectors.toMap(input -> input.getBrokerConfig().getBrokerName(), Function.identity()));
     }
 
     public BaseConf() {
         // Add waitBrokerRegistered to BaseConf constructor to make it default for all subclasses.
-        waitBrokerRegistered(nsAddr, clusterName, brokerNum);
+        waitBrokerRegistered(NAMESRV_ADDR, CLUSTER_NAME, BROKER_NUM);
     }
 
     // This method can't be placed in the static block of BaseConf, which seems to lead to a strange dead lock.
@@ -174,22 +173,22 @@ public class BaseConf {
     }
 
     public static String initTopicWithName(String topicName) {
-        IntegrationTestBase.initTopic(topicName, nsAddr, clusterName, CQType.SimpleCQ);
+        IntegrationTestBase.initTopic(topicName, NAMESRV_ADDR, CLUSTER_NAME, CQType.SimpleCQ);
         return topicName;
     }
 
     public static String initTopicWithName(String topicName, TopicMessageType topicMessageType) {
-        IntegrationTestBase.initTopic(topicName, nsAddr, clusterName, topicMessageType);
+        IntegrationTestBase.initTopic(topicName, NAMESRV_ADDR, CLUSTER_NAME, topicMessageType);
         return topicName;
     }
 
     public static String initTopicOnSampleTopicBroker(String topicName, String sampleTopic) {
-        IntegrationTestBase.initTopic(topicName, nsAddr, sampleTopic, CQType.SimpleCQ);
+        IntegrationTestBase.initTopic(topicName, NAMESRV_ADDR, sampleTopic, CQType.SimpleCQ);
         return topicName;
     }
 
     public static String initTopicOnSampleTopicBroker(String topicName, String sampleTopic, TopicMessageType topicMessageType) {
-        IntegrationTestBase.initTopic(topicName, nsAddr, sampleTopic, topicMessageType);
+        IntegrationTestBase.initTopic(topicName, NAMESRV_ADDR, sampleTopic, topicMessageType);
         return topicName;
     }
 
@@ -199,7 +198,7 @@ public class BaseConf {
     }
 
     public static String initConsumerGroup(String group) {
-        MQAdminTestUtils.createSub(nsAddr, clusterName, group);
+        MQAdminTestUtils.createSub(NAMESRV_ADDR, CLUSTER_NAME, group);
         return group;
     }
 
@@ -291,9 +290,9 @@ public class BaseConf {
 
     public static Set<String> getBrokers() {
         Set<String> brokers = new HashSet<>();
-        brokers.add(broker1Name);
-        brokers.add(broker2Name);
-        brokers.add(broker3Name);
+        brokers.add(BROKER1_NAME);
+        brokers.add(BROKER2_NAME);
+        brokers.add(BROKER3_NAME);
         return brokers;
     }
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java b/test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
index 08176cc..32760dc 100644
--- a/test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
+++ b/test/src/test/java/org/apache/rocketmq/test/base/IntegrationTestBase.java
@@ -24,7 +24,6 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
-import java.util.Random;
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -53,11 +52,9 @@ public class IntegrationTestBase {
     protected static final List<BrokerController> BROKER_CONTROLLERS = new ArrayList<>();
     protected static final List<NamesrvController> NAMESRV_CONTROLLERS = new ArrayList<>();
     protected static int topicCreateTime = (int) TimeUnit.SECONDS.toSeconds(30);
-    public static volatile int COMMIT_LOG_SIZE = 1024 * 1024 * 100;
+    public static volatile int commitLogSize = 1024 * 1024 * 100;
     protected static final int INDEX_NUM = 1000;
 
-    protected static Random random = new Random();
-
     static {
 
         System.setProperty("rocketmq.client.logRoot", System.getProperty("java.io.tmpdir"));
@@ -139,7 +136,7 @@ public class IntegrationTestBase {
         brokerConfig.setLoadBalancePollNameServerInterval(500);
         storeConfig.setStorePathRootDir(baseDir);
         storeConfig.setStorePathCommitLog(baseDir + SEP + "commitlog");
-        storeConfig.setMappedFileSizeCommitLog(COMMIT_LOG_SIZE);
+        storeConfig.setMappedFileSizeCommitLog(commitLogSize);
         storeConfig.setMaxIndexNum(INDEX_NUM);
         storeConfig.setMaxHashSlotNum(INDEX_NUM * 4);
         storeConfig.setDeleteWhen("01;02;03;04;05;06;07;08;09;10;11;12;13;14;15;16;17;18;19;20;21;22;23;00");
diff --git a/test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java b/test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java
index ab8ec96..9e142eb 100644
--- a/test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/base/dledger/DLedgerProduceAndConsumeIT.java
@@ -47,7 +47,7 @@ public class DLedgerProduceAndConsumeIT {
         brokerConfig.setBrokerClusterName(cluster);
         brokerConfig.setBrokerName(brokerName);
         brokerConfig.setBrokerIP1("127.0.0.1");
-        brokerConfig.setNamesrvAddr(BaseConf.nsAddr);
+        brokerConfig.setNamesrvAddr(BaseConf.NAMESRV_ADDR);
         return brokerConfig;
     }
 
@@ -75,16 +75,16 @@ public class DLedgerProduceAndConsumeIT {
         BrokerConfig brokerConfig = buildBrokerConfig(cluster, brokerName);
         MessageStoreConfig storeConfig = buildStoreConfig(brokerName, peers, selfId);
         BrokerController brokerController = IntegrationTestBase.createAndStartBroker(storeConfig, brokerConfig);
-        BaseConf.waitBrokerRegistered(BaseConf.nsAddr, brokerConfig.getBrokerName(), 1);
+        BaseConf.waitBrokerRegistered(BaseConf.NAMESRV_ADDR, brokerConfig.getBrokerName(), 1);
 
         Assert.assertEquals(BrokerRole.SYNC_MASTER, storeConfig.getBrokerRole());
 
 
         String topic = UUID.randomUUID().toString();
         String consumerGroup = UUID.randomUUID().toString();
-        IntegrationTestBase.initTopic(topic, BaseConf.nsAddr, cluster, 1, CQType.SimpleCQ);
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(BaseConf.nsAddr);
-        DefaultMQPullConsumer consumer = ConsumerFactory.getRMQPullConsumer(BaseConf.nsAddr, consumerGroup);
+        IntegrationTestBase.initTopic(topic, BaseConf.NAMESRV_ADDR, cluster, 1, CQType.SimpleCQ);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(BaseConf.NAMESRV_ADDR);
+        DefaultMQPullConsumer consumer = ConsumerFactory.getRMQPullConsumer(BaseConf.NAMESRV_ADDR, consumerGroup);
 
         for (int i = 0; i < 10; i++) {
             Message message = new Message();
@@ -104,7 +104,7 @@ public class DLedgerProduceAndConsumeIT {
         Assert.assertEquals(10, brokerController.getMessageStore().getMaxOffsetInQueue(topic, 0));
 
         MessageQueue messageQueue = new MessageQueue(topic, brokerName, 0);
-        PullResult pullResult= consumer.pull(messageQueue, "*", 0, 32);
+        PullResult pullResult = consumer.pull(messageQueue, "*", 0, 32);
         Assert.assertEquals(PullStatus.FOUND, pullResult.getPullStatus());
         Assert.assertEquals(10, pullResult.getMsgFoundList().size());
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgDynamicBalanceIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgDynamicBalanceIT.java
index 0467eef..60a8cd4 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgDynamicBalanceIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgDynamicBalanceIT.java
@@ -41,7 +41,7 @@ public class NormalMsgDynamicBalanceIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -52,21 +52,21 @@ public class NormalMsgDynamicBalanceIT extends BaseConf {
     @Test
     public void testTwoConsumerAndCrashOne() {
         int msgSize = 400;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(msgSize);
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener());
         consumer2.shutdown();
 
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize * 2, producer.getAllUndupMsgBody().size());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
 
@@ -81,16 +81,16 @@ public class NormalMsgDynamicBalanceIT extends BaseConf {
     @Test
     public void test3ConsumerAndCrashOne() {
         int msgSize = 400;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        RMQNormalConsumer consumer3 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer3 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(msgSize);
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener(), consumer3.getListener());
         consumer3.shutdown();
         producer.clearMsg();
@@ -100,7 +100,7 @@ public class NormalMsgDynamicBalanceIT extends BaseConf {
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgStaticBalanceIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgStaticBalanceIT.java
index 7b2f09e..201965c 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgStaticBalanceIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/balance/NormalMsgStaticBalanceIT.java
@@ -42,7 +42,7 @@ public class NormalMsgStaticBalanceIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -53,15 +53,15 @@ public class NormalMsgStaticBalanceIT extends BaseConf {
     @Test
     public void testTwoConsumersBalance() {
         int msgSize = 400;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
 
@@ -78,16 +78,16 @@ public class NormalMsgStaticBalanceIT extends BaseConf {
         int msgSize = 600;
         String consumerGroup = initConsumerGroup();
         logger.info("use group: {}", consumerGroup);
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, consumerGroup, topic, "*", new RMQNormalListener());
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumerGroup, topic, "*", new RMQNormalListener());
-        RMQNormalConsumer consumer3 = getConsumer(nsAddr, consumerGroup, topic, "*", new RMQNormalListener());
-        RMQNormalConsumer consumer4 = getConsumer(nsAddr, consumerGroup, topic, "*", new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, consumerGroup, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumerGroup, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer3 = getConsumer(NAMESRV_ADDR, consumerGroup, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer4 = getConsumer(NAMESRV_ADDR, consumerGroup, topic, "*", new RMQNormalListener());
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener(), consumer3.getListener(),
             consumer4.getListener());
         assertThat(recvAll).isEqualTo(true);
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgNotReceiveIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgNotReceiveIT.java
index ca5774e..cb3fc60 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgNotReceiveIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgNotReceiveIT.java
@@ -41,7 +41,7 @@ public class BroadcastNormalMsgNotReceiveIT extends BaseBroadcast {
         printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -54,20 +54,20 @@ public class BroadcastNormalMsgNotReceiveIT extends BaseBroadcast {
         int msgSize = 16;
 
         String group = initConsumerGroup();
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, group, topic, "*",
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, group, topic, "*",
             new RMQNormalListener(group + "_1"));
         Thread.sleep(3000);
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
 
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, "*", new RMQNormalListener(group + "_2"));
-        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), waitTime);
+        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), WAIT_TIME);
         assertThat(consumer2.getListener().getAllMsgBody().size()).isEqualTo(0);
     }
 }
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvCrashIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvCrashIT.java
index c383932..1608e31 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvCrashIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvCrashIT.java
@@ -42,7 +42,7 @@ public class BroadcastNormalMsgRecvCrashIT extends BaseBroadcast {
         printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -55,17 +55,17 @@ public class BroadcastNormalMsgRecvCrashIT extends BaseBroadcast {
         int msgSize = 16;
 
         String group = initConsumerGroup();
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, group, topic, "*",
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, group, topic, "*",
             new RMQNormalListener(group + "_1"));
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, "*", new RMQNormalListener(group + "_2"));
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
-        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
+        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -81,7 +81,7 @@ public class BroadcastNormalMsgRecvCrashIT extends BaseBroadcast {
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvFailIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvFailIT.java
index f040d42..fab1734 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvFailIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvFailIT.java
@@ -43,7 +43,7 @@ public class BroadcastNormalMsgRecvFailIT extends BaseBroadcast {
         printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -56,16 +56,16 @@ public class BroadcastNormalMsgRecvFailIT extends BaseBroadcast {
     public void testStartTwoConsumerAndOneConsumerFail() {
         int msgSize = 16;
 
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, topic, "*",
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, topic, "*",
             new RMQNormalListener());
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, "*",
             new RMQNormalListener(ConsumeConcurrentlyStatus.RECONSUME_LATER));
 
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvStartLaterIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvStartLaterIT.java
index 6ddfc67..f75de14 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvStartLaterIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgRecvStartLaterIT.java
@@ -42,7 +42,7 @@ public class BroadcastNormalMsgRecvStartLaterIT extends BaseBroadcast {
         printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -55,14 +55,14 @@ public class BroadcastNormalMsgRecvStartLaterIT extends BaseBroadcast {
         int msgSize = 16;
 
         String group = initConsumerGroup();
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, group, topic, "*",
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, group, topic, "*",
             new RMQNormalListener(group + "_1"));
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -70,14 +70,14 @@ public class BroadcastNormalMsgRecvStartLaterIT extends BaseBroadcast {
         producer.clearMsg();
         consumer1.clearMsg();
 
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, "*", new RMQNormalListener(group + "_2"));
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
-        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
+        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgTwoDiffGroupRecvIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgTwoDiffGroupRecvIT.java
index 13c4785..ccd77d8 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgTwoDiffGroupRecvIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/BroadcastNormalMsgTwoDiffGroupRecvIT.java
@@ -42,7 +42,7 @@ public class BroadcastNormalMsgTwoDiffGroupRecvIT extends BaseBroadcast {
         printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -56,17 +56,17 @@ public class BroadcastNormalMsgTwoDiffGroupRecvIT extends BaseBroadcast {
 
         String group1 = initConsumerGroup();
         String group2 = initConsumerGroup();
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, group1, topic, "*",
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, group1, topic, "*",
             new RMQNormalListener(group1 + "_1"));
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr, group2, topic, "*",
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR, group2, topic, "*",
             new RMQNormalListener(group2 + "_2"));
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
-        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
+        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/NormalMsgTwoSameGroupConsumerIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/NormalMsgTwoSameGroupConsumerIT.java
index 8754c26..d115d58 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/NormalMsgTwoSameGroupConsumerIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/normal/NormalMsgTwoSameGroupConsumerIT.java
@@ -42,7 +42,7 @@ public class NormalMsgTwoSameGroupConsumerIT extends BaseBroadcast {
         printSeparator();
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -55,17 +55,17 @@ public class NormalMsgTwoSameGroupConsumerIT extends BaseBroadcast {
         int msgSize = 16;
 
         String group = initConsumerGroup();
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, group, topic, "*",
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, group, topic, "*",
             new RMQNormalListener(group + "_1"));
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, "*", new RMQNormalListener(group + "_2"));
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
-        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
+        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/order/OrderMsgBroadcastIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/order/OrderMsgBroadcastIT.java
index ef58cb4..6594215 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/order/OrderMsgBroadcastIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/order/OrderMsgBroadcastIT.java
@@ -49,7 +49,7 @@ public class OrderMsgBroadcastIT extends BaseBroadcast {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -61,11 +61,11 @@ public class OrderMsgBroadcastIT extends BaseBroadcast {
     public void testTwoConsumerSubTag() {
         int msgSize = 10;
 
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, topic, "*",
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, topic, "*",
             new RMQOrderListener());
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, "*", new RMQOrderListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         List<MessageQueue> mqs = producer.getMessageQueue();
         MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerFilterIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerFilterIT.java
index eddb589..ea4bc2f 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerFilterIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerFilterIT.java
@@ -40,7 +40,7 @@ public class BroadcastTwoConsumerFilterIT extends BaseBroadcast {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -54,19 +54,19 @@ public class BroadcastTwoConsumerFilterIT extends BaseBroadcast {
         String tag1 = "jueyin_tag_1";
         String tag2 = "jueyin_tag_2";
 
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, topic, tag1,
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, topic, tag1,
             new RMQNormalListener());
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, tag1, new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(tag2, msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
         producer.clearMsg();
         producer.send(tag1, msgSize);
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
-        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
+        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubDiffTagIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubDiffTagIT.java
index 0f69d4d..e170adf 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubDiffTagIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubDiffTagIT.java
@@ -40,7 +40,7 @@ public class BroadcastTwoConsumerSubDiffTagIT extends BaseBroadcast {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -53,17 +53,17 @@ public class BroadcastTwoConsumerSubDiffTagIT extends BaseBroadcast {
         int msgSize = 40;
         String tag = "jueyin_tag";
 
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, topic, "*",
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, topic, "*",
             new RMQNormalListener());
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, tag, new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(tag, msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
-        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
+        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubTagIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubTagIT.java
index 6dfb052..84ceac8 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubTagIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/broadcast/tag/BroadcastTwoConsumerSubTagIT.java
@@ -40,7 +40,7 @@ public class BroadcastTwoConsumerSubTagIT extends BaseBroadcast {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -53,17 +53,17 @@ public class BroadcastTwoConsumerSubTagIT extends BaseBroadcast {
         int msgSize = 20;
         String tag = "jueyin_tag";
 
-        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(nsAddr, topic, tag,
+        RMQBroadCastConsumer consumer1 = getBroadCastConsumer(NAMESRV_ADDR, topic, tag,
             new RMQNormalListener());
-        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(nsAddr,
+        RMQBroadCastConsumer consumer2 = getBroadCastConsumer(NAMESRV_ADDR,
             consumer1.getConsumerGroup(), topic, tag, new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         producer.send(tag, msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
-        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
+        consumer2.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddAndCrashIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddAndCrashIT.java
index 972666a..b927e4a 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddAndCrashIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddAndCrashIT.java
@@ -41,7 +41,7 @@ public class DynamicAddAndCrashIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -52,23 +52,23 @@ public class DynamicAddAndCrashIT extends BaseConf {
     @Test
     public void testAddOneConsumerAndCrashAfterWhile() {
         int msgSize = 150;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         MQAsyncProducer asyncDefaultMQProducer = new MQAsyncProducer(producer, msgSize, 100);
         asyncDefaultMQProducer.start();
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
         consumer2.shutdown();
 
-        asyncDefaultMQProducer.waitSendAll(waitTime * 6);
+        asyncDefaultMQProducer.waitSendAll(WAIT_TIME * 6);
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
@@ -76,27 +76,27 @@ public class DynamicAddAndCrashIT extends BaseConf {
     @Test
     public void testAddTwoConsumerAndCrashAfterWhile() {
         int msgSize = 150;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         MQAsyncProducer asyncDefaultMQProducer = new MQAsyncProducer(producer, msgSize, 100);
         asyncDefaultMQProducer.start();
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        RMQNormalConsumer consumer3 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer3 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         consumer2.shutdown();
         consumer3.shutdown();
 
-        asyncDefaultMQProducer.waitSendAll(waitTime * 6);
+        asyncDefaultMQProducer.waitSendAll(WAIT_TIME * 6);
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener(), consumer3.getListener());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener(), consumer3.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddConsumerIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddConsumerIT.java
index 279ee8c..5f16c75 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddConsumerIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicAddConsumerIT.java
@@ -41,7 +41,7 @@ public class DynamicAddConsumerIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -52,21 +52,21 @@ public class DynamicAddConsumerIT extends BaseConf {
     @Test
     public void testAddOneConsumer() {
         int msgSize = 100;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         MQAsyncProducer asyncDefaultMQProducer = new MQAsyncProducer(producer, msgSize, 100);
         asyncDefaultMQProducer.start();
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
 
-        asyncDefaultMQProducer.waitSendAll(waitTime * 6);
+        asyncDefaultMQProducer.waitSendAll(WAIT_TIME * 6);
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
@@ -74,23 +74,23 @@ public class DynamicAddConsumerIT extends BaseConf {
     @Test
     public void testAddTwoConsumer() {
         int msgSize = 100;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         MQAsyncProducer asyncDefaultMQProducer = new MQAsyncProducer(producer, msgSize, 100);
         asyncDefaultMQProducer.start();
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        RMQNormalConsumer consumer3 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer3 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
 
-        asyncDefaultMQProducer.waitSendAll(waitTime * 6);
+        asyncDefaultMQProducer.waitSendAll(WAIT_TIME * 6);
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener(), consumer3.getListener());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener(), consumer3.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicCrashConsumerIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicCrashConsumerIT.java
index 68d9198..5c1d8af 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicCrashConsumerIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/cluster/DynamicCrashConsumerIT.java
@@ -41,7 +41,7 @@ public class DynamicCrashConsumerIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -52,22 +52,22 @@ public class DynamicCrashConsumerIT extends BaseConf {
     @Test
     public void testAddOneConsumer() {
         int msgSize = 100;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
 
         MQAsyncProducer asyncDefaultMQProducer = new MQAsyncProducer(producer, msgSize, 100);
         asyncDefaultMQProducer.start();
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         consumer2.shutdown();
 
-        asyncDefaultMQProducer.waitSendAll(waitTime * 6);
+        asyncDefaultMQProducer.waitSendAll(WAIT_TIME * 6);
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
@@ -75,25 +75,25 @@ public class DynamicCrashConsumerIT extends BaseConf {
     @Test
     public void testAddTwoConsumer() {
         int msgSize = 100;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
-        RMQNormalConsumer consumer3 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer3 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQNormalListener());
 
         MQAsyncProducer asyncDefaultMQProducer = new MQAsyncProducer(producer, msgSize, 100);
         asyncDefaultMQProducer.start();
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         consumer2.shutdown();
         consumer3.shutdown();
 
-        asyncDefaultMQProducer.waitSendAll(waitTime * 6);
+        asyncDefaultMQProducer.waitSendAll(WAIT_TIME * 6);
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener(), consumer3.getListener());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener(), consumer3.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/filter/SqlFilterIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/filter/SqlFilterIT.java
index a0f6555..523ac9a 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/filter/SqlFilterIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/filter/SqlFilterIT.java
@@ -51,7 +51,7 @@ public class SqlFilterIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
         OFFSE_TABLE.clear();
     }
 
@@ -66,13 +66,13 @@ public class SqlFilterIT extends BaseConf {
 
         String group = initConsumerGroup();
         MessageSelector selector = MessageSelector.bySql("(TAGS is not null and TAGS in ('TagA', 'TagB'))");
-        RMQSqlConsumer consumer = ConsumerFactory.getRMQSqlConsumer(nsAddr, group, topic, selector, new RMQNormalListener(group + "_1"));
+        RMQSqlConsumer consumer = ConsumerFactory.getRMQSqlConsumer(NAMESRV_ADDR, group, topic, selector, new RMQNormalListener(group + "_1"));
         Thread.sleep(3000);
         producer.send("TagA", msgSize);
         producer.send("TagB", msgSize);
         producer.send("TagC", msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize * 3, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(msgSize * 2, consumeTime);
+        consumer.getListener().waitForMessageConsume(msgSize * 2, CONSUME_TIME);
         assertThat(producer.getAllMsgBody())
             .containsAllIn(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
                 consumer.getListener().getAllMsgBody()));
@@ -87,7 +87,7 @@ public class SqlFilterIT extends BaseConf {
         String group = initConsumerGroup();
         MessageSelector selector = MessageSelector.bySql("(TAGS is not null and TAGS in ('TagA', 'TagB'))");
         DefaultMQPullConsumer consumer = new DefaultMQPullConsumer(group);
-        consumer.setNamesrvAddr(nsAddr);
+        consumer.setNamesrvAddr(NAMESRV_ADDR);
         consumer.start();
         Thread.sleep(3000);
         producer.send("TagA", msgSize);
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopSubCheckIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopSubCheckIT.java
index 1d80980..beca55e 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopSubCheckIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/pop/PopSubCheckIT.java
@@ -65,14 +65,14 @@ public class PopSubCheckIT extends BaseConf {
         String topic = initTopic();
         logger.info(String.format("use topic: %s; group: %s !", topic, group));
 
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
         producer.getProducer().setCompressMsgBodyOverHowmuch(Integer.MAX_VALUE);
 
         for (String brokerAddr : new String[]{brokerController1.getBrokerAddr(), brokerController2.getBrokerAddr()}) {
             defaultMQAdminExt.setMessageRequestMode(brokerAddr, topic, group, MessageRequestMode.POP, 8, 60_000);
         }
 
-        RMQPopConsumer consumer = ConsumerFactory.getRMQPopConsumer(nsAddr, group,
+        RMQPopConsumer consumer = ConsumerFactory.getRMQPopConsumer(NAMESRV_ADDR, group,
             topic, "*", new RMQNormalListener());
         mqClients.add(consumer);
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/MulTagSubIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/MulTagSubIT.java
index 0edbdbe..a9fafb7 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/MulTagSubIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/MulTagSubIT.java
@@ -44,7 +44,7 @@ public class MulTagSubIT extends BaseConf {
         topic = initTopic();
         String consumerId = initConsumerGroup();
         logger.info(String.format("use topic: %s; consumerId: %s !", topic, consumerId));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -57,11 +57,11 @@ public class MulTagSubIT extends BaseConf {
         String tag = "jueyin1";
         String subExpress = String.format("%s||jueyin2", tag);
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
         producer.send(tag, msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -74,7 +74,7 @@ public class MulTagSubIT extends BaseConf {
         String tag2 = "jueyin2";
         String subExpress = String.format("%s||noExistTag", tag2);
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
 
         producer.send(tag1, msgSize);
@@ -84,7 +84,7 @@ public class MulTagSubIT extends BaseConf {
         Assert.assertEquals("Not all sent succeeded", msgSize * 2, producer.getAllUndupMsgBody().size());
 
         consumer.getListener().waitForMessageConsume(MQMessageFactory.getMessageBody(tag2Msgs),
-            consumeTime);
+            CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(MQMessageFactory.getMessageBody(tag2Msgs));
@@ -97,14 +97,14 @@ public class MulTagSubIT extends BaseConf {
         int msgSize = 10;
 
         TagMessage tagMessage = new TagMessage(tags, topic, msgSize);
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
 
         producer.send(tagMessage.getMixedTagMessages());
         Assert.assertEquals("Not all sent succeeded", msgSize * tags.length,
             producer.getAllUndupMsgBody().size());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -118,7 +118,7 @@ public class MulTagSubIT extends BaseConf {
         int msgSize = 10;
 
         TagMessage tagMessage = new TagMessage(tags, topic, msgSize);
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
 
         producer.send(tagMessage.getMixedTagMessages());
@@ -126,7 +126,7 @@ public class MulTagSubIT extends BaseConf {
             producer.getAllUndupMsgBody().size());
 
         consumer.getListener().waitForMessageConsume(
-            tagMessage.getMessageBodyByTag(tags[0], tags[1]), consumeTime);
+            tagMessage.getMessageBodyByTag(tags[0], tags[1]), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody())).containsExactlyElementsIn(
@@ -140,7 +140,7 @@ public class MulTagSubIT extends BaseConf {
         int msgSize = 10;
 
         TagMessage tagMessage = new TagMessage(tags, topic, msgSize);
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
 
         producer.send(tagMessage.getMixedTagMessages());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWith1ConsumerIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWith1ConsumerIT.java
index 423baae..a03ac1c 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWith1ConsumerIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWith1ConsumerIT.java
@@ -42,7 +42,7 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         topic = initTopic();
         String consumerId = initConsumerGroup();
         logger.info(String.format("use topic: %s; consumerId: %s !", topic, consumerId));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -54,10 +54,10 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
     public void testTagSmoke() {
         String tag = "jueyin";
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, tag, new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, tag, new RMQNormalListener());
         producer.send(tag, msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -67,11 +67,11 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
     public void testSubAllMessageNoTag() {
         String subExprress = "*";
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExprress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExprress,
             new RMQNormalListener());
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -83,11 +83,11 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         String tag = "jueyin";
         String subExpress = "*";
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
         producer.send(tag, msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -99,11 +99,11 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         String tag = null;
         String subExpress = "*";
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
         producer.send(tag, msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -115,11 +115,11 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         String tag = null;
         String subExpress = null;
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
         producer.send(tag, msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -132,7 +132,7 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         String tag2 = "jueyin";
         String subExpress = "*";
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
 
         List<Object> tag1Msgs = MQMessageFactory.getRMQMessage(tag1, topic, msgSize);
@@ -142,7 +142,7 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         producer.send(tag2Msgs);
         producer.send(10);
         Assert.assertEquals("Not all are sent", msgSize * 3, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -155,7 +155,7 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         String tag2 = "jueyin";
         String subExpress = null;
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
 
         List<Object> tag1Msgs = MQMessageFactory.getRMQMessage(tag1, topic, msgSize);
@@ -164,7 +164,7 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         producer.send(tag1Msgs);
         producer.send(tag2Msgs);
         Assert.assertEquals("Not all are sent", msgSize * 2, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -177,7 +177,7 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         String tag2 = "jueyin";
         String subExpress = tag2;
         int msgSize = 10;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, subExpress,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, subExpress,
             new RMQNormalListener());
 
         List<Object> tag1Msgs = MQMessageFactory.getRMQMessage(tag1, topic, msgSize);
@@ -188,7 +188,7 @@ public class TagMessageWith1ConsumerIT extends BaseConf {
         producer.send(10);
         Assert.assertEquals("Not all are sent", msgSize * 3, producer.getAllUndupMsgBody().size());
         consumer.getListener().waitForMessageConsume(MQMessageFactory.getMessageBody(tag2Msgs),
-            consumeTime);
+            CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithMulConsumerIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithMulConsumerIT.java
index 8de1b7d..0730bb6 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithMulConsumerIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithMulConsumerIT.java
@@ -44,7 +44,7 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
         topic = initTopic();
         String consumerId = initConsumerGroup();
         logger.info(String.format("use topic: %s; consumerId: %s !", topic, consumerId));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -57,9 +57,9 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
         String tag1 = "jueyin1";
         String tag2 = "jueyin2";
         int msgSize = 10;
-        RMQNormalConsumer consumerTag1 = getConsumer(nsAddr, topic, tag1,
+        RMQNormalConsumer consumerTag1 = getConsumer(NAMESRV_ADDR, topic, tag1,
             new RMQNormalListener());
-        RMQNormalConsumer consumerTag2 = getConsumer(nsAddr, topic, tag2,
+        RMQNormalConsumer consumerTag2 = getConsumer(NAMESRV_ADDR, topic, tag2,
             new RMQNormalListener());
 
         List<Object> tag1Msgs = MQMessageFactory.getRMQMessage(tag1, topic, msgSize);
@@ -70,9 +70,9 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
         Assert.assertEquals("Not all are sent", msgSize * 2, producer.getAllUndupMsgBody().size());
 
         consumerTag1.getListener().waitForMessageConsume(MQMessageFactory.getMessageBody(tag1Msgs),
-            consumeTime);
+            CONSUME_TIME);
         consumerTag2.getListener().waitForMessageConsume(MQMessageFactory.getMessageBody(tag2Msgs),
-            consumeTime);
+            CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumerTag1.getListener().getAllMsgBody()))
@@ -88,9 +88,9 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
         int msgSize = 10;
 
         TagMessage tagMessage = new TagMessage(tags, topic, msgSize);
-        RMQNormalConsumer consumerTag1 = getConsumer(nsAddr, topic, tags[0],
+        RMQNormalConsumer consumerTag1 = getConsumer(NAMESRV_ADDR, topic, tags[0],
             new RMQNormalListener());
-        RMQNormalConsumer consumerTag2 = getConsumer(nsAddr, topic, tags[1],
+        RMQNormalConsumer consumerTag2 = getConsumer(NAMESRV_ADDR, topic, tags[1],
             new RMQNormalListener());
 
         List<Object> tagMsgs = tagMessage.getMixedTagMessages();
@@ -99,9 +99,9 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
             producer.getAllUndupMsgBody().size());
 
         consumerTag1.getListener().waitForMessageConsume(tagMessage.getMessageBodyByTag(tags[0]),
-            consumeTime);
+            CONSUME_TIME);
         consumerTag2.getListener().waitForMessageConsume(tagMessage.getMessageBodyByTag(tags[1]),
-            consumeTime);
+            CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumerTag1.getListener().getAllMsgBody()))
@@ -119,9 +119,9 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
         int msgSize = 10;
 
         TagMessage tagMessage = new TagMessage(tags, topic, msgSize);
-        RMQNormalConsumer consumerTag1 = getConsumer(nsAddr, topic, sub1,
+        RMQNormalConsumer consumerTag1 = getConsumer(NAMESRV_ADDR, topic, sub1,
             new RMQNormalListener());
-        RMQNormalConsumer consumerTag2 = getConsumer(nsAddr, topic, sub2,
+        RMQNormalConsumer consumerTag2 = getConsumer(NAMESRV_ADDR, topic, sub2,
             new RMQNormalListener());
 
         List<Object> tagMsgs = tagMessage.getMixedTagMessages();
@@ -130,9 +130,9 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
             producer.getAllUndupMsgBody().size());
 
         consumerTag1.getListener().waitForMessageConsume(tagMessage.getMessageBodyByTag(tags),
-            consumeTime);
+            CONSUME_TIME);
         consumerTag2.getListener().waitForMessageConsume(tagMessage.getMessageBodyByTag(tags[0]),
-            consumeTime);
+            CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumerTag1.getListener().getAllMsgBody()))
@@ -151,13 +151,13 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
         String sub4 = "*";
         int msgSize = 10;
 
-        RMQNormalConsumer consumerSubTwoMatchAll = getConsumer(nsAddr, topic, sub1,
+        RMQNormalConsumer consumerSubTwoMatchAll = getConsumer(NAMESRV_ADDR, topic, sub1,
             new RMQNormalListener());
-        RMQNormalConsumer consumerSubTwoMachieOne = getConsumer(nsAddr, topic, sub2,
+        RMQNormalConsumer consumerSubTwoMachieOne = getConsumer(NAMESRV_ADDR, topic, sub2,
             new RMQNormalListener());
-        RMQNormalConsumer consumerSubTag1 = getConsumer(nsAddr, topic, sub3,
+        RMQNormalConsumer consumerSubTag1 = getConsumer(NAMESRV_ADDR, topic, sub3,
             new RMQNormalListener());
-        RMQNormalConsumer consumerSubAll = getConsumer(nsAddr, topic, sub4,
+        RMQNormalConsumer consumerSubAll = getConsumer(NAMESRV_ADDR, topic, sub4,
             new RMQNormalListener());
 
         producer.send(msgSize);
@@ -170,14 +170,14 @@ public class TagMessageWithMulConsumerIT extends BaseConf {
         Assert.assertEquals("Not all are sent", msgSize * 3, producer.getAllUndupMsgBody().size());
 
         consumerSubTwoMatchAll.getListener()
-            .waitForMessageConsume(tagMessage.getMessageBodyByTag(tags), consumeTime);
+            .waitForMessageConsume(tagMessage.getMessageBodyByTag(tags), CONSUME_TIME);
         consumerSubTwoMachieOne.getListener()
-            .waitForMessageConsume(tagMessage.getMessageBodyByTag(tags[0]), consumeTime);
+            .waitForMessageConsume(tagMessage.getMessageBodyByTag(tags[0]), CONSUME_TIME);
         consumerSubTag1.getListener().waitForMessageConsume(tagMessage.getMessageBodyByTag(tags[0]),
-            consumeTime);
+            CONSUME_TIME);
         consumerSubAll.getListener().waitForMessageConsume(
             MQMessageFactory.getMessage(msgsWithNoTag, tagMessage.getAllTagMessageBody()),
-            consumeTime);
+            CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumerSubTwoMatchAll.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithSameGroupConsumerIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithSameGroupConsumerIT.java
index 486f290..89ee0d7 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithSameGroupConsumerIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/tag/TagMessageWithSameGroupConsumerIT.java
@@ -42,7 +42,7 @@ public class TagMessageWithSameGroupConsumerIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -55,13 +55,13 @@ public class TagMessageWithSameGroupConsumerIT extends BaseConf {
         int msgSize = 20;
         String originMsgDCName = RandomUtils.getStringByUUID();
         String msgBodyDCName = RandomUtils.getStringByUUID();
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, tag,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, tag,
             new RMQNormalListener(originMsgDCName, msgBodyDCName));
-        getConsumer(nsAddr, consumer1.getConsumerGroup(), tag,
+        getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), tag,
             new RMQNormalListener(originMsgDCName, msgBodyDCName));
         producer.send(tag, msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
@@ -74,15 +74,15 @@ public class TagMessageWithSameGroupConsumerIT extends BaseConf {
         String originMsgDCName = RandomUtils.getStringByUUID();
         String msgBodyDCName = RandomUtils.getStringByUUID();
 
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, tag,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, tag,
             new RMQNormalListener(originMsgDCName, msgBodyDCName));
         producer.send(tag, msgSize, 100);
         TestUtils.waitForMoment(5);
-        getConsumer(nsAddr, consumer1.getConsumerGroup(), tag,
+        getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), tag,
             new RMQNormalListener(originMsgDCName, msgBodyDCName));
         TestUtils.waitForMoment(5);
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -94,9 +94,9 @@ public class TagMessageWithSameGroupConsumerIT extends BaseConf {
         String originMsgDCName = RandomUtils.getStringByUUID();
         String msgBodyDCName = RandomUtils.getStringByUUID();
 
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, tag,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, tag,
             new RMQNormalListener(originMsgDCName, msgBodyDCName));
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), tag,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), tag,
             new RMQNormalListener(originMsgDCName, msgBodyDCName));
 
         producer.send(tag, msgSize, 100);
@@ -105,7 +105,7 @@ public class TagMessageWithSameGroupConsumerIT extends BaseConf {
         mqClients.remove(1);
         TestUtils.waitForMoment(5);
 
-        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer1.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer1.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/MulConsumerMulTopicIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/MulConsumerMulTopicIT.java
index d81c5ef..28da660 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/MulConsumerMulTopicIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/MulConsumerMulTopicIT.java
@@ -35,7 +35,7 @@ public class MulConsumerMulTopicIT extends BaseConf {
 
     @Before
     public void setUp() {
-        producer = getProducer(nsAddr, null);
+        producer = getProducer(NAMESRV_ADDR, null);
     }
 
     @After
@@ -48,9 +48,9 @@ public class MulConsumerMulTopicIT extends BaseConf {
         int msgSize = 10;
         String topic1 = initTopic();
         String topic2 = initTopic();
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic1, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic1, "*", new RMQNormalListener());
         consumer1.subscribe(topic2, "*");
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic1,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic1,
             "*", new RMQNormalListener());
         consumer2.subscribe(topic2, "*");
 
@@ -58,7 +58,7 @@ public class MulConsumerMulTopicIT extends BaseConf {
         producer.send(MQMessageFactory.getMsg(topic2, msgSize));
         Assert.assertEquals("Not all sent succeeded", msgSize * 2, producer.getAllUndupMsgBody().size());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
@@ -69,9 +69,9 @@ public class MulConsumerMulTopicIT extends BaseConf {
         String topic1 = initTopic();
         String topic2 = initTopic();
         String tag = "jueyin_tag";
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic1, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic1, "*", new RMQNormalListener());
         consumer1.subscribe(topic2, tag);
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic1,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic1,
             "*", new RMQNormalListener());
         consumer2.subscribe(topic2, tag);
 
@@ -79,7 +79,7 @@ public class MulConsumerMulTopicIT extends BaseConf {
         producer.send(MQMessageFactory.getMsg(topic2, msgSize, tag));
         Assert.assertEquals("Not all sent succeeded", msgSize * 2, producer.getAllUndupMsgBody().size());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
@@ -91,9 +91,9 @@ public class MulConsumerMulTopicIT extends BaseConf {
         String topic2 = initTopic();
         String tag1 = "jueyin_tag_1";
         String tag2 = "jueyin_tag_2";
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic1, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic1, "*", new RMQNormalListener());
         consumer1.subscribe(topic2, tag1);
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, topic1, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, topic1, "*", new RMQNormalListener());
         consumer2.subscribe(topic2, tag1);
 
         producer.send(MQMessageFactory.getMsg(topic2, msgSize, tag2));
@@ -101,7 +101,7 @@ public class MulConsumerMulTopicIT extends BaseConf {
         producer.send(MQMessageFactory.getMsg(topic1, msgSize));
         producer.send(MQMessageFactory.getMsg(topic2, msgSize, tag1));
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/OneConsumerMulTopicIT.java b/test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/OneConsumerMulTopicIT.java
index f448b84..a622ca5 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/OneConsumerMulTopicIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/consumer/topic/OneConsumerMulTopicIT.java
@@ -35,7 +35,7 @@ public class OneConsumerMulTopicIT extends BaseConf {
 
     @Before
     public void setUp() {
-        producer = getProducer(nsAddr, null);
+        producer = getProducer(NAMESRV_ADDR, null);
     }
 
     @After
@@ -48,14 +48,14 @@ public class OneConsumerMulTopicIT extends BaseConf {
         int msgSize = 10;
         String topic1 = initTopic();
         String topic2 = initTopic();
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic1, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic1, "*", new RMQNormalListener());
         consumer.subscribe(topic2, "*");
 
         producer.send(MQMessageFactory.getMsg(topic1, msgSize));
         producer.send(MQMessageFactory.getMsg(topic2, msgSize));
 
         Assert.assertEquals("Not all are sent", msgSize * 2, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -67,14 +67,14 @@ public class OneConsumerMulTopicIT extends BaseConf {
         String topic1 = initTopic();
         String topic2 = initTopic();
         String tag = "jueyin_tag";
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic1, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic1, "*", new RMQNormalListener());
         consumer.subscribe(topic2, tag);
 
         producer.send(MQMessageFactory.getMsg(topic1, msgSize));
         producer.send(MQMessageFactory.getMsg(topic2, msgSize, tag));
 
         Assert.assertEquals("Not all are sent", msgSize * 2, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -87,7 +87,7 @@ public class OneConsumerMulTopicIT extends BaseConf {
         String topic2 = initTopic();
         String tag1 = "jueyin_tag_1";
         String tag2 = "jueyin_tag_2";
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic1, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic1, "*", new RMQNormalListener());
         consumer.subscribe(topic2, tag1);
 
         producer.send(MQMessageFactory.getMsg(topic2, msgSize, tag2));
@@ -96,7 +96,7 @@ public class OneConsumerMulTopicIT extends BaseConf {
         producer.send(MQMessageFactory.getMsg(topic2, msgSize, tag1));
 
         Assert.assertEquals("Not all are sent", msgSize * 2, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendExceptionIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendExceptionIT.java
index d1a1fd1..5f5775d 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendExceptionIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendExceptionIT.java
@@ -56,7 +56,7 @@ public class AsyncSendExceptionIT extends BaseConf {
     @Test
     public void testSendCallBackNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         SendCallback sendCallback = null;
         producer.send(msg, sendCallback);
     }
@@ -64,7 +64,7 @@ public class AsyncSendExceptionIT extends BaseConf {
     @Test
     public void testSendMQNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         MessageQueue messageQueue = null;
         producer.send(msg, messageQueue, SendCallBackFactory.getSendCallBack());
     }
@@ -72,7 +72,7 @@ public class AsyncSendExceptionIT extends BaseConf {
     @Test
     public void testSendSelectorNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         MessageQueueSelector selector = null;
         producer.send(msg, selector, 100, SendCallBackFactory.getSendCallBack());
     }
@@ -80,7 +80,7 @@ public class AsyncSendExceptionIT extends BaseConf {
     @Test
     public void testSelectorThrowsException() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         producer.send(msg, new MessageQueueSelector() {
             @Override
             public MessageQueue select(List<MessageQueue> list, Message message, Object o) {
@@ -94,9 +94,9 @@ public class AsyncSendExceptionIT extends BaseConf {
     public void testQueueIdBigThanQueueNum() throws Exception {
         int queueId = 100;
         sendFail = false;
-        MessageQueue mq = new MessageQueue(topic, broker1Name, queueId);
+        MessageQueue mq = new MessageQueue(topic, BROKER1_NAME, queueId);
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
 
         producer.send(msg, mq, new SendCallback() {
             @Override
@@ -122,9 +122,9 @@ public class AsyncSendExceptionIT extends BaseConf {
     public void testQueueIdSmallZero() throws Exception {
         int queueId = -100;
         sendFail = true;
-        MessageQueue mq = new MessageQueue(topic, broker1Name, queueId);
+        MessageQueue mq = new MessageQueue(topic, BROKER1_NAME, queueId);
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
 
         producer.send(msg, mq, new SendCallback() {
             @Override
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java
index a7e433a..d5cf8b6 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueIT.java
@@ -40,7 +40,7 @@ public class AsyncSendWithMessageQueueIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("user topic[%s]!", topic));
-        producer = getAsyncProducer(nsAddr, topic);
+        producer = getAsyncProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -52,14 +52,14 @@ public class AsyncSendWithMessageQueueIT extends BaseConf {
     public void testAsyncSendWithMQ() {
         int msgSize = 20;
         int queueId = 0;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
-        MessageQueue mq = new MessageQueue(topic, broker1Name, queueId);
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
+        MessageQueue mq = new MessageQueue(topic, BROKER1_NAME, queueId);
 
         producer.asyncSend(msgSize, mq);
         producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -69,12 +69,12 @@ public class AsyncSendWithMessageQueueIT extends BaseConf {
         producer.clearMsg();
         consumer.clearMsg();
         producer.getSuccessSendResult().clear();
-        mq = new MessageQueue(topic, broker2Name, queueId);
+        mq = new MessageQueue(topic, BROKER2_NAME, queueId);
         producer.asyncSend(msgSize, mq);
         producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java
index fc42e28..280d5af 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithMessageQueueSelectorIT.java
@@ -43,7 +43,7 @@ public class AsyncSendWithMessageQueueSelectorIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("user topic[%s]!", topic));
-        producer = getAsyncProducer(nsAddr, topic);
+        producer = getAsyncProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -55,13 +55,13 @@ public class AsyncSendWithMessageQueueSelectorIT extends BaseConf {
     public void testSendWithSelector() {
         int msgSize = 20;
         final int queueId = 0;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         producer.asyncSend(msgSize, new MessageQueueSelector() {
             @Override
             public MessageQueue select(List<MessageQueue> list, Message message, Object o) {
                 for (MessageQueue mq : list) {
-                    if (mq.getQueueId() == queueId && mq.getBrokerName().equals(broker1Name)) {
+                    if (mq.getQueueId() == queueId && mq.getBrokerName().equals(BROKER1_NAME)) {
                         return mq;
                     }
                 }
@@ -71,7 +71,7 @@ public class AsyncSendWithMessageQueueSelectorIT extends BaseConf {
         producer.waitForResponse(5 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -86,7 +86,7 @@ public class AsyncSendWithMessageQueueSelectorIT extends BaseConf {
             @Override
             public MessageQueue select(List<MessageQueue> list, Message message, Object o) {
                 for (MessageQueue mq : list) {
-                    if (mq.getQueueId() == queueId && mq.getBrokerName().equals(broker2Name)) {
+                    if (mq.getQueueId() == queueId && mq.getBrokerName().equals(BROKER2_NAME)) {
                         return mq;
                     }
                 }
@@ -96,7 +96,7 @@ public class AsyncSendWithMessageQueueSelectorIT extends BaseConf {
         producer.waitForResponse(5 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithOnlySendCallBackIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithOnlySendCallBackIT.java
index 52ac295..4947ef8 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithOnlySendCallBackIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/async/AsyncSendWithOnlySendCallBackIT.java
@@ -39,7 +39,7 @@ public class AsyncSendWithOnlySendCallBackIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("user topic[%s]!", topic));
-        producer = getAsyncProducer(nsAddr, topic);
+        producer = getAsyncProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -50,12 +50,12 @@ public class AsyncSendWithOnlySendCallBackIT extends BaseConf {
     @Test
     public void testSendWithOnlyCallBack() {
         int msgSize = 20;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
         producer.asyncSend(msgSize);
         producer.waitForResponse(10 * 1000);
         assertThat(producer.getSuccessMsgCount()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/batch/BatchSendIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/batch/BatchSendIT.java
index 283dcbe..59c8a9e 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/batch/BatchSendIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/batch/BatchSendIT.java
@@ -77,7 +77,7 @@ public class BatchSendIT extends BaseConf {
             messageList.add(new Message(topic, RandomUtils.getStringByUUID().getBytes()));
         }
 
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         removeBatchUniqueId(producer);
 
         SendResult sendResult = producer.send(messageList);
@@ -100,10 +100,10 @@ public class BatchSendIT extends BaseConf {
 
     @Test
     public void testBatchSend_SysInnerBatch() throws Exception {
-        waitBrokerRegistered(nsAddr, clusterName, brokerNum);
+        waitBrokerRegistered(NAMESRV_ADDR, CLUSTER_NAME, BROKER_NUM);
 
         String batchTopic = UUID.randomUUID().toString();
-        IntegrationTestBase.initTopic(batchTopic, nsAddr, clusterName, CQType.BatchCQ);
+        IntegrationTestBase.initTopic(batchTopic, NAMESRV_ADDR, CLUSTER_NAME, CQType.BatchCQ);
 
         Assert.assertEquals(CQType.BatchCQ.toString(), brokerController1.getTopicConfigManager().getTopicConfigTable().get(batchTopic).getAttributes().get(TopicAttributes.QUEUE_TYPE_ATTRIBUTE.getName()));
         Assert.assertEquals(CQType.BatchCQ.toString(), brokerController2.getTopicConfigManager().getTopicConfigTable().get(batchTopic).getAttributes().get(TopicAttributes.QUEUE_TYPE_ATTRIBUTE.getName()));
@@ -118,7 +118,7 @@ public class BatchSendIT extends BaseConf {
         Assert.assertEquals(0, brokerController2.getMessageStore().getMaxOffsetInQueue(batchTopic, 0));
         Assert.assertEquals(0, brokerController3.getMessageStore().getMaxOffsetInQueue(batchTopic, 0));
 
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         MessageQueue messageQueue = producer.fetchPublishMessageQueues(batchTopic).iterator().next();
 
         int batchCount = 10;
@@ -136,8 +136,7 @@ public class BatchSendIT extends BaseConf {
         }
         Thread.sleep(300);
         {
-            DefaultMQPullConsumer defaultMQPullConsumer = ConsumerFactory.getRMQPullConsumer(nsAddr, "group");
-            System.out.println(defaultMQPullConsumer.maxOffset(messageQueue));
+            DefaultMQPullConsumer defaultMQPullConsumer = ConsumerFactory.getRMQPullConsumer(NAMESRV_ADDR, "group");
 
             PullResult pullResult = defaultMQPullConsumer.pullBlockIfNotFound(messageQueue, "*", 5, batchCount * batchNum);
             Assert.assertEquals(PullStatus.FOUND, pullResult.getPullStatus());
@@ -168,7 +167,7 @@ public class BatchSendIT extends BaseConf {
         Assert.assertTrue(brokerController3.getMessageStore() instanceof DefaultMessageStore);
 
         String batchTopic = UUID.randomUUID().toString();
-        IntegrationTestBase.initTopic(batchTopic, nsAddr, clusterName, CQType.SimpleCQ);
+        IntegrationTestBase.initTopic(batchTopic, NAMESRV_ADDR, CLUSTER_NAME, CQType.SimpleCQ);
         Assert.assertEquals(8, brokerController1.getTopicConfigManager().getTopicConfigTable().get(batchTopic).getReadQueueNums());
         Assert.assertEquals(8, brokerController2.getTopicConfigManager().getTopicConfigTable().get(batchTopic).getReadQueueNums());
         Assert.assertEquals(8, brokerController3.getTopicConfigManager().getTopicConfigTable().get(batchTopic).getReadQueueNums());
@@ -179,7 +178,7 @@ public class BatchSendIT extends BaseConf {
         Assert.assertEquals(0, brokerController2.getMessageStore().getMaxOffsetInQueue(batchTopic, 0));
         Assert.assertEquals(0, brokerController3.getMessageStore().getMaxOffsetInQueue(batchTopic, 0));
 
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         MessageQueue messageQueue = producer.fetchPublishMessageQueues(batchTopic).iterator().next();
 
         int batchCount = 10;
@@ -197,7 +196,7 @@ public class BatchSendIT extends BaseConf {
         }
         Thread.sleep(300);
         {
-            DefaultMQPullConsumer defaultMQPullConsumer = ConsumerFactory.getRMQPullConsumer(nsAddr, "group");
+            DefaultMQPullConsumer defaultMQPullConsumer = ConsumerFactory.getRMQPullConsumer(NAMESRV_ADDR, "group");
 
             long startOffset = 5;
             PullResult pullResult = defaultMQPullConsumer.pullBlockIfNotFound(messageQueue, "*", startOffset, batchCount * batchNum);
@@ -227,7 +226,7 @@ public class BatchSendIT extends BaseConf {
         message.setBody("body".getBytes());
         messageList.add(message);
 
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         removeBatchUniqueId(producer);
 
         SendResult sendResult = producer.send(messageList);
@@ -243,9 +242,6 @@ public class BatchSendIT extends BaseConf {
         Message messageByOffset = producer.viewMessage(offsetIds[0]);
         Message messageByMsgId = producer.viewMessage(topic, msgIds[0]);
 
-        System.out.println(messageByOffset);
-        System.out.println(messageByMsgId);
-
         Assert.assertEquals(message.getTopic(), messageByMsgId.getTopic());
         Assert.assertEquals(message.getTopic(), messageByOffset.getTopic());
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/ChinaPropIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/ChinaPropIT.java
index e524fb3..82aed46 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/ChinaPropIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/ChinaPropIT.java
@@ -37,7 +37,7 @@ public class ChinaPropIT extends BaseConf {
 
     @Before
     public void setUp() {
-        producer = ProducerFactory.getRMQProducer(nsAddr);
+        producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         topic = initTopic();
     }
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageExceptionIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageExceptionIT.java
index 7d96f20..cbd2cff 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageExceptionIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageExceptionIT.java
@@ -37,7 +37,7 @@ public class MessageExceptionIT extends BaseConf {
 
     @Before
     public void setUp() {
-        producer = ProducerFactory.getRMQProducer(nsAddr);
+        producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         topic = initTopic();
     }
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageUserPropIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageUserPropIT.java
index b5536e3..cf08849 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageUserPropIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/msg/MessageUserPropIT.java
@@ -40,7 +40,7 @@ public class MessageUserPropIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -58,12 +58,12 @@ public class MessageUserPropIT extends BaseConf {
         String msgValue = "jueyinValue";
         msg.putUserProperty(msgKey, msgValue);
 
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         producer.send(msg, null);
         assertThat(producer.getAllMsgBody().size()).isEqualTo(1);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         Message sendMsg = (Message) producer.getFirstMsg();
         Message recvMsg = (Message) consumer.getListener().getFirstMsg();
@@ -80,12 +80,12 @@ public class MessageUserPropIT extends BaseConf {
         String msgValue = "jueyinzhi";
         msg.putUserProperty(msgKey, msgValue);
 
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         producer.send(msg, null);
         assertThat(producer.getAllMsgBody().size()).isEqualTo(1);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         Message sendMsg = (Message) producer.getFirstMsg();
         Message recvMsg = (Message) consumer.getListener().getFirstMsg();
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/producer/ProducerGroupAndInstanceNameValidityIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/producer/ProducerGroupAndInstanceNameValidityIT.java
index b5e49cd..73d4a79 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/producer/ProducerGroupAndInstanceNameValidityIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/exception/producer/ProducerGroupAndInstanceNameValidityIT.java
@@ -47,9 +47,9 @@ public class ProducerGroupAndInstanceNameValidityIT extends BaseConf {
      */
     @Test
     public void testTwoProducerSameGroupAndInstanceName() {
-        RMQNormalProducer producer1 = getProducer(nsAddr, topic);
+        RMQNormalProducer producer1 = getProducer(NAMESRV_ADDR, topic);
         assertThat(producer1.isStartSuccess()).isEqualTo(true);
-        RMQNormalProducer producer2 = getProducer(nsAddr, topic,
+        RMQNormalProducer producer2 = getProducer(NAMESRV_ADDR, topic,
             producer1.getProducerGroupName(), producer1.getProducerInstanceName());
         assertThat(producer2.isStartSuccess()).isEqualTo(false);
     }
@@ -59,9 +59,9 @@ public class ProducerGroupAndInstanceNameValidityIT extends BaseConf {
      */
     @Test
     public void testTwoProducerSameGroup() {
-        RMQNormalProducer producer1 = getProducer(nsAddr, topic);
+        RMQNormalProducer producer1 = getProducer(NAMESRV_ADDR, topic);
         assertThat(producer1.isStartSuccess()).isEqualTo(true);
-        RMQNormalProducer producer2 = getProducer(nsAddr, topic,
+        RMQNormalProducer producer2 = getProducer(NAMESRV_ADDR, topic,
             producer1.getProducerGroupName(), RandomUtils.getStringByUUID());
         assertThat(producer2.isStartSuccess()).isEqualTo(true);
     }
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendExceptionIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendExceptionIT.java
index 1113689..ed34dde 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendExceptionIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendExceptionIT.java
@@ -50,7 +50,7 @@ public class OneWaySendExceptionIT extends BaseConf {
     @Test(expected = java.lang.NullPointerException.class)
     public void testSendMQNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         MessageQueue messageQueue = null;
         producer.sendOneway(msg, messageQueue);
     }
@@ -58,7 +58,7 @@ public class OneWaySendExceptionIT extends BaseConf {
     @Test(expected = org.apache.rocketmq.client.exception.MQClientException.class)
     public void testSendSelectorNull() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         MessageQueueSelector selector = null;
         producer.sendOneway(msg, selector, 100);
     }
@@ -66,7 +66,7 @@ public class OneWaySendExceptionIT extends BaseConf {
     @Test(expected = org.apache.rocketmq.client.exception.MQClientException.class)
     public void testSelectorThrowsException() throws Exception {
         Message msg = new Message(topic, RandomUtils.getStringByUUID().getBytes());
-        DefaultMQProducer producer = ProducerFactory.getRMQProducer(nsAddr);
+        DefaultMQProducer producer = ProducerFactory.getRMQProducer(NAMESRV_ADDR);
         producer.sendOneway(msg, new MessageQueueSelector() {
             @Override
             public MessageQueue select(List<MessageQueue> list, Message message, Object o) {
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendIT.java
index efd582d..5798839 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendIT.java
@@ -39,7 +39,7 @@ public class OneWaySendIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("user topic[%s]!", topic));
-        producer = getAsyncProducer(nsAddr, topic);
+        producer = getAsyncProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -50,13 +50,13 @@ public class OneWaySendIT extends BaseConf {
     @Test
     public void testOneWaySendWithOnlyMsgAsParam() {
         int msgSize = 20;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         producer.sendOneWay(msgSize);
         producer.waitForResponse(5 * 1000);
         assertThat(producer.getAllMsgBody().size()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithMQIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithMQIT.java
index ac76f5f..9278887 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithMQIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithMQIT.java
@@ -41,7 +41,7 @@ public class OneWaySendWithMQIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("user topic[%s]!", topic));
-        producer = getAsyncProducer(nsAddr, topic);
+        producer = getAsyncProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -53,13 +53,13 @@ public class OneWaySendWithMQIT extends BaseConf {
     public void testAsyncSendWithMQ() {
         int msgSize = 20;
         int queueId = 0;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
-        MessageQueue mq = new MessageQueue(topic, broker1Name, queueId);
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
+        MessageQueue mq = new MessageQueue(topic, BROKER1_NAME, queueId);
 
         producer.sendOneWay(msgSize, mq);
         producer.waitForResponse(5 * 1000);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithSelectorIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithSelectorIT.java
index ed567a0..3d72af7 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithSelectorIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/oneway/OneWaySendWithSelectorIT.java
@@ -44,7 +44,7 @@ public class OneWaySendWithSelectorIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("user topic[%s]!", topic));
-        producer = getAsyncProducer(nsAddr, topic);
+        producer = getAsyncProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -56,13 +56,13 @@ public class OneWaySendWithSelectorIT extends BaseConf {
     public void testSendWithSelector() {
         int msgSize = 20;
         final int queueId = 0;
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         producer.sendOneWay(msgSize, new MessageQueueSelector() {
             @Override
             public MessageQueue select(List<MessageQueue> list, Message message, Object o) {
                 for (MessageQueue mq : list) {
-                    if (mq.getQueueId() == queueId && mq.getBrokerName().equals(broker1Name)) {
+                    if (mq.getQueueId() == queueId && mq.getBrokerName().equals(BROKER1_NAME)) {
                         return mq;
                     }
                 }
@@ -71,7 +71,7 @@ public class OneWaySendWithSelectorIT extends BaseConf {
         });
         assertThat(producer.getAllMsgBody().size()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
@@ -85,7 +85,7 @@ public class OneWaySendWithSelectorIT extends BaseConf {
             @Override
             public MessageQueue select(List<MessageQueue> list, Message message, Object o) {
                 for (MessageQueue mq : list) {
-                    if (mq.getQueueId() == queueId && mq.getBrokerName().equals(broker2Name)) {
+                    if (mq.getQueueId() == queueId && mq.getBrokerName().equals(BROKER2_NAME)) {
                         return mq;
                     }
                 }
@@ -94,7 +94,7 @@ public class OneWaySendWithSelectorIT extends BaseConf {
         });
         assertThat(producer.getAllMsgBody().size()).isEqualTo(msgSize);
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgDynamicRebalanceIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgDynamicRebalanceIT.java
index ba2b337..ccd04fb 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgDynamicRebalanceIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgDynamicRebalanceIT.java
@@ -43,7 +43,7 @@ public class OrderMsgDynamicRebalanceIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -54,9 +54,9 @@ public class OrderMsgDynamicRebalanceIT extends BaseConf {
     @Test
     public void testTwoConsumerAndCrashOne() {
         int msgSize = 10;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*",
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*",
             new RMQOrderListener("1"));
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQOrderListener("2"));
 
         List<MessageQueue> mqs = producer.getMessageQueue();
@@ -70,7 +70,7 @@ public class OrderMsgDynamicRebalanceIT extends BaseConf {
         mqMsgs = new MessageQueueMsg(mqs, msgSize);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
 
@@ -83,18 +83,18 @@ public class OrderMsgDynamicRebalanceIT extends BaseConf {
     @Test
     public void testThreeConsumerAndCrashOne() {
         int msgSize = 10;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*",
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*",
             new RMQOrderListener("1"));
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQOrderListener("2"));
-        RMQNormalConsumer consumer3 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer3 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQOrderListener("3"));
 
         List<MessageQueue> mqs = producer.getMessageQueue();
         MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer1.getListener(),
+        MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer1.getListener(),
             consumer2.getListener(), consumer3.getListener());
         consumer3.shutdown();
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgIT.java
index fa3320c..7ea4af8 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgIT.java
@@ -43,8 +43,8 @@ public class OrderMsgIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
-        consumer = getConsumer(nsAddr, topic, "*", new RMQOrderListener());
+        producer = getProducer(NAMESRV_ADDR, topic);
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQOrderListener());
     }
 
     @After
@@ -59,7 +59,7 @@ public class OrderMsgIT extends BaseConf {
         MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -77,7 +77,7 @@ public class OrderMsgIT extends BaseConf {
             msgSize);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -96,7 +96,7 @@ public class OrderMsgIT extends BaseConf {
             msgSize);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgRebalanceIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgRebalanceIT.java
index eff70a0..b6e08f3 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgRebalanceIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgRebalanceIT.java
@@ -43,7 +43,7 @@ public class OrderMsgRebalanceIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s !", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -54,16 +54,16 @@ public class OrderMsgRebalanceIT extends BaseConf {
     @Test
     public void testTwoConsumersBalance() {
         int msgSize = 10;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQOrderListener());
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQOrderListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQOrderListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         List<MessageQueue> mqs = producer.getMessageQueue();
         MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
 
@@ -83,20 +83,20 @@ public class OrderMsgRebalanceIT extends BaseConf {
     @Test
     public void testFourConsumerBalance() {
         int msgSize = 20;
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, "*", new RMQOrderListener());
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, "*", new RMQOrderListener());
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQOrderListener());
-        RMQNormalConsumer consumer3 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer3 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQOrderListener());
-        RMQNormalConsumer consumer4 = getConsumer(nsAddr, consumer1.getConsumerGroup(), topic,
+        RMQNormalConsumer consumer4 = getConsumer(NAMESRV_ADDR, consumer1.getConsumerGroup(), topic,
             "*", new RMQOrderListener());
-        TestUtils.waitForSeconds(waitTime);
+        TestUtils.waitForSeconds(WAIT_TIME);
 
         List<MessageQueue> mqs = producer.getMessageQueue();
         MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener(), consumer3.getListener(),
             consumer4.getListener());
         assertThat(recvAll).isEqualTo(true);
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgWithTagIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgWithTagIT.java
index 5d05570..cf385f5 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgWithTagIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/order/OrderMsgWithTagIT.java
@@ -42,7 +42,7 @@ public class OrderMsgWithTagIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -54,13 +54,13 @@ public class OrderMsgWithTagIT extends BaseConf {
     public void testOrderMsgWithTagSubAll() {
         int msgSize = 10;
         String tag = "jueyin_tag";
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQOrderListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQOrderListener());
 
         List<MessageQueue> mqs = producer.getMessageQueue();
         MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize, tag);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -74,13 +74,13 @@ public class OrderMsgWithTagIT extends BaseConf {
     public void testOrderMsgWithTagSubTag() {
         int msgSize = 5;
         String tag = "jueyin_tag";
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, tag, new RMQOrderListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, tag, new RMQOrderListener());
 
         List<MessageQueue> mqs = producer.getMessageQueue();
         MessageQueueMsg mqMsgs = new MessageQueueMsg(mqs, msgSize, tag);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -95,7 +95,7 @@ public class OrderMsgWithTagIT extends BaseConf {
         int msgSize = 5;
         String tag1 = "jueyin_tag_1";
         String tag2 = "jueyin_tag_2";
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, tag1, new RMQOrderListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, tag1, new RMQOrderListener());
 
         List<MessageQueue> mqs = producer.getMessageQueue();
 
@@ -106,7 +106,7 @@ public class OrderMsgWithTagIT extends BaseConf {
         mqMsgs = new MessageQueueMsg(mqs, msgSize, tag1);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
 
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
@@ -121,9 +121,9 @@ public class OrderMsgWithTagIT extends BaseConf {
         int msgSize = 10;
         String tag1 = "jueyin_tag_1";
         String tag2 = "jueyin_tag_2";
-        RMQNormalConsumer consumer1 = getConsumer(nsAddr, topic, tag1,
+        RMQNormalConsumer consumer1 = getConsumer(NAMESRV_ADDR, topic, tag1,
             new RMQOrderListener("consumer1"));
-        RMQNormalConsumer consumer2 = getConsumer(nsAddr, topic, tag2,
+        RMQNormalConsumer consumer2 = getConsumer(NAMESRV_ADDR, topic, tag2,
             new RMQOrderListener("consumer2"));
         List<MessageQueue> mqs = producer.getMessageQueue();
 
@@ -133,7 +133,7 @@ public class OrderMsgWithTagIT extends BaseConf {
         mqMsgs = new MessageQueueMsg(mqs, msgSize, tag2);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer1.getListener(), consumer2.getListener());
         assertThat(recvAll).isEqualTo(true);
 
@@ -148,7 +148,7 @@ public class OrderMsgWithTagIT extends BaseConf {
         int msgSize = 10;
         String tag1 = "jueyin_tag_1";
         String tag2 = "jueyin_tag_2";
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic,
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic,
             String.format("%s||%s", tag1, tag2), new RMQOrderListener());
 
         List<MessageQueue> mqs = producer.getMessageQueue();
@@ -159,7 +159,7 @@ public class OrderMsgWithTagIT extends BaseConf {
         mqMsgs = new MessageQueueMsg(mqs, msgSize, tag2);
         producer.send(mqMsgs.getMsgsWithMQ());
 
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(),
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(),
             consumer.getListener());
         assertThat(recvAll).isEqualTo(true);
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdExceptionIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdExceptionIT.java
index e651111..97d2c37 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdExceptionIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdExceptionIT.java
@@ -37,7 +37,7 @@ public class QueryMsgByIdExceptionIT extends BaseConf {
     public static void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @AfterClass
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdIT.java
index 88e8b46..a0b6527 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByIdIT.java
@@ -43,8 +43,8 @@ public class QueryMsgByIdIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
-        consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        producer = getProducer(NAMESRV_ADDR, topic);
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
     }
 
     @After
@@ -57,7 +57,7 @@ public class QueryMsgByIdIT extends BaseConf {
         int msgSize = 20;
         producer.send(msgSize);
         Assert.assertEquals("Not all are sent", msgSize, producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()));
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByKeyIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByKeyIT.java
index d7c4364..cb8310b 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByKeyIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/querymsg/QueryMsgByKeyIT.java
@@ -42,7 +42,7 @@ public class QueryMsgByKeyIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
     }
 
     @After
@@ -74,7 +74,7 @@ public class QueryMsgByKeyIT extends BaseConf {
     @Test
     public void testQueryMax() {
         int msgSize = 500;
-        int max = 64 * brokerNum;
+        int max = 64 * BROKER_NUM;
         String key = "jueyin";
         long begin = System.currentTimeMillis();
         List<Object> msgs = MQMessageFactory.getKeyMsg(topic, key, msgSize);
@@ -87,13 +87,13 @@ public class QueryMsgByKeyIT extends BaseConf {
                 System.currentTimeMillis() + 15000).getMessageList();
 
             int i = 3;
-            while (queryMsgs == null || queryMsgs.size() != brokerNum) {
+            while (queryMsgs == null || queryMsgs.size() != BROKER_NUM) {
                 i--;
                 queryMsgs = producer.getProducer().queryMessage(topic, key, msgSize, begin - 15000,
                     System.currentTimeMillis() + 15000).getMessageList();
                 TestUtils.waitForMoment(1000);
 
-                if (i == 0 || (queryMsgs != null && queryMsgs.size() == max)) {
+                if (i == 0 || queryMsgs != null && queryMsgs.size() == max) {
                     break;
                 }
             }
@@ -116,8 +116,8 @@ public class QueryMsgByKeyIT extends BaseConf {
         initTopicWithName(topicA);
         initTopicWithName(topicB);
 
-        RMQNormalProducer producerA = getProducer(nsAddr, topicA);
-        RMQNormalProducer producerB = getProducer(nsAddr, topicB);
+        RMQNormalProducer producerA = getProducer(NAMESRV_ADDR, topicA);
+        RMQNormalProducer producerB = getProducer(NAMESRV_ADDR, topicB);
 
         List<Object> msgA = MQMessageFactory.getKeyMsg(topicA, keyA, msgSize);
         List<Object> msgB = MQMessageFactory.getKeyMsg(topicB, keyB, msgSize);
@@ -142,8 +142,8 @@ public class QueryMsgByKeyIT extends BaseConf {
         initTopicWithName(topicA);
         initTopicWithName(topicB);
 
-        RMQNormalProducer producerA = getProducer(nsAddr, topicA);
-        RMQNormalProducer producerB = getProducer(nsAddr, topicB);
+        RMQNormalProducer producerA = getProducer(NAMESRV_ADDR, topicA);
+        RMQNormalProducer producerB = getProducer(NAMESRV_ADDR, topicB);
 
         List<Object> msgA = MQMessageFactory.getKeyMsg(topicA, keyA, msgSize);
         List<Object> msgB = MQMessageFactory.getKeyMsg(topicB, keyB, msgSize);
diff --git a/test/src/test/java/org/apache/rocketmq/test/client/producer/transaction/TransactionalMsgIT.java b/test/src/test/java/org/apache/rocketmq/test/client/producer/transaction/TransactionalMsgIT.java
index b5f46c2..3803462 100644
--- a/test/src/test/java/org/apache/rocketmq/test/client/producer/transaction/TransactionalMsgIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/client/producer/transaction/TransactionalMsgIT.java
@@ -47,8 +47,8 @@ public class TransactionalMsgIT extends BaseConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getTransactionalProducer(nsAddr, topic, new TransactionListenerImpl());
-        consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        producer = getTransactionalProducer(NAMESRV_ADDR, topic, new TransactionListenerImpl());
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
     }
 
     @After
@@ -64,7 +64,7 @@ public class TransactionalMsgIT extends BaseConf {
         for (int i = 0; i < msgSize; i++) {
             producer.send(msgs.get(i), getTransactionHandle(i));
         }
-        boolean recvAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer.getListener());
+        boolean recvAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer.getListener());
         assertThat(recvAll).isEqualTo(true);
     }
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/AddAndRemoveBrokerIT.java b/test/src/test/java/org/apache/rocketmq/test/container/AddAndRemoveBrokerIT.java
index a9eca51..5c0cf42 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/AddAndRemoveBrokerIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/AddAndRemoveBrokerIT.java
@@ -62,7 +62,7 @@ public class AddAndRemoveBrokerIT extends ContainerIntegrationTestBase {
 
     @Test
     public void removeBrokerTest()
-        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException{
+        throws InterruptedException, RemotingTimeoutException, RemotingSendRequestException, RemotingConnectException {
 
         boolean exceptionCaught = false;
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/ContainerIntegrationTestBase.java b/test/src/test/java/org/apache/rocketmq/test/container/ContainerIntegrationTestBase.java
index e1cadaf..ac5add2 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/ContainerIntegrationTestBase.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/ContainerIntegrationTestBase.java
@@ -87,8 +87,8 @@ public class ContainerIntegrationTestBase {
 
     protected static final String THREE_REPLICAS_TOPIC = "SEND_MESSAGE_TEST_TOPIC_THREE_REPLICAS";
 
-    protected static final List<BrokerContainer> brokerContainerList = new ArrayList<>();
-    protected static final List<NamesrvController> namesrvControllers = new ArrayList<>();
+    protected static List<BrokerContainer> brokerContainerList = new ArrayList<>();
+    protected static List<NamesrvController> namesrvControllers = new ArrayList<>();
 
     protected static final String BROKER_NAME_PREFIX = "TestBrokerName_";
     protected static final int COMMIT_LOG_SIZE = 128 * 1024;
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/GetMaxOffsetFromSlaveIT.java b/test/src/test/java/org/apache/rocketmq/test/container/GetMaxOffsetFromSlaveIT.java
index f42146b..37ffa3d 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/GetMaxOffsetFromSlaveIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/GetMaxOffsetFromSlaveIT.java
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.test.container;
 
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
@@ -29,7 +29,6 @@ import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.junit.AfterClass;
@@ -44,9 +43,10 @@ import static org.awaitility.Awaitility.await;
 public class GetMaxOffsetFromSlaveIT extends ContainerIntegrationTestBase {
     private static DefaultMQProducer mqProducer;
 
-    private final byte[] MESSAGE_BODY = ("Hello RocketMQ ").getBytes(RemotingHelper.DEFAULT_CHARSET);
+    private static final String MSG = "Hello RocketMQ ";
+    private static final byte[] MESSAGE_BODY = MSG.getBytes(StandardCharsets.UTF_8);
 
-    public GetMaxOffsetFromSlaveIT() throws UnsupportedEncodingException {
+    public GetMaxOffsetFromSlaveIT() {
     }
 
     @BeforeClass
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/GetMetadataReverseIT.java b/test/src/test/java/org/apache/rocketmq/test/container/GetMetadataReverseIT.java
index d1b3840..8df77ac 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/GetMetadataReverseIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/GetMetadataReverseIT.java
@@ -17,7 +17,6 @@
 
 package org.apache.rocketmq.test.container;
 
-import java.io.UnsupportedEncodingException;
 import java.time.Duration;
 import java.util.Map;
 import java.util.Random;
@@ -49,9 +48,9 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
 
     private static final int MESSAGE_COUNT = 32;
 
-    private final static Random random = new Random();
+    private final Random random = new Random();
 
-    public GetMetadataReverseIT() throws UnsupportedEncodingException {
+    public GetMetadataReverseIT() {
 
     }
 
@@ -87,7 +86,6 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
         }
         final int finalSendSuccess = sendSuccess;
         await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);
-        System.out.printf("send success%n");
 
         isolateBroker(master1With3Replicas);
         brokerContainer1.removeBroker(new BrokerIdentity(
@@ -95,8 +93,6 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
             master1With3Replicas.getBrokerConfig().getBrokerName(),
             master1With3Replicas.getBrokerConfig().getBrokerId()));
 
-        System.out.printf("Remove master%n");
-
         DefaultMQPushConsumer pushConsumer = createPushConsumer(CONSUMER_GROUP);
         pushConsumer.subscribe(topic, "*");
         pushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
@@ -133,7 +129,6 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
         master1With3Replicas = brokerContainer1.addBroker(master1With3Replicas.getBrokerConfig(), master1With3Replicas.getMessageStoreConfig());
         master1With3Replicas.start();
         cancelIsolatedBroker(master1With3Replicas);
-        System.out.printf("Add back master%n");
 
         awaitUntilSlaveOK();
 
@@ -186,7 +181,6 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
         }
         final int finalSendSuccess = sendSuccess;
         await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);
-        System.out.printf("send success%n");
 
         isolateBroker(master1With3Replicas);
         brokerContainer1.removeBroker(new BrokerIdentity(
@@ -194,16 +188,14 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
             master1With3Replicas.getBrokerConfig().getBrokerName(),
             master1With3Replicas.getBrokerConfig().getBrokerId()));
 
-        System.out.printf("Remove master%n");
-
         await().atMost(Duration.ofMinutes(1)).until(() -> receivedMsgCount.get() >= MESSAGE_COUNT);
 
         await().atMost(Duration.ofMinutes(1)).until(() -> {
             pushConsumer.getDefaultMQPushConsumerImpl().persistConsumerOffset();
-            Map<Integer, Long> OffsetTable = master2With3Replicas.getConsumerOffsetManager().queryOffset(CONSUMER_GROUP, topic);
-            if (OffsetTable != null) {
+            Map<Integer, Long> offsetTable = master2With3Replicas.getConsumerOffsetManager().queryOffset(CONSUMER_GROUP, topic);
+            if (offsetTable != null) {
                 long totalOffset = 0;
-                for (final Long offset : OffsetTable.values()) {
+                for (final Long offset : offsetTable.values()) {
                     totalOffset += offset;
                 }
                 return totalOffset >= MESSAGE_COUNT;
@@ -216,13 +208,11 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
         master1With3Replicas = brokerContainer1.addBroker(master1With3Replicas.getBrokerConfig(), master1With3Replicas.getMessageStoreConfig());
         master1With3Replicas.start();
         cancelIsolatedBroker(master1With3Replicas);
-        System.out.printf("Add back master%n");
 
         awaitUntilSlaveOK();
 
         await().atMost(Duration.ofMinutes(1)).until(() -> {
             Map<Integer, Long> offsetTable = master1With3Replicas.getScheduleMessageService().getOffsetTable();
-            System.out.println("" + offsetTable.get(delayLevel));
             return offsetTable.get(delayLevel) >= MESSAGE_COUNT;
         });
 
@@ -263,7 +253,6 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
         }
         final int finalSendSuccess = sendSuccess;
         await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);
-        System.out.printf("send success%n");
 
         isolateBroker(master1With3Replicas);
         brokerContainer1.removeBroker(new BrokerIdentity(
@@ -271,16 +260,14 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
             master1With3Replicas.getBrokerConfig().getBrokerName(),
             master1With3Replicas.getBrokerConfig().getBrokerId()));
 
-        System.out.printf("Remove master%n");
-
         await().atMost(Duration.ofMinutes(1)).until(() -> receivedMsgCount.get() >= MESSAGE_COUNT);
 
         await().atMost(Duration.ofMinutes(1)).until(() -> {
             pushConsumer.getDefaultMQPushConsumerImpl().persistConsumerOffset();
-            Map<Integer, Long> OffsetTable = master2With3Replicas.getConsumerOffsetManager().queryOffset(CONSUMER_GROUP, topic);
-            if (OffsetTable != null) {
+            Map<Integer, Long> offsetTable = master2With3Replicas.getConsumerOffsetManager().queryOffset(CONSUMER_GROUP, topic);
+            if (offsetTable != null) {
                 long totalOffset = 0;
-                for (final Long offset : OffsetTable.values()) {
+                for (final Long offset : offsetTable.values()) {
                     totalOffset += offset;
                 }
                 return totalOffset >= MESSAGE_COUNT;
@@ -292,7 +279,6 @@ public class GetMetadataReverseIT extends ContainerIntegrationTestBase {
         master1With3Replicas = brokerContainer1.addBroker(master1With3Replicas.getBrokerConfig(), master1With3Replicas.getMessageStoreConfig());
         master1With3Replicas.start();
         cancelIsolatedBroker(master1With3Replicas);
-        System.out.printf("Add back master%n");
 
         awaitUntilSlaveOK();
 
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/PopSlaveActingMasterIT.java b/test/src/test/java/org/apache/rocketmq/test/container/PopSlaveActingMasterIT.java
index 9c2b35a..f20a748 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/PopSlaveActingMasterIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/PopSlaveActingMasterIT.java
@@ -29,22 +29,19 @@ import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.KeyBuilder;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.Message;
-import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.common.message.MessageQueue;
 import org.apache.rocketmq.common.message.MessageRequestMode;
 import org.apache.rocketmq.container.BrokerContainer;
 import org.apache.rocketmq.container.InnerBrokerController;
 import org.apache.rocketmq.container.InnerSalveBrokerController;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Ignore;
 import org.junit.Test;
 
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.time.Duration;
-import java.time.LocalDateTime;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Random;
@@ -59,27 +56,18 @@ import static org.awaitility.Awaitility.await;
 public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
     private static final String CONSUME_GROUP = PopSlaveActingMasterIT.class.getSimpleName() + "_Consumer";
     private final static int MESSAGE_COUNT = 16;
-    private final static Random random = new Random();
+    private final Random random = new Random();
     private static DefaultMQProducer producer;
     private final static String MESSAGE_STRING = RandomStringUtils.random(1024);
-    private static byte[] MESSAGE_BODY;
+    private static final byte[] MESSAGE_BODY = MESSAGE_STRING.getBytes(StandardCharsets.UTF_8);
 
     public PopSlaveActingMasterIT() {
     }
 
-    static {
-        try {
-            MESSAGE_BODY = MESSAGE_STRING.getBytes(RemotingHelper.DEFAULT_CHARSET);
-        } catch (UnsupportedEncodingException e) {
-            e.printStackTrace();
-        }
-    }
-
     void createTopic(String topic) {
         createTopicTo(master1With3Replicas, topic, 1, 1);
         createTopicTo(master2With3Replicas, topic, 1, 1);
         createTopicTo(master3With3Replicas, topic, 1, 1);
-        System.out.println("Topic [" + topic + "] created");
     }
 
     @BeforeClass
@@ -112,17 +100,14 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
             Message msg = new Message(topic, MESSAGE_BODY);
             SendResult sendResult = producer.send(msg, messageQueue);
             if (sendResult.getSendStatus() == SendStatus.SEND_OK) {
-                System.out.println("send message id: " + sendResult.getMsgId());
                 sendSuccess++;
             }
         }
 
-        System.out.printf("send success %d%n", sendSuccess);
         final int finalSendSuccess = sendSuccess;
         await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);
 
         isolateBroker(master1With3Replicas);
-        System.out.printf("isolate master1%n");
 
         DefaultMQPushConsumer consumer = createPushConsumer(CONSUME_GROUP);
         consumer.subscribe(topic, "*");
@@ -130,7 +115,6 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         List<String> consumedMessages = new CopyOnWriteArrayList<>();
         consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             msgs.forEach(msg -> {
-                System.out.println("receive msg id: " + msg.getMsgId());
                 consumedMessages.add(msg.getMsgId());
             });
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
@@ -139,7 +123,6 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         consumer.start();
 
         await().atMost(Duration.ofMinutes(1)).until(() -> consumedMessages.size() >= MESSAGE_COUNT);
-        System.out.printf("%s pop receive msg count: %d%n", LocalDateTime.now(), consumedMessages.size());
 
         consumer.shutdown();
 
@@ -148,14 +131,12 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         pushConsumer.subscribe(retryTopic, "*");
         pushConsumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             for (MessageExt msg : msgs) {
-                System.out.printf("receive retry msg: %s %s%n", new String(msg.getBody()), msg);
                 retryMsgList.add(new String(msg.getBody()));
             }
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
         });
         pushConsumer.start();
 
-        System.out.printf("wait for ack revive%n");
         Thread.sleep(10000L);
 
         assertThat(retryMsgList.size()).isEqualTo(0);
@@ -203,10 +184,7 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         List<String> consumedMessages = new CopyOnWriteArrayList<>();
         consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             msgs.forEach(msg -> {
-                System.out.println("receive msg id: " + msg.getMsgId());
-
                 msg.setReconsumeTimes(0);
-
                 consumedMessages.add(msg.getMsgId());
             });
             return ConsumeConcurrentlyStatus.RECONSUME_LATER;
@@ -223,33 +201,26 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         pushConsumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
         pushConsumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             for (MessageExt msg : msgs) {
-                System.out.printf("receive retry msg: %s%n", msg.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
                 retryMsgList.add(new String(msg.getBody()));
             }
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
         });
         pushConsumer.start();
 
-        System.out.printf(LocalDateTime.now() + ": wait for ack revive%n");
-
         AtomicInteger failCnt = new AtomicInteger(0);
         await().atMost(Duration.ofMinutes(3)).pollInterval(Duration.ofSeconds(10)).until(() -> {
             if (retryMsgList.size() < MESSAGE_COUNT) {
-                System.out.println("check FAILED" + failCnt.incrementAndGet() + ": retryMsgList.size=" + retryMsgList.size() + " less than " + MESSAGE_COUNT);
                 return false;
             }
 
             for (String msgBodyString : retryMsgList) {
                 if (!sendToIsolateMsgSet.contains(msgBodyString)) {
-                    System.out.println("check FAILED: sendToIsolateMsgSet doesn't contain " + msgBodyString);
                     return false;
                 }
             }
             return true;
         });
 
-        System.out.printf(LocalDateTime.now() + ": receive retry msg size=%d%n", retryMsgList.size());
-
         cancelIsolatedBroker(master1With3Replicas);
         awaitUntilSlaveOK();
 
@@ -273,25 +244,20 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
             Message msg = new Message(topic, MESSAGE_BODY);
             SendResult sendResult = producer.send(msg, messageQueue);
             if (sendResult.getSendStatus() == SendStatus.SEND_OK) {
-                System.out.println("Send message id: " + sendResult.getMsgId());
                 sendSuccess++;
             }
         }
 
-        System.out.printf("%s send success %d%n", LocalDateTime.now(), sendSuccess);
         final int finalSendSuccess = sendSuccess;
         await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);
 
         isolateBroker(master1With3Replicas);
-        System.out.printf("%s isolate master1%n", LocalDateTime.now());
 
         isolateBroker(master2With3Replicas);
         brokerContainer2.removeBroker(new BrokerIdentity(
                 master2With3Replicas.getBrokerConfig().getBrokerClusterName(),
                 master2With3Replicas.getBrokerConfig().getBrokerName(),
                 master2With3Replicas.getBrokerConfig().getBrokerId()));
-        System.out.printf("%s Remove master2%n", LocalDateTime.now());
-
 
         DefaultMQPushConsumer consumer = createPushConsumer(CONSUME_GROUP);
         consumer.subscribe(topic, "*");
@@ -299,7 +265,6 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         List<String> consumedMessages = new CopyOnWriteArrayList<>();
         consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             msgs.forEach(msg -> {
-                System.out.println("receive msg id: " + msg.getMsgId());
                 consumedMessages.add(msg.getMsgId());
             });
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
@@ -309,42 +274,35 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
 
         await().atMost(Duration.ofMinutes(2)).until(() -> consumedMessages.size() >= MESSAGE_COUNT);
         consumer.shutdown();
-        System.out.printf("%s %d messages consumed%n", LocalDateTime.now(), consumedMessages.size());
 
         List<String> retryMsgList = new CopyOnWriteArrayList<>();
         DefaultMQPushConsumer pushConsumer = createPushConsumer(CONSUME_GROUP);
         pushConsumer.subscribe(retryTopic, "*");
         pushConsumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             for (MessageExt msg : msgs) {
-                System.out.printf("receive retry msg: %s %n", msg.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
                 retryMsgList.add(new String(msg.getBody()));
             }
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
         });
         pushConsumer.start();
 
-        System.out.printf("%s wait for ack revive%n", LocalDateTime.now());
         Thread.sleep(10000);
 
         assertThat(retryMsgList.size()).isEqualTo(0);
 
         cancelIsolatedBroker(master1With3Replicas);
-        System.out.printf("%s Cancel isolate master1%n", LocalDateTime.now());
 
         //Add back master
         master2With3Replicas = brokerContainer2.addBroker(master2With3Replicas.getBrokerConfig(), master2With3Replicas.getMessageStoreConfig());
         master2With3Replicas.start();
         cancelIsolatedBroker(master2With3Replicas);
-        System.out.printf("%s Add back master2%n", LocalDateTime.now());
 
         awaitUntilSlaveOK();
 
-        System.out.printf("%s wait for ack revive%n", LocalDateTime.now());
         Thread.sleep(10000);
 
         assertThat(retryMsgList.size()).isEqualTo(0);
 
-        System.out.printf("%s shutting down pushConsumer%n", LocalDateTime.now());
         pushConsumer.shutdown();
     }
 
@@ -371,19 +329,16 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
             }
         }
 
-        System.out.printf("send success %d%n", sendSuccess);
         final int finalSendSuccess = sendSuccess;
         await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);
 
         isolateBroker(master1With3Replicas);
-        System.out.printf("isolate master1%n");
 
         isolateBroker(master2With3Replicas);
         brokerContainer2.removeBroker(new BrokerIdentity(
                 master2With3Replicas.getBrokerConfig().getBrokerClusterName(),
                 master2With3Replicas.getBrokerConfig().getBrokerName(),
                 master2With3Replicas.getBrokerConfig().getBrokerId()));
-        System.out.printf("Remove master2%n");
 
 
         DefaultMQPushConsumer consumer = createPushConsumer(CONSUME_GROUP);
@@ -392,7 +347,6 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         List<String> consumedMessages = new CopyOnWriteArrayList<>();
         consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             msgs.forEach(msg -> {
-                System.out.println("receive msg id: " + msg.getMsgId());
                 consumedMessages.add(msg.getMsgId());
             });
             return ConsumeConcurrentlyStatus.RECONSUME_LATER;
@@ -409,40 +363,32 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         pushConsumer.subscribe(retryTopic, "*");
         pushConsumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             for (MessageExt msg : msgs) {
-                System.out.printf("receive retry msg: %s%n", msg.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
                 retryMsgList.add(new String(msg.getBody()));
             }
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
         });
         pushConsumer.start();
 
-        System.out.printf("wait for ack revive%n");
 
         await().atMost(Duration.ofMinutes(1)).until(() -> {
             if (retryMsgList.size() < MESSAGE_COUNT) {
-                System.out.println("check FAILED: retryMsgList.size=" + retryMsgList.size() + " less than " + MESSAGE_COUNT);
                 return false;
             }
 
             for (String msgBodyString : retryMsgList) {
                 if (!sendToIsolateMsgSet.contains(msgBodyString)) {
-                    System.out.println("check FAILED: sendToIsolateMsgSet doesn't contain: " + msgBodyString);
                     return false;
                 }
             }
             return true;
         });
 
-        System.out.printf("receive retry msg as expected%n");
-
         cancelIsolatedBroker(master1With3Replicas);
-        System.out.printf("Cancel isolate master1%n");
 
         //Add back master
         master2With3Replicas = brokerContainer2.addBroker(master2With3Replicas.getBrokerConfig(), master2With3Replicas.getMessageStoreConfig());
         master2With3Replicas.start();
         cancelIsolatedBroker(master2With3Replicas);
-        System.out.printf("Add back master2%n");
 
         awaitUntilSlaveOK();
         pushConsumer.shutdown();
@@ -470,19 +416,16 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
             }
         }
 
-        System.out.printf("send success %d%n", sendSuccess);
         final int finalSendSuccess = sendSuccess;
         await().atMost(Duration.ofMinutes(1)).until(() -> finalSendSuccess >= MESSAGE_COUNT);
 
         isolateBroker(master1With3Replicas);
-        System.out.printf("isolate master1%n");
 
         isolateBroker(master2With3Replicas);
         brokerContainer2.removeBroker(new BrokerIdentity(
                 master2With3Replicas.getBrokerConfig().getBrokerClusterName(),
                 master2With3Replicas.getBrokerConfig().getBrokerName(),
                 master2With3Replicas.getBrokerConfig().getBrokerId()));
-        System.out.printf("Remove master2%n");
 
         BrokerController slave1InBrokerContainer3 = getSlaveFromContainerByName(brokerContainer3, master1With3Replicas.getBrokerConfig().getBrokerName());
         isolateBroker(slave1InBrokerContainer3);
@@ -490,7 +433,6 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
                 slave1InBrokerContainer3.getBrokerConfig().getBrokerClusterName(),
                 slave1InBrokerContainer3.getBrokerConfig().getBrokerName(),
                 slave1InBrokerContainer3.getBrokerConfig().getBrokerId()));
-        System.out.printf("Remove slave1 form container3%n");
 
         DefaultMQPushConsumer consumer = createPushConsumer(CONSUME_GROUP);
         consumer.subscribe(topic, "*");
@@ -498,7 +440,6 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         List<String> consumedMessages = new CopyOnWriteArrayList<>();
         consumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             msgs.forEach(msg -> {
-                System.out.println("receive msg id: " + msg.getMsgId());
                 consumedMessages.add(msg.getMsgId());
             });
             return ConsumeConcurrentlyStatus.RECONSUME_LATER;
@@ -507,7 +448,6 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         consumer.start();
 
         await().atMost(Duration.ofMinutes(1)).until(() -> consumedMessages.size() >= MESSAGE_COUNT);
-        System.out.printf("%s pop receive msg count: %d%n", LocalDateTime.now(), consumedMessages.size());
         consumer.shutdown();
 
 
@@ -516,14 +456,12 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
         pushConsumer.subscribe(retryTopic, "*");
         pushConsumer.registerMessageListener((MessageListenerConcurrently) (msgs, context) -> {
             for (MessageExt msg : msgs) {
-                System.out.printf("receive retry msg: %s%n", msg.getUserProperty(MessageConst.PROPERTY_UNIQ_CLIENT_MESSAGE_ID_KEYIDX));
                 retryMsgList.add(new String(msg.getBody()));
             }
             return ConsumeConcurrentlyStatus.CONSUME_SUCCESS;
         });
         pushConsumer.start();
 
-        System.out.printf("wait for ack revive%n");
         Thread.sleep(10000);
 
         await().atMost(Duration.ofMinutes(1)).until(() -> {
@@ -539,22 +477,17 @@ public class PopSlaveActingMasterIT extends ContainerIntegrationTestBase {
             return true;
         });
 
-        System.out.printf("receive retry msg as expected%n");
-
         cancelIsolatedBroker(master1With3Replicas);
-        System.out.printf("Cancel isolate master1%n");
 
         //Add back master
         master2With3Replicas = brokerContainer2.addBroker(master2With3Replicas.getBrokerConfig(), master2With3Replicas.getMessageStoreConfig());
         master2With3Replicas.start();
         cancelIsolatedBroker(master2With3Replicas);
-        System.out.printf("Add back master2%n");
 
         //Add back slave1 to container3
         slave1InBrokerContainer3 = brokerContainer3.addBroker(slave1InBrokerContainer3.getBrokerConfig(), slave1InBrokerContainer3.getMessageStoreConfig());
         slave1InBrokerContainer3.start();
         cancelIsolatedBroker(slave1InBrokerContainer3);
-        System.out.printf("Add back slave1 to container3%n");
 
         awaitUntilSlaveOK();
         pushConsumer.shutdown();
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/PullMultipleReplicasIT.java b/test/src/test/java/org/apache/rocketmq/test/container/PullMultipleReplicasIT.java
index 02578b1..b87869b 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/PullMultipleReplicasIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/PullMultipleReplicasIT.java
@@ -20,6 +20,7 @@ package org.apache.rocketmq.test.container;
 import java.io.UnsupportedEncodingException;
 import java.lang.reflect.Field;
 import java.net.InetSocketAddress;
+import java.nio.charset.StandardCharsets;
 import java.time.Duration;
 import java.util.List;
 
@@ -56,10 +57,10 @@ public class PullMultipleReplicasIT extends ContainerIntegrationTestBase {
     private static DefaultMQProducer producer;
     private static MQClientInstance mqClientInstance;
 
-    private final String MESSAGE_STRING = RandomStringUtils.random(1024);
-    private final byte[] MESSAGE_BODY = MESSAGE_STRING.getBytes(RemotingHelper.DEFAULT_CHARSET);
+    private static final String MESSAGE_STRING = RandomStringUtils.random(1024);
+    private static final byte[] MESSAGE_BODY = MESSAGE_STRING.getBytes(StandardCharsets.UTF_8);
 
-    public PullMultipleReplicasIT() throws UnsupportedEncodingException {
+    public PullMultipleReplicasIT() {
     }
 
     @BeforeClass
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/PushMultipleReplicasIT.java b/test/src/test/java/org/apache/rocketmq/test/container/PushMultipleReplicasIT.java
index 9179d1e..801f168 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/PushMultipleReplicasIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/PushMultipleReplicasIT.java
@@ -72,7 +72,7 @@ public class PushMultipleReplicasIT extends ContainerIntegrationTestBase {
         // Wait topic synchronization
         await().atMost(Duration.ofMinutes(1)).until(() -> {
             InnerSalveBrokerController slaveBroker = brokerContainer2.getSlaveBrokers().iterator().next();
-           return slaveBroker.getTopicConfigManager().selectTopicConfig(TOPIC) != null;
+            return slaveBroker.getTopicConfigManager().selectTopicConfig(TOPIC) != null;
         });
         isolateBroker(master1With3Replicas);
         DefaultMQPushConsumer pushConsumer = createPushConsumer(CONSUMER_GROUP);
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/ScheduleSlaveActingMasterIT.java b/test/src/test/java/org/apache/rocketmq/test/container/ScheduleSlaveActingMasterIT.java
index ac87ed7..aa1ec8f 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/ScheduleSlaveActingMasterIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/ScheduleSlaveActingMasterIT.java
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.test.container;
 
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.time.Duration;
 import java.util.Random;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -31,7 +31,6 @@ import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.BrokerIdentity;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Ignore;
@@ -44,19 +43,11 @@ import static org.awaitility.Awaitility.await;
 public class ScheduleSlaveActingMasterIT extends ContainerIntegrationTestBase {
 
     private static final String CONSUME_GROUP = ScheduleSlaveActingMasterIT.class.getSimpleName() + "_Consumer";
-    private final static int MESSAGE_COUNT = 32;
-    private final static Random random = new Random();
+    private static final int MESSAGE_COUNT = 32;
+    private final Random random = new Random();
     private static DefaultMQProducer producer;
-    private final static String MESSAGE_STRING = RandomStringUtils.random(1024);
-    private static byte[] MESSAGE_BODY;
-
-    static {
-        try {
-            MESSAGE_BODY = MESSAGE_STRING.getBytes(RemotingHelper.DEFAULT_CHARSET);
-        } catch (UnsupportedEncodingException e) {
-            e.printStackTrace();
-        }
-    }
+    private static final String MESSAGE_STRING = RandomStringUtils.random(1024);
+    private static final byte[] MESSAGE_BODY = MESSAGE_STRING.getBytes(StandardCharsets.UTF_8);
 
     void createTopic(String topic) {
         createTopicTo(master1With3Replicas, topic, 1, 1);
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/ScheduledMessageIT.java b/test/src/test/java/org/apache/rocketmq/test/container/ScheduledMessageIT.java
index 82bceeb..0c4b8c3 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/ScheduledMessageIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/ScheduledMessageIT.java
@@ -18,6 +18,7 @@
 package org.apache.rocketmq.test.container;
 
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.time.Duration;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
@@ -30,7 +31,6 @@ import org.apache.rocketmq.client.exception.MQBrokerException;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
 import org.apache.rocketmq.common.message.Message;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.junit.AfterClass;
@@ -47,17 +47,10 @@ public class ScheduledMessageIT extends ContainerIntegrationTestBase {
 
     private static final String CONSUME_GROUP = ScheduledMessageIT.class.getSimpleName() + "_Consumer";
     private static final String MESSAGE_STRING = RandomStringUtils.random(1024);
-    private static byte[] MESSAGE_BODY;
-
-    static {
-        try {
-            MESSAGE_BODY = MESSAGE_STRING.getBytes(RemotingHelper.DEFAULT_CHARSET);
-        } catch (UnsupportedEncodingException ignored) {
-        }
-    }
+    private static final byte[] MESSAGE_BODY = MESSAGE_STRING.getBytes(StandardCharsets.UTF_8);
 
     private static final String TOPIC_PREFIX = ScheduledMessageIT.class.getSimpleName() + "_TOPIC";
-    private static Random random = new Random();
+    private final Random random = new Random();
     private static final int MESSAGE_COUNT = 128;
 
     public ScheduledMessageIT() throws UnsupportedEncodingException {
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/SendMultipleReplicasIT.java b/test/src/test/java/org/apache/rocketmq/test/container/SendMultipleReplicasIT.java
index a2d86d4..76df1f7 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/SendMultipleReplicasIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/SendMultipleReplicasIT.java
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.test.container;
 
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 import org.apache.rocketmq.client.exception.MQBrokerException;
@@ -27,7 +27,6 @@ import org.apache.rocketmq.client.producer.SendResult;
 import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.apache.rocketmq.store.DefaultMessageStore;
 import org.junit.AfterClass;
@@ -41,10 +40,10 @@ import static org.awaitility.Awaitility.await;
 @Ignore
 public class SendMultipleReplicasIT extends ContainerIntegrationTestBase {
     private static DefaultMQProducer mqProducer;
+    private static final String MSG = "Hello RocketMQ ";
+    private static final byte[] MESSAGE_BODY = MSG.getBytes(StandardCharsets.UTF_8);
 
-    private final byte[] MESSAGE_BODY = ("Hello RocketMQ ").getBytes(RemotingHelper.DEFAULT_CHARSET);
-
-    public SendMultipleReplicasIT() throws UnsupportedEncodingException {
+    public SendMultipleReplicasIT() {
     }
 
     @BeforeClass
diff --git a/test/src/test/java/org/apache/rocketmq/test/container/SyncConsumerOffsetIT.java b/test/src/test/java/org/apache/rocketmq/test/container/SyncConsumerOffsetIT.java
index a562257..5a9ac71 100644
--- a/test/src/test/java/org/apache/rocketmq/test/container/SyncConsumerOffsetIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/container/SyncConsumerOffsetIT.java
@@ -17,7 +17,7 @@
 
 package org.apache.rocketmq.test.container;
 
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
@@ -40,7 +40,6 @@ import org.apache.rocketmq.client.producer.SendStatus;
 import org.apache.rocketmq.common.consumer.ConsumeFromWhere;
 import org.apache.rocketmq.common.message.Message;
 import org.apache.rocketmq.common.message.MessageQueue;
-import org.apache.rocketmq.remoting.common.RemotingHelper;
 import org.apache.rocketmq.remoting.exception.RemotingException;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -57,10 +56,10 @@ public class SyncConsumerOffsetIT extends ContainerIntegrationTestBase {
 
     private static DefaultMQProducer mqProducer;
     private static DefaultMQPushConsumer mqConsumerThreeReplica;
+    private static final String MSG = "Hello RocketMQ ";
+    private static final byte[] MESSAGE_BODY = MSG.getBytes(StandardCharsets.UTF_8);
 
-    private final byte[] MESSAGE_BODY = ("Hello RocketMQ").getBytes(RemotingHelper.DEFAULT_CHARSET);
-
-    public SyncConsumerOffsetIT() throws UnsupportedEncodingException {
+    public SyncConsumerOffsetIT() {
     }
 
     @BeforeClass
diff --git a/test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java b/test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
index 762006e..e4f325b 100644
--- a/test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
@@ -41,8 +41,8 @@ public class NormalMsgDelayIT extends DelayConf {
     public void setUp() {
         topic = initTopic();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
-        consumer = getConsumer(nsAddr, topic, "*", new RMQDelayListener());
+        producer = getProducer(NAMESRV_ADDR, topic);
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQDelayListener());
     }
 
     @After
@@ -58,7 +58,7 @@ public class NormalMsgDelayIT extends DelayConf {
         producer.send(delayMsgs);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
 
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()));
         Assert.assertEquals("Timer is not correct", true,
diff --git a/test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java b/test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
index 43b3249..2a8eb97 100644
--- a/test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/grpc/v2/ClusterGrpcIT.java
@@ -52,8 +52,8 @@ public class ClusterGrpcIT extends GrpcBaseIT {
         setUpServer(grpcMessagingApplication, 0, true);
 
         await().atMost(Duration.ofSeconds(40)).until(() -> {
-            Map<String, BrokerData> brokerDataMap = MQAdminTestUtils.getCluster(nsAddr).getBrokerAddrTable();
-            return brokerDataMap.size() == brokerNum;
+            Map<String, BrokerData> brokerDataMap = MQAdminTestUtils.getCluster(NAMESRV_ADDR).getBrokerAddrTable();
+            return brokerDataMap.size() == BROKER_NUM;
         });
     }
 
@@ -69,7 +69,7 @@ public class ClusterGrpcIT extends GrpcBaseIT {
         String topic = initTopic();
 
         QueryRouteResponse response = blockingStub.queryRoute(buildQueryRouteRequest(topic));
-        assertQueryRoute(response, brokerNum * DEFAULT_QUEUE_NUMS);
+        assertQueryRoute(response, BROKER_NUM * DEFAULT_QUEUE_NUMS);
     }
 
     @Test
@@ -79,7 +79,7 @@ public class ClusterGrpcIT extends GrpcBaseIT {
 
         QueryAssignmentResponse response = blockingStub.queryAssignment(buildQueryAssignmentRequest(topic, group));
 
-        assertQueryAssignment(response, brokerNum);
+        assertQueryAssignment(response, BROKER_NUM);
     }
 
     @Test
diff --git a/test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java b/test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
index 586149c..a5f1110 100644
--- a/test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/grpc/v2/GrpcBaseIT.java
@@ -152,7 +152,7 @@ public class GrpcBaseIT extends BaseConf {
 
         ConfigurationManager.initEnv();
         ConfigurationManager.intConfig();
-        ConfigurationManager.getProxyConfig().setNamesrvAddr(nsAddr);
+        ConfigurationManager.getProxyConfig().setNamesrvAddr(NAMESRV_ADDR);
         // Set LongPollingReserveTimeInMillis to 500ms to reserve more time for IT
         ConfigurationManager.getProxyConfig().setLongPollingReserveTimeInMillis(500);
         ConfigurationManager.getProxyConfig().setRocketMQClusterName(brokerController1.getBrokerConfig().getBrokerClusterName());
@@ -228,7 +228,7 @@ public class GrpcBaseIT extends BaseConf {
     }
 
     public void testTransactionCheckThenCommit() {
-        String topic = initTopicOnSampleTopicBroker(broker1Name, TopicMessageType.TRANSACTION);
+        String topic = initTopicOnSampleTopicBroker(BROKER1_NAME, TopicMessageType.TRANSACTION);
         String group = MQRandomUtils.getRandomConsumerGroup();
 
         AtomicReference<TelemetryCommand> telemetryCommandRef = new AtomicReference<>(null);
@@ -321,7 +321,7 @@ public class GrpcBaseIT extends BaseConf {
     }
 
     public void testSimpleConsumerSendAndRecvDelayMessage() throws Exception {
-        String topic = initTopicOnSampleTopicBroker(broker1Name, TopicMessageType.DELAY);
+        String topic = initTopicOnSampleTopicBroker(BROKER1_NAME, TopicMessageType.DELAY);
         String group = MQRandomUtils.getRandomConsumerGroup();
         long delayTime = TimeUnit.SECONDS.toMillis(5);
 
@@ -369,7 +369,7 @@ public class GrpcBaseIT extends BaseConf {
     }
 
     public void testSimpleConsumerSendAndRecvBigMessage() throws Exception {
-        String topic = initTopicOnSampleTopicBroker(broker1Name);
+        String topic = initTopicOnSampleTopicBroker(BROKER1_NAME);
         String group = MQRandomUtils.getRandomConsumerGroup();
 
         int bodySize = 4 * 1024;
@@ -391,7 +391,7 @@ public class GrpcBaseIT extends BaseConf {
     }
 
     public void testSimpleConsumerSendAndRecv() throws Exception {
-        String topic = initTopicOnSampleTopicBroker(broker1Name);
+        String topic = initTopicOnSampleTopicBroker(BROKER1_NAME);
         String group = MQRandomUtils.getRandomConsumerGroup();
 
         // init consumer offset
@@ -446,7 +446,7 @@ public class GrpcBaseIT extends BaseConf {
     }
 
     public void testSimpleConsumerToDLQ() throws Exception {
-        String topic = initTopicOnSampleTopicBroker(broker1Name);
+        String topic = initTopicOnSampleTopicBroker(BROKER1_NAME);
         String group = MQRandomUtils.getRandomConsumerGroup();
         int maxDeliveryAttempts = 2;
 
@@ -474,7 +474,7 @@ public class GrpcBaseIT extends BaseConf {
 
         DefaultMQPullConsumer defaultMQPullConsumer = new DefaultMQPullConsumer(group);
         defaultMQPullConsumer.start();
-        org.apache.rocketmq.common.message.MessageQueue dlqMQ = new org.apache.rocketmq.common.message.MessageQueue(MixAll.getDLQTopic(group), broker1Name, 0);
+        org.apache.rocketmq.common.message.MessageQueue dlqMQ = new org.apache.rocketmq.common.message.MessageQueue(MixAll.getDLQTopic(group), BROKER1_NAME, 0);
         await().atMost(java.time.Duration.ofSeconds(30)).until(() -> {
             try {
                 List<Message> messageList = getMessageFromReceiveMessageResponse(receiveMessage(blockingStub, topic, group, 1));
@@ -495,7 +495,7 @@ public class GrpcBaseIT extends BaseConf {
     }
 
     public void testConsumeOrderly() throws Exception {
-        String topic = initTopicOnSampleTopicBroker(broker1Name, TopicMessageType.FIFO);
+        String topic = initTopicOnSampleTopicBroker(BROKER1_NAME, TopicMessageType.FIFO);
         String group = MQRandomUtils.getRandomConsumerGroup();
 
         SubscriptionGroupConfig groupConfig = brokerController1.getSubscriptionGroupManager().findSubscriptionGroupConfig(group);
diff --git a/test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java b/test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
index de72069..a5ca8d6 100644
--- a/test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/grpc/v2/LocalGrpcIT.java
@@ -67,7 +67,7 @@ public class LocalGrpcIT extends GrpcBaseIT {
 
         QueryAssignmentResponse response = blockingStub.queryAssignment(buildQueryAssignmentRequest(topic, group));
 
-        assertQueryAssignment(response, brokerNum);
+        assertQueryAssignment(response, BROKER_NUM);
     }
 
     @Test
diff --git a/test/src/test/java/org/apache/rocketmq/test/offset/OffsetNotFoundIT.java b/test/src/test/java/org/apache/rocketmq/test/offset/OffsetNotFoundIT.java
index 2425802..c4a0781 100644
--- a/test/src/test/java/org/apache/rocketmq/test/offset/OffsetNotFoundIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/offset/OffsetNotFoundIT.java
@@ -81,13 +81,13 @@ public class OffsetNotFoundIT extends BaseConf {
     @Test
     public void testConsumeStopAndResume() {
         String topic = initTopic();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
         int msgSize = 10;
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
         try {
             offsetRpcHook.throwException = true;
-            RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+            RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
             consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), 15000);
             Assert.assertEquals(0, consumer.getListener().getAllMsgBody().size());
             consumer.shutdown();
@@ -95,7 +95,7 @@ public class OffsetNotFoundIT extends BaseConf {
             offsetRpcHook.throwException = false;
         }
         //test the normal
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
         consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), 15000);
         Assert.assertEquals(producer.getAllMsgBody().size(), consumer.getListener().getAllMsgBody().size());
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
@@ -109,14 +109,14 @@ public class OffsetNotFoundIT extends BaseConf {
     public void testOffsetNotFoundException() {
         String topic = initTopic();
         String group = initConsumerGroup();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
         int msgSize = 10;
         producer.send(msgSize);
         Assert.assertEquals("Not all sent succeeded", msgSize, producer.getAllUndupMsgBody().size());
         try {
             offsetRpcHook.addSetZeroOfNotFound = true;
             //test the normal
-            RMQNormalConsumer consumer = new RMQNormalConsumer(nsAddr, topic, "*", group, new RMQNormalListener());
+            RMQNormalConsumer consumer = new RMQNormalConsumer(NAMESRV_ADDR, topic, "*", group, new RMQNormalListener());
             consumer.create(false);
             consumer.getConsumer().setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);
             consumer.start();
diff --git a/test/src/test/java/org/apache/rocketmq/test/schema/SchemaTest.java b/test/src/test/java/org/apache/rocketmq/test/schema/SchemaTest.java
index 538f8f0..6625081 100644
--- a/test/src/test/java/org/apache/rocketmq/test/schema/SchemaTest.java
+++ b/test/src/test/java/org/apache/rocketmq/test/schema/SchemaTest.java
@@ -26,10 +26,10 @@ import org.junit.Test;
 
 
 public class SchemaTest {
-    private final String BASE_SCHEMA_PATH = "src/test/resources/schema";
-    private final String ADD = "ADD";
-    private final String DELETE = "DELETE";
-    private final String CHANGE = "CHANGE";
+    private static final String BASE_SCHEMA_PATH = "src/test/resources/schema";
+    private static final String ADD = "ADD";
+    private static final String DELETE = "DELETE";
+    private static final String CHANGE = "CHANGE";
 
 
 
@@ -55,22 +55,22 @@ public class SchemaTest {
         }
 
         Map<String, String> fileChanges = new TreeMap<>();
-        schemaFromFile.keySet().forEach( x -> {
+        schemaFromFile.keySet().forEach(x -> {
             if (!schemaFromCode.containsKey(x)) {
                 fileChanges.put(x, DELETE);
             }
         });
-        schemaFromCode.keySet().forEach( x -> {
+        schemaFromCode.keySet().forEach(x -> {
             if (!schemaFromFile.containsKey(x)) {
                 fileChanges.put(x, ADD);
             }
         });
 
         Map<String, Map<String, String>> changesByFile = new HashMap<>();
-        schemaFromFile.forEach( (file, oldSchema) -> {
+        schemaFromFile.forEach((file, oldSchema) -> {
             Map<String, String> newSchema = schemaFromCode.get(file);
             Map<String, String> schemaChanges = new TreeMap<>();
-            oldSchema.forEach( (k, v) -> {
+            oldSchema.forEach((k, v) -> {
                 if (!newSchema.containsKey(k)) {
                     schemaChanges.put(k, DELETE);
                 } else if (!newSchema.get(k).equals(v)) {
@@ -78,7 +78,7 @@ public class SchemaTest {
                 }
             });
 
-            newSchema.forEach( (k, v) -> {
+            newSchema.forEach((k, v) -> {
                 if (!oldSchema.containsKey(k)) {
                     schemaChanges.put(k, ADD);
                 }
@@ -94,7 +94,7 @@ public class SchemaTest {
 
         changesByFile.forEach((k, v) -> {
             System.out.printf("%s file %s:\n", CHANGE, k);
-            v.forEach( (kk, vv) -> {
+            v.forEach((kk, vv) -> {
                 System.out.printf("\t%s %s\n", vv, kk);
             });
         });
diff --git a/test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java b/test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java
index 8e6eec3..55d5b57 100644
--- a/test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/smoke/NormalMessageSendAndRecvIT.java
@@ -42,7 +42,7 @@ import org.awaitility.Awaitility;
 import static com.google.common.truth.Truth.assertThat;
 
 public class NormalMessageSendAndRecvIT extends BaseConf {
-    private static final Logger logger = LoggerFactory.getLogger(NormalMessageSendAndRecvIT.class);
+    private static Logger logger = LoggerFactory.getLogger(NormalMessageSendAndRecvIT.class);
     private RMQNormalConsumer consumer = null;
     private RMQNormalProducer producer = null;
     private String topic = null;
@@ -54,9 +54,9 @@ public class NormalMessageSendAndRecvIT extends BaseConf {
         topic = initTopic();
         group = initConsumerGroup();
         logger.info(String.format("use topic: %s;", topic));
-        producer = getProducer(nsAddr, topic);
-        consumer = getConsumer(nsAddr, group, topic, "*", new RMQNormalListener());
-        defaultMQAdminExt = getAdmin(nsAddr);
+        producer = getProducer(NAMESRV_ADDR, topic);
+        consumer = getConsumer(NAMESRV_ADDR, group, topic, "*", new RMQNormalListener());
+        defaultMQAdminExt = getAdmin(NAMESRV_ADDR);
         defaultMQAdminExt.start();
     }
 
@@ -88,7 +88,7 @@ public class NormalMessageSendAndRecvIT extends BaseConf {
         }
         Assert.assertEquals("Not all sent succeeded", msgSize * messageQueueList.get().size(),
             producer.getAllUndupMsgBody().size());
-        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), consumeTime);
+        consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), CONSUME_TIME);
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()))
             .containsExactlyElementsIn(producer.getAllMsgBody());
diff --git a/test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java b/test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
index be0aebe..83369da 100644
--- a/test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
@@ -73,8 +73,8 @@ public class StaticTopicIT extends BaseConf {
     @Before
     public void setUp() throws Exception {
         System.setProperty("rocketmq.client.rebalance.waitInterval", "500");
-        defaultMQAdminExt = getAdmin(nsAddr);
-        waitBrokerRegistered(nsAddr, clusterName, brokerNum);
+        defaultMQAdminExt = getAdmin(NAMESRV_ADDR);
+        waitBrokerRegistered(NAMESRV_ADDR, CLUSTER_NAME, BROKER_NUM);
         defaultMQAdminExt.start();
     }
 
@@ -83,19 +83,19 @@ public class StaticTopicIT extends BaseConf {
     public void testCommandsWithCluster() throws Exception {
         //This case is used to mock the env to test the command manually
         String topic = "static" + MQRandomUtils.getRandomTopic();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
         int queueNum = 10;
         int msgEachQueue = 100;
 
         {
-            MQAdminTestUtils.createStaticTopicWithCommand(topic, queueNum, null, clusterName, nsAddr);
+            MQAdminTestUtils.createStaticTopicWithCommand(topic, queueNum, null, CLUSTER_NAME, NAMESRV_ADDR);
             sendMessagesAndCheck(producer, getBrokers(), topic, queueNum, msgEachQueue, 0);
             //consume and check
             consumeMessagesAndCheck(producer, consumer, topic, queueNum, msgEachQueue, 0, 1);
         }
         {
-            MQAdminTestUtils.remappingStaticTopicWithCommand(topic, null, clusterName, nsAddr);
+            MQAdminTestUtils.remappingStaticTopicWithCommand(topic, null, CLUSTER_NAME, NAMESRV_ADDR);
             awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), consumer.getConsumer(), defaultMQAdminExt);
             sendMessagesAndCheck(producer, getBrokers(), topic, queueNum, msgEachQueue, msgEachQueue);
         }
@@ -105,20 +105,20 @@ public class StaticTopicIT extends BaseConf {
     public void testCommandsWithBrokers() throws Exception {
         //This case is used to mock the env to test the command manually
         String topic = "static" + MQRandomUtils.getRandomTopic();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
         int queueNum = 10;
         int msgEachQueue = 10;
         {
-            Set<String> brokers = ImmutableSet.of(broker1Name);
-            MQAdminTestUtils.createStaticTopicWithCommand(topic, queueNum, brokers, null, nsAddr);
+            Set<String> brokers = ImmutableSet.of(BROKER1_NAME);
+            MQAdminTestUtils.createStaticTopicWithCommand(topic, queueNum, brokers, null, NAMESRV_ADDR);
             sendMessagesAndCheck(producer, brokers, topic, queueNum, msgEachQueue, 0);
             //consume and check
             consumeMessagesAndCheck(producer, consumer, topic, queueNum, msgEachQueue, 0, 1);
         }
         {
-            Set<String> brokers = ImmutableSet.of(broker2Name);
-            MQAdminTestUtils.remappingStaticTopicWithCommand(topic, brokers, null, nsAddr);
+            Set<String> brokers = ImmutableSet.of(BROKER2_NAME);
+            MQAdminTestUtils.remappingStaticTopicWithCommand(topic, brokers, null, NAMESRV_ADDR);
             awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), consumer.getConsumer(), defaultMQAdminExt);
             sendMessagesAndCheck(producer, brokers, topic, queueNum, msgEachQueue, TopicQueueMappingUtils.DEFAULT_BLOCK_SEQ_SIZE);
             consumeMessagesAndCheck(producer, consumer, topic, queueNum, msgEachQueue, 0, 2);
@@ -131,14 +131,14 @@ public class StaticTopicIT extends BaseConf {
         int queueNum = 10;
         {
             Set<String> targetBrokers = new HashSet<>();
-            targetBrokers.add(broker1Name);
+            targetBrokers.add(BROKER1_NAME);
             MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);
             Map<String, TopicConfigAndQueueMapping> remoteBrokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
-            Assert.assertEquals(brokerNum, remoteBrokerConfigMap.size());
+            Assert.assertEquals(BROKER_NUM, remoteBrokerConfigMap.size());
             TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, remoteBrokerConfigMap);
             Map<Integer, TopicQueueMappingOne>  globalIdMap = TopicQueueMappingUtils.checkAndBuildMappingItems(new ArrayList<>(getMappingDetailFromConfig(remoteBrokerConfigMap.values())), false, true);
             Assert.assertEquals(queueNum, globalIdMap.size());
-            TopicConfigAndQueueMapping configMapping = remoteBrokerConfigMap.get(broker2Name);
+            TopicConfigAndQueueMapping configMapping = remoteBrokerConfigMap.get(BROKER2_NAME);
             Assert.assertEquals(0, configMapping.getWriteQueueNums());
             Assert.assertEquals(0, configMapping.getReadQueueNums());
             Assert.assertEquals(0, configMapping.getMappingDetail().getHostedQueues().size());
@@ -146,10 +146,10 @@ public class StaticTopicIT extends BaseConf {
 
         {
             Set<String> targetBrokers = new HashSet<>();
-            targetBrokers.add(broker2Name);
+            targetBrokers.add(BROKER2_NAME);
             MQAdminTestUtils.remappingStaticTopic(topic, targetBrokers, defaultMQAdminExt);
             Map<String, TopicConfigAndQueueMapping> remoteBrokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
-            Assert.assertEquals(brokerNum, remoteBrokerConfigMap.size());
+            Assert.assertEquals(BROKER_NUM, remoteBrokerConfigMap.size());
             TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, remoteBrokerConfigMap);
             Map<Integer, TopicQueueMappingOne>  globalIdMap = TopicQueueMappingUtils.checkAndBuildMappingItems(new ArrayList<>(getMappingDetailFromConfig(remoteBrokerConfigMap.values())), false, true);
             Assert.assertEquals(queueNum, globalIdMap.size());
@@ -169,18 +169,18 @@ public class StaticTopicIT extends BaseConf {
             String destBrokerName = clientMetadata.getBrokerNameFromMessageQueue(messageQueue);
             Assert.assertTrue(targetBrokers.contains(destBrokerName));
         }
-        for(MessageQueue messageQueue: messageQueueList) {
+        for (MessageQueue messageQueue: messageQueueList) {
             producer.send(msgEachQueue, messageQueue);
         }
         Assert.assertEquals(0, producer.getSendErrorMsg().size());
         //leave the time to build the cq
         Assert.assertTrue(awaitDispatchMs(500));
-        for(MessageQueue messageQueue: messageQueueList) {
+        for (MessageQueue messageQueue : messageQueueList) {
             Assert.assertEquals(0, defaultMQAdminExt.minOffset(messageQueue));
             Assert.assertEquals(msgEachQueue + baseOffset, defaultMQAdminExt.maxOffset(messageQueue));
         }
         TopicStatsTable topicStatsTable = defaultMQAdminExt.examineTopicStats(topic);
-        for(MessageQueue messageQueue: messageQueueList) {
+        for (MessageQueue messageQueue : messageQueueList) {
             Assert.assertEquals(0, topicStatsTable.getOffsetTable().get(messageQueue).getMinOffset());
             Assert.assertEquals(msgEachQueue + baseOffset, topicStatsTable.getOffsetTable().get(messageQueue).getMaxOffset());
         }
@@ -195,7 +195,7 @@ public class StaticTopicIT extends BaseConf {
             }
             messagesByQueue.get(messageExt.getQueueId()).add(messageExt);
         }
-        for (List<MessageExt> msgEachQueue: messagesByQueue.values()) {
+        for (List<MessageExt> msgEachQueue : messagesByQueue.values()) {
             Collections.sort(msgEachQueue, new Comparator<MessageExt>() {
                 @Override
                 public int compare(MessageExt o1, MessageExt o2) {
@@ -208,8 +208,6 @@ public class StaticTopicIT extends BaseConf {
 
     private void consumeMessagesAndCheck(RMQNormalProducer producer, RMQNormalConsumer consumer, String topic, int queueNum, int msgEachQueue, int startGen, int genNum) {
         consumer.getListener().waitForMessageConsume(producer.getAllMsgBody(), 60000);
-//        System.out.println("produce:" + producer.getAllMsgBody().size());
-//        System.out.println("consume:" + consumer.getListener().getAllMsgBody().size());
 
         Assert.assertEquals(producer.getAllMsgBody().size(), consumer.getListener().getAllMsgBody().size());
         assertThat(VerifyUtils.getFilterdMessage(producer.getAllMsgBody(),
@@ -219,9 +217,7 @@ public class StaticTopicIT extends BaseConf {
         Assert.assertEquals(queueNum, messagesByQueue.size());
         for (int i = 0; i < queueNum; i++) {
             List<MessageExt> messageExts = messagesByQueue.get(i);
-            /*for (MessageExt messageExt:messageExts) {
-                System.out.printf("%d %d\n", messageExt.getQueueId(), messageExt.getQueueOffset());
-            }*/
+
             int totalEachQueue = msgEachQueue * genNum;
             Assert.assertEquals(totalEachQueue, messageExts.size());
             for (int j = 0; j < totalEachQueue; j++) {
@@ -239,8 +235,8 @@ public class StaticTopicIT extends BaseConf {
     @Test
     public void testCreateProduceConsumeStaticTopic() throws Exception {
         String topic = "static" + MQRandomUtils.getRandomTopic();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         int queueNum = 10;
         int msgEachQueue = 10;
@@ -249,7 +245,7 @@ public class StaticTopicIT extends BaseConf {
         //check the static topic config
         {
             Map<String, TopicConfigAndQueueMapping> remoteBrokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
-            Assert.assertEquals(brokerNum, remoteBrokerConfigMap.size());
+            Assert.assertEquals(BROKER_NUM, remoteBrokerConfigMap.size());
             for (Map.Entry<String, TopicConfigAndQueueMapping> entry: remoteBrokerConfigMap.entrySet())  {
                 String broker = entry.getKey();
                 TopicConfigAndQueueMapping configMapping = entry.getValue();
@@ -271,28 +267,28 @@ public class StaticTopicIT extends BaseConf {
     @Test
     public void testRemappingProduceConsumeStaticTopic() throws Exception {
         String topic = "static" + MQRandomUtils.getRandomTopic();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
-        RMQNormalConsumer consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener());
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener());
 
         int queueNum = 1;
         int msgEachQueue = 10;
         //create send consume
         {
-            Set<String> targetBrokers = ImmutableSet.of(broker1Name);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER1_NAME);
             MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);
             sendMessagesAndCheck(producer, targetBrokers, topic, queueNum, msgEachQueue, 0);
             consumeMessagesAndCheck(producer, consumer, topic, queueNum, msgEachQueue, 0, 1);
         }
         //remapping the static topic
         {
-            Set<String> targetBrokers = ImmutableSet.of(broker2Name);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER2_NAME);
             MQAdminTestUtils.remappingStaticTopic(topic, targetBrokers, defaultMQAdminExt);
             Map<String, TopicConfigAndQueueMapping> remoteBrokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
             TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, remoteBrokerConfigMap);
             Map<Integer, TopicQueueMappingOne>  globalIdMap = TopicQueueMappingUtils.checkAndBuildMappingItems(new ArrayList<>(getMappingDetailFromConfig(remoteBrokerConfigMap.values())), false, true);
             Assert.assertEquals(queueNum, globalIdMap.size());
             for (TopicQueueMappingOne mappingOne: globalIdMap.values()) {
-                Assert.assertEquals(broker2Name, mappingOne.getBname());
+                Assert.assertEquals(BROKER2_NAME, mappingOne.getBname());
                 Assert.assertEquals(TopicQueueMappingUtils.DEFAULT_BLOCK_SEQ_SIZE, mappingOne.getItems().get(mappingOne.getItems().size() - 1).getLogicOffset());
             }
             awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), consumer.getConsumer(), defaultMQAdminExt);
@@ -341,15 +337,15 @@ public class StaticTopicIT extends BaseConf {
     public void testDoubleReadCheckConsumerOffset() throws Exception {
         String topic = "static" + MQRandomUtils.getRandomTopic();
         String group = initConsumerGroup();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
-        RMQNormalConsumer consumer = getConsumer(nsAddr, group, topic, "*", new RMQNormalListener());
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
+        RMQNormalConsumer consumer = getConsumer(NAMESRV_ADDR, group, topic, "*", new RMQNormalListener());
         long start = System.currentTimeMillis();
 
         int queueNum = 5;
         int msgEachQueue = 10;
         //create static topic
         {
-            Set<String> targetBrokers = ImmutableSet.of(broker1Name);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER2_NAME);
             MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);
             sendMessagesAndCheck(producer, targetBrokers, topic, queueNum, msgEachQueue, 0);
             consumeMessagesAndCheck(producer, consumer, topic, queueNum, msgEachQueue, 0, 1);
@@ -357,7 +353,7 @@ public class StaticTopicIT extends BaseConf {
         producer.shutdown();
         consumer.shutdown();
         //use a new producer
-        producer = getProducer(nsAddr, topic);
+        producer = getProducer(NAMESRV_ADDR, topic);
 
         ConsumeStats consumeStats = defaultMQAdminExt.examineConsumeStats(group);
         List<MessageQueue> messageQueues = producer.getMessageQueue();
@@ -369,7 +365,7 @@ public class StaticTopicIT extends BaseConf {
             Assert.assertTrue(wrapper.getLastTimestamp() > start);
         }
 
-        List<String> brokers = ImmutableList.of(broker2Name, broker3Name, broker1Name);
+        List<String> brokers = ImmutableList.of(BROKER2_NAME, BROKER3_NAME, BROKER1_NAME);
         for (int i = 0; i < brokers.size(); i++) {
             Set<String> targetBrokers = ImmutableSet.of(brokers.get(i));
             MQAdminTestUtils.remappingStaticTopic(topic, targetBrokers, defaultMQAdminExt);
@@ -389,7 +385,7 @@ public class StaticTopicIT extends BaseConf {
             Assert.assertEquals(msgEachQueue, wrapper.getConsumerOffset());
             Assert.assertTrue(wrapper.getLastTimestamp() > start);
         }
-        consumer = getConsumer(nsAddr, group, topic, "*", new RMQNormalListener());
+        consumer = getConsumer(NAMESRV_ADDR, group, topic, "*", new RMQNormalListener());
         consumeMessagesAndCheck(producer, consumer, topic, queueNum, msgEachQueue, 1, brokers.size());
     }
 
@@ -399,12 +395,12 @@ public class StaticTopicIT extends BaseConf {
     @Test
     public void testRemappingAndClear() throws Exception {
         String topic = "static" + MQRandomUtils.getRandomTopic();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
         int queueNum = 10;
         int msgEachQueue = 100;
         //create to broker1Name
         {
-            Set<String> targetBrokers = ImmutableSet.of(broker1Name);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER1_NAME);
             MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);
             //leave the time to refresh the metadata
             awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), null, defaultMQAdminExt);
@@ -413,7 +409,7 @@ public class StaticTopicIT extends BaseConf {
 
         //remapping to broker2Name
         {
-            Set<String> targetBrokers = ImmutableSet.of(broker2Name);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER3_NAME);
             MQAdminTestUtils.remappingStaticTopic(topic, targetBrokers, defaultMQAdminExt);
             //leave the time to refresh the metadata
             awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), null, defaultMQAdminExt);
@@ -422,7 +418,7 @@ public class StaticTopicIT extends BaseConf {
 
         //remapping to broker3Name
         {
-            Set<String> targetBrokers = ImmutableSet.of(broker3Name);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER3_NAME);
             MQAdminTestUtils.remappingStaticTopic(topic, targetBrokers, defaultMQAdminExt);
             //leave the time to refresh the metadata
             awaitRefreshStaticTopicMetadata(3000, topic, producer.getProducer(), null, defaultMQAdminExt);
@@ -439,10 +435,10 @@ public class StaticTopicIT extends BaseConf {
                 Thread.sleep(100);
             }
             Map<String, TopicConfigAndQueueMapping> brokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
-            Assert.assertEquals(brokerNum, brokerConfigMap.size());
-            TopicConfigAndQueueMapping config1 = brokerConfigMap.get(broker1Name);
-            TopicConfigAndQueueMapping config2 = brokerConfigMap.get(broker2Name);
-            TopicConfigAndQueueMapping config3 = brokerConfigMap.get(broker3Name);
+            Assert.assertEquals(BROKER_NUM, brokerConfigMap.size());
+            TopicConfigAndQueueMapping config1 = brokerConfigMap.get(BROKER1_NAME);
+            TopicConfigAndQueueMapping config2 = brokerConfigMap.get(BROKER2_NAME);
+            TopicConfigAndQueueMapping config3 = brokerConfigMap.get(BROKER3_NAME);
             Assert.assertEquals(0, config1.getMappingDetail().getHostedQueues().size());
             Assert.assertEquals(queueNum, config2.getMappingDetail().getHostedQueues().size());
 
@@ -462,10 +458,10 @@ public class StaticTopicIT extends BaseConf {
             }
 
             Map<String, TopicConfigAndQueueMapping> brokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
-            Assert.assertEquals(brokerNum, brokerConfigMap.size());
-            TopicConfigAndQueueMapping config1 = brokerConfigMap.get(broker1Name);
-            TopicConfigAndQueueMapping config2 = brokerConfigMap.get(broker2Name);
-            TopicConfigAndQueueMapping config3 = brokerConfigMap.get(broker3Name);
+            Assert.assertEquals(BROKER_NUM, brokerConfigMap.size());
+            TopicConfigAndQueueMapping config1 = brokerConfigMap.get(BROKER1_NAME);
+            TopicConfigAndQueueMapping config2 = brokerConfigMap.get(BROKER2_NAME);
+            TopicConfigAndQueueMapping config3 = brokerConfigMap.get(BROKER3_NAME);
             Assert.assertEquals(0, config1.getMappingDetail().getHostedQueues().size());
             Assert.assertEquals(queueNum, config2.getMappingDetail().getHostedQueues().size());
             Assert.assertEquals(queueNum, config3.getMappingDetail().getHostedQueues().size());
@@ -484,26 +480,26 @@ public class StaticTopicIT extends BaseConf {
     @Test
     public void testRemappingWithNegativeLogicOffset() throws Exception {
         String topic = "static" + MQRandomUtils.getRandomTopic();
-        RMQNormalProducer producer = getProducer(nsAddr, topic);
+        RMQNormalProducer producer = getProducer(NAMESRV_ADDR, topic);
         int queueNum = 10;
         int msgEachQueue = 100;
         //create and send
         {
-            Set<String> targetBrokers = ImmutableSet.of(broker1Name);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER1_NAME);
             MQAdminTestUtils.createStaticTopic(topic, queueNum, targetBrokers, defaultMQAdminExt);
             sendMessagesAndCheck(producer, targetBrokers, topic, queueNum, msgEachQueue, 0);
         }
 
         //remapping the static topic with -1 logic offset
         {
-            Set<String> targetBrokers = ImmutableSet.of(broker2Name);
+            Set<String> targetBrokers = ImmutableSet.of(BROKER2_NAME);
             MQAdminTestUtils.remappingStaticTopicWithNegativeLogicOffset(topic, targetBrokers, defaultMQAdminExt);
             Map<String, TopicConfigAndQueueMapping> remoteBrokerConfigMap = MQAdminUtils.examineTopicConfigAll(topic, defaultMQAdminExt);
             TopicQueueMappingUtils.checkNameEpochNumConsistence(topic, remoteBrokerConfigMap);
             Map<Integer, TopicQueueMappingOne>  globalIdMap = TopicQueueMappingUtils.checkAndBuildMappingItems(new ArrayList<>(getMappingDetailFromConfig(remoteBrokerConfigMap.values())), false, true);
             Assert.assertEquals(queueNum, globalIdMap.size());
             for (TopicQueueMappingOne mappingOne: globalIdMap.values()) {
-                Assert.assertEquals(broker2Name, mappingOne.getBname());
+                Assert.assertEquals(BROKER2_NAME, mappingOne.getBname());
                 Assert.assertEquals(-1, mappingOne.getItems().get(mappingOne.getItems().size() - 1).getLogicOffset());
             }
             //leave the time to refresh the metadata
diff --git a/test/src/test/java/org/apache/rocketmq/test/tls/TLS_IT.java b/test/src/test/java/org/apache/rocketmq/test/tls/TLS_IT.java
deleted file mode 100644
index 2ff2b20..0000000
--- a/test/src/test/java/org/apache/rocketmq/test/tls/TLS_IT.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.rocketmq.test.tls;
-
-import org.apache.rocketmq.test.base.BaseConf;
-import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
-import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
-import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
-import org.apache.rocketmq.test.util.MQWait;
-import org.assertj.core.api.Assertions;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-
-public class TLS_IT extends BaseConf {
-
-    private RMQNormalProducer producer;
-    private RMQNormalConsumer consumer;
-
-    private String topic;
-
-    @Before
-    public void setUp() {
-        topic = initTopic();
-        // Send messages via TLS
-        producer = getProducer(nsAddr, topic, true);
-        // Receive messages via TLS
-        consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener(), true);
-    }
-
-    @After
-    public void tearDown() {
-        shutdown();
-    }
-
-    @Test
-    public void testSendAndReceiveMessageOverTLS() {
-        int numberOfMessagesToSend = 16;
-        producer.send(numberOfMessagesToSend);
-
-        boolean consumedAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer.getListener());
-        Assertions.assertThat(consumedAll).isEqualTo(true);
-    }
-
-}
diff --git a/test/src/test/java/org/apache/rocketmq/test/tls/TLS_Mix2_IT.java b/test/src/test/java/org/apache/rocketmq/test/tls/TLS_Mix2_IT.java
deleted file mode 100644
index cd319e4..0000000
--- a/test/src/test/java/org/apache/rocketmq/test/tls/TLS_Mix2_IT.java
+++ /dev/null
@@ -1,61 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.rocketmq.test.tls;
-
-import org.apache.rocketmq.test.base.BaseConf;
-import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
-import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
-import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
-import org.apache.rocketmq.test.util.MQWait;
-import org.assertj.core.api.Assertions;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-
-public class TLS_Mix2_IT extends BaseConf {
-
-    private RMQNormalProducer producer;
-    private RMQNormalConsumer consumer;
-
-    private String topic;
-
-    @Before
-    public void setUp() {
-        topic = initTopic();
-        // send message via TLS
-        producer = getProducer(nsAddr, topic, true);
-
-        // Receive message without TLS.
-        consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener(), false);
-    }
-
-    @After
-    public void tearDown() {
-        shutdown();
-    }
-
-    @Test
-    public void testSendAndReceiveMessageOverTLS() {
-        int numberOfMessagesToSend = 16;
-        producer.send(numberOfMessagesToSend);
-
-        boolean consumedAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer.getListener());
-        Assertions.assertThat(consumedAll).isEqualTo(true);
-    }
-
-}
diff --git a/test/src/test/java/org/apache/rocketmq/test/tls/TLS_Mix_IT.java b/test/src/test/java/org/apache/rocketmq/test/tls/TLS_Mix_IT.java
deleted file mode 100644
index 77a61ae..0000000
--- a/test/src/test/java/org/apache/rocketmq/test/tls/TLS_Mix_IT.java
+++ /dev/null
@@ -1,62 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.rocketmq.test.tls;
-
-import org.apache.rocketmq.test.base.BaseConf;
-import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
-import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
-import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
-import org.apache.rocketmq.test.util.MQWait;
-import org.assertj.core.api.Assertions;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-
-public class TLS_Mix_IT extends BaseConf {
-
-    private RMQNormalProducer producer;
-    private RMQNormalConsumer consumer;
-
-    private String topic;
-
-    @Before
-    public void setUp() {
-        topic = initTopic();
-
-        // send message without TLS
-        producer = getProducer(nsAddr, topic);
-
-        // Receive message via TLS
-        consumer = getConsumer(nsAddr, topic, "*", new RMQNormalListener(), true);
-    }
-
-    @After
-    public void tearDown() {
-        shutdown();
-    }
-
-    @Test
-    public void testSendAndReceiveMessageOverTLS() {
-        int numberOfMessagesToSend = 16;
-        producer.send(numberOfMessagesToSend);
-
-        boolean consumedAll = MQWait.waitConsumeAll(consumeTime, producer.getAllMsgBody(), consumer.getListener());
-        Assertions.assertThat(consumedAll).isEqualTo(true);
-    }
-
-}
diff --git a/test/src/test/java/org/apache/rocketmq/test/tls/TlsIT.java b/test/src/test/java/org/apache/rocketmq/test/tls/TlsIT.java
new file mode 100644
index 0000000..4cddaa8
--- /dev/null
+++ b/test/src/test/java/org/apache/rocketmq/test/tls/TlsIT.java
@@ -0,0 +1,60 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.rocketmq.test.tls;
+
+import org.apache.rocketmq.test.base.BaseConf;
+import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
+import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
+import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
+import org.apache.rocketmq.test.util.MQWait;
+import org.assertj.core.api.Assertions;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+public class TlsIT extends BaseConf {
+
+    private RMQNormalProducer producer;
+    private RMQNormalConsumer consumer;
+
+    private String topic;
+
+    @Before
+    public void setUp() {
+        topic = initTopic();
+        // Send messages via TLS
+        producer = getProducer(NAMESRV_ADDR, topic, true);
+        // Receive messages via TLS
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener(), true);
+    }
+
+    @After
+    public void tearDown() {
+        shutdown();
+    }
+
+    @Test
+    public void testSendAndReceiveMessageOverTLS() {
+        int numberOfMessagesToSend = 16;
+        producer.send(numberOfMessagesToSend);
+
+        boolean consumedAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer.getListener());
+        Assertions.assertThat(consumedAll).isEqualTo(true);
+    }
+
+}
diff --git a/test/src/test/java/org/apache/rocketmq/test/tls/TlsMix2IT.java b/test/src/test/java/org/apache/rocketmq/test/tls/TlsMix2IT.java
new file mode 100644
index 0000000..01350e8
--- /dev/null
+++ b/test/src/test/java/org/apache/rocketmq/test/tls/TlsMix2IT.java
@@ -0,0 +1,61 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.rocketmq.test.tls;
+
+import org.apache.rocketmq.test.base.BaseConf;
+import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
+import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
+import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
+import org.apache.rocketmq.test.util.MQWait;
+import org.assertj.core.api.Assertions;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+public class TlsMix2IT extends BaseConf {
+
+    private RMQNormalProducer producer;
+    private RMQNormalConsumer consumer;
+
+    private String topic;
+
+    @Before
+    public void setUp() {
+        topic = initTopic();
+        // send message via TLS
+        producer = getProducer(NAMESRV_ADDR, topic, true);
+
+        // Receive message without TLS.
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener(), false);
+    }
+
+    @After
+    public void tearDown() {
+        shutdown();
+    }
+
+    @Test
+    public void testSendAndReceiveMessageOverTLS() {
+        int numberOfMessagesToSend = 16;
+        producer.send(numberOfMessagesToSend);
+
+        boolean consumedAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer.getListener());
+        Assertions.assertThat(consumedAll).isEqualTo(true);
+    }
+
+}
diff --git a/test/src/test/java/org/apache/rocketmq/test/tls/TlsMixIT.java b/test/src/test/java/org/apache/rocketmq/test/tls/TlsMixIT.java
new file mode 100644
index 0000000..33b49b7
--- /dev/null
+++ b/test/src/test/java/org/apache/rocketmq/test/tls/TlsMixIT.java
@@ -0,0 +1,62 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.rocketmq.test.tls;
+
+import org.apache.rocketmq.test.base.BaseConf;
+import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
+import org.apache.rocketmq.test.client.rmq.RMQNormalProducer;
+import org.apache.rocketmq.test.listener.rmq.concurrent.RMQNormalListener;
+import org.apache.rocketmq.test.util.MQWait;
+import org.assertj.core.api.Assertions;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
+public class TlsMixIT extends BaseConf {
+
+    private RMQNormalProducer producer;
+    private RMQNormalConsumer consumer;
+
+    private String topic;
+
+    @Before
+    public void setUp() {
+        topic = initTopic();
+
+        // send message without TLS
+        producer = getProducer(NAMESRV_ADDR, topic);
+
+        // Receive message via TLS
+        consumer = getConsumer(NAMESRV_ADDR, topic, "*", new RMQNormalListener(), true);
+    }
+
+    @After
+    public void tearDown() {
+        shutdown();
+    }
+
+    @Test
+    public void testSendAndReceiveMessageOverTLS() {
+        int numberOfMessagesToSend = 16;
+        producer.send(numberOfMessagesToSend);
+
+        boolean consumedAll = MQWait.waitConsumeAll(CONSUME_TIME, producer.getAllMsgBody(), consumer.getListener());
+        Assertions.assertThat(consumedAll).isEqualTo(true);
+    }
+
+}

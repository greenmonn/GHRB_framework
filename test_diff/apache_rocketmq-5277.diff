diff --git a/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java b/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
index c1e7048..222226c 100644
--- a/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
+++ b/test/src/test/java/org/apache/rocketmq/test/autoswitchrole/AutoSwitchRoleBase.java
@@ -27,6 +27,7 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 import java.util.UUID;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.rocketmq.broker.BrokerController;
 import org.apache.rocketmq.common.BrokerConfig;
@@ -43,8 +44,7 @@ import org.apache.rocketmq.store.config.BrokerRole;
 import org.apache.rocketmq.store.config.FlushDiskType;
 import org.apache.rocketmq.store.config.MessageStoreConfig;
 
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertEquals;
+import static org.awaitility.Awaitility.await;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
@@ -61,8 +61,7 @@ public class AutoSwitchRoleBase {
     private SocketAddress bornHost;
     private SocketAddress storeHost;
     private static Integer no = 0;
-    
-    
+
     protected void initialize() {
         this.brokerList = new ArrayList<>();
         try {
@@ -71,19 +70,19 @@ public class AutoSwitchRoleBase {
         } catch (Exception ignored) {
         }
     }
-    
+
     public static Integer nextPort() throws IOException {
-        return nextPort(1001,9999);
+        return nextPort(1001, 9999);
     }
-    
-    public static Integer nextPort(Integer minPort, Integer maxPort) throws IOException  {
+
+    public static Integer nextPort(Integer minPort, Integer maxPort) throws IOException {
         Random random = new Random();
         int tempPort;
         int port;
         try {
             while (true) {
                 tempPort = random.nextInt(maxPort) % (maxPort - minPort + 1) + minPort;
-                ServerSocket serverSocket =  new ServerSocket(tempPort);
+                ServerSocket serverSocket = new ServerSocket(tempPort);
                 port = serverSocket.getLocalPort();
                 serverSocket.close();
                 break;
@@ -93,13 +92,14 @@ public class AutoSwitchRoleBase {
                 throw new IOException("This server's open ports are temporarily full!");
             }
             no++;
-            port = nextPort(minPort,maxPort);
+            port = nextPort(minPort, maxPort);
         }
         no = 0;
         return port;
     }
 
-    public BrokerController startBroker(String namesrvAddress, String controllerAddress, int brokerId, int haPort, int brokerListenPort,
+    public BrokerController startBroker(String namesrvAddress, String controllerAddress, int brokerId, int haPort,
+        int brokerListenPort,
         int nettyListenPort, BrokerRole expectedRole, int mappedFileSize) throws Exception {
         final MessageStoreConfig storeConfig = buildMessageStoreConfig("broker" + brokerId, haPort, mappedFileSize);
         storeConfig.setHaMaxTimeSlaveNotCatchup(3 * 1000);
@@ -184,12 +184,11 @@ public class AutoSwitchRoleBase {
     }
 
     protected void checkMessage(final MessageStore messageStore, int totalMsgs, int startOffset) {
-        for (long i = 0; i < totalMsgs; i++) {
-            GetMessageResult result = messageStore.getMessage("GROUP_A", "FooBar", 0, startOffset + i, 1024 * 1024, null);
-            assertThat(result).isNotNull();
-            assertEquals(GetMessageStatus.FOUND, result.getStatus());
-            result.release();
-        }
+        await().atMost(60, TimeUnit.SECONDS)
+            .until(() -> {
+                GetMessageResult result = messageStore.getMessage("GROUP_A", "FooBar", 0, startOffset, 1024, null);
+                return result != null && result.getStatus() == GetMessageStatus.FOUND && result.getMessageCount() == totalMsgs;
+            });
     }
 
     protected void destroy() {

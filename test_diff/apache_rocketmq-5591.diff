diff --git a/test/src/main/java/org/apache/rocketmq/test/util/VerifyUtils.java b/test/src/main/java/org/apache/rocketmq/test/util/VerifyUtils.java
index 261d17e..e596d4e 100644
--- a/test/src/main/java/org/apache/rocketmq/test/util/VerifyUtils.java
+++ b/test/src/main/java/org/apache/rocketmq/test/util/VerifyUtils.java
@@ -82,12 +82,12 @@ public class VerifyUtils {
         return verifyBalance(msgSize, 0.1f, recvSize);
     }
 
-    public static boolean verifyDelay(long delayTimeMills, Collection<Object> recvMsgTimes,
-        int errorMills) {
+    public static boolean verifyDelay(long delayTimeMills, long nextLevelDelayTimeMills,
+        Collection<Object> recvMsgTimes) {
         boolean delay = true;
         for (Object timeObj : recvMsgTimes) {
             long time = (Long) timeObj;
-            if (Math.abs(time - delayTimeMills) > errorMills) {
+            if (time < delayTimeMills || time > nextLevelDelayTimeMills) {
                 delay = false;
                 logger.info(String.format("delay error:%s", Math.abs(time - delayTimeMills)));
             }
@@ -95,11 +95,6 @@ public class VerifyUtils {
         return delay;
     }
 
-    public static boolean verifyDelay(long delayTimeMills, Collection<Object> recvMsgTimes) {
-        int errorMills = 500;
-        return verifyDelay(delayTimeMills, recvMsgTimes, errorMills);
-    }
-
     public static boolean verifyOrder(Collection<Collection<Object>> queueMsgs) {
         for (Collection<Object> msgs : queueMsgs) {
             if (!verifyOrderMsg(msgs)) {
diff --git a/test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java b/test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
index 4e7312b..06330a1 100644
--- a/test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/delay/NormalMsgDelayIT.java
@@ -17,6 +17,7 @@
 
 package org.apache.rocketmq.test.delay;
 
+import java.util.List;
 import org.apache.rocketmq.logging.org.slf4j.Logger;
 import org.apache.rocketmq.logging.org.slf4j.LoggerFactory;
 import org.apache.rocketmq.test.client.rmq.RMQNormalConsumer;
@@ -29,8 +30,6 @@ import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.util.List;
-
 public class NormalMsgDelayIT extends DelayConf {
     private static Logger logger = LoggerFactory.getLogger(NormalMsgDelayIT.class);
     protected int msgSize = 100;
@@ -63,7 +62,7 @@ public class NormalMsgDelayIT extends DelayConf {
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()));
         Assert.assertEquals("Timer is not correct", true,
-            VerifyUtils.verifyDelay(DELAY_LEVEL[delayLevel - 1] * 1000,
+            VerifyUtils.verifyDelay(DELAY_LEVEL[delayLevel - 1] * 1000, DELAY_LEVEL[delayLevel] * 1000,
                 ((RMQDelayListener) consumer.getListener()).getMsgDelayTimes()));
     }
 
@@ -79,7 +78,7 @@ public class NormalMsgDelayIT extends DelayConf {
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()));
         Assert.assertEquals("Timer is not correct", true,
-            VerifyUtils.verifyDelay(DELAY_LEVEL[delayLevel - 1] * 1000,
+            VerifyUtils.verifyDelay(DELAY_LEVEL[delayLevel - 1] * 1000, DELAY_LEVEL[delayLevel] * 1000,
                 ((RMQDelayListener) consumer.getListener()).getMsgDelayTimes()));
     }
 
@@ -95,7 +94,7 @@ public class NormalMsgDelayIT extends DelayConf {
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()));
         Assert.assertEquals("Timer is not correct", true,
-            VerifyUtils.verifyDelay(DELAY_LEVEL[delayLevel - 1] * 1000,
+            VerifyUtils.verifyDelay(DELAY_LEVEL[delayLevel - 1] * 1000, DELAY_LEVEL[delayLevel] * 1000,
                 ((RMQDelayListener) consumer.getListener()).getMsgDelayTimes()));
     }
 
@@ -111,7 +110,7 @@ public class NormalMsgDelayIT extends DelayConf {
         Assert.assertEquals("Not all are consumed", 0, VerifyUtils.verify(producer.getAllMsgBody(),
             consumer.getListener().getAllMsgBody()));
         Assert.assertEquals("Timer is not correct", true,
-            VerifyUtils.verifyDelay(DELAY_LEVEL[delayLevel - 1] * 1000,
+            VerifyUtils.verifyDelay(DELAY_LEVEL[delayLevel - 1] * 1000, DELAY_LEVEL[delayLevel] * 1000,
                 ((RMQDelayListener) consumer.getListener()).getMsgDelayTimes()));
     }
 }

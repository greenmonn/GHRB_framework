diff --git a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageFetcherTest.java b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageFetcherTest.java
index 1134729..9dd94cc 100644
--- a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageFetcherTest.java
+++ b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/TieredMessageFetcherTest.java
@@ -36,6 +36,7 @@ import org.apache.rocketmq.tieredstore.common.BoundaryType;
 import org.apache.rocketmq.tieredstore.common.SelectMappedBufferResultWrapper;
 import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
 import org.apache.rocketmq.tieredstore.container.TieredContainerManager;
+import org.apache.rocketmq.tieredstore.container.TieredIndexFile;
 import org.apache.rocketmq.tieredstore.container.TieredMessageQueueContainer;
 import org.apache.rocketmq.tieredstore.metadata.TieredMetadataStore;
 import org.apache.rocketmq.tieredstore.mock.MemoryFileSegment;
@@ -282,6 +283,8 @@ public class TieredMessageFetcherTest {
         request = new DispatchRequest(mq.getTopic(), mq.getQueueId(), MessageBufferUtilTest.MSG_LEN * 2, MessageBufferUtilTest.MSG_LEN, 0, 0, 0, "", "another-key", 0, 0, null);
         container.appendIndexFile(request);
         container.commit(true);
+        TieredIndexFile indexFile = TieredContainerManager.getIndexFile(storeConfig);
+        indexFile.commit(true);
         Assert.assertEquals(1, fetcher.queryMessageAsync(mq.getTopic(), "key", 1, 0, Long.MAX_VALUE).join().getMessageMapedList().size());
 
         QueryMessageResult result = fetcher.queryMessageAsync(mq.getTopic(), "key", 32, 0, Long.MAX_VALUE).join();
diff --git a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredIndexFileTest.java b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredIndexFileTest.java
index c30ee2a..0824cf3 100644
--- a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredIndexFileTest.java
+++ b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/container/TieredIndexFileTest.java
@@ -35,6 +35,7 @@ import org.junit.After;
 import org.junit.Assert;
 import org.junit.Assume;
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 
 public class TieredIndexFileTest {
@@ -61,6 +62,7 @@ public class TieredIndexFileTest {
 //        metadataStore.reLoadStore();
     }
 
+    @Ignore
     @Test
     public void testAppendAndQuery() throws IOException, ClassNotFoundException, NoSuchMethodException {
         // skip this test on windows
diff --git a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/MetadataStoreTest.java b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/MetadataStoreTest.java
index 45a3a6b..4832d12 100644
--- a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/MetadataStoreTest.java
+++ b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/metadata/MetadataStoreTest.java
@@ -19,7 +19,9 @@ package org.apache.rocketmq.tieredstore.metadata;
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.UUID;
 import java.util.concurrent.atomic.AtomicInteger;
 import org.apache.commons.io.FileUtils;
@@ -35,7 +37,9 @@ import org.junit.Before;
 import org.junit.Test;
 
 public class MetadataStoreTest {
-    MessageQueue mq;
+    MessageQueue mq0;
+    MessageQueue mq1;
+    MessageQueue mq2;
     TieredMessageStoreConfig storeConfig;
     TieredMetadataStore metadataStore;
 
@@ -43,7 +47,9 @@ public class MetadataStoreTest {
     public void setUp() {
         storeConfig = new TieredMessageStoreConfig();
         storeConfig.setStorePathRootDir(FileUtils.getTempDirectory() + File.separator + "tiered_store_unit_test" + UUID.randomUUID());
-        mq = new MessageQueue("MetadataStoreTest", storeConfig.getBrokerName(), 1);
+        mq0 = new MessageQueue("MetadataStoreTest0", storeConfig.getBrokerName(), 0);
+        mq1 = new MessageQueue("MetadataStoreTest1", storeConfig.getBrokerName(), 0);
+        mq2 = new MessageQueue("MetadataStoreTest1", storeConfig.getBrokerName(), 1);
         metadataStore = new TieredMetadataManager(storeConfig);
     }
 
@@ -55,10 +61,10 @@ public class MetadataStoreTest {
 
     @Test
     public void testQueue() {
-        QueueMetadata queueMetadata = metadataStore.getQueue(mq);
+        QueueMetadata queueMetadata = metadataStore.getQueue(mq0);
         Assert.assertNull(queueMetadata);
 
-        queueMetadata = metadataStore.addQueue(mq, -1);
+        queueMetadata = metadataStore.addQueue(mq0, -1);
         Assert.assertEquals(queueMetadata.getMinOffset(), -1);
         Assert.assertEquals(queueMetadata.getMaxOffset(), -1);
 
@@ -66,49 +72,49 @@ public class MetadataStoreTest {
         queueMetadata.setMinOffset(0);
         queueMetadata.setMaxOffset(0);
         metadataStore.updateQueue(queueMetadata);
-        queueMetadata = metadataStore.getQueue(mq);
+        queueMetadata = metadataStore.getQueue(mq0);
         Assert.assertTrue(queueMetadata.getUpdateTimestamp() >= currentTimeMillis);
         Assert.assertEquals(queueMetadata.getMinOffset(), 0);
         Assert.assertEquals(queueMetadata.getMaxOffset(), 0);
 
-        MessageQueue mq2 = new MessageQueue("MetadataStoreTest", storeConfig.getBrokerName(), 2);
+        MessageQueue mq2 = new MessageQueue(mq0.getTopic(), storeConfig.getBrokerName(), 2);
         metadataStore.addQueue(mq2, 1);
         AtomicInteger i = new AtomicInteger(0);
-        metadataStore.iterateQueue(mq.getTopic(), metadata -> {
+        metadataStore.iterateQueue(mq0.getTopic(), metadata -> {
             Assert.assertEquals(i.get(), metadata.getMinOffset());
             i.getAndIncrement();
         });
         Assert.assertEquals(i.get(), 2);
 
-        metadataStore.deleteQueue(mq);
-        queueMetadata = metadataStore.getQueue(mq);
+        metadataStore.deleteQueue(mq0);
+        queueMetadata = metadataStore.getQueue(mq0);
         Assert.assertNull(queueMetadata);
     }
 
     @Test
     public void testTopic() {
-        TopicMetadata topicMetadata = metadataStore.getTopic(mq.getTopic());
+        TopicMetadata topicMetadata = metadataStore.getTopic(mq0.getTopic());
         Assert.assertNull(topicMetadata);
 
-        metadataStore.addTopic(mq.getTopic(), 2);
-        topicMetadata = metadataStore.getTopic(mq.getTopic());
-        Assert.assertEquals(mq.getTopic(), topicMetadata.getTopic());
+        metadataStore.addTopic(mq0.getTopic(), 2);
+        topicMetadata = metadataStore.getTopic(mq0.getTopic());
+        Assert.assertEquals(mq0.getTopic(), topicMetadata.getTopic());
         Assert.assertEquals(topicMetadata.getStatus(), 0);
         Assert.assertEquals(topicMetadata.getReserveTime(), 2);
         Assert.assertEquals(topicMetadata.getTopicId(), 0);
 
-        metadataStore.updateTopicStatus(mq.getTopic(), 1);
-        metadataStore.updateTopicReserveTime(mq.getTopic(), 0);
-        topicMetadata = metadataStore.getTopic(mq.getTopic());
+        metadataStore.updateTopicStatus(mq0.getTopic(), 1);
+        metadataStore.updateTopicReserveTime(mq0.getTopic(), 0);
+        topicMetadata = metadataStore.getTopic(mq0.getTopic());
         Assert.assertNotNull(topicMetadata);
         Assert.assertEquals(topicMetadata.getStatus(), 1);
         Assert.assertEquals(topicMetadata.getReserveTime(), 0);
 
-        metadataStore.addTopic(mq.getTopic() + "1", 1);
-        metadataStore.updateTopicStatus(mq.getTopic() + "1", 2);
+        metadataStore.addTopic(mq0.getTopic() + "1", 1);
+        metadataStore.updateTopicStatus(mq0.getTopic() + "1", 2);
 
-        metadataStore.addTopic(mq.getTopic() + "2", 2);
-        metadataStore.updateTopicStatus(mq.getTopic() + "2", 3);
+        metadataStore.addTopic(mq0.getTopic() + "2", 2);
+        metadataStore.updateTopicStatus(mq0.getTopic() + "2", 3);
 
         AtomicInteger n = new AtomicInteger();
         metadataStore.iterateTopic(metadata -> {
@@ -122,21 +128,19 @@ public class MetadataStoreTest {
         });
         Assert.assertEquals(3, n.get());
 
-        Assert.assertNull(metadataStore.getTopic(mq.getTopic() + "2"));
+        Assert.assertNull(metadataStore.getTopic(mq0.getTopic() + "2"));
 
-        Assert.assertNotNull(metadataStore.getTopic(mq.getTopic()));
-        Assert.assertNotNull(metadataStore.getTopic(mq.getTopic() + "1"));
+        Assert.assertNotNull(metadataStore.getTopic(mq0.getTopic()));
+        Assert.assertNotNull(metadataStore.getTopic(mq0.getTopic() + "1"));
     }
 
     @Test
     public void testFileSegment() {
         MemoryFileSegment fileSegment1 = new MemoryFileSegment(TieredFileSegment.FileSegmentType.COMMIT_LOG,
-            mq,
-            100,
-            storeConfig);
+            mq0, 100, storeConfig);
         fileSegment1.initPosition(fileSegment1.getSize());
         FileSegmentMetadata metadata1 = metadataStore.updateFileSegment(fileSegment1);
-        Assert.assertEquals(mq, metadata1.getQueue());
+        Assert.assertEquals(mq0, metadata1.getQueue());
         Assert.assertEquals(TieredFileSegment.FileSegmentType.COMMIT_LOG, TieredFileSegment.FileSegmentType.valueOf(metadata1.getType()));
         Assert.assertEquals(100, metadata1.getBaseOffset());
         Assert.assertEquals(0, metadata1.getSealTimestamp());
@@ -152,12 +156,10 @@ public class MetadataStoreTest {
         Assert.assertTrue(metadata1.getSealTimestamp() > 0);
 
         MemoryFileSegment fileSegment2 = new MemoryFileSegment(TieredFileSegment.FileSegmentType.COMMIT_LOG,
-            mq,
-            1100,
-            storeConfig);
+            mq0, 1100, storeConfig);
         metadataStore.updateFileSegment(fileSegment2);
         List<FileSegmentMetadata> list = new ArrayList<>();
-        metadataStore.iterateFileSegment(TieredFileSegment.FileSegmentType.COMMIT_LOG, "MetadataStoreTest", 1, list::add);
+        metadataStore.iterateFileSegment(TieredFileSegment.FileSegmentType.COMMIT_LOG, mq0.getTopic(), mq0.getQueueId(), list::add);
         Assert.assertEquals(2, list.size());
         Assert.assertEquals(100, list.get(0).getBaseOffset());
         Assert.assertEquals(1100, list.get(1).getBaseOffset());
@@ -170,19 +172,57 @@ public class MetadataStoreTest {
     @Test
     public void testReload() {
         TieredMetadataManager metadataManager = (TieredMetadataManager) metadataStore;
-        metadataManager.addTopic(mq.getTopic(), 1);
-        metadataManager.addQueue(mq, 2);
+        metadataManager.addTopic(mq0.getTopic(), 1);
+        metadataManager.addTopic(mq1.getTopic(), 2);
+
+        metadataManager.addQueue(mq0, 2);
+        metadataManager.addQueue(mq1, 4);
+        metadataManager.addQueue(mq2, 8);
+
+
+        MemoryFileSegment fileSegment = new MemoryFileSegment(TieredFileSegment.FileSegmentType.COMMIT_LOG,
+            mq0, 100, storeConfig);
+        metadataStore.updateFileSegment(fileSegment);
+
+        fileSegment = new MemoryFileSegment(TieredFileSegment.FileSegmentType.COMMIT_LOG,
+            mq0, 200, storeConfig);
+        metadataStore.updateFileSegment(fileSegment);
+
         Assert.assertTrue(new File(metadataManager.configFilePath()).exists());
 
         metadataManager = new TieredMetadataManager(storeConfig);
-        metadataManager.load();
 
-        TopicMetadata topicMetadata = metadataManager.getTopic(mq.getTopic());
+        TopicMetadata topicMetadata = metadataManager.getTopic(mq0.getTopic());
         Assert.assertNotNull(topicMetadata);
         Assert.assertEquals(topicMetadata.getReserveTime(), 1);
 
-        QueueMetadata queueMetadata = metadataManager.getQueue(mq);
+        topicMetadata = metadataManager.getTopic(mq1.getTopic());
+        Assert.assertNotNull(topicMetadata);
+        Assert.assertEquals(topicMetadata.getReserveTime(), 2);
+
+        QueueMetadata queueMetadata = metadataManager.getQueue(mq0);
         Assert.assertNotNull(queueMetadata);
+        Assert.assertEquals(mq0, queueMetadata.getQueue());
         Assert.assertEquals(queueMetadata.getMinOffset(), 2);
+
+        queueMetadata = metadataManager.getQueue(mq1);
+        Assert.assertNotNull(queueMetadata);
+        Assert.assertEquals(mq1, queueMetadata.getQueue());
+        Assert.assertEquals(queueMetadata.getMinOffset(), 4);
+
+        queueMetadata = metadataManager.getQueue(mq2);
+        Assert.assertNotNull(queueMetadata);
+        Assert.assertEquals(mq2, queueMetadata.getQueue());
+        Assert.assertEquals(queueMetadata.getMinOffset(), 8);
+
+        Map<Long, FileSegmentMetadata> map = new HashMap<>();
+        metadataManager.iterateFileSegment(metadata -> map.put(metadata.getBaseOffset(), metadata));
+        FileSegmentMetadata fileSegmentMetadata = map.get(100L);
+        Assert.assertNotNull(fileSegmentMetadata);
+        Assert.assertEquals(mq0, fileSegmentMetadata.getQueue());
+
+        fileSegmentMetadata = map.get(200L);
+        Assert.assertNotNull(fileSegmentMetadata);
+        Assert.assertEquals(mq0, fileSegmentMetadata.getQueue());
     }
 }
diff --git a/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegmentTest.java b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegmentTest.java
new file mode 100644
index 0000000..0f2ee2f
--- /dev/null
+++ b/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/provider/posix/PosixFileSegmentTest.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.rocketmq.tieredstore.provider.posix;
+
+import com.google.common.io.ByteStreams;
+import com.google.common.io.Files;
+import java.io.File;
+import java.io.IOException;
+import java.nio.ByteBuffer;
+import java.util.Random;
+import java.util.UUID;
+import org.apache.commons.io.FileUtils;
+import org.apache.rocketmq.common.message.MessageQueue;
+import org.apache.rocketmq.tieredstore.common.TieredMessageStoreConfig;
+import org.apache.rocketmq.tieredstore.provider.TieredFileSegment;
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Test;
+
+public class PosixFileSegmentTest {
+    TieredMessageStoreConfig storeConfig;
+    MessageQueue mq;
+
+    @Before
+    public void setUp() {
+        storeConfig = new TieredMessageStoreConfig();
+        storeConfig.setTieredStoreFilepath(FileUtils.getTempDirectory() + File.separator + "tiered_store_unit_test" + UUID.randomUUID());
+        mq = new MessageQueue("OSSFileSegmentTest", "broker", 0);
+    }
+
+    @After
+    public void tearDown() throws IOException {
+        FileUtils.deleteDirectory(new File(FileUtils.getTempDirectory() + File.separator + "tiered_store_unit_test" + UUID.randomUUID()));
+    }
+
+    @Test
+    public void testCommitAndRead() throws IOException {
+        PosixFileSegment fileSegment = new PosixFileSegment(TieredFileSegment.FileSegmentType.CONSUME_QUEUE, mq, 0, storeConfig);
+        byte[] source = new byte[4096];
+        new Random().nextBytes(source);
+        ByteBuffer buffer = ByteBuffer.wrap(source);
+        fileSegment.append(buffer, 0);
+        fileSegment.commit();
+
+        File file = new File(fileSegment.getPath());
+        Assert.assertTrue(file.exists());
+        byte[] result = new byte[4096];
+        ByteStreams.read(Files.asByteSource(file).openStream(), result, 0, 4096);
+        Assert.assertArrayEquals(source, result);
+
+        ByteBuffer read = fileSegment.read(0, 4096);
+        Assert.assertArrayEquals(source, read.array());
+    }
+}

diff --git a/test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java b/test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java
index 04a71d6..edd7de0 100644
--- a/test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java
+++ b/test/src/main/java/org/apache/rocketmq/test/schema/SchemaTools.java
@@ -166,19 +166,9 @@ public class SchemaTools {
                 continue;
             }
             Class<?>[] parameterTypes = method.getParameterTypes();
-            Arrays.sort(parameterTypes, new Comparator<Class<?>>() {
-                @Override
-                public int compare(Class<?> o1, Class<?> o2) {
-                    return o1.getName().compareTo(o2.getName());
-                }
-            });
+            Arrays.sort(parameterTypes, Comparator.comparing(Class::getName));
             Class<?>[] exceptionTypes = method.getExceptionTypes();
-            Arrays.sort(exceptionTypes, new Comparator<Class<?>>() {
-                @Override
-                public int compare(Class<?> o1, Class<?> o2) {
-                    return o1.getName().compareTo(o2.getName());
-                }
-            });
+            Arrays.sort(exceptionTypes, Comparator.comparing(Class::getName));
             String key = String.format("Method %s(%s)", method.getName(), Arrays.stream(parameterTypes).map(Class::getName).collect(Collectors.joining(",")));
             String value = String.format("%s throws (%s): %s",
                 isPublicOrPrivate(method.getModifiers()),
diff --git a/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java b/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java
index 604ee5c..1013759 100644
--- a/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java
+++ b/test/src/main/java/org/apache/rocketmq/test/util/TestUtil.java
@@ -19,8 +19,6 @@ package org.apache.rocketmq.test.util;
 
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
@@ -107,11 +105,7 @@ public final class TestUtil {
 
     public static <K, V extends Comparable<? super V>> Map<K, V> sortByValue(Map<K, V> map) {
         List<Map.Entry<K, V>> list = new LinkedList<Map.Entry<K, V>>(map.entrySet());
-        Collections.sort(list, new Comparator<Map.Entry<K, V>>() {
-            public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {
-                return (o1.getValue()).compareTo(o2.getValue());
-            }
-        });
+        list.sort(Map.Entry.comparingByValue());
 
         Map<K, V> result = new LinkedHashMap<K, V>();
         for (Map.Entry<K, V> entry : list) {
diff --git a/test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java b/test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
index fea6d96..8cbcdda 100644
--- a/test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
+++ b/test/src/test/java/org/apache/rocketmq/test/statictopic/StaticTopicIT.java
@@ -21,8 +21,6 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import java.util.ArrayList;
 import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
@@ -196,12 +194,7 @@ public class StaticTopicIT extends BaseConf {
             messagesByQueue.get(messageExt.getQueueId()).add(messageExt);
         }
         for (List<MessageExt> msgEachQueue : messagesByQueue.values()) {
-            Collections.sort(msgEachQueue, new Comparator<MessageExt>() {
-                @Override
-                public int compare(MessageExt o1, MessageExt o2) {
-                    return (int) (o1.getQueueOffset() - o2.getQueueOffset());
-                }
-            });
+            msgEachQueue.sort((o1, o2) -> (int) (o1.getQueueOffset() - o2.getQueueOffset()));
         }
         return messagesByQueue;
     }

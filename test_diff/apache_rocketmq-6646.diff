diff --git a/remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyRemotingClientTest.java b/remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyRemotingClientTest.java
index 4b38ce9..efa3eb3 100644
--- a/remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyRemotingClientTest.java
+++ b/remoting/src/test/java/org/apache/rocketmq/remoting/netty/NettyRemotingClientTest.java
@@ -16,23 +16,111 @@
  */
 package org.apache.rocketmq.remoting.netty;
 
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import org.apache.rocketmq.remoting.InvokeCallback;
+import org.apache.rocketmq.remoting.exception.RemotingException;
+import org.apache.rocketmq.remoting.exception.RemotingSendRequestException;
+import org.apache.rocketmq.remoting.exception.RemotingTimeoutException;
+import org.apache.rocketmq.remoting.protocol.RemotingCommand;
+import org.apache.rocketmq.remoting.protocol.RequestCode;
+import org.apache.rocketmq.remoting.protocol.ResponseCode;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.mockito.Spy;
 import org.mockito.junit.MockitoJUnitRunner;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.AssertionsForClassTypes.catchThrowable;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.anyLong;
+import static org.mockito.ArgumentMatchers.anyString;
+import static org.mockito.Mockito.doAnswer;
 
 @RunWith(MockitoJUnitRunner.class)
 public class NettyRemotingClientTest {
+    @Spy
     private NettyRemotingClient remotingClient = new NettyRemotingClient(new NettyClientConfig());
 
     @Test
     public void testSetCallbackExecutor() throws NoSuchFieldException, IllegalAccessException {        
         ExecutorService customized = Executors.newCachedThreadPool();
         remotingClient.setCallbackExecutor(customized);
-
         assertThat(remotingClient.getCallbackExecutor()).isEqualTo(customized);
     }
+
+    @Test
+    public void testInvokeResponse() throws Exception {
+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, null);
+
+        RemotingCommand response = RemotingCommand.createResponseCommand(null);
+        response.setCode(ResponseCode.SUCCESS);
+        doAnswer(invocation -> {
+            InvokeCallback callback = invocation.getArgument(3);
+            ResponseFuture responseFuture = new ResponseFuture(null, request.getOpaque(), 3 * 1000, null, null);
+            responseFuture.setResponseCommand(response);
+            callback.operationComplete(responseFuture);
+            return null;
+        }).when(remotingClient).invokeAsync(anyString(), any(RemotingCommand.class), anyLong(), any(InvokeCallback.class));
+
+        CompletableFuture<RemotingCommand> future = remotingClient.invoke("0.0.0.0", request, 1000);
+        RemotingCommand actual = future.get();
+        assertThat(actual).isEqualTo(response);
+    }
+
+    @Test
+    public void testRemotingSendRequestException() throws Exception {
+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, null);
+
+        RemotingCommand response = RemotingCommand.createResponseCommand(null);
+        response.setCode(ResponseCode.SUCCESS);
+        doAnswer(invocation -> {
+            InvokeCallback callback = invocation.getArgument(3);
+            ResponseFuture responseFuture = new ResponseFuture(null, request.getOpaque(), 3 * 1000, null, null);
+            responseFuture.setSendRequestOK(false);
+            callback.operationComplete(responseFuture);
+            return null;
+        }).when(remotingClient).invokeAsync(anyString(), any(RemotingCommand.class), anyLong(), any(InvokeCallback.class));
+
+        CompletableFuture<RemotingCommand> future = remotingClient.invoke("0.0.0.0", request, 1000);
+        Throwable thrown = catchThrowable(future::get);
+        assertThat(thrown.getCause()).isInstanceOf(RemotingSendRequestException.class);
+    }
+
+    @Test
+    public void testRemotingTimeoutException() throws Exception {
+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, null);
+
+        RemotingCommand response = RemotingCommand.createResponseCommand(null);
+        response.setCode(ResponseCode.SUCCESS);
+        doAnswer(invocation -> {
+            InvokeCallback callback = invocation.getArgument(3);
+            ResponseFuture responseFuture = new ResponseFuture(null, request.getOpaque(), -1L, null, null);
+            callback.operationComplete(responseFuture);
+            return null;
+        }).when(remotingClient).invokeAsync(anyString(), any(RemotingCommand.class), anyLong(), any(InvokeCallback.class));
+
+        CompletableFuture<RemotingCommand> future = remotingClient.invoke("0.0.0.0", request, 1000);
+        Throwable thrown = catchThrowable(future::get);
+        assertThat(thrown.getCause()).isInstanceOf(RemotingTimeoutException.class);
+    }
+
+    @Test
+    public void testRemotingException() throws Exception {
+        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, null);
+
+        RemotingCommand response = RemotingCommand.createResponseCommand(null);
+        response.setCode(ResponseCode.SUCCESS);
+        doAnswer(invocation -> {
+            InvokeCallback callback = invocation.getArgument(3);
+            ResponseFuture responseFuture = new ResponseFuture(null, request.getOpaque(), 3 * 1000, null, null);
+            callback.operationComplete(responseFuture);
+            return null;
+        }).when(remotingClient).invokeAsync(anyString(), any(RemotingCommand.class), anyLong(), any(InvokeCallback.class));
+
+        CompletableFuture<RemotingCommand> future = remotingClient.invoke("0.0.0.0", request, 1000);
+        Throwable thrown = catchThrowable(future::get);
+        assertThat(thrown.getCause()).isInstanceOf(RemotingException.class);
+    }
 }

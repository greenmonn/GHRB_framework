diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseConverterFactoryTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseConverterFactoryTest.java
new file mode 100644
index 0000000..7beec90
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseConverterFactoryTest.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.converter;
+
+import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;
+import org.apache.shardingsphere.infra.binder.statement.dal.FlushStatementContext;
+import org.apache.shardingsphere.infra.binder.statement.dml.DeleteStatementContext;
+import org.apache.shardingsphere.infra.binder.statement.dml.InsertStatementContext;
+import org.apache.shardingsphere.infra.binder.statement.dml.SelectStatementContext;
+import org.apache.shardingsphere.infra.binder.statement.dml.UpdateStatementContext;
+import org.junit.Test;
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.junit.Assert.assertThat;
+import static org.mockito.Mockito.mock;
+
+public final class HBaseDatabaseConverterFactoryTest {
+    
+    @Test
+    public void assertExecuteSelectStatement() {
+        SQLStatementContext<?> sqlStatementContext = mock(SelectStatementContext.class);
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        assertThat(converter, instanceOf(HBaseDatabaseSelectConverter.class));
+    }
+    
+    @Test
+    public void assertExecuteInsertStatement() {
+        SQLStatementContext<?> sqlStatementContext = mock(InsertStatementContext.class);
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        assertThat(converter, instanceOf(HBaseDatabaseInsertConverter.class));
+    }
+    
+    @Test
+    public void assertExecuteUpdateStatement() {
+        SQLStatementContext<?> sqlStatementContext = mock(UpdateStatementContext.class);
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        assertThat(converter, instanceOf(HBaseDatabaseUpdateConverter.class));
+    }
+    
+    @Test
+    public void assertExecuteDeleteStatement() {
+        SQLStatementContext<?> sqlStatementContext = mock(DeleteStatementContext.class);
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        assertThat(converter, instanceOf(HBaseDatabaseDeleteConverter.class));
+    }
+    
+    @Test
+    public void assertExecuteFlushStatement() {
+        SQLStatementContext<?> sqlStatementContext = mock(FlushStatementContext.class);
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        assertThat(converter, instanceOf(HBaseRegionReloadConverter.class));
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseDeleteConverterTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseDeleteConverterTest.java
new file mode 100644
index 0000000..ffcea8e
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseDeleteConverterTest.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.converter;
+
+import org.apache.hadoop.hbase.client.Delete;
+import org.apache.shardingsphere.infra.binder.SQLStatementContextFactory;
+import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;
+import org.apache.shardingsphere.proxy.backend.hbase.bean.HBaseOperation;
+import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
+import org.junit.Test;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
+public final class HBaseDatabaseDeleteConverterTest {
+    
+    @Test
+    public void assertConvert() {
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(HBaseSupportedSQLStatement.getDeleteStatement());
+        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(null, sqlStatement, "");
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        HBaseOperation hbaseOperation = converter.convert();
+        assertThat(hbaseOperation.getTableName(), equalTo(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME));
+        assertThat(hbaseOperation.getOperation(), instanceOf(Delete.class));
+    }
+    
+    @Test
+    public void assertConvertWithIn() {
+        String sql = " delete /*+ hbase */ from t_test_order where rowKey in ('2', '1')";
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(sql);
+        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(null, sqlStatement, "");
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        HBaseOperation hBaseOperation = converter.convert();
+        assertThat(hBaseOperation.getTableName(), equalTo(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME));
+        assertThat(hBaseOperation.getOperation(), instanceOf(HBaseDeleteOperationAdapter.class));
+        assertThat(((HBaseDeleteOperationAdapter) hBaseOperation.getOperation()).getDeletes().size(), is(2));
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseRowKeysConverterAdapterTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseRowKeysConverterAdapterTest.java
new file mode 100644
index 0000000..9edaf05
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseRowKeysConverterAdapterTest.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.converter;
+
+import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;
+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.expr.InExpression;
+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.predicate.WhereSegment;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.SelectStatement;
+import org.junit.Test;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Optional;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+public class HBaseDatabaseRowKeysConverterAdapterTest {
+    
+    @Test
+    public void assertGetRowKeysFromInExpression() {
+        SelectStatement sqlStatement = (SelectStatement) HBaseSupportedSQLStatement.parseSQLStatement("select /*+ hbase */ * from t_order where rowKey in ('1', '2') ");
+        Optional<WhereSegment> whereSegment = sqlStatement.getWhere();
+        HBaseDatabaseRowKeysConverterAdapter adapter = new HBaseDatabaseRowKeysConverterAdapter();
+        if (whereSegment.isPresent()) {
+            List<String> rowKeys = adapter.getRowKeysFromWhereSegmentByIn((InExpression) whereSegment.get().getExpr());
+            List<String> actual = Arrays.asList("1", "2");
+            assertEquals(rowKeys, actual);
+        } else {
+            fail();
+        }
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseUpdateConverterTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseUpdateConverterTest.java
new file mode 100644
index 0000000..ea0abe1
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/converter/HBaseDatabaseUpdateConverterTest.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.converter;
+
+import org.apache.hadoop.hbase.client.Put;
+import org.apache.shardingsphere.infra.binder.SQLStatementContextFactory;
+import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;
+import org.apache.shardingsphere.proxy.backend.hbase.bean.HBaseOperation;
+import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
+import org.junit.Test;
+import static org.hamcrest.CoreMatchers.equalTo;
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+
+public final class HBaseDatabaseUpdateConverterTest {
+    
+    @Test
+    public void assertConvert() {
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(HBaseSupportedSQLStatement.getUpdateStatement());
+        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(null, sqlStatement, "");
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        HBaseOperation hbaseOperation = converter.convert();
+        assertThat(hbaseOperation.getTableName(), equalTo(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME));
+        assertThat(hbaseOperation.getOperation(), instanceOf(Put.class));
+    }
+    
+    @Test
+    public void assertConvertWithIn() {
+        String sql = " update /*+ hbase */ t_test_order set age = 10 where rowKey in (1, '2')";
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(sql);
+        SQLStatementContext<?> sqlStatementContext = SQLStatementContextFactory.newInstance(null, sqlStatement, "");
+        HBaseDatabaseConverter converter = HBaseDatabaseConverterFactory.newInstance(sqlStatementContext);
+        HBaseOperation hBaseOperation = converter.convert();
+        assertThat(hBaseOperation.getTableName(), equalTo(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME));
+        assertThat(hBaseOperation.getOperation(), instanceOf(HBaseUpdateOperationAdapter.class));
+        assertThat(((HBaseUpdateOperationAdapter) hBaseOperation.getOperation()).getPuts().size(), is(2));
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/HBaseSupportedSQLStatement.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/HBaseSupportedSQLStatement.java
new file mode 100644
index 0000000..ea7c818
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/HBaseSupportedSQLStatement.java
@@ -0,0 +1,123 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.result;
+
+import org.apache.shardingsphere.sql.parser.api.CacheOption;
+import org.apache.shardingsphere.sql.parser.api.SQLParserEngine;
+import org.apache.shardingsphere.sql.parser.api.SQLVisitorEngine;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
+import java.util.Properties;
+
+/**
+ * SQL Statement which supported in HBase.
+ */
+public class HBaseSupportedSQLStatement {
+    
+    public static final String HBASE_DATABASE_TABLE_NAME = "t_test_order";
+    
+    private static final String SELECT_STATEMENT = "select /*+ hbase */ * from t_order where id = 1";
+    
+    private static final String SHOW_TABLE_STATEMENT = "show /*+ hbase */ tables";
+    
+    private static final String SHOW_CREATE_TABLE_STATEMENT = "show /*+ hbase */ create table t_test_order";
+    
+    private static final String UPDATE_STATEMENT = "update /*+ hbase */ t_test_order set age = 10 where rowKey = 1";
+    
+    private static final String DELETE_STATEMENT = "delete /*+ hbase */ from t_test_order where rowKey = 'kid'";
+    
+    private static final String INSERT_STATEMENT = "insert /*+ hbase */ into t_test_order(rowKey, v1, v2) values(1, 2, 3)";
+    
+    private static final String SHOW_DATABASES = "show /*+ hbase */ databases";
+    
+    private static final String FLUSH_TABLES = "flush /*+ hbase */ tables t_test";
+    
+    /**
+     * parse sql statement.
+     *
+     * @param sql sql
+     * @return SQLStatement Object.
+     */
+    public static SQLStatement parseSQLStatement(final String sql) {
+        return new SQLVisitorEngine("MySQL", "STATEMENT", false, new Properties()).visit(new SQLParserEngine("MySQL",
+                new CacheOption(128, 4)).parse(sql, false));
+    }
+    
+    /**
+     * get SQL Statement for test.
+     * @return SQLStatement.
+     */
+    public static String getInsertStatement() {
+        return INSERT_STATEMENT;
+    }
+    
+    /**
+     * get SQL Statement for test.
+     * @return SQLStatement.
+     */
+    public static String getDeleteStatement() {
+        return DELETE_STATEMENT;
+    }
+    
+    /**
+     * get SQL Statement for test.
+     * @return SQLStatement.
+     */
+    public static String getUpdateStatement() {
+        return UPDATE_STATEMENT;
+    }
+    
+    /**
+     * get SQL Statement for test.
+     * @return SQLStatement.
+     */
+    public static String getSelectStatement() {
+        return SELECT_STATEMENT;
+    }
+    
+    /**
+     * get SQL Statement for test.
+     * @return SQLStatement.
+     */
+    public static String getShowCreateTableStatement() {
+        return SHOW_CREATE_TABLE_STATEMENT;
+    }
+    
+    /**
+     * get SQL Statement for test.
+     * @return SQLStatement.
+     */
+    public static String getShowTableStatement() {
+        return SHOW_TABLE_STATEMENT;
+    }
+    
+    /**
+     * get SQL Statement for test.
+     * @return SQLStatement.
+     */
+    public static String getShowDatabaseStatement() {
+        return SHOW_DATABASES;
+    }
+    
+    /**
+     * get SQL Statement for test.
+     * @return SQLStatement.
+     */
+    public static String getFlushTablesStatement() {
+        return FLUSH_TABLES;
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/AbstractHBaseDatabaseQueryResultSetTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/AbstractHBaseDatabaseQueryResultSetTest.java
new file mode 100644
index 0000000..f4a0f28
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/AbstractHBaseDatabaseQueryResultSetTest.java
@@ -0,0 +1,106 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.result.query;
+
+import lombok.Getter;
+import org.apache.hadoop.hbase.HColumnDescriptor;
+import org.apache.hadoop.hbase.HTableDescriptor;
+import org.apache.hadoop.hbase.client.Admin;
+import org.apache.hadoop.hbase.client.Connection;
+import org.apache.hadoop.hbase.client.HBaseAdmin;
+import org.apache.hadoop.hbase.client.Table;
+import org.apache.shardingsphere.infra.binder.segment.table.TablesContext;
+import org.apache.shardingsphere.proxy.backend.hbase.context.HBaseContext;
+import org.apache.shardingsphere.proxy.backend.hbase.props.HBaseProperties;
+import org.apache.shardingsphere.proxy.backend.hbase.props.HBasePropertyKey;
+import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;
+import org.apache.shardingsphere.test.util.PropertiesBuilder;
+import org.apache.shardingsphere.test.util.PropertiesBuilder.Property;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.junit.jupiter.MockitoExtension;
+import org.mockito.junit.jupiter.MockitoSettings;
+import org.mockito.quality.Strictness;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Properties;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+@ExtendWith(MockitoExtension.class)
+@MockitoSettings(strictness = Strictness.LENIENT)
+@Getter
+public abstract class AbstractHBaseDatabaseQueryResultSetTest {
+    
+    private final Table table = mock(Table.class, RETURNS_DEEP_STUBS);
+    
+    private final Admin admin = mock(HBaseAdmin.class, RETURNS_DEEP_STUBS);
+    
+    private final Connection connection = mock(Connection.class, RETURNS_DEEP_STUBS);
+    
+    private final TablesContext tablesContext = mock(TablesContext.class, RETURNS_DEEP_STUBS);
+    
+    private Collection<String> tableNames;
+    
+    @Before
+    public void setUp() throws IOException {
+        Properties props = createProperties();
+        HBaseProperties hBaseProperties = new HBaseProperties(props);
+        HBaseContext.getInstance().setProps(hBaseProperties);
+        tableNames = new ArrayList<>();
+        tableNames.add("t_test_table");
+        when(tablesContext.getTableNames()).thenReturn(tableNames);
+        HTableDescriptor[] tableDescriptors = createHTableDescriptors();
+        when(admin.tableExists(any())).thenReturn(true);
+        when(admin.getTableDescriptor(any())).thenReturn(tableDescriptors[0]);
+        when(admin.listTables()).thenReturn(tableDescriptors);
+        when(connection.getAdmin()).thenReturn(admin);
+        when(connection.getTable(any())).thenReturn(table);
+        HBaseContext.getInstance().init(Collections.singletonMap("cluster_lj", connection));
+    }
+    
+    private Properties createProperties() {
+        return PropertiesBuilder.build(
+                new Property(HBasePropertyKey.WARM_UP_THREAD_NUM.getKey(), String.valueOf(1)));
+    }
+    
+    private HTableDescriptor[] createHTableDescriptors() {
+        HTableDescriptor descriptor = mock(HTableDescriptor.class);
+        when(descriptor.getNameAsString()).thenReturn(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME);
+        when(descriptor.toStringTableAttributes()).thenReturn("{attributes}");
+        when(descriptor.getFlushPolicyClassName()).thenReturn("");
+        when(descriptor.getMaxFileSize()).thenReturn(-1L);
+        when(descriptor.getMemStoreFlushSize()).thenReturn(-1L);
+        when(descriptor.getPriority()).thenReturn(0);
+        when(descriptor.getRegionReplication()).thenReturn(1);
+        when(descriptor.getRegionSplitPolicyClassName()).thenReturn(null);
+        when(descriptor.toStringCustomizedValues()).thenReturn("");
+        when(descriptor.getFamilies()).thenReturn(Collections.singletonList(mock(HColumnDescriptor.class)));
+        return new HTableDescriptor[]{descriptor};
+    }
+    
+    @After
+    public void tearDown() {
+        HBaseContext.getInstance().close();
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/HBaseDatabaseDescribeResultSetTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/HBaseDatabaseDescribeResultSetTest.java
new file mode 100644
index 0000000..e0b1209
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/HBaseDatabaseDescribeResultSetTest.java
@@ -0,0 +1,74 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.result.query;
+
+import org.apache.shardingsphere.infra.binder.segment.table.TablesContext;
+import org.apache.shardingsphere.infra.binder.statement.dal.ShowCreateTableStatementContext;
+import org.apache.shardingsphere.proxy.backend.hbase.exception.HBaseOperationException;
+import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;
+import org.junit.Test;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.RETURNS_DEEP_STUBS;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class HBaseDatabaseDescribeResultSetTest extends AbstractHBaseDatabaseQueryResultSetTest {
+    
+    private final TablesContext tablesContext = mock(TablesContext.class, RETURNS_DEEP_STUBS);
+    
+    @Test
+    public void assertGetRowData() {
+        HBaseDatabaseQueryResultSet resultSet = new HBaseDatabaseDescribeResultSet();
+        ShowCreateTableStatementContext context = mock(ShowCreateTableStatementContext.class);
+        when(context.getTablesContext()).thenReturn(tablesContext);
+        when(context.getTablesContext().getTableNames().iterator().next()).thenReturn(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME);
+        resultSet.init(context);
+        
+        List<Object> actual = new ArrayList<>(resultSet.getRowData());
+        assertThat(actual.size(), is(9));
+        assertThat(actual.get(0), is(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME));
+        assertThat(actual.get(5), is(0));
+        assertThat(actual.get(6), is(1));
+        assertThat(actual.get(8), is(""));
+    }
+    
+    @Test(expected = IllegalArgumentException.class)
+    public void assertGetRowDataWithTableIsNotExists() throws IOException {
+        when(getAdmin().tableExists(any())).thenReturn(false);
+        ShowCreateTableStatementContext context = mock(ShowCreateTableStatementContext.class);
+        when(context.getTablesContext()).thenReturn(tablesContext);
+        when(context.getTablesContext().getTableNames().iterator().next()).thenReturn(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME);
+        HBaseDatabaseQueryResultSet resultSet = new HBaseDatabaseDescribeResultSet();
+        resultSet.init(context);
+    }
+    
+    @Test(expected = HBaseOperationException.class)
+    public void assertGetRowDataWithBackendError() throws IOException {
+        when(getAdmin().getTableDescriptor(any())).thenThrow(IOException.class);
+        ShowCreateTableStatementContext context = mock(ShowCreateTableStatementContext.class);
+        when(context.getTablesContext()).thenReturn(tablesContext);
+        when(context.getTablesContext().getTableNames().iterator().next()).thenReturn(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME);
+        HBaseDatabaseQueryResultSet resultSet = new HBaseDatabaseDescribeResultSet();
+        resultSet.init(context);
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/HBaseDatabaseListResultSetTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/HBaseDatabaseListResultSetTest.java
new file mode 100644
index 0000000..ea2006d
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/query/HBaseDatabaseListResultSetTest.java
@@ -0,0 +1,91 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.result.query;
+
+import org.apache.shardingsphere.infra.binder.statement.dal.ShowTablesStatementContext;
+import org.apache.shardingsphere.proxy.backend.hbase.exception.HBaseOperationException;
+import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
+import org.apache.shardingsphere.sql.parser.sql.dialect.statement.mysql.dal.MySQLShowTablesStatement;
+import org.junit.Test;
+import java.util.ArrayList;
+import java.util.List;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public final class HBaseDatabaseListResultSetTest extends AbstractHBaseDatabaseQueryResultSetTest {
+    
+    @Test
+    public void assertGetRowData() {
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(HBaseSupportedSQLStatement.getShowTableStatement());
+        HBaseDatabaseQueryResultSet resultSet = new HBaseDatabaseListResultSet();
+        ShowTablesStatementContext context = mock(ShowTablesStatementContext.class);
+        when(context.getSqlStatement()).thenReturn((MySQLShowTablesStatement) sqlStatement);
+        resultSet.init(context);
+        
+        assertTrue(resultSet.next());
+        List<Object> actual = new ArrayList<>(resultSet.getRowData());
+        assertThat(actual.size(), is(2));
+        assertThat(actual.get(0), is("cluster_lj"));
+        assertThat(actual.get(1), is(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME));
+    }
+    
+    @Test
+    public void assertGetRowDataFromRemoteHBaseCluster() {
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement("show /*+ hbase */ tables from cluster_lj");
+        HBaseDatabaseQueryResultSet resultSet = new HBaseDatabaseListResultSet();
+        ShowTablesStatementContext context = mock(ShowTablesStatementContext.class);
+        when(context.getSqlStatement()).thenReturn((MySQLShowTablesStatement) sqlStatement);
+        resultSet.init(context);
+        
+        assertTrue(resultSet.next());
+        List<Object> actual = new ArrayList<>(resultSet.getRowData());
+        assertThat(actual.size(), is(2));
+        assertThat(actual.get(0), is("cluster_lj"));
+        assertThat(actual.get(1), is(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME));
+    }
+    
+    @Test
+    public void assertGetRowDataByLike() {
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement("show /*+ hbase */ tables  like 't_test' ");
+        HBaseDatabaseQueryResultSet resultSet = new HBaseDatabaseListResultSet();
+        ShowTablesStatementContext context = mock(ShowTablesStatementContext.class);
+        when(context.getSqlStatement()).thenReturn((MySQLShowTablesStatement) sqlStatement);
+        resultSet.init(context);
+        
+        sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement("show /*+ hbase */ tables  like 't_test%' ");
+        when(context.getSqlStatement()).thenReturn((MySQLShowTablesStatement) sqlStatement);
+        resultSet.init(context);
+        assertTrue(resultSet.next());
+        List<Object> actual = new ArrayList<>(resultSet.getRowData());
+        assertThat(actual.size(), is(2));
+        assertThat(actual.get(1), is(HBaseSupportedSQLStatement.HBASE_DATABASE_TABLE_NAME));
+    }
+    
+    @Test(expected = HBaseOperationException.class)
+    public void assertGetRowDataError() {
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement("show /*+ hbase */ tables from cluster_do_not_exists");
+        HBaseDatabaseQueryResultSet resultSet = new HBaseDatabaseListResultSet();
+        ShowTablesStatementContext context = mock(ShowTablesStatementContext.class);
+        when(context.getSqlStatement()).thenReturn((MySQLShowTablesStatement) sqlStatement);
+        resultSet.init(context);
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/update/HBaseDatabaseBackendUpdateHandlerTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/update/HBaseDatabaseBackendUpdateHandlerTest.java
new file mode 100644
index 0000000..3d10325
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/result/update/HBaseDatabaseBackendUpdateHandlerTest.java
@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.result.update;
+
+import org.apache.shardingsphere.infra.executor.sql.execute.result.update.UpdateResult;
+import org.apache.shardingsphere.proxy.backend.hbase.impl.HBaseDatabaseBackendUpdateHandler;
+import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;
+import org.apache.shardingsphere.proxy.backend.response.header.update.UpdateResponseHeader;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
+import org.junit.Test;
+import java.util.Collections;
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.CoreMatchers.is;
+import static org.junit.Assert.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public final class HBaseDatabaseBackendUpdateHandlerTest {
+    
+    @Test
+    public void assertExecuteDeleteStatement() {
+        HBaseDatabaseDeleteUpdater updater = mock(HBaseDatabaseDeleteUpdater.class);
+        when(updater.executeUpdate(any())).thenReturn(Collections.singletonList(new UpdateResult(1, 0)));
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(HBaseSupportedSQLStatement.getDeleteStatement());
+        HBaseDatabaseBackendUpdateHandler handler = new HBaseDatabaseBackendUpdateHandler(sqlStatement, updater);
+        UpdateResponseHeader result = handler.execute();
+        assertUpdateResponseHeader(sqlStatement, result);
+    }
+    
+    @Test
+    public void assertExecuteUpdateStatement() {
+        HBaseDatabaseUpdateUpdater updater = mock(HBaseDatabaseUpdateUpdater.class);
+        when(updater.executeUpdate(any())).thenReturn(Collections.singletonList(new UpdateResult(1, 0)));
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(HBaseSupportedSQLStatement.getUpdateStatement());
+        HBaseDatabaseBackendUpdateHandler handler = new HBaseDatabaseBackendUpdateHandler(sqlStatement, updater);
+        UpdateResponseHeader result = handler.execute();
+        assertUpdateResponseHeader(sqlStatement, result);
+    }
+    
+    @Test
+    public void assertFlushTableStatement() {
+        HBaseRegionReloadUpdater updater = mock(HBaseRegionReloadUpdater.class);
+        when(updater.executeUpdate(any())).thenReturn(Collections.singletonList(new UpdateResult(1, 0)));
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(HBaseSupportedSQLStatement.getFlushTablesStatement());
+        HBaseDatabaseBackendUpdateHandler handler = new HBaseDatabaseBackendUpdateHandler(sqlStatement, updater);
+        UpdateResponseHeader result = handler.execute();
+        assertUpdateResponseHeader(sqlStatement, result);
+    }
+    
+    private void assertUpdateResponseHeader(final SQLStatement sqlStatement, final UpdateResponseHeader responseHeader) {
+        assertThat(responseHeader, instanceOf(UpdateResponseHeader.class));
+        assertThat(responseHeader.getSqlStatement(), is(sqlStatement));
+        assertThat(responseHeader.getUpdateCount(), is(1L));
+    }
+}
diff --git a/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/util/HeterogeneousUtilTest.java b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/util/HeterogeneousUtilTest.java
new file mode 100644
index 0000000..290bcfd
--- /dev/null
+++ b/proxy/backend/type/hbase/src/test/java/org/apache/shardingsphere/proxy/backend/hbase/util/HeterogeneousUtilTest.java
@@ -0,0 +1,38 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.proxy.backend.hbase.util;
+
+import org.apache.shardingsphere.proxy.backend.hbase.result.HBaseSupportedSQLStatement;
+import org.apache.shardingsphere.sql.parser.sql.common.segment.dml.item.ProjectionSegment;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.SQLStatement;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.dml.SelectStatement;
+import org.junit.Test;
+import java.util.ArrayList;
+import java.util.List;
+import static org.junit.Assert.assertTrue;
+
+public class HeterogeneousUtilTest {
+    
+    @Test
+    public void assertCrc32ProjectionSegment() {
+        String sql = "SELECT /*+ HBase */ rowKey, crc32(concat_ws('#',rowKey)) from t_order where rowKey in (1, 2, 3)";
+        SQLStatement sqlStatement = HBaseSupportedSQLStatement.parseSQLStatement(sql);
+        List<ProjectionSegment> projectionSegments = new ArrayList<>(((SelectStatement) sqlStatement).getProjections().getProjections());
+        assertTrue(HeterogeneousUtil.isCrcProjectionSegment(projectionSegments.get(1)));
+    }
+}

diff --git a/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/TracingAgentExtension.java b/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/TracingAgentExtension.java
deleted file mode 100644
index ce61832..0000000
--- a/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/TracingAgentExtension.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.agent.plugin.tracing;
-
-import net.bytebuddy.ByteBuddy;
-import net.bytebuddy.agent.ByteBuddyAgent;
-import net.bytebuddy.agent.builder.AgentBuilder;
-import net.bytebuddy.agent.builder.ResettableClassFileTransformer;
-import net.bytebuddy.dynamic.scaffold.TypeValidation;
-import net.bytebuddy.implementation.FieldAccessor;
-import net.bytebuddy.jar.asm.Opcodes;
-import net.bytebuddy.matcher.ElementMatchers;
-import org.apache.shardingsphere.agent.api.advice.TargetAdviceObject;
-import org.apache.shardingsphere.agent.plugin.tracing.advice.AdviceTestBase;
-import org.junit.jupiter.api.extension.AfterAllCallback;
-import org.junit.jupiter.api.extension.BeforeAllCallback;
-import org.junit.jupiter.api.extension.BeforeEachCallback;
-import org.junit.jupiter.api.extension.ExtensionContext;
-
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashSet;
-
-/**
- * Tracing agent extension.
- */
-public final class TracingAgentExtension implements BeforeAllCallback, AfterAllCallback, BeforeEachCallback {
-    
-    private static final String EXTRA_DATA = "_$EXTRA_DATA$_";
-    
-    private static ResettableClassFileTransformer byteBuddyAgent;
-    
-    private static final String[] ENHANCEMENT_CLASSES = {
-            "org.apache.shardingsphere.proxy.frontend.command.CommandExecutorTask",
-            "org.apache.shardingsphere.infra.executor.sql.execute.engine.driver.jdbc.JDBCExecutorCallback",
-            "org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine"
-    };
-    
-    @Override
-    public void beforeAll(final ExtensionContext context) {
-        ByteBuddyAgent.install();
-        Collection<String> classes = new HashSet<>(Arrays.asList(ENHANCEMENT_CLASSES));
-        byteBuddyAgent = new AgentBuilder.Default()
-                .with(new ByteBuddy().with(TypeValidation.ENABLED))
-                .type(ElementMatchers.namedOneOf(ENHANCEMENT_CLASSES))
-                .transform((builder, typeDescription, classLoader, module) -> {
-                    if (classes.contains(typeDescription.getTypeName())) {
-                        return builder.defineField(EXTRA_DATA, Object.class, Opcodes.ACC_PRIVATE | Opcodes.ACC_VOLATILE)
-                                .implement(TargetAdviceObject.class)
-                                .intercept(FieldAccessor.ofField(EXTRA_DATA));
-                    }
-                    return builder;
-                }).installOnByteBuddyAgent();
-        // load them into current classloader
-        classes.forEach(each -> {
-            try {
-                Class.forName(each);
-            } catch (final ClassNotFoundException ignored) {
-            }
-        });
-    }
-    
-    @Override
-    public void afterAll(final ExtensionContext context) {
-        byteBuddyAgent.reset(ByteBuddyAgent.getInstrumentation(), AgentBuilder.RedefinitionStrategy.RETRANSFORMATION);
-    }
-    
-    @Override
-    public void beforeEach(final ExtensionContext context) {
-        Object testInstance = context.getRequiredTestInstance();
-        if (testInstance instanceof AdviceTestBase) {
-            ((AdviceTestBase) testInstance).prepare();
-        }
-    }
-}
diff --git a/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractJDBCExecutorCallbackAdviceTest.java b/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractJDBCExecutorCallbackAdviceTest.java
deleted file mode 100644
index 2ac8ccc..0000000
--- a/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractJDBCExecutorCallbackAdviceTest.java
+++ /dev/null
@@ -1,110 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.agent.plugin.tracing.advice;
-
-import lombok.AccessLevel;
-import lombok.Getter;
-import lombok.SneakyThrows;
-import org.apache.shardingsphere.agent.api.advice.TargetAdviceObject;
-import org.apache.shardingsphere.agent.plugin.tracing.TracingAgentExtension;
-import org.apache.shardingsphere.infra.database.metadata.DataSourceMetaData;
-import org.apache.shardingsphere.infra.database.type.DatabaseType;
-import org.apache.shardingsphere.infra.database.type.dialect.MySQLDatabaseType;
-import org.apache.shardingsphere.infra.executor.sql.context.ExecutionUnit;
-import org.apache.shardingsphere.infra.executor.sql.context.SQLUnit;
-import org.apache.shardingsphere.infra.executor.sql.execute.engine.driver.jdbc.JDBCExecutionUnit;
-import org.apache.shardingsphere.infra.executor.sql.execute.engine.driver.jdbc.JDBCExecutorCallback;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.internal.configuration.plugins.Plugins;
-import org.mockito.invocation.InvocationOnMock;
-
-import java.sql.Connection;
-import java.sql.DatabaseMetaData;
-import java.sql.SQLException;
-import java.sql.Statement;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
-
-@ExtendWith(TracingAgentExtension.class)
-@Getter
-public abstract class AbstractJDBCExecutorCallbackAdviceTest implements AdviceTestBase {
-    
-    public static final String DATA_SOURCE_NAME = "mock.db";
-    
-    public static final String SQL = "SELECT 1";
-    
-    private final Map<String, Object> extraMap = new HashMap<>();
-    
-    private TargetAdviceObject targetObject;
-    
-    @Getter(AccessLevel.NONE)
-    private Object attachment;
-    
-    private JDBCExecutionUnit executionUnit;
-    
-    @Getter(AccessLevel.NONE)
-    private Map<String, DatabaseType> storageTypes;
-    
-    @SuppressWarnings({"rawtypes", "unchecked"})
-    @SneakyThrows({ReflectiveOperationException.class, SQLException.class})
-    @Override
-    public void prepare() {
-        Statement statement = mock(Statement.class);
-        Connection connection = mock(Connection.class);
-        DatabaseMetaData databaseMetaData = mock(DatabaseMetaData.class);
-        when(databaseMetaData.getURL()).thenReturn("mock_url");
-        when(connection.getMetaData()).thenReturn(databaseMetaData);
-        when(statement.getConnection()).thenReturn(connection);
-        executionUnit = new JDBCExecutionUnit(new ExecutionUnit(DATA_SOURCE_NAME, new SQLUnit(SQL, Collections.emptyList())), null, statement);
-        JDBCExecutorCallback mockedJDBCExecutorCallback = mock(JDBCExecutorCallback.class, this::mockAttachment);
-        Map<String, DataSourceMetaData> cachedDatasourceMetaData = (Map<String, DataSourceMetaData>) Plugins.getMemberAccessor()
-                .get(JDBCExecutorCallback.class.getDeclaredField("CACHED_DATASOURCE_METADATA"), mockedJDBCExecutorCallback);
-        cachedDatasourceMetaData.put("mock_url", mock(DataSourceMetaData.class));
-        storageTypes = Collections.singletonMap(DATA_SOURCE_NAME, new MySQLDatabaseType());
-        Plugins.getMemberAccessor().set(JDBCExecutorCallback.class.getDeclaredField("storageTypes"), mockedJDBCExecutorCallback, storageTypes);
-        targetObject = (TargetAdviceObject) mockedJDBCExecutorCallback;
-    }
-    
-    // CHECKSTYLE:OFF
-    private Object mockAttachment(final InvocationOnMock invocation) throws Throwable {
-        // CHECKSTYLE:ON
-        switch (invocation.getMethod().getName()) {
-            case "getAttachment":
-                return attachment;
-            case "setAttachment":
-                attachment = invocation.getArguments()[0];
-                return null;
-            default:
-                return invocation.callRealMethod();
-        }
-    }
-    
-    /**
-     * Get database type.
-     *
-     * @param databaseName database name
-     * @return database type
-     */
-    public String getDatabaseType(final String databaseName) {
-        return null == storageTypes ? "" : storageTypes.get(databaseName).getType();
-    }
-}
diff --git a/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractSQLParserEngineAdviceTest.java b/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractSQLParserEngineAdviceTest.java
deleted file mode 100644
index f35ce85..0000000
--- a/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AbstractSQLParserEngineAdviceTest.java
+++ /dev/null
@@ -1,57 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.agent.plugin.tracing.advice;
-
-import lombok.Getter;
-import org.apache.shardingsphere.agent.api.advice.TargetAdviceObject;
-import org.apache.shardingsphere.agent.plugin.tracing.TracingAgentExtension;
-import org.apache.shardingsphere.infra.parser.ShardingSphereSQLParserEngine;
-import org.junit.jupiter.api.extension.ExtendWith;
-import org.mockito.invocation.InvocationOnMock;
-
-import static org.mockito.Mockito.mock;
-
-@ExtendWith(TracingAgentExtension.class)
-public abstract class AbstractSQLParserEngineAdviceTest implements AdviceTestBase {
-    
-    @Getter
-    private TargetAdviceObject targetObject;
-    
-    private Object attachment;
-    
-    @SuppressWarnings("ConstantConditions")
-    @Override
-    public final void prepare() {
-        Object parserEngine = mock(ShardingSphereSQLParserEngine.class, this::mockAttachment);
-        targetObject = (TargetAdviceObject) parserEngine;
-    }
-    
-    // CHECKSTYLE:OFF
-    private Object mockAttachment(final InvocationOnMock invocation) throws Throwable {
-        // CHECKSTYLE:ON
-        switch (invocation.getMethod().getName()) {
-            case "getAttachment":
-                return attachment;
-            case "setAttachment":
-                attachment = invocation.getArguments()[0];
-                return null;
-            default:
-                return invocation.callRealMethod();
-        }
-    }
-}
diff --git a/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AdviceTestBase.java b/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AdviceTestBase.java
deleted file mode 100644
index db31bdf..0000000
--- a/agent/plugins/tracing/test/src/main/java/org/apache/shardingsphere/agent/plugin/tracing/advice/AdviceTestBase.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.shardingsphere.agent.plugin.tracing.advice;
-
-/**
- * Advice test base.
- */
-public interface AdviceTestBase {
-    
-    /**
-     * Prepare env for testing.
-     */
-    void prepare();
-}

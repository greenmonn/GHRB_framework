diff --git a/features/shadow/distsql/handler/src/test/java/org/apache/shardingsphere/shadow/distsql/query/ShowShadowRuleExecutorTest.java b/features/shadow/distsql/handler/src/test/java/org/apache/shardingsphere/shadow/distsql/query/ShowShadowRuleExecutorTest.java
index 95c17ec..8481814 100644
--- a/features/shadow/distsql/handler/src/test/java/org/apache/shardingsphere/shadow/distsql/query/ShowShadowRuleExecutorTest.java
+++ b/features/shadow/distsql/handler/src/test/java/org/apache/shardingsphere/shadow/distsql/query/ShowShadowRuleExecutorTest.java
@@ -18,6 +18,7 @@
 package org.apache.shardingsphere.shadow.distsql.query;
 
 import org.apache.shardingsphere.distsql.handler.query.RQLExecutor;
+import org.apache.shardingsphere.infra.config.algorithm.AlgorithmConfiguration;
 import org.apache.shardingsphere.infra.config.rule.RuleConfiguration;
 import org.apache.shardingsphere.infra.merge.result.impl.local.LocalDataQueryResultRow;
 import org.apache.shardingsphere.infra.metadata.database.ShardingSphereDatabase;
@@ -33,6 +34,7 @@ import org.junit.jupiter.api.Test;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.Properties;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.MatcherAssert.assertThat;
@@ -46,25 +48,36 @@ class ShowShadowRuleExecutorTest {
     void assertGetRowData() {
         RQLExecutor<ShowShadowRulesStatement> executor = new ShowShadowRuleExecutor();
         Collection<LocalDataQueryResultRow> actual = executor.getRows(mockDatabase(), mock(ShowShadowRulesStatement.class));
-        assertThat(actual.size(), is(1));
+        assertThat(actual.size(), is(2));
         Iterator<LocalDataQueryResultRow> iterator = actual.iterator();
         LocalDataQueryResultRow row = iterator.next();
-        assertThat(row.getCell(1), is("shadow_rule"));
-        assertThat(row.getCell(2), is("source"));
-        assertThat(row.getCell(3), is("shadow"));
-        assertThat(row.getCell(4), is("t_order,t_order_1"));
+        assertThat(row.getCell(1), is("t_order"));
+        assertThat(row.getCell(2), is("shadow_rule"));
+        assertThat(row.getCell(3), is("source"));
+        assertThat(row.getCell(4), is("shadow"));
+        assertThat(row.getCell(5), is("REGEX_MATCH"));
+        assertThat(row.getCell(6), is(""));
+        row = iterator.next();
+        assertThat(row.getCell(1), is("t_order_item"));
+        assertThat(row.getCell(2), is("shadow_rule"));
+        assertThat(row.getCell(3), is("source"));
+        assertThat(row.getCell(4), is("shadow"));
+        assertThat(row.getCell(5), is("REGEX_MATCH"));
+        assertThat(row.getCell(6), is(""));
     }
     
     @Test
     void assertGetColumnNames() {
         RQLExecutor<ShowShadowRulesStatement> executor = new ShowShadowRuleExecutor();
         Collection<String> columns = executor.getColumnNames();
-        assertThat(columns.size(), is(4));
+        assertThat(columns.size(), is(6));
         Iterator<String> iterator = columns.iterator();
+        assertThat(iterator.next(), is("shadow_table"));
         assertThat(iterator.next(), is("rule_name"));
         assertThat(iterator.next(), is("source_name"));
         assertThat(iterator.next(), is("shadow_name"));
-        assertThat(iterator.next(), is("shadow_table"));
+        assertThat(iterator.next(), is("algorithm_type"));
+        assertThat(iterator.next(), is("algorithm_props"));
     }
     
     private ShardingSphereDatabase mockDatabase() {
@@ -78,8 +91,9 @@ class ShowShadowRuleExecutorTest {
     private RuleConfiguration createRuleConfiguration() {
         ShadowRuleConfiguration result = new ShadowRuleConfiguration();
         result.getDataSources().add(new ShadowDataSourceConfiguration("shadow_rule", "source", "shadow"));
-        result.getTables().put("t_order", new ShadowTableConfiguration(Collections.singletonList("shadow_rule"), Collections.emptyList()));
-        result.getTables().put("t_order_1", new ShadowTableConfiguration(Collections.singletonList("shadow_rule"), Collections.emptyList()));
+        result.getShadowAlgorithms().put("user_id_select_match_algorithm", new AlgorithmConfiguration("REGEX_MATCH", new Properties()));
+        result.getTables().put("t_order", new ShadowTableConfiguration(Collections.singletonList("shadow_rule"), Collections.singletonList("user_id_select_match_algorithm")));
+        result.getTables().put("t_order_item", new ShadowTableConfiguration(Collections.singletonList("shadow_rule"), Collections.singletonList("user_id_select_match_algorithm")));
         return result;
     }
 }

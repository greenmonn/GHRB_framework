diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFirstNLastMMaskAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFirstNLastMMaskAlgorithmTest.java
index 7dfc0b2..8210aad 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFirstNLastMMaskAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFirstNLastMMaskAlgorithmTest.java
@@ -31,20 +31,56 @@ class KeepFirstNLastMMaskAlgorithmTest {
     
     private KeepFirstNLastMMaskAlgorithm maskAlgorithm;
     
+    private KeepFirstNLastMMaskAlgorithm sameFirstNLastMMaskAlgorithm;
+    
     @BeforeEach
     void setUp() {
         maskAlgorithm = new KeepFirstNLastMMaskAlgorithm();
-        maskAlgorithm.init(PropertiesBuilder.build(new Property("first-n", "2"), new Property("last-m", "5"), new Property("replace-char", "*")));
+        maskAlgorithm.init(PropertiesBuilder.build(new Property("first-n", "3"), new Property("last-m", "5"), new Property("replace-char", "*")));
+        sameFirstNLastMMaskAlgorithm = new KeepFirstNLastMMaskAlgorithm();
+        sameFirstNLastMMaskAlgorithm.init(PropertiesBuilder.build(new Property("first-n", "5"), new Property("last-m", "5"), new Property("replace-char", "*")));
     }
     
     @Test
     void assertMask() {
-        assertThat(maskAlgorithm.mask("abc123456"), is("ab**23456"));
+        assertThat(maskAlgorithm.mask("abc123456"), is("abc*23456"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc123456789"), is("abc12**56789"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthLessThanFirstN() {
+        assertThat(maskAlgorithm.mask("ab"), is("ab"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc"), is("abc"));
     }
     
     @Test
-    void assertMaskWhenPlainValueLengthLessThenFirstNLastMSum() {
+    void assertMaskWhenPlainValueLengthEqualsFirstN() {
         assertThat(maskAlgorithm.mask("abc"), is("abc"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc12"), is("abc12"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthLessThanLastM() {
+        assertThat(maskAlgorithm.mask("abc1"), is("abc1"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc1"), is("abc1"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthEqualsLastM() {
+        assertThat(maskAlgorithm.mask("abc12"), is("abc12"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc12"), is("abc12"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthLessThanFirstNPlusLastM() {
+        assertThat(maskAlgorithm.mask("abc1234"), is("abc1234"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc123456"), is("abc123456"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthEqualsFirstNPlusLastM() {
+        assertThat(maskAlgorithm.mask("abc12345"), is("abc12345"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc1234567"), is("abc1234567"));
     }
     
     @Test
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFromXToYMaskAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFromXToYMaskAlgorithmTest.java
index 47e3784..7134021 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFromXToYMaskAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFromXToYMaskAlgorithmTest.java
@@ -31,25 +31,44 @@ class KeepFromXToYMaskAlgorithmTest {
     
     private KeepFromXToYMaskAlgorithm maskAlgorithm;
     
+    private KeepFromXToYMaskAlgorithm sameFromXToYMaskAlgorithm;
+    
     @BeforeEach
     void setUp() {
         maskAlgorithm = new KeepFromXToYMaskAlgorithm();
-        maskAlgorithm.init(PropertiesBuilder.build(new Property("from-x", "2"), new Property("to-y", "5"), new Property("replace-char", "*")));
+        maskAlgorithm.init(PropertiesBuilder.build(new Property("from-x", "3"), new Property("to-y", "5"), new Property("replace-char", "*")));
+        sameFromXToYMaskAlgorithm = new KeepFromXToYMaskAlgorithm();
+        sameFromXToYMaskAlgorithm.init(PropertiesBuilder.build(new Property("from-x", "5"), new Property("to-y", "5"), new Property("replace-char", "*")));
     }
     
     @Test
     void assertMask() {
-        assertThat(maskAlgorithm.mask("abc123456"), is("**c123***"));
+        assertThat(maskAlgorithm.mask("abc123456"), is("***123***"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc123456"), is("*****3***"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthLessThanFromXPlusOne() {
+        assertThat(maskAlgorithm.mask("abc"), is("***"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc"), is("***"));
     }
     
     @Test
-    void assertMaskWhenPlainValueLengthLessThanToY() {
-        assertThat(maskAlgorithm.mask("abc"), is("**c"));
+    void assertMaskWhenPlainValueLengthEqualsFromXPlusOne() {
+        assertThat(maskAlgorithm.mask("abc1"), is("***1"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc123"), is("*****3"));
     }
     
     @Test
-    void assertMaskWhenPlainValueLengthLessThanFromX() {
-        assertThat(maskAlgorithm.mask("a"), is("a"));
+    void assertMaskWhenPlainValueLengthLessThanToYPlusOne() {
+        assertThat(maskAlgorithm.mask("abc12"), is("***12"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc12"), is("*****"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthEqualsToYPlusOne() {
+        assertThat(maskAlgorithm.mask("abc123"), is("***123"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc123"), is("*****3"));
     }
     
     @Test
@@ -69,4 +88,10 @@ class KeepFromXToYMaskAlgorithmTest {
         assertThrows(MaskAlgorithmInitializationException.class,
                 () -> new KeepFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "2"), new Property("to-y", "5"), new Property("replace-char", ""))));
     }
+    
+    @Test
+    void assertInitWhenFromXGreaterThanToY() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> new KeepFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "5"), new Property("to-y", "2"), new Property("replace-char", ""))));
+    }
 }
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFirstNLastMMaskAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFirstNLastMMaskAlgorithmTest.java
index 085d1e3..6b0ecd4 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFirstNLastMMaskAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFirstNLastMMaskAlgorithmTest.java
@@ -31,20 +31,56 @@ class MaskFirstNLastMMaskAlgorithmTest {
     
     private MaskFirstNLastMMaskAlgorithm maskAlgorithm;
     
+    private MaskFirstNLastMMaskAlgorithm sameFirstNLastMMaskAlgorithm;
+    
     @BeforeEach
     void setUp() {
         maskAlgorithm = new MaskFirstNLastMMaskAlgorithm();
         maskAlgorithm.init(PropertiesBuilder.build(new Property("first-n", "3"), new Property("last-m", "5"), new Property("replace-char", "*")));
+        sameFirstNLastMMaskAlgorithm = new MaskFirstNLastMMaskAlgorithm();
+        sameFirstNLastMMaskAlgorithm.init(PropertiesBuilder.build(new Property("first-n", "5"), new Property("last-m", "5"), new Property("replace-char", "*")));
     }
     
     @Test
     void assertMask() {
-        assertThat(maskAlgorithm.mask("abc12345678"), is("***123*****"));
+        assertThat(maskAlgorithm.mask("abc123456"), is("***1*****"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc123456789"), is("*****34*****"));
     }
     
     @Test
     void assertMaskWhenPlainValueLengthLessThanFirstN() {
         assertThat(maskAlgorithm.mask("ab"), is("**"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc"), is("***"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthEqualsFirstN() {
+        assertThat(maskAlgorithm.mask("abc"), is("***"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc12"), is("*****"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthLessThanLastM() {
+        assertThat(maskAlgorithm.mask("abc1"), is("****"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc1"), is("****"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthEqualsLastM() {
+        assertThat(maskAlgorithm.mask("abc12"), is("*****"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc12"), is("*****"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthLessThanFirstNPlusLastM() {
+        assertThat(maskAlgorithm.mask("abc1234"), is("*******"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc123456"), is("*********"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthEqualsFirstNPlusLastM() {
+        assertThat(maskAlgorithm.mask("abc12345"), is("********"));
+        assertThat(sameFirstNLastMMaskAlgorithm.mask("abc1234567"), is("**********"));
     }
     
     @Test
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFromXToYMaskAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFromXToYMaskAlgorithmTest.java
index db01850..7eff89c 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFromXToYMaskAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFromXToYMaskAlgorithmTest.java
@@ -31,25 +31,44 @@ class MaskFromXToYMaskAlgorithmTest {
     
     private MaskFromXToYMaskAlgorithm maskAlgorithm;
     
+    private MaskFromXToYMaskAlgorithm sameFromXToYMaskAlgorithm;
+    
     @BeforeEach
     void setUp() {
         maskAlgorithm = new MaskFromXToYMaskAlgorithm();
         maskAlgorithm.init(PropertiesBuilder.build(new Property("from-x", "3"), new Property("to-y", "5"), new Property("replace-char", "*")));
+        sameFromXToYMaskAlgorithm = new MaskFromXToYMaskAlgorithm();
+        sameFromXToYMaskAlgorithm.init(PropertiesBuilder.build(new Property("from-x", "5"), new Property("to-y", "5"), new Property("replace-char", "*")));
     }
     
     @Test
     void assertMask() {
-        assertThat(maskAlgorithm.mask("abc12345"), is("abc***45"));
+        assertThat(maskAlgorithm.mask("abc123456"), is("abc***456"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc123456"), is("abc12*456"));
     }
     
     @Test
-    void assertMaskWhenPlainValueLengthLessThanFromX() {
-        assertThat(maskAlgorithm.mask("ab"), is("ab"));
+    void assertMaskWhenPlainValueLengthLessThanFromXPlusOne() {
+        assertThat(maskAlgorithm.mask("abc"), is("abc"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc"), is("abc"));
     }
     
     @Test
-    void assertMaskWhenPlainValueLengthLessThanToY() {
+    void assertMaskWhenPlainValueLengthEqualsFromXPlusOne() {
         assertThat(maskAlgorithm.mask("abc1"), is("abc*"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc123"), is("abc12*"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthLessThanToYPlusOne() {
+        assertThat(maskAlgorithm.mask("abc12"), is("abc**"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc12"), is("abc12"));
+    }
+    
+    @Test
+    void assertMaskWhenPlainValueLengthEqualsToYPlusOne() {
+        assertThat(maskAlgorithm.mask("abc123"), is("abc***"));
+        assertThat(sameFromXToYMaskAlgorithm.mask("abc123"), is("abc12*"));
     }
     
     @Test
@@ -69,4 +88,10 @@ class MaskFromXToYMaskAlgorithmTest {
         assertThrows(MaskAlgorithmInitializationException.class,
                 () -> new MaskFromXToYMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "3"), new Property("to-y", "5"), new Property("replace-char", ""))));
     }
+    
+    @Test
+    void assertInitWhenFromXGreaterThanToY() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> new KeepFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "5"), new Property("to-y", "2"), new Property("replace-char", ""))));
+    }
 }

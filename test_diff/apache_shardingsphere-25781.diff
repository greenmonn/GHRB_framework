diff --git a/agent/plugins/metrics/core/src/test/java/org/apache/shardingsphere/agent/plugin/metrics/core/advice/proxy/ExecuteLatencyHistogramAdviceTest.java b/agent/plugins/metrics/core/src/test/java/org/apache/shardingsphere/agent/plugin/metrics/core/advice/proxy/ExecuteLatencyHistogramAdviceTest.java
index 1a7774c..c8a2210 100644
--- a/agent/plugins/metrics/core/src/test/java/org/apache/shardingsphere/agent/plugin/metrics/core/advice/proxy/ExecuteLatencyHistogramAdviceTest.java
+++ b/agent/plugins/metrics/core/src/test/java/org/apache/shardingsphere/agent/plugin/metrics/core/advice/proxy/ExecuteLatencyHistogramAdviceTest.java
@@ -20,8 +20,10 @@ package org.apache.shardingsphere.agent.plugin.metrics.core.advice.proxy;
 import org.apache.shardingsphere.agent.plugin.metrics.core.collector.MetricsCollectorRegistry;
 import org.apache.shardingsphere.agent.plugin.metrics.core.config.MetricCollectorType;
 import org.apache.shardingsphere.agent.plugin.metrics.core.config.MetricConfiguration;
-import org.apache.shardingsphere.agent.plugin.metrics.core.fixture.collector.MetricsCollectorFixture;
 import org.apache.shardingsphere.agent.plugin.metrics.core.fixture.TargetAdviceObjectFixture;
+import org.apache.shardingsphere.agent.plugin.metrics.core.fixture.collector.MetricsCollectorFixture;
+import org.apache.shardingsphere.proxy.frontend.mysql.command.admin.quit.MySQLComQuitExecutor;
+import org.apache.shardingsphere.proxy.frontend.mysql.command.query.text.query.MySQLComQueryPacketExecutor;
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
@@ -31,6 +33,7 @@ import java.util.Collections;
 import java.util.concurrent.TimeUnit;
 
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.mockito.Mockito.mock;
 
@@ -44,13 +47,26 @@ class ExecuteLatencyHistogramAdviceTest {
     }
     
     @Test
-    void assertExecuteLatencyHistogram() {
+    void assertExecuteLatencyHistogramWhenQueryCommandExecutor() {
         ExecuteLatencyHistogramAdvice advice = new ExecuteLatencyHistogramAdvice();
         TargetAdviceObjectFixture targetObject = new TargetAdviceObjectFixture();
         Method method = mock(Method.class);
-        advice.beforeMethod(targetObject, method, new Object[]{}, "FIXTURE");
+        Object[] args = new Object[]{null, null, mock(MySQLComQueryPacketExecutor.class)};
+        advice.beforeMethod(targetObject, method, args, "FIXTURE");
         Awaitility.await().pollDelay(500L, TimeUnit.MILLISECONDS).until(() -> true);
-        advice.afterMethod(targetObject, method, new Object[]{}, null, "FIXTURE");
+        advice.afterMethod(targetObject, method, args, null, "FIXTURE");
         assertThat(Double.parseDouble(MetricsCollectorRegistry.get(config, "FIXTURE").toString()), greaterThanOrEqualTo(500d));
     }
+    
+    @Test
+    void assertExecuteLatencyHistogramWhenNotQueryCommandExecutor() {
+        ExecuteLatencyHistogramAdvice advice = new ExecuteLatencyHistogramAdvice();
+        TargetAdviceObjectFixture targetObject = new TargetAdviceObjectFixture();
+        Method method = mock(Method.class);
+        Object[] args = new Object[]{null, null, mock(MySQLComQuitExecutor.class)};
+        advice.beforeMethod(targetObject, method, args, "FIXTURE");
+        Awaitility.await().pollDelay(20L, TimeUnit.MILLISECONDS).until(() -> true);
+        advice.afterMethod(targetObject, method, args, null, "FIXTURE");
+        assertThat(Double.parseDouble(MetricsCollectorRegistry.get(config, "FIXTURE").toString()), equalTo(0d));
+    }
 }

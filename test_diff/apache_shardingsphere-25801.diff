diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/MaskAlgorithmPropsCheckerTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/MaskAlgorithmPropsCheckerTest.java
index e10b946..b7898fe 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/MaskAlgorithmPropsCheckerTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/MaskAlgorithmPropsCheckerTest.java
@@ -83,23 +83,23 @@ class MaskAlgorithmPropsCheckerTest {
     
     @Test
     void assertCheckIntegerTypeConfigWithInteger() {
-        MaskAlgorithmPropsChecker.checkIntegerTypeConfig(PropertiesBuilder.build(new Property("integerTypeConfigKey", "123")), "integerTypeConfigKey", "maskType");
+        MaskAlgorithmPropsChecker.checkPositiveIntegerConfig(PropertiesBuilder.build(new Property("integerTypeConfigKey", "123")), "integerTypeConfigKey", "maskType");
     }
     
     @Test
     void assertCheckIntegerTypeConfigWithDifferentKey() {
         assertThrows(MaskAlgorithmInitializationException.class,
-                () -> MaskAlgorithmPropsChecker.checkIntegerTypeConfig(PropertiesBuilder.build(new Property("integerTypeConfigKey", "123")), "integerTypeConfigKey1", "maskType"));
+                () -> MaskAlgorithmPropsChecker.checkPositiveIntegerConfig(PropertiesBuilder.build(new Property("integerTypeConfigKey", "123")), "integerTypeConfigKey1", "maskType"));
     }
     
     @Test
     void assertCheckIntegerTypeConfigWithNotInteger() {
         assertThrows(MaskAlgorithmInitializationException.class,
-                () -> MaskAlgorithmPropsChecker.checkIntegerTypeConfig(PropertiesBuilder.build(new Property("integerTypeConfigKey", "123abc")), "integerTypeConfigKey", "maskType"));
+                () -> MaskAlgorithmPropsChecker.checkPositiveIntegerConfig(PropertiesBuilder.build(new Property("integerTypeConfigKey", "123abc")), "integerTypeConfigKey", "maskType"));
     }
     
     @Test
     void assertCheckIntegerTypeConfigWithNull() {
-        assertThrows(MaskAlgorithmInitializationException.class, () -> MaskAlgorithmPropsChecker.checkIntegerTypeConfig(PropertiesBuilder.build(), "integerTypeConfigKey", "maskType"));
+        assertThrows(MaskAlgorithmInitializationException.class, () -> MaskAlgorithmPropsChecker.checkPositiveIntegerConfig(PropertiesBuilder.build(), "integerTypeConfigKey", "maskType"));
     }
 }
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFromXToYMaskAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFromXToYMaskAlgorithmTest.java
index 7134021..98ba9c6 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFromXToYMaskAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/KeepFromXToYMaskAlgorithmTest.java
@@ -90,6 +90,18 @@ class KeepFromXToYMaskAlgorithmTest {
     }
     
     @Test
+    void assertInitWhenFromXIsNotPositive() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> new MaskFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "-3"), new Property("to-y", "5"), new Property("replace-char", "*"))));
+    }
+    
+    @Test
+    void assertInitWhenToYIsNotPositive() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> new MaskFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "3"), new Property("to-y", "-5"), new Property("replace-char", "*"))));
+    }
+    
+    @Test
     void assertInitWhenFromXGreaterThanToY() {
         assertThrows(MaskAlgorithmInitializationException.class,
                 () -> new KeepFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "5"), new Property("to-y", "2"), new Property("replace-char", ""))));
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskAfterSpecialCharsAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskAfterSpecialCharsAlgorithmTest.java
index e5109de..6041968 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskAfterSpecialCharsAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskAfterSpecialCharsAlgorithmTest.java
@@ -74,4 +74,22 @@ class MaskAfterSpecialCharsAlgorithmTest {
         assertThrows(MaskAlgorithmInitializationException.class,
                 () -> new MaskBeforeSpecialCharsAlgorithm().init(PropertiesBuilder.build(new Property("special-chars", "d1"), new Property("replace-char", ""))));
     }
+    
+    @Test
+    void assertInitWhenReplaceCharIsMissing() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> new MaskBeforeSpecialCharsAlgorithm().init(PropertiesBuilder.build(new Property("special-chars", "d1"))));
+    }
+    
+    @Test
+    void assertInitWhenPropertiesAreEmpty() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> new MaskBeforeSpecialCharsAlgorithm().init(PropertiesBuilder.build()));
+    }
+    
+    @Test
+    void assertInitWhenValidPropertiesAreSet() {
+        MaskBeforeSpecialCharsAlgorithm algorithm = new MaskBeforeSpecialCharsAlgorithm();
+        algorithm.init(PropertiesBuilder.build(new Property("special-chars", "d1"), new Property("replace-char", "*")));
+    }
 }
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFromXToYMaskAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFromXToYMaskAlgorithmTest.java
index 7eff89c..1475d99 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFromXToYMaskAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/cover/MaskFromXToYMaskAlgorithmTest.java
@@ -90,6 +90,18 @@ class MaskFromXToYMaskAlgorithmTest {
     }
     
     @Test
+    void assertInitWhenFromXIsNotPositive() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> new MaskFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "-3"), new Property("to-y", "5"), new Property("replace-char", "*"))));
+    }
+    
+    @Test
+    void assertInitWhenToYIsNotPositive() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> new MaskFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "3"), new Property("to-y", "-5"), new Property("replace-char", "*"))));
+    }
+    
+    @Test
     void assertInitWhenFromXGreaterThanToY() {
         assertThrows(MaskAlgorithmInitializationException.class,
                 () -> new KeepFirstNLastMMaskAlgorithm().init(PropertiesBuilder.build(new Property("from-x", "5"), new Property("to-y", "2"), new Property("replace-char", ""))));
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/LandlineNumberRandomAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/LandlineNumberRandomAlgorithmTest.java
index 698afc638..35ade1c 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/LandlineNumberRandomAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/LandlineNumberRandomAlgorithmTest.java
@@ -17,6 +17,7 @@
 
 package org.apache.shardingsphere.mask.algorithm.replace;
 
+import org.apache.shardingsphere.mask.exception.algorithm.MaskAlgorithmInitializationException;
 import org.apache.shardingsphere.test.util.PropertiesBuilder;
 import org.apache.shardingsphere.test.util.PropertiesBuilder.Property;
 import org.junit.jupiter.api.BeforeEach;
@@ -25,6 +26,7 @@ import org.junit.jupiter.api.Test;
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 class LandlineNumberRandomAlgorithmTest {
     
@@ -42,4 +44,16 @@ class LandlineNumberRandomAlgorithmTest {
         assertThat(maskAlgorithm.mask("0251234567"), not("0251234567"));
         assertThat(maskAlgorithm.mask("03101234567"), not("03101234567"));
     }
+    
+    @Test
+    void assertInitWhenConfigIsEmpty() {
+        assertThrows(MaskAlgorithmInitializationException.class, () -> maskAlgorithm.init(PropertiesBuilder.build()));
+    }
+    
+    @Test
+    void assertMaskWithInvalidConfig() {
+        assertThrows(MaskAlgorithmInitializationException.class,
+                () -> maskAlgorithm.init(PropertiesBuilder.build(new Property("landline-numbers", ""))));
+    }
+    
 }
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/MilitaryIdentityNumberRandomReplaceAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/MilitaryIdentityNumberRandomReplaceAlgorithmTest.java
index 718e9e3..7139e9f 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/MilitaryIdentityNumberRandomReplaceAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/MilitaryIdentityNumberRandomReplaceAlgorithmTest.java
@@ -17,15 +17,20 @@
 
 package org.apache.shardingsphere.mask.algorithm.replace;
 
+import org.apache.shardingsphere.mask.exception.algorithm.MaskAlgorithmInitializationException;
+import org.apache.shardingsphere.mask.spi.MaskAlgorithm;
 import org.apache.shardingsphere.test.util.PropertiesBuilder;
 import org.apache.shardingsphere.test.util.PropertiesBuilder.Property;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
+import java.util.Properties;
+
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.assertNull;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 class MilitaryIdentityNumberRandomReplaceAlgorithmTest {
     
@@ -43,4 +48,10 @@ class MilitaryIdentityNumberRandomReplaceAlgorithmTest {
         assertThat(maskAlgorithm.mask(""), is(""));
         assertNull(maskAlgorithm.mask(null));
     }
+    
+    @Test
+    void testMaskWithInvalidProps() {
+        MaskAlgorithm algorithm = new MilitaryIdentityNumberRandomReplaceAlgorithm();
+        assertThrows(MaskAlgorithmInitializationException.class, () -> algorithm.init(new Properties()));
+    }
 }
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/PersonalIdentityNumberRandomReplaceAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/PersonalIdentityNumberRandomReplaceAlgorithmTest.java
index f40d6df..5262538 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/PersonalIdentityNumberRandomReplaceAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/PersonalIdentityNumberRandomReplaceAlgorithmTest.java
@@ -24,6 +24,7 @@ import org.junit.jupiter.api.Test;
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
+import static org.hamcrest.CoreMatchers.nullValue;
 import static org.hamcrest.MatcherAssert.assertThat;
 
 class PersonalIdentityNumberRandomReplaceAlgorithmTest {
@@ -43,5 +44,15 @@ class PersonalIdentityNumberRandomReplaceAlgorithmTest {
         assertThat(maskAlgorithm.mask("1234567891011121314"), is("1234567891011121314"));
         assertThat(maskAlgorithm.mask("123456"), is("123456"));
         assertThat(maskAlgorithm.mask(""), is(""));
+        assertThat(maskAlgorithm.mask(null), is(nullValue()));
+    }
+    
+    @Test
+    void assertMaskWithDifferentCountryCode() {
+        PersonalIdentityNumberRandomReplaceAlgorithm maskAlgorithmCN = new PersonalIdentityNumberRandomReplaceAlgorithm();
+        maskAlgorithmCN.init(PropertiesBuilder.build(new Property("alpha-two-country-area-code", "CN")));
+        PersonalIdentityNumberRandomReplaceAlgorithm maskAlgorithmJP = new PersonalIdentityNumberRandomReplaceAlgorithm();
+        maskAlgorithmJP.init(PropertiesBuilder.build(new Property("alpha-two-country-area-code", "JP")));
+        assertThat(maskAlgorithmCN.mask("372928198312103215"), not(maskAlgorithmJP.mask("372928198312103215")));
     }
 }
diff --git a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/UnifiedCreditCodeRandomReplaceAlgorithmTest.java b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/UnifiedCreditCodeRandomReplaceAlgorithmTest.java
index 76d009a..27124e0 100644
--- a/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/UnifiedCreditCodeRandomReplaceAlgorithmTest.java
+++ b/features/mask/core/src/test/java/org/apache/shardingsphere/mask/algorithm/replace/UnifiedCreditCodeRandomReplaceAlgorithmTest.java
@@ -49,4 +49,33 @@ class UnifiedCreditCodeRandomReplaceAlgorithmTest {
     void assertInitWhenConfigIsNull() {
         assertThrows(MaskAlgorithmInitializationException.class, () -> maskAlgorithm.init(PropertiesBuilder.build(new Property("registration-department-codes", "1,2,3,4"))));
     }
+    
+    @Test
+    void assertInitWhenConfigIsEmpty() {
+        assertThrows(MaskAlgorithmInitializationException.class, () -> maskAlgorithm.init(PropertiesBuilder.build()));
+    }
+    
+    @Test
+    void assertInitWhenRegistrationDepartmentCodesIsEmpty() {
+        assertThrows(MaskAlgorithmInitializationException.class, () -> maskAlgorithm.init(PropertiesBuilder.build(
+                new Property("registration-department-codes", ""),
+                new Property("category-codes", "1,2,3,4"),
+                new Property("administrative-division-codes", "100000,200000,300000"))));
+    }
+    
+    @Test
+    void assertInitWhenCategoryCodesIsEmpty() {
+        assertThrows(MaskAlgorithmInitializationException.class, () -> maskAlgorithm.init(PropertiesBuilder.build(
+                new Property("registration-department-codes", "1,2,3,4"),
+                new Property("category-codes", ""),
+                new Property("administrative-division-codes", "100000,200000,300000"))));
+    }
+    
+    @Test
+    void assertInitWhenAdministrativeDivisionCodesIsEmpty() {
+        assertThrows(MaskAlgorithmInitializationException.class, () -> maskAlgorithm.init(PropertiesBuilder.build(
+                new Property("registration-department-codes", "1,2,3,4"),
+                new Property("category-codes", "1,2,3,4"),
+                new Property("administrative-division-codes", ""))));
+    }
 }

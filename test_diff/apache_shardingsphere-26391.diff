diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/BroadcastRouteEngineFactoryTest.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/BroadcastRouteEngineFactoryTest.java
new file mode 100644
index 0000000..3424dcb
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/BroadcastRouteEngineFactoryTest.java
@@ -0,0 +1,71 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.route;
+
+import org.apache.shardingsphere.broadcast.route.engine.BroadcastRouteEngineFactory;
+import org.apache.shardingsphere.broadcast.route.engine.type.BroadcastRouteEngine;
+import org.apache.shardingsphere.broadcast.route.engine.type.broadcast.BroadcastDatabaseBroadcastRoutingEngine;
+import org.apache.shardingsphere.broadcast.rule.BroadcastRule;
+import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;
+import org.apache.shardingsphere.infra.config.props.ConfigurationProperties;
+import org.apache.shardingsphere.infra.metadata.database.ShardingSphereDatabase;
+import org.apache.shardingsphere.infra.metadata.database.rule.ShardingSphereRuleMetaData;
+import org.apache.shardingsphere.infra.session.connection.ConnectionContext;
+import org.apache.shardingsphere.infra.session.query.QueryContext;
+import org.apache.shardingsphere.sql.parser.sql.common.statement.tcl.TCLStatement;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+class BroadcastRouteEngineFactoryTest {
+    
+    private BroadcastRule broadcastRule;
+    
+    private ShardingSphereDatabase database;
+    
+    private QueryContext queryContext;
+    
+    private ConfigurationProperties props;
+    
+    private ConnectionContext connectionContext;
+    
+    private ShardingSphereRuleMetaData globalRuleMetaData;
+    
+    @BeforeEach
+    void setUp() {
+        broadcastRule = mock(BroadcastRule.class);
+        database = mock(ShardingSphereDatabase.class);
+        queryContext = mock(QueryContext.class);
+        props = mock(ConfigurationProperties.class);
+        connectionContext = mock(ConnectionContext.class);
+        globalRuleMetaData = mock(ShardingSphereRuleMetaData.class);
+    }
+    
+    @Test
+    void assertNewInstanceWithTCLStatement() {
+        SQLStatementContext sqlStatementContext = mock(SQLStatementContext.class);
+        when(sqlStatementContext.getSqlStatement()).thenReturn(mock(TCLStatement.class));
+        when(queryContext.getSqlStatementContext()).thenReturn(sqlStatementContext);
+        BroadcastRouteEngine engine = BroadcastRouteEngineFactory.newInstance(broadcastRule, database, queryContext, props, connectionContext, globalRuleMetaData);
+        assertThat(engine, instanceOf(BroadcastDatabaseBroadcastRoutingEngine.class));
+    }
+}
diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastDatabaseBroadcastRoutingEngineTest.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastDatabaseBroadcastRoutingEngineTest.java
new file mode 100644
index 0000000..e5203ef
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastDatabaseBroadcastRoutingEngineTest.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.route.engine.type.broadcast;
+
+import org.apache.shardingsphere.broadcast.rule.BroadcastRule;
+import org.apache.shardingsphere.infra.route.context.RouteContext;
+import org.apache.shardingsphere.infra.route.context.RouteUnit;
+import org.junit.jupiter.api.Test;
+
+import java.util.Arrays;
+import java.util.Iterator;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+class BroadcastDatabaseBroadcastRoutingEngineTest {
+    
+    @Test
+    void assertRoute() {
+        BroadcastRule broadcastRule = mock(BroadcastRule.class);
+        when(broadcastRule.getAvailableDataSourceNames()).thenReturn(Arrays.asList("ds_0", "ds_1"));
+        BroadcastDatabaseBroadcastRoutingEngine engine = new BroadcastDatabaseBroadcastRoutingEngine();
+        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);
+        assertThat(routeContext.getRouteUnits().size(), is(2));
+        Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();
+        assertDataSourceRouteMapper(iterator.next(), "ds_0");
+        assertDataSourceRouteMapper(iterator.next(), "ds_1");
+    }
+    
+    private void assertDataSourceRouteMapper(final RouteUnit routeUnit, final String expected) {
+        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(expected));
+        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(expected));
+    }
+}
diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastInstanceBroadcastRoutingEngineTest.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastInstanceBroadcastRoutingEngineTest.java
new file mode 100644
index 0000000..2c956d8
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastInstanceBroadcastRoutingEngineTest.java
@@ -0,0 +1,52 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.route.engine.type.broadcast;
+
+import org.apache.shardingsphere.broadcast.rule.BroadcastRule;
+import org.apache.shardingsphere.infra.metadata.database.resource.ShardingSphereResourceMetaData;
+import org.apache.shardingsphere.infra.route.context.RouteContext;
+import org.apache.shardingsphere.infra.route.context.RouteUnit;
+import org.junit.jupiter.api.Test;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+class BroadcastInstanceBroadcastRoutingEngineTest {
+    
+    @Test
+    void assertRoute() {
+        ShardingSphereResourceMetaData resourceMetaData = mock(ShardingSphereResourceMetaData.class);
+        when(resourceMetaData.getAllInstanceDataSourceNames()).thenReturn(Collections.singleton("ds_0"));
+        BroadcastInstanceBroadcastRoutingEngine engine = new BroadcastInstanceBroadcastRoutingEngine(resourceMetaData);
+        BroadcastRule broadcastRule = mock(BroadcastRule.class);
+        when(broadcastRule.getAvailableDataSourceNames()).thenReturn(Arrays.asList("ds_0", "ds_1"));
+        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);
+        assertThat(routeContext.getRouteUnits().size(), is(1));
+        assertDataSourceRouteMapper(routeContext.getRouteUnits().iterator().next(), "ds_0");
+    }
+    
+    private void assertDataSourceRouteMapper(final RouteUnit routeUnit, final String expected) {
+        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(expected));
+        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(expected));
+    }
+}
diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastTableBroadcastRoutingEngineTest.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastTableBroadcastRoutingEngineTest.java
new file mode 100644
index 0000000..1e1de22
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/broadcast/BroadcastTableBroadcastRoutingEngineTest.java
@@ -0,0 +1,75 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.route.engine.type.broadcast;
+
+import org.apache.shardingsphere.broadcast.rule.BroadcastRule;
+import org.apache.shardingsphere.infra.route.context.RouteContext;
+import org.apache.shardingsphere.infra.route.context.RouteMapper;
+import org.apache.shardingsphere.infra.route.context.RouteUnit;
+import org.junit.jupiter.api.Test;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Iterator;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+class BroadcastTableBroadcastRoutingEngineTest {
+    
+    @Test
+    void assertRouteWithBroadcastRuleTable() {
+        Collection<String> broadcastRuleTableNames = Collections.singleton("t_address");
+        BroadcastTableBroadcastRoutingEngine engine = new BroadcastTableBroadcastRoutingEngine(broadcastRuleTableNames);
+        BroadcastRule broadcastRule = mock(BroadcastRule.class);
+        when(broadcastRule.getAvailableDataSourceNames()).thenReturn(Arrays.asList("ds_0", "ds_1"));
+        when(broadcastRule.getBroadcastRuleTableNames(any())).thenReturn(Collections.singleton("t_address"));
+        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);
+        assertThat(routeContext.getRouteUnits().size(), is(2));
+        Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();
+        assertRouteMapper(iterator.next(), "ds_0", "t_address");
+        assertRouteMapper(iterator.next(), "ds_1", "t_address");
+    }
+    
+    @Test
+    void assertRouteWithoutBroadcastRuleTable() {
+        Collection<String> broadcastRuleTableNames = Collections.singleton("t_address");
+        BroadcastTableBroadcastRoutingEngine engine = new BroadcastTableBroadcastRoutingEngine(broadcastRuleTableNames);
+        BroadcastRule broadcastRule = mock(BroadcastRule.class);
+        when(broadcastRule.getAvailableDataSourceNames()).thenReturn(Arrays.asList("ds_0", "ds_1"));
+        when(broadcastRule.getBroadcastRuleTableNames(any())).thenReturn(Collections.emptyList());
+        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);
+        assertThat(routeContext.getRouteUnits().size(), is(2));
+        Iterator<RouteUnit> iterator = routeContext.getRouteUnits().iterator();
+        assertRouteMapper(iterator.next(), "ds_0", "");
+        assertRouteMapper(iterator.next(), "ds_1", "");
+    }
+    
+    private void assertRouteMapper(final RouteUnit routeUnit, final String expectedDataSourceName, final String expectedTableName) {
+        assertThat(routeUnit.getDataSourceMapper().getLogicName(), is(expectedDataSourceName));
+        assertThat(routeUnit.getDataSourceMapper().getActualName(), is(expectedDataSourceName));
+        assertThat(routeUnit.getTableMappers().size(), is(1));
+        RouteMapper tableRouteMapper = routeUnit.getTableMappers().iterator().next();
+        assertThat(tableRouteMapper.getLogicName(), is(expectedTableName));
+        assertThat(tableRouteMapper.getActualName(), is(expectedTableName));
+    }
+}
diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/ignore/BroadcastIgnoreRoutingEngineTest.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/ignore/BroadcastIgnoreRoutingEngineTest.java
new file mode 100644
index 0000000..3c89919
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/ignore/BroadcastIgnoreRoutingEngineTest.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.route.engine.type.ignore;
+
+import org.apache.shardingsphere.broadcast.rule.BroadcastRule;
+import org.apache.shardingsphere.infra.route.context.RouteContext;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.mockito.Mockito.mock;
+
+class BroadcastIgnoreRoutingEngineTest {
+    
+    @Test
+    void assertRoute() {
+        BroadcastIgnoreRoutingEngine engine = new BroadcastIgnoreRoutingEngine();
+        RouteContext routeContext = engine.route(new RouteContext(), mock(BroadcastRule.class));
+        assertTrue(routeContext.getRouteUnits().isEmpty());
+    }
+}
diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/unicast/BroadcastUnicastRoutingEngineTest.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/unicast/BroadcastUnicastRoutingEngineTest.java
new file mode 100644
index 0000000..d956c82
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/route/engine/type/unicast/BroadcastUnicastRoutingEngineTest.java
@@ -0,0 +1,92 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.route.engine.type.unicast;
+
+import org.apache.shardingsphere.broadcast.rule.BroadcastRule;
+import org.apache.shardingsphere.infra.binder.statement.SQLStatementContext;
+import org.apache.shardingsphere.infra.binder.statement.ddl.CreateViewStatementContext;
+import org.apache.shardingsphere.infra.route.context.RouteContext;
+import org.apache.shardingsphere.infra.route.context.RouteMapper;
+import org.apache.shardingsphere.infra.session.connection.ConnectionContext;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
+
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.Collections;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+class BroadcastUnicastRoutingEngineTest {
+    
+    private BroadcastRule broadcastRule;
+    
+    @BeforeEach
+    void setUp() {
+        broadcastRule = mock(BroadcastRule.class);
+        when(broadcastRule.getAvailableDataSourceNames()).thenReturn(Arrays.asList("ds_0", "ds_1"));
+    }
+    
+    @Test
+    void assertRoute() {
+        SQLStatementContext sqlStatementContext = mock(SQLStatementContext.class);
+        Collection<String> logicTables = Collections.singleton("t_address");
+        ConnectionContext connectionContext = mock(ConnectionContext.class);
+        BroadcastUnicastRoutingEngine engine = new BroadcastUnicastRoutingEngine(sqlStatementContext, logicTables, connectionContext);
+        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);
+        assertThat(routeContext.getRouteUnits().size(), is(1));
+        assertTableRouteMapper(routeContext);
+    }
+    
+    @Test
+    void assertRouteWithCreateViewStatementContext() {
+        CreateViewStatementContext sqlStatementContext = mock(CreateViewStatementContext.class);
+        Collection<String> logicTables = Collections.singleton("t_address");
+        ConnectionContext connectionContext = mock(ConnectionContext.class);
+        BroadcastUnicastRoutingEngine engine = new BroadcastUnicastRoutingEngine(sqlStatementContext, logicTables, connectionContext);
+        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);
+        assertThat(routeContext.getRouteUnits().size(), is(1));
+        RouteMapper dataSourceRouteMapper = routeContext.getRouteUnits().iterator().next().getDataSourceMapper();
+        assertThat(dataSourceRouteMapper.getLogicName(), is("ds_0"));
+        assertTableRouteMapper(routeContext);
+    }
+    
+    @Test
+    void assertRouteWithCursorStatement() {
+        CreateViewStatementContext sqlStatementContext = mock(CreateViewStatementContext.class);
+        Collection<String> logicTables = Collections.singleton("t_address");
+        ConnectionContext connectionContext = mock(ConnectionContext.class);
+        BroadcastUnicastRoutingEngine engine = new BroadcastUnicastRoutingEngine(sqlStatementContext, logicTables, connectionContext);
+        RouteContext routeContext = engine.route(new RouteContext(), broadcastRule);
+        assertThat(routeContext.getRouteUnits().size(), is(1));
+        RouteMapper dataSourceRouteMapper = routeContext.getRouteUnits().iterator().next().getDataSourceMapper();
+        assertThat(dataSourceRouteMapper.getLogicName(), is("ds_0"));
+        assertTableRouteMapper(routeContext);
+    }
+    
+    private void assertTableRouteMapper(final RouteContext routeContext) {
+        Collection<RouteMapper> tableRouteMappers = routeContext.getRouteUnits().iterator().next().getTableMappers();
+        assertThat(tableRouteMappers.size(), is(1));
+        RouteMapper tableRouteMapper = tableRouteMappers.iterator().next();
+        assertThat(tableRouteMapper.getLogicName(), is("t_address"));
+        assertThat(tableRouteMapper.getActualName(), is("t_address"));
+    }
+}
diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/rule/builder/BroadcastRuleBuilderTest.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/rule/builder/BroadcastRuleBuilderTest.java
new file mode 100644
index 0000000..d649c2f
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/rule/builder/BroadcastRuleBuilderTest.java
@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.rule.builder;
+
+import org.apache.shardingsphere.broadcast.api.config.BroadcastRuleConfiguration;
+import org.apache.shardingsphere.broadcast.rule.BroadcastRule;
+import org.apache.shardingsphere.infra.instance.InstanceContext;
+import org.apache.shardingsphere.infra.rule.builder.database.DatabaseRuleBuilder;
+import org.apache.shardingsphere.infra.util.spi.type.ordered.OrderedSPILoader;
+import org.junit.jupiter.api.Test;
+
+import java.util.Collections;
+
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.mockito.Mockito.mock;
+
+class BroadcastRuleBuilderTest {
+    
+    @SuppressWarnings({"rawtypes", "unchecked"})
+    @Test
+    void assertBuild() {
+        BroadcastRuleConfiguration ruleConfig = mock(BroadcastRuleConfiguration.class);
+        DatabaseRuleBuilder builder = OrderedSPILoader.getServices(DatabaseRuleBuilder.class, Collections.singleton(ruleConfig)).get(ruleConfig);
+        assertThat(builder.build(ruleConfig, "", Collections.emptyMap(), Collections.emptyList(), mock(InstanceContext.class)), instanceOf(BroadcastRule.class));
+    }
+}
diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/yaml/BroadcastRuleConfigurationYamlIT.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/yaml/BroadcastRuleConfigurationYamlIT.java
new file mode 100644
index 0000000..7ddead9
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/yaml/BroadcastRuleConfigurationYamlIT.java
@@ -0,0 +1,42 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.yaml;
+
+import org.apache.shardingsphere.broadcast.yaml.config.YamlBroadcastRuleConfiguration;
+import org.apache.shardingsphere.infra.yaml.config.pojo.YamlRootConfiguration;
+import org.apache.shardingsphere.test.it.yaml.YamlRuleConfigurationIT;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+
+class BroadcastRuleConfigurationYamlIT extends YamlRuleConfigurationIT {
+    
+    BroadcastRuleConfigurationYamlIT() {
+        super("yaml/broadcast-rule.yaml");
+    }
+    
+    @Override
+    protected void assertYamlRootConfiguration(final YamlRootConfiguration actual) {
+        assertBroadcastRule((YamlBroadcastRuleConfiguration) actual.getRules().iterator().next());
+    }
+    
+    private void assertBroadcastRule(final YamlBroadcastRuleConfiguration actual) {
+        assertThat(actual.getTables().size(), is(1));
+        assertThat(actual.getTables().iterator().next(), is("t_address"));
+    }
+}
diff --git a/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/yaml/swapper/YamlBroadcastRuleConfigurationSwapperTest.java b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/yaml/swapper/YamlBroadcastRuleConfigurationSwapperTest.java
new file mode 100644
index 0000000..eaf0a1a
--- /dev/null
+++ b/features/broadcast/core/src/test/java/org/apache/shardingsphere/broadcast/yaml/swapper/YamlBroadcastRuleConfigurationSwapperTest.java
@@ -0,0 +1,49 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.shardingsphere.broadcast.yaml.swapper;
+
+import org.apache.shardingsphere.broadcast.api.config.BroadcastRuleConfiguration;
+import org.apache.shardingsphere.broadcast.yaml.config.YamlBroadcastRuleConfiguration;
+import org.junit.jupiter.api.Test;
+
+import java.util.Collections;
+
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.MatcherAssert.assertThat;
+
+class YamlBroadcastRuleConfigurationSwapperTest {
+    
+    @Test
+    void assertSwapToYamlConfiguration() {
+        BroadcastRuleConfiguration ruleConfig = new BroadcastRuleConfiguration(Collections.singleton("t_address"));
+        YamlBroadcastRuleConfigurationSwapper swapper = new YamlBroadcastRuleConfigurationSwapper();
+        YamlBroadcastRuleConfiguration yamlRuleConfig = swapper.swapToYamlConfiguration(ruleConfig);
+        assertThat(yamlRuleConfig.getTables().size(), is(1));
+        assertThat(yamlRuleConfig.getTables().iterator().next(), is("t_address"));
+    }
+    
+    @Test
+    void assertSwapToObject() {
+        YamlBroadcastRuleConfiguration yamlRuleConfig = new YamlBroadcastRuleConfiguration();
+        yamlRuleConfig.getTables().add("t_address");
+        YamlBroadcastRuleConfigurationSwapper swapper = new YamlBroadcastRuleConfigurationSwapper();
+        BroadcastRuleConfiguration ruleConfig = swapper.swapToObject(yamlRuleConfig);
+        assertThat(ruleConfig.getTables().size(), is(1));
+        assertThat(ruleConfig.getTables().iterator().next(), is("t_address"));
+    }
+}

diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java
index a53850b..e0f1c70 100644
--- a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java
+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/RulesReaderTest.java
@@ -21,6 +21,7 @@ package org.apache.skywalking.oap.server.core.alarm.provider;
 import org.apache.skywalking.oap.server.core.alarm.provider.dingtalk.DingtalkSettings;
 import org.apache.skywalking.oap.server.core.alarm.provider.feishu.FeishuSettings;
 import org.apache.skywalking.oap.server.core.alarm.provider.grpc.GRPCAlarmSetting;
+import org.apache.skywalking.oap.server.core.alarm.provider.pagerduty.PagerDutySettings;
 import org.apache.skywalking.oap.server.core.alarm.provider.slack.SlackSettings;
 import org.apache.skywalking.oap.server.core.alarm.provider.wechat.WechatSettings;
 import org.junit.Assert;
@@ -33,6 +34,7 @@ import static org.hamcrest.CoreMatchers.is;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertEquals;
 
 public class RulesReaderTest {
     @Test
@@ -96,5 +98,12 @@ public class RulesReaderTest {
         assertThat(feishuSettingsWebhooks.get(0).getSecret(), is("dummysecret"));
         assertThat(feishuSettingsWebhooks.get(1).getUrl(), is("https://open.feishu.cn/open-apis/bot/v2/hook/dummy_token2"));
         assertNull(feishuSettingsWebhooks.get(1).getSecret());
+
+        PagerDutySettings pagerDutySettings = rules.getPagerDutySettings();
+        assertEquals("dummy_text_template", pagerDutySettings.getTextTemplate());
+        List<String> pagerDutyIntegrationKeys = pagerDutySettings.getIntegrationKeys();
+        assertEquals(2, pagerDutyIntegrationKeys.size());
+        assertEquals("dummy_key", pagerDutyIntegrationKeys.get(0));
+        assertEquals("dummy_key2", pagerDutyIntegrationKeys.get(1));
     }
 }
diff --git a/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/pagerduty/PagerDutyHookCallbackTest.java b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/pagerduty/PagerDutyHookCallbackTest.java
new file mode 100644
index 0000000..33822b0
--- /dev/null
+++ b/oap-server/server-alarm-plugin/src/test/java/org/apache/skywalking/oap/server/core/alarm/provider/pagerduty/PagerDutyHookCallbackTest.java
@@ -0,0 +1,74 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ */
+
+package org.apache.skywalking.oap.server.core.alarm.provider.pagerduty;
+
+import org.apache.skywalking.oap.server.core.alarm.AlarmMessage;
+import org.apache.skywalking.oap.server.core.alarm.provider.AlarmRulesWatcher;
+import org.apache.skywalking.oap.server.core.alarm.provider.Rules;
+import org.apache.skywalking.oap.server.core.source.DefaultScopeDefine;
+import org.junit.Ignore;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class PagerDutyHookCallbackTest {
+
+    @Ignore
+    @Test
+    public void testWithRealAccount() {
+        // replace this with your actual integration key(s) and run this test manually
+        List<String> integrationKeys = Arrays.asList(
+                "dummy-integration-key"
+        );
+
+        Rules rules = new Rules();
+        rules.setPagerDutySettings(
+                PagerDutySettings.builder()
+                        .integrationKeys(integrationKeys)
+                        .textTemplate("Apache SkyWalking Alarm: \n %s.")
+                        .build()
+        );
+
+        PagerDutyHookCallback pagerDutyHookCallback = new PagerDutyHookCallback(
+                new AlarmRulesWatcher(rules, null)
+        );
+
+        pagerDutyHookCallback.doAlarm(getMockAlarmMessages());
+
+        // please check your pagerduty account to see if the alarm is sent
+    }
+
+    private List<AlarmMessage> getMockAlarmMessages() {
+        AlarmMessage alarmMessage = new AlarmMessage();
+        alarmMessage.setScopeId(DefaultScopeDefine.SERVICE);
+        alarmMessage.setRuleName("service_resp_time_rule");
+        alarmMessage.setAlarmMessage("alarmMessage with [DefaultScopeDefine.All]");
+
+        AlarmMessage anotherAlarmMessage = new AlarmMessage();
+        anotherAlarmMessage.setScopeId(DefaultScopeDefine.ENDPOINT);
+        anotherAlarmMessage.setRuleName("service_resp_time_rule_2");
+        anotherAlarmMessage.setAlarmMessage("anotherAlarmMessage with [DefaultScopeDefine.Endpoint]");
+
+        return Arrays.asList(
+                alarmMessage,
+                anotherAlarmMessage
+        );
+    }
+}
\ No newline at end of file

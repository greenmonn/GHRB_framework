diff --git a/src/test/java/org/assertj/core/api/Assertions_catchException_Test.java b/src/test/java/org/assertj/core/api/Assertions_catchException_Test.java
new file mode 100644
index 0000000..191dac8
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/Assertions_catchException_Test.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchException;
+import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.mockito.Mockito.mock;
+
+class Assertions_catchException_Test {
+
+  @Test
+  void catchException_should_fail_with_good_message_if_wrong_type() {
+    // GIVEN
+    ThrowingCallable code = () -> catchException(raisingThrowable("boom!!"));
+    // WHEN
+    AssertionError assertionError = expectAssertionError(code);
+    // THEN
+    assertThat(assertionError).hasMessageContainingAll(Exception.class.getName(), Throwable.class.getName());
+  }
+
+  @Test
+  void catchException_should_succeed_and_return_actual_instance_with_correct_class() {
+    // GIVEN
+    final Exception expected = new Exception("boom!!");
+    // WHEN
+    Exception actual = catchException(codeThrowing(expected));
+    // THEN
+    then(actual).isSameAs(expected);
+  }
+
+  @Test
+  void catchException_should_succeed_and_return_null_if_no_exception_thrown() {
+    // WHEN
+    Exception actual = catchException(() -> {});
+    // THEN
+    then(actual).isNull();
+  }
+
+  @Test
+  void catchException_should_catch_mocked_throwable() {
+    // GIVEN
+    Exception exception = mock(Exception.class);
+    // WHEN
+    Throwable actual = catchException(codeThrowing(exception));
+    // THEN
+    then(actual).isSameAs(exception);
+  }
+
+  static ThrowingCallable raisingThrowable(final String reason) {
+    return codeThrowing(new Throwable(reason));
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/Assertions_catchIOException_Test.java b/src/test/java/org/assertj/core/api/Assertions_catchIOException_Test.java
new file mode 100644
index 0000000..8c0e91a
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/Assertions_catchIOException_Test.java
@@ -0,0 +1,71 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.Test;
+
+import java.io.IOException;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchIOException;
+import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.mockito.Mockito.mock;
+
+class Assertions_catchIOException_Test {
+
+  @Test
+  void catchIOException_should_fail_with_good_message_if_wrong_type() {
+    // GIVEN
+    ThrowingCallable code = () -> catchIOException(raisingException("boom!!"));
+    // WHEN
+    AssertionError assertionError = expectAssertionError(code);
+    // THEN
+    assertThat(assertionError).hasMessageContainingAll(Exception.class.getName(), IOException.class.getName());
+  }
+
+  @Test
+  void catchIOException_should_succeed_and_return_actual_instance_with_correct_class() {
+    // GIVEN
+    final IOException expected = new IOException("boom!!");
+    // WHEN
+    IOException actual = catchIOException(codeThrowing(expected));
+    // THEN
+    then(actual).isSameAs(expected);
+  }
+
+  @Test
+  void catchIOException_should_succeed_and_return_null_if_no_exception_thrown() {
+    // WHEN
+    IOException actual = catchIOException(() -> {});
+    // THEN
+    then(actual).isNull();
+  }
+
+  @Test
+  void catchIOException_should_catch_mocked_throwable() {
+    // GIVEN
+    IOException exception = mock(IOException.class);
+    // WHEN
+    Throwable actual = catchIOException(codeThrowing(exception));
+    // THEN
+    then(actual).isSameAs(exception);
+  }
+
+  static ThrowingCallable raisingException(final String reason) {
+    return codeThrowing(new Exception(reason));
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/Assertions_catchIllegalArgumentException_Test.java b/src/test/java/org/assertj/core/api/Assertions_catchIllegalArgumentException_Test.java
new file mode 100644
index 0000000..79d1398
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/Assertions_catchIllegalArgumentException_Test.java
@@ -0,0 +1,71 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.Test;
+
+import java.io.IOException;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchIllegalArgumentException;
+import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.mockito.Mockito.mock;
+
+class Assertions_catchIllegalArgumentException_Test {
+
+  @Test
+  void catchIllegalArgumentException_should_fail_with_good_message_if_wrong_type() {
+    // GIVEN
+    ThrowingCallable code = () -> catchIllegalArgumentException(raisingException("boom!!"));
+    // WHEN
+    AssertionError assertionError = expectAssertionError(code);
+    // THEN
+    assertThat(assertionError).hasMessageContainingAll(Exception.class.getName(), IllegalArgumentException.class.getName());
+  }
+
+  @Test
+  void catchIllegalArgumentException_should_succeed_and_return_actual_instance_with_correct_class() {
+    // GIVEN
+    final IllegalArgumentException expected = new IllegalArgumentException("boom!!");
+    // WHEN
+    IllegalArgumentException actual = catchIllegalArgumentException(codeThrowing(expected));
+    // THEN
+    then(actual).isSameAs(expected);
+  }
+
+  @Test
+  void catchIllegalArgumentException_should_succeed_and_return_null_if_no_exception_thrown() {
+    // WHEN
+    IllegalArgumentException actual = catchIllegalArgumentException(() -> {});
+    // THEN
+    then(actual).isNull();
+  }
+
+  @Test
+  void catchIllegalArgumentException_should_catch_mocked_throwable() {
+    // GIVEN
+    IllegalArgumentException exception = mock(IllegalArgumentException.class);
+    // WHEN
+    Throwable actual = catchIllegalArgumentException(codeThrowing(exception));
+    // THEN
+    then(actual).isSameAs(exception);
+  }
+
+  static ThrowingCallable raisingException(final String reason) {
+    return codeThrowing(new Exception(reason));
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/Assertions_catchIllegalStateException_Test.java b/src/test/java/org/assertj/core/api/Assertions_catchIllegalStateException_Test.java
new file mode 100644
index 0000000..6ffaeb0
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/Assertions_catchIllegalStateException_Test.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchIllegalStateException;
+import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.mockito.Mockito.mock;
+
+class Assertions_catchIllegalStateException_Test {
+
+  @Test
+  void catchIllegalStateException_should_fail_with_good_message_if_wrong_type() {
+    // GIVEN
+    ThrowingCallable code = () -> catchIllegalStateException(raisingException("boom!!"));
+    // WHEN
+    AssertionError assertionError = expectAssertionError(code);
+    // THEN
+    assertThat(assertionError).hasMessageContainingAll(IllegalStateException.class.getName(), Exception.class.getName());
+  }
+
+  @Test
+  void catchIllegalStateException_should_succeed_and_return_actual_instance_with_correct_class() {
+    // GIVEN
+    final IllegalStateException expected = new IllegalStateException("boom!!");
+    // WHEN
+    IllegalStateException actual = catchIllegalStateException(codeThrowing(expected));
+    // THEN
+    then(actual).isSameAs(expected);
+  }
+
+  @Test
+  void catchIllegalStateException_should_succeed_and_return_null_if_no_exception_thrown() {
+    // WHEN
+    IllegalStateException actual = catchIllegalStateException(() -> {});
+    // THEN
+    then(actual).isNull();
+  }
+
+  @Test
+  void catchIllegalStateException_should_catch_mocked_throwable() {
+    // GIVEN
+    IllegalStateException illegalStateException = mock(IllegalStateException.class);
+    // WHEN
+    Throwable actual = catchIllegalStateException(codeThrowing(illegalStateException));
+    // THEN
+    then(actual).isSameAs(illegalStateException);
+  }
+
+  static ThrowingCallable raisingException(final String reason) {
+    return codeThrowing(new Exception(reason));
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/Assertions_catchIndexOutOfBoundsException_Test.java b/src/test/java/org/assertj/core/api/Assertions_catchIndexOutOfBoundsException_Test.java
new file mode 100644
index 0000000..9702844
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/Assertions_catchIndexOutOfBoundsException_Test.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchIndexOutOfBoundsException;
+import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.mockito.Mockito.mock;
+
+class Assertions_catchIndexOutOfBoundsException_Test {
+
+  @Test
+  void catchIndexOutOfBoundsException_should_fail_with_good_message_if_wrong_type() {
+    // GIVEN
+    ThrowingCallable code = () -> catchIndexOutOfBoundsException(raisingException("boom!!"));
+    // WHEN
+    AssertionError assertionError = expectAssertionError(code);
+    // THEN
+    assertThat(assertionError).hasMessageContainingAll(IndexOutOfBoundsException.class.getName(), Exception.class.getName());
+  }
+
+  @Test
+  void catchIndexOutOfBoundsException_should_succeed_and_return_actual_instance_with_correct_class() {
+    // GIVEN
+    final IndexOutOfBoundsException expected = new IndexOutOfBoundsException("boom!!");
+    // WHEN
+    IndexOutOfBoundsException actual = catchIndexOutOfBoundsException(codeThrowing(expected));
+    // THEN
+    then(actual).isSameAs(expected);
+  }
+
+  @Test
+  void catchIndexOutOfBoundsException_should_succeed_and_return_null_if_no_exception_thrown() {
+    // WHEN
+    IndexOutOfBoundsException actual = catchIndexOutOfBoundsException(() -> {});
+    // THEN
+    then(actual).isNull();
+  }
+
+  @Test
+  void catchIndexOutOfBoundsException_should_catch_mocked_throwable() {
+    // GIVEN
+    IndexOutOfBoundsException indexOutOfBoundsException = mock(IndexOutOfBoundsException.class);
+    // WHEN
+    Throwable actual = catchIndexOutOfBoundsException(codeThrowing(indexOutOfBoundsException));
+    // THEN
+    then(actual).isSameAs(indexOutOfBoundsException);
+  }
+
+  static ThrowingCallable raisingException(final String reason) {
+    return codeThrowing(new Exception(reason));
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/Assertions_catchNullPointerException_Test.java b/src/test/java/org/assertj/core/api/Assertions_catchNullPointerException_Test.java
new file mode 100644
index 0000000..48806e8
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/Assertions_catchNullPointerException_Test.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.Test;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchNullPointerException;
+import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.mockito.Mockito.mock;
+
+class Assertions_catchNullPointerException_Test {
+
+  @Test
+  void catchNullPointerException_should_fail_with_good_message_if_wrong_type() {
+    // GIVEN
+    ThrowingCallable code = () -> catchNullPointerException(raisingException("boom!!"));
+    // WHEN
+    AssertionError assertionError = expectAssertionError(code);
+    // THEN
+    assertThat(assertionError).hasMessageContainingAll(Exception.class.getName(), NullPointerException.class.getName());
+  }
+
+  @Test
+  void catchNullPointerException_should_succeed_and_return_actual_instance_with_correct_class() {
+    // GIVEN
+    final NullPointerException expected = new NullPointerException("boom!!");
+    // WHEN
+    NullPointerException actual = catchNullPointerException(codeThrowing(expected));
+    // THEN
+    then(actual).isSameAs(expected);
+  }
+
+  @Test
+  void catchNullPointerException_should_succeed_and_return_null_if_no_exception_thrown() {
+    // WHEN
+    NullPointerException actual = catchNullPointerException(() -> {});
+    // THEN
+    then(actual).isNull();
+  }
+
+  @Test
+  void catchNullPointerException_should_catch_mocked_throwable() {
+    // GIVEN
+    NullPointerException exception = mock(NullPointerException.class);
+    // WHEN
+    Throwable actual = catchNullPointerException(codeThrowing(exception));
+    // THEN
+    then(actual).isSameAs(exception);
+  }
+
+  static ThrowingCallable raisingException(final String reason) {
+    return codeThrowing(new Exception(reason));
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/Assertions_catchReflectiveOperationException_Test.java b/src/test/java/org/assertj/core/api/Assertions_catchReflectiveOperationException_Test.java
new file mode 100644
index 0000000..ba03ae4
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/Assertions_catchReflectiveOperationException_Test.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchReflectiveOperationException;
+import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.mockito.Mockito.mock;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.Test;
+
+class Assertions_catchReflectiveOperationException_Test {
+
+  @Test
+  void catchReflectiveOperationException_should_fail_with_good_message_if_wrong_type() {
+    // GIVEN
+    ThrowingCallable code = () -> catchReflectiveOperationException(raisingException("boom!!"));
+    // WHEN
+    AssertionError assertionError = expectAssertionError(code);
+    // THEN
+    assertThat(assertionError).hasMessageContainingAll(ReflectiveOperationException.class.getName(), Exception.class.getName());
+  }
+
+  @Test
+  void catchReflectiveOperationException_should_succeed_and_return_actual_instance_with_correct_class() {
+    // GIVEN
+    final ReflectiveOperationException expected = new ReflectiveOperationException("boom!!");
+    // WHEN
+    ReflectiveOperationException actual = catchReflectiveOperationException(codeThrowing(expected));
+    // THEN
+    then(actual).isSameAs(expected);
+  }
+
+  @Test
+  void catchReflectiveOperationException_should_succeed_and_return_null_if_no_exception_thrown() {
+    // WHEN
+    ReflectiveOperationException actual = catchReflectiveOperationException(() -> {});
+    // THEN
+    then(actual).isNull();
+  }
+
+  @Test
+  void catchReflectiveOperationException_should_catch_mocked_throwable() {
+    // GIVEN
+    ReflectiveOperationException exception = mock(ReflectiveOperationException.class);
+    // WHEN
+    Throwable actual = catchReflectiveOperationException(codeThrowing(exception));
+    // THEN
+    then(actual).isSameAs(exception);
+  }
+
+  static ThrowingCallable raisingException(final String reason) {
+    return codeThrowing(new Exception(reason));
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/Assertions_catchRuntimeException_Test.java b/src/test/java/org/assertj/core/api/Assertions_catchRuntimeException_Test.java
new file mode 100644
index 0000000..dd2c78b
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/Assertions_catchRuntimeException_Test.java
@@ -0,0 +1,67 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import static org.assertj.core.api.Assertions.*;
+import static org.assertj.core.api.Assertions_catchThrowable_Test.codeThrowing;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.mockito.Mockito.mock;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.api.Test;
+
+class Assertions_catchRuntimeException_Test {
+
+  @Test
+  void catchRuntimeException_should_fail_with_good_message_if_wrong_type() {
+    // GIVEN
+    ThrowingCallable code = () -> catchRuntimeException(raisingException("boom!!"));
+    // WHEN
+    AssertionError assertionError = expectAssertionError(code);
+    // THEN
+    assertThat(assertionError).hasMessageContainingAll(RuntimeException.class.getName(), Exception.class.getName());
+  }
+
+  @Test
+  void catchRuntimeException_should_succeed_and_return_actual_instance_with_correct_class() {
+    // GIVEN
+    final RuntimeException expected = new RuntimeException("boom!!");
+    // WHEN
+    RuntimeException actual = catchRuntimeException(codeThrowing(expected));
+    // THEN
+    then(actual).isSameAs(expected);
+  }
+
+  @Test
+  void catchRuntimeException_should_succeed_and_return_null_if_no_exception_thrown() {
+    // WHEN
+    RuntimeException actual = catchRuntimeException(() -> {});
+    // THEN
+    then(actual).isNull();
+  }
+
+  @Test
+  void catchRuntimeException_should_catch_mocked_throwable() {
+    // GIVEN
+    RuntimeException runtimeException = mock(RuntimeException.class);
+    // WHEN
+    Throwable actual = catchRuntimeException(codeThrowing(runtimeException));
+    // THEN
+    then(actual).isSameAs(runtimeException);
+  }
+
+  static ThrowingCallable raisingException(final String reason) {
+    return codeThrowing(new Exception(reason));
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/EntryPointAssertions_catchException_Test.java b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchException_Test.java
new file mode 100644
index 0000000..ad7103c
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchException_Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.function.Function;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class EntryPointAssertions_catchException_Test extends EntryPointAssertionsBaseTest {
+
+  private static final Exception EXCEPTION = new Exception();
+
+  @ParameterizedTest
+  @MethodSource("catchExceptions")
+  void should_catch_Exception(Function<ThrowingCallable, Exception> catchException) {
+    // GIVEN
+    ThrowingCallable throwingCallable = () -> {
+      throw EXCEPTION;
+    };
+    // WHEN
+    Exception throwable = catchException.apply(throwingCallable);
+    // THEN
+    then(throwable).isSameAs(EXCEPTION);
+  }
+
+  private static Stream<Function<ThrowingCallable, Exception>> catchExceptions() {
+    return Stream.of(Assertions::catchException, BDDAssertions::catchException, withAssertions::catchException);
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIOException_Test.java b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIOException_Test.java
new file mode 100644
index 0000000..f80a892
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIOException_Test.java
@@ -0,0 +1,46 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.io.IOException;
+import java.util.function.Function;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class EntryPointAssertions_catchIOException_Test extends EntryPointAssertionsBaseTest {
+
+  private static final IOException IO_EXCEPTION = new IOException();
+
+  @ParameterizedTest
+  @MethodSource("catchIOExceptions")
+  void should_catch_IOException(Function<ThrowingCallable, IOException> catchIOException) {
+    // GIVEN
+    ThrowingCallable throwingCallable = () -> {
+      throw IO_EXCEPTION;
+    };
+    // WHEN
+    IOException throwable = catchIOException.apply(throwingCallable);
+    // THEN
+    then(throwable).isSameAs(IO_EXCEPTION);
+  }
+
+  private static Stream<Function<ThrowingCallable, IOException>> catchIOExceptions() {
+    return Stream.of(Assertions::catchIOException, BDDAssertions::catchIOException, withAssertions::catchIOException);
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIllegalArgumentException_Test.java b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIllegalArgumentException_Test.java
new file mode 100644
index 0000000..25566a3
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIllegalArgumentException_Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.function.Function;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class EntryPointAssertions_catchIllegalArgumentException_Test extends EntryPointAssertionsBaseTest {
+
+  private static final IllegalArgumentException ILLEGAL_ARGUMENT_EXCEPTION = new IllegalArgumentException();
+
+  @ParameterizedTest
+  @MethodSource("catchIllegalArgumentExceptions")
+  void should_catch_IllegalArgumentException(Function<ThrowingCallable, IllegalArgumentException> catchIllegalArgumentExceptions) {
+    // GIVEN
+    ThrowingCallable throwingCallable = () -> {
+      throw ILLEGAL_ARGUMENT_EXCEPTION;
+    };
+    // WHEN
+    IllegalArgumentException throwable = catchIllegalArgumentExceptions.apply(throwingCallable);
+    // THEN
+    then(throwable).isSameAs(ILLEGAL_ARGUMENT_EXCEPTION);
+  }
+
+  private static Stream<Function<ThrowingCallable, IllegalArgumentException>> catchIllegalArgumentExceptions() {
+    return Stream.of(Assertions::catchIllegalArgumentException, BDDAssertions::catchIllegalArgumentException, withAssertions::catchIllegalArgumentException);
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIllegalStateException_Test.java b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIllegalStateException_Test.java
new file mode 100644
index 0000000..9026e36
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIllegalStateException_Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.function.Function;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class EntryPointAssertions_catchIllegalStateException_Test extends EntryPointAssertionsBaseTest {
+
+  private static final IllegalStateException ILLEGAL_STATE_EXCEPTION = new IllegalStateException();
+
+  @ParameterizedTest
+  @MethodSource("catchIllegalStateExceptions")
+  void should_catch_IllegalStateException(Function<ThrowingCallable, IllegalStateException> catchIllegalStateException) {
+    // GIVEN
+    ThrowingCallable throwingCallable = () -> {
+      throw ILLEGAL_STATE_EXCEPTION;
+    };
+    // WHEN
+    IllegalStateException throwable = catchIllegalStateException.apply(throwingCallable);
+    // THEN
+    then(throwable).isSameAs(ILLEGAL_STATE_EXCEPTION);
+  }
+
+  private static Stream<Function<ThrowingCallable, IllegalStateException>> catchIllegalStateExceptions() {
+    return Stream.of(Assertions::catchIllegalStateException, BDDAssertions::catchIllegalStateException, withAssertions::catchIllegalStateException);
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIndexOutOfBoundsException_Test.java b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIndexOutOfBoundsException_Test.java
new file mode 100644
index 0000000..f2fb0bf
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchIndexOutOfBoundsException_Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.function.Function;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class EntryPointAssertions_catchIndexOutOfBoundsException_Test extends EntryPointAssertionsBaseTest {
+
+  private static final IndexOutOfBoundsException INDEX_OUT_OF_BOUNDS_EXCEPTION = new IndexOutOfBoundsException();
+
+  @ParameterizedTest
+  @MethodSource("catchIndexOutOfBoundsExceptions")
+  void should_catch_IndexOutOfBoundsException(Function<ThrowingCallable, IndexOutOfBoundsException> catchIndexOutOfBoundsException) {
+    // GIVEN
+    ThrowingCallable throwingCallable = () -> {
+      throw INDEX_OUT_OF_BOUNDS_EXCEPTION;
+    };
+    // WHEN
+    IndexOutOfBoundsException throwable = catchIndexOutOfBoundsException.apply(throwingCallable);
+    // THEN
+    then(throwable).isSameAs(INDEX_OUT_OF_BOUNDS_EXCEPTION);
+  }
+
+  private static Stream<Function<ThrowingCallable, IndexOutOfBoundsException>> catchIndexOutOfBoundsExceptions() {
+    return Stream.of(Assertions::catchIndexOutOfBoundsException, BDDAssertions::catchIndexOutOfBoundsException, withAssertions::catchIndexOutOfBoundsException);
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/EntryPointAssertions_catchNullPointerException_Test.java b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchNullPointerException_Test.java
new file mode 100644
index 0000000..0848f11
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchNullPointerException_Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.function.Function;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class EntryPointAssertions_catchNullPointerException_Test extends EntryPointAssertionsBaseTest {
+
+  private static final NullPointerException NULL_POINTER_EXCEPTION = new NullPointerException();
+
+  @ParameterizedTest
+  @MethodSource("catchNullPointerExceptions")
+  void should_catch_NullPointerException(Function<ThrowingCallable, NullPointerException> catchNullPointerException) {
+    // GIVEN
+    ThrowingCallable throwingCallable = () -> {
+      throw NULL_POINTER_EXCEPTION;
+    };
+    // WHEN
+    NullPointerException throwable = catchNullPointerException.apply(throwingCallable);
+    // THEN
+    then(throwable).isSameAs(NULL_POINTER_EXCEPTION);
+  }
+
+  private static Stream<Function<ThrowingCallable, NullPointerException>> catchNullPointerExceptions() {
+    return Stream.of(Assertions::catchNullPointerException, BDDAssertions::catchNullPointerException, withAssertions::catchNullPointerException);
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/EntryPointAssertions_catchReflectiveOperationException_Test.java b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchReflectiveOperationException_Test.java
new file mode 100644
index 0000000..335f439
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchReflectiveOperationException_Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.function.Function;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class EntryPointAssertions_catchReflectiveOperationException_Test extends EntryPointAssertionsBaseTest {
+
+  private static final ReflectiveOperationException REFLECTIVE_OPERATION_EXCEPTION = new ReflectiveOperationException();
+
+  @ParameterizedTest
+  @MethodSource("catchReflectiveOperationExceptions")
+  void should_catch_ReflectiveOperationException(Function<ThrowingCallable, ReflectiveOperationException> catchReflectiveOperationExceptions) {
+    // GIVEN
+    ThrowingCallable throwingCallable = () -> {
+      throw REFLECTIVE_OPERATION_EXCEPTION;
+    };
+    // WHEN
+    ReflectiveOperationException throwable = catchReflectiveOperationExceptions.apply(throwingCallable);
+    // THEN
+    then(throwable).isSameAs(REFLECTIVE_OPERATION_EXCEPTION);
+  }
+
+  private static Stream<Function<ThrowingCallable, ReflectiveOperationException>> catchReflectiveOperationExceptions() {
+    return Stream.of(Assertions::catchReflectiveOperationException, BDDAssertions::catchReflectiveOperationException, withAssertions::catchReflectiveOperationException);
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/api/EntryPointAssertions_catchRuntimeException_Test.java b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchRuntimeException_Test.java
new file mode 100644
index 0000000..f001150
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/EntryPointAssertions_catchRuntimeException_Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2021 the original author or authors.
+ */
+package org.assertj.core.api;
+
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.function.Function;
+import java.util.stream.Stream;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+class EntryPointAssertions_catchRuntimeException_Test extends EntryPointAssertionsBaseTest {
+
+  private static final RuntimeException RUNTIME_EXCEPTION = new RuntimeException();
+
+  @ParameterizedTest
+  @MethodSource("catchRuntimeExceptions")
+  void should_catch_RuntimeException(Function<ThrowingCallable, RuntimeException> catchRuntimeException) {
+    // GIVEN
+    ThrowingCallable throwingCallable = () -> {
+      throw RUNTIME_EXCEPTION;
+    };
+    // WHEN
+    RuntimeException throwable = catchRuntimeException.apply(throwingCallable);
+    // THEN
+    then(throwable).isSameAs(RUNTIME_EXCEPTION);
+  }
+
+  private static Stream<Function<ThrowingCallable, RuntimeException>> catchRuntimeExceptions() {
+    return Stream.of(Assertions::catchRuntimeException, BDDAssertions::catchRuntimeException, withAssertions::catchRuntimeException);
+  }
+
+}

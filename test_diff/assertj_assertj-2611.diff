diff --git a/src/test/java/org/assertj/core/api/classes/ClassAssert_isAssignableTo_Test.java b/src/test/java/org/assertj/core/api/classes/ClassAssert_isAssignableTo_Test.java
new file mode 100644
index 0000000..2a675e1
--- /dev/null
+++ b/src/test/java/org/assertj/core/api/classes/ClassAssert_isAssignableTo_Test.java
@@ -0,0 +1,79 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.api.classes;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.catchNullPointerException;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeAssignableTo.shouldBeAssignableTo;
+import static org.assertj.core.error.ShouldNotBeNull.shouldNotBeNull;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.CsvSource;
+
+/**
+ * @author Vikram Nithyanandam
+ * @author Jessica Hamilton
+ */
+class ClassAssert_isAssignableTo_Test {
+
+  @Test
+  void should_fail_if_other_is_null() {
+    // GIVEN
+    Class<?> actual = ArrayList.class;
+    Class<?> other = null;
+    // WHEN
+    NullPointerException exception = catchNullPointerException(() -> assertThat(actual).isAssignableTo(other));
+    // THEN
+    then(exception).hasMessage(shouldNotBeNull("other").create());
+  }
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    Class<?> actual = null;
+    Class<?> other = List.class;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isAssignableTo(other));
+    // THEN
+    then(assertionError).hasMessage(shouldNotBeNull().create());
+  }
+
+  @ParameterizedTest
+  @CsvSource({
+      "java.util.List, java.util.ArrayList",
+      "int, java.lang.Object"
+  })
+  void should_fail_if_actual_is_not_assignable_to_other(Class<?> actual, Class<?> other) {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isAssignableTo(other));
+    // THEN
+    then(assertionError).hasMessage(shouldBeAssignableTo(actual, other).create());
+  }
+
+  @ParameterizedTest
+  @CsvSource({
+      "java.util.ArrayList, java.util.List",
+      "int, int"
+  })
+  void should_pass_if_actual_is_assignable_to_other(Class<?> actual, Class<?> other) {
+    // WHEN/THEN
+    assertThat(actual).isAssignableTo(other);
+  }
+
+}
diff --git a/src/test/java/org/assertj/core/error/ShouldBeAssignableTo_create_Test.java b/src/test/java/org/assertj/core/error/ShouldBeAssignableTo_create_Test.java
new file mode 100644
index 0000000..0eb71c6
--- /dev/null
+++ b/src/test/java/org/assertj/core/error/ShouldBeAssignableTo_create_Test.java
@@ -0,0 +1,45 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import static java.lang.String.format;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeAssignableTo.shouldBeAssignableTo;
+import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import org.assertj.core.description.TextDescription;
+import org.junit.jupiter.api.Test;
+
+/**
+ * @author Jessica Hamilton
+ */
+class ShouldBeAssignableTo_create_Test {
+
+  @Test
+  void should_create_error_message() {
+    // GIVEN
+    ErrorMessageFactory factory = shouldBeAssignableTo(List.class, ArrayList.class);
+    // WHEN
+    String message = factory.create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %n"
+                                   + "Expecting%n"
+                                   + "  java.util.List%n"
+                                   + "to be assignable to:%n"
+                                   + "  java.util.ArrayList"));
+  }
+
+}

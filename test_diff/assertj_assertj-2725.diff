diff --git a/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_doesNotReturn_Test.java b/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_doesNotReturn_Test.java
index ab12409..94bd861 100644
--- a/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_doesNotReturn_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_doesNotReturn_Test.java
@@ -12,14 +12,18 @@
  */
 package org.assertj.core.api.object;
 
+import static java.lang.String.CASE_INSENSITIVE_ORDER;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
 import static org.assertj.core.api.Assertions.from;
 import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldNotBeEqual.shouldNotBeEqual;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
 import static org.mockito.Mockito.verify;
 
 import org.assertj.core.api.ObjectAssert;
 import org.assertj.core.api.ObjectAssertBaseTest;
+import org.assertj.core.internal.ComparatorBasedComparisonStrategy;
 import org.assertj.core.test.Jedi;
 import org.junit.jupiter.api.Test;
 
@@ -53,4 +57,17 @@ class ObjectAssert_doesNotReturn_Test extends ObjectAssertBaseTest {
                     .doesNotReturn("Luke", Jedi::getName);
   }
 
+  @Test
+  void should_honor_custom_type_comparator() {
+    // GIVEN
+    Jedi yoda = new Jedi("Yoda", "Green");
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(yoda).usingComparatorForType(CASE_INSENSITIVE_ORDER,
+                                                                                                       String.class)
+                                                                               .doesNotReturn("YODA", from(Jedi::getName)));
+    // THEN
+    then(assertionError).hasMessage(shouldNotBeEqual("Yoda", "YODA",
+                                                     new ComparatorBasedComparisonStrategy(CASE_INSENSITIVE_ORDER)).create());
+  }
+
 }
diff --git a/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_Function_Test.java b/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_Function_Test.java
index 263276c..6486521 100644
--- a/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_Function_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_Function_Test.java
@@ -115,12 +115,12 @@ class ObjectAssert_extracting_with_Function_Test implements NavigationMethodBase
   }
 
   private static TypeComparators comparatorsByTypeOf(AbstractObjectAssert<?, ?> assertion) {
-    return (TypeComparators) PropertyOrFieldSupport.EXTRACTION.getValueOf("comparatorByType", assertion);
+    return (TypeComparators) PropertyOrFieldSupport.EXTRACTION.getValueOf("comparatorsByType", assertion);
   }
 
   @SuppressWarnings("unchecked")
   private static Map<String, Comparator<?>> comparatorByPropertyOrFieldOf(AbstractObjectAssert<?, ?> assertion) {
-    return (Map<String, Comparator<?>>) PropertyOrFieldSupport.EXTRACTION.getValueOf("comparatorByPropertyOrField", assertion);
+    return (Map<String, Comparator<?>>) PropertyOrFieldSupport.EXTRACTION.getValueOf("comparatorsByPropertyOrField", assertion);
   }
 
   @Override
diff --git a/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_returns_Test.java b/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_returns_Test.java
index 8bba140..23b3c3a 100644
--- a/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_returns_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_returns_Test.java
@@ -12,6 +12,7 @@
  */
 package org.assertj.core.api.object;
 
+import static java.lang.String.CASE_INSENSITIVE_ORDER;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.catchThrowable;
 import static org.assertj.core.api.Assertions.from;
@@ -56,4 +57,13 @@ class ObjectAssert_returns_Test extends ObjectAssertBaseTest {
                     .returns("Yoda", Jedi::getName);
   }
 
+  @Test
+  void should_honor_custom_type_comparator() {
+    // GIVEN
+    Jedi yoda = new Jedi("Yoda", "Green");
+    // WHEN/THEN
+    assertThat(yoda).usingComparatorForType(CASE_INSENSITIVE_ORDER, String.class)
+                    .returns("YODA", from(Jedi::getName));
+  }
+
 }

diff --git a/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isASCII_Test.java b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isASCII_Test.java
new file mode 100644
index 0000000..19e71e8
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isASCII_Test.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.api.charsequence;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeASCII.shouldBeASCII;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
+
+class CharSequenceAssert_isASCII_Test {
+  @ParameterizedTest
+  @ValueSource(strings = { "@", "abc", "foo", "Foo", "Foo123", "z", "Z", "1", "5 > 3" })
+  void should_pass_when_actual_is_ASCII(CharSequence actual) {
+    assertThat(actual).isASCII();
+  }
+
+  @ParameterizedTest
+  @ValueSource(strings = { "½", "§", "©", "«abc»", "" })
+  void should_fail_if_actual_is_not_ASCII(CharSequence actual) {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isASCII());
+    // THEN
+    then(assertionError).hasMessage(shouldBeASCII(actual).create());
+  }
+
+  @Test
+  void should_fail_when_actual_is_null() {
+    // GIVEN
+    CharSequence actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isASCII());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isAlphabetic_Test.java b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isAlphabetic_Test.java
new file mode 100644
index 0000000..119cbe1
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isAlphabetic_Test.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.api.charsequence;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeAlphabetic.shouldBeAlphabetic;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
+
+class CharSequenceAssert_isAlphabetic_Test {
+
+  @ParameterizedTest
+  @ValueSource(strings = { "abc", "foo", "Foo", "z", "Z" })
+  void should_pass_when_actual_is_alphabetic(CharSequence actual) {
+    assertThat(actual).isAlphabetic();
+  }
+
+  @ParameterizedTest
+  @ValueSource(strings = { "@", "abc#", "123", "abc ", " ", "" })
+  void should_fail_if_actual_is_not_alphabetic(CharSequence actual) {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isAlphabetic());
+    // THEN
+    then(assertionError).hasMessage(shouldBeAlphabetic(actual).create());
+  }
+
+  @Test
+  void should_fail_when_actual_is_null() {
+    // GIVEN
+    CharSequence actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isAlphabetic());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isAlphanumeric_Test.java b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isAlphanumeric_Test.java
new file mode 100644
index 0000000..9048bed
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isAlphanumeric_Test.java
@@ -0,0 +1,50 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.api.charsequence;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeAlphanumeric.shouldBeAlphanumeric;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
+
+class CharSequenceAssert_isAlphanumeric_Test {
+  @ParameterizedTest
+  @ValueSource(strings = { "abc", "foo", "Foo", "Foo123", "z", "Z", "1", "5ZxJKL8564dgrr65g" })
+  void should_pass_when_actual_is_alphanumeric(CharSequence actual) {
+    assertThat(actual).isAlphanumeric();
+  }
+
+  @ParameterizedTest
+  @ValueSource(strings = { "@", "abc#", "5#", " 123", "abc ", " ", "" })
+  void should_fail_if_actual_is_not_alphanumeric(CharSequence actual) {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isAlphanumeric());
+    // THEN
+    then(assertionError).hasMessage(shouldBeAlphanumeric(actual).create());
+  }
+
+  @Test
+  void should_fail_when_actual_is_null() {
+    // GIVEN
+    CharSequence actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isAlphanumeric());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isHexadecimal_Test.java b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isHexadecimal_Test.java
new file mode 100644
index 0000000..37333ac
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isHexadecimal_Test.java
@@ -0,0 +1,51 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.api.charsequence;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeHexadecimal.shouldBeHexadecimal;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
+
+class CharSequenceAssert_isHexadecimal_Test {
+  @ParameterizedTest
+  @ValueSource(strings = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F", "a", "b", "c", "d", "e",
+      "f", "FF" })
+  void should_pass_when_actual_is_hexadecimal(CharSequence actual) {
+    assertThat(actual).isHexadecimal();
+  }
+
+  @ParameterizedTest
+  @ValueSource(strings = { "g", "§", "1.2", "" })
+  void should_fail_if_actual_is_not_hexadecimal(CharSequence actual) {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isHexadecimal());
+    // THEN
+    then(assertionError).hasMessage(shouldBeHexadecimal(actual).create());
+  }
+
+  @Test
+  void should_fail_when_actual_is_null() {
+    // GIVEN
+    CharSequence actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isHexadecimal());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isPrintable_Test.java b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isPrintable_Test.java
new file mode 100644
index 0000000..b1c58b8
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isPrintable_Test.java
@@ -0,0 +1,53 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.api.charsequence;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBePrintable.shouldBePrintable;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
+
+class CharSequenceAssert_isPrintable_Test {
+
+  @ParameterizedTest
+  @ValueSource(strings = { "abc", "foo", "foo123 ", " ", "!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".",
+      "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~" })
+  void should_pass_when_actual_is_printable(CharSequence actual) {
+    assertThat(actual).isPrintable();
+  }
+
+  @ParameterizedTest
+  @ValueSource(strings = { "\t", "\n", "½", "§", "©", "«abc»", "" })
+  void should_fail_if_actual_is_not_printable(CharSequence actual) {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isPrintable());
+    // THEN
+    then(assertionError).hasMessage(shouldBePrintable(actual).create());
+  }
+
+  @Test
+  void should_fail_when_actual_is_null() {
+    // GIVEN
+    CharSequence actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isPrintable());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isVisible_Test.java b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isVisible_Test.java
new file mode 100644
index 0000000..f8df779
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isVisible_Test.java
@@ -0,0 +1,53 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.api.charsequence;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeVisible.shouldBeVisible;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.ValueSource;
+
+class CharSequenceAssert_isVisible_Test {
+  @ParameterizedTest
+  @ValueSource(strings = { "abc", "foo", "foo123", "!", "\"", "#", "$", "%", "&", "'", "(", ")", "*", "+", ",", "-", ".",
+      "/", ":", ";", "<", "=", ">", "?", "@", "[", "\\", "]", "^", "_", "`", "{", "|", "}", "~" })
+
+  void should_pass_when_actual_is_visible(CharSequence actual) {
+    assertThat(actual).isVisible();
+  }
+
+  @ParameterizedTest
+  @ValueSource(strings = { "\t", "\n", "½", "§", "©", "«abc»", " ", "" })
+  void should_fail_if_actual_is_not_visible(CharSequence actual) {
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isVisible());
+    // THEN
+    then(assertionError).hasMessage(shouldBeVisible(actual).create());
+  }
+
+  @Test
+  void should_fail_when_actual_is_null() {
+    // GIVEN
+    CharSequence actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).isVisible());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldBeASCII_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeASCII_create_Test.java
new file mode 100644
index 0000000..4e99d29
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeASCII_create_Test.java
@@ -0,0 +1,41 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+
+import static java.lang.String.format;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeASCII.shouldBeASCII;
+import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
+
+import org.assertj.core.description.TextDescription;
+import org.junit.jupiter.api.Test;
+
+class ShouldBeASCII_create_Test {
+
+  @Test
+  void should_create_error_message_for_non_ASCII_character() {
+    // WHEN
+    String message = shouldBeASCII("\u2303").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"\u2303\" to be ASCII"));
+  }
+
+  @Test
+  void should_create_error_message_for_strings_with_ASCII_character() {
+    // WHEN
+    String message = shouldBeASCII("123\u230300abc").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"123\u230300abc\" to be ASCII"));
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldBeAlphabetic_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeAlphabetic_create_Test.java
new file mode 100644
index 0000000..99baf62
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeAlphabetic_create_Test.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import static java.lang.String.format;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeAlphabetic.shouldBeAlphabetic;
+import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
+
+import org.assertj.core.description.TextDescription;
+import org.junit.jupiter.api.Test;
+
+class ShouldBeAlphabetic_create_Test {
+
+  @Test
+  void should_create_error_message_for_character() {
+    // WHEN
+    String message = shouldBeAlphabetic('1').create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting '1' to be alphabetic"));
+  }
+
+  @Test
+  void should_create_error_message_for_number() {
+    // WHEN
+    String message = shouldBeAlphabetic("123").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"123\" to be alphabetic"));
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldBeAlphanumeric_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeAlphanumeric_create_Test.java
new file mode 100644
index 0000000..ef0a6ad
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeAlphanumeric_create_Test.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import static java.lang.String.format;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeAlphanumeric.shouldBeAlphanumeric;
+import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
+
+import org.assertj.core.description.TextDescription;
+import org.junit.jupiter.api.Test;
+
+class ShouldBeAlphanumeric_create_Test {
+
+  @Test
+  void should_create_error_message_for_special_character() {
+    // WHEN
+    String message = shouldBeAlphanumeric('*').create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting '*' to be alphanumeric"));
+  }
+
+  @Test
+  void should_create_error_message_for_strings_with_special_chars() {
+    // WHEN
+    String message = shouldBeAlphanumeric("123.abc").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"123.abc\" to be alphanumeric"));
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldBeHexadecimal_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeHexadecimal_create_Test.java
new file mode 100644
index 0000000..1de43de
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeHexadecimal_create_Test.java
@@ -0,0 +1,39 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import static java.lang.String.format;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeHexadecimal.shouldBeHexadecimal;
+import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
+
+import org.assertj.core.description.TextDescription;
+import org.junit.jupiter.api.Test;
+
+public class ShouldBeHexadecimal_create_Test {
+  @Test
+  void should_create_error_message_for_special_character() {
+    // WHEN
+    String message = shouldBeHexadecimal('Z').create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting 'Z' to be hexadecimal"));
+  }
+
+  @Test
+  void should_create_error_message_for_strings_with_special_chars() {
+    // WHEN
+    String message = shouldBeHexadecimal("123.abc").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"123.abc\" to be hexadecimal"));
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldBePrintable_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldBePrintable_create_Test.java
new file mode 100644
index 0000000..31b7b33
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldBePrintable_create_Test.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import static java.lang.String.format;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBePrintable.shouldBePrintable;
+import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
+
+import org.assertj.core.description.TextDescription;
+import org.junit.jupiter.api.Test;
+
+class ShouldBePrintable_create_Test {
+
+  @Test
+  void should_create_error_message_for_character() {
+    // WHEN
+    String message = shouldBePrintable("\\t").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"\\t\" to be printable"));
+  }
+
+  @Test
+  void should_create_error_message_for_number() {
+    // WHEN
+    String message = shouldBePrintable("12\n3").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"12\n3\" to be printable"));
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldBeVisible_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeVisible_create_Test.java
new file mode 100644
index 0000000..8295641
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldBeVisible_create_Test.java
@@ -0,0 +1,40 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import static java.lang.String.format;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldBeVisible.shouldBeVisible;
+import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
+
+import org.assertj.core.description.TextDescription;
+import org.junit.jupiter.api.Test;
+
+class ShouldBeVisible_create_Test {
+
+  @Test
+  void should_create_error_message_for_character() {
+    // WHEN
+    String message = shouldBeVisible("\\t").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"\\t\" to be visible"));
+  }
+
+  @Test
+  void should_create_error_message_for_number() {
+    // WHEN
+    String message = shouldBeVisible("12\\n3").create(new TextDescription("Test"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[Test] %nExpecting \"12\\n3\" to be visible"));
+  }
+}

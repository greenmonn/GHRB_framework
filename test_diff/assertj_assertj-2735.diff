diff --git a/assertj-core/src/test/java/org/assertj/core/presentation/AbstractBaseRepresentationTest.java b/assertj-core/src/test/java/org/assertj/core/presentation/AbstractBaseRepresentationTest.java
index 1667c7a..a85502c 100644
--- a/assertj-core/src/test/java/org/assertj/core/presentation/AbstractBaseRepresentationTest.java
+++ b/assertj-core/src/test/java/org/assertj/core/presentation/AbstractBaseRepresentationTest.java
@@ -21,12 +21,13 @@ import org.junit.jupiter.api.BeforeEach;
 abstract class AbstractBaseRepresentationTest {
 
   @BeforeEach
-  public void setUp() {
+  void setUp() {
     StandardRepresentation.resetDefaults();
   }
 
   @AfterEach
-  public void afterTests() {
+  void afterTests() {
     StandardRepresentation.resetDefaults();
   }
+
 }
diff --git a/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_custom_formatter_Test.java b/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_custom_formatter_Test.java
index 7050949..df265c4 100644
--- a/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_custom_formatter_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_custom_formatter_Test.java
@@ -68,4 +68,14 @@ class StandardRepresentation_custom_formatter_Test {
     assertThat(STANDARD_REPRESENTATION.toStringOf(intNumber)).isEqualTo("8");
   }
 
+  @Test
+  void should_return_null_when_registered_formatter_returns_null() {
+    // GIVEN
+    StandardRepresentation.registerFormatterForType(String.class, value -> null);
+    Object string = "abc";
+    // WHEN
+    String actual = STANDARD_REPRESENTATION.toStringOf(string);
+    // THEN
+    assertThat(actual).isNull();
+  }
 }

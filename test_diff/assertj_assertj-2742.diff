diff --git a/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/AssumptionsTest.java b/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/AssumptionsTest.java
new file mode 100644
index 0000000..d344f14
--- /dev/null
+++ b/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/AssumptionsTest.java
@@ -0,0 +1,55 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.tests.osgi;
+
+import static java.lang.String.CASE_INSENSITIVE_ORDER;
+import static java.util.Arrays.asList;
+import static org.assertj.core.api.Assertions.assertThatNoException;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
+import static org.assertj.core.api.Assumptions.assumeThat;
+import static org.assertj.core.api.Assumptions.setPreferredAssumptionException;
+import static org.assertj.core.configuration.PreferredAssumptionException.JUNIT5;
+import static org.assertj.core.presentation.UnicodeRepresentation.UNICODE_REPRESENTATION;
+
+import org.assertj.core.api.Assumptions;
+import org.assertj.core.configuration.PreferredAssumptionException;
+import org.junit.jupiter.api.Test;
+import org.opentest4j.TestAbortedException;
+
+class AssumptionsTest {
+
+  @Test
+  void should_ignore_test_when_one_of_the_assumption_fails() {
+    setPreferredAssumptionException(JUNIT5);
+    assumeThat("foo").isNotEmpty();
+    assertThatThrownBy(() -> assumeThat("bar").isEmpty()).isInstanceOf(TestAbortedException.class);
+  }
+
+  @Test
+  void should_run_test_when_all_assumptions_are_met() {
+    assertThatNoException().isThrownBy(() -> {
+      assumeThat("foo").isNotNull()
+                       .isNotEmpty()
+                       .isEqualTo("foo");
+      assumeThat("bar").contains("ar")
+                       .isNotBlank();
+      assumeThat(asList("John", "Doe", "Jane", "Doe")).as("test description")
+                                                      .withFailMessage("error message")
+                                                      .withRepresentation(UNICODE_REPRESENTATION)
+                                                      .usingElementComparator(CASE_INSENSITIVE_ORDER)
+                                                      .filteredOn(string -> string.length() == 4)
+                                                      .containsExactly("JOHN", "JANE");
+    });
+  }
+
+}
diff --git a/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/SimpleTest.java b/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/SimpleTest.java
new file mode 100644
index 0000000..63b75f0
--- /dev/null
+++ b/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/SimpleTest.java
@@ -0,0 +1,35 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.tests.osgi;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatCode;
+
+import org.junit.jupiter.api.Test;
+
+class SimpleTest {
+
+  @Test
+  void simple_success() {
+    assertThat("A String").isNotNull()
+                          .isNotEmpty()
+                          .contains("A", "String")
+                          .isEqualTo("A String");
+  }
+
+  @Test
+  void simple_failure() {
+    assertThatCode(() -> assertThat("A String").isNull()).isInstanceOf(AssertionError.class);
+  }
+
+}
diff --git a/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/soft/CustomSoftAssertionTest.java b/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/soft/CustomSoftAssertionTest.java
new file mode 100644
index 0000000..fe8ae60
--- /dev/null
+++ b/assertj-tests/assertj-integration-tests/assertj-core-osgi/src/test/java/org/assertj/core/tests/osgi/soft/CustomSoftAssertionTest.java
@@ -0,0 +1,92 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2022 the original author or authors.
+ */
+package org.assertj.core.tests.osgi.soft;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import org.assertj.core.api.AbstractListAssert;
+import org.assertj.core.api.AbstractMapAssert;
+import org.assertj.core.api.AbstractSoftAssertions;
+import org.assertj.core.api.Assertions;
+import org.assertj.core.api.ListAssert;
+import org.assertj.core.api.ObjectAssert;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
+
+class CustomSoftAssertionTest {
+
+  @Disabled("This currently fails when running within IntelliJ IDEA")
+  @Test
+  void verify_classloaders() {
+    // GIVEN
+    Class<?> assertClass = TestProxyableMapAssert.class;
+    Class<?> superClass = assertClass.getSuperclass();
+    // THEN
+    then(assertClass.getClassLoader()).as("Custom assertion class must be from a different class loader than it's super class")
+                                      .isNotSameAs(superClass.getClassLoader());
+    then(superClass.getClassLoader()).as("Custom assertion super class must be from the assertj-core class loader")
+                                     .isSameAs(Assertions.class.getClassLoader());
+  }
+
+  @Test
+  void custom_soft_assertions_success() {
+    // GIVEN
+    TestSoftAssertions softly = new TestSoftAssertions();
+    Map<String, String> map = new HashMap<>();
+    map.put("key1", "value1");
+    map.put("key2", "value2");
+    // WHEN
+    softly.assertThat(map).containsKeys("key1", "key2").containsValues("value1", "value2");
+    // THEN
+    softly.assertAll();
+  }
+
+  @Test
+  void custom_soft_assertions_failure() {
+    // GIVEN
+    TestSoftAssertions softly = new TestSoftAssertions();
+    Map<String, String> map = new HashMap<>();
+    map.put("key1", "value1");
+    map.put("key2", "value2");
+    // WHEN
+    softly.assertThat(map).containsKeys("key1", "key3").containsValues("value3", "value2");
+    // THEN
+    then(softly.wasSuccess()).isFalse();
+    then(softly.errorsCollected()).hasSize(2);
+  }
+
+  public static class TestProxyableMapAssert<KEY, VALUE>
+      extends AbstractMapAssert<TestProxyableMapAssert<KEY, VALUE>, Map<KEY, VALUE>, KEY, VALUE> {
+
+    public TestProxyableMapAssert(Map<KEY, VALUE> actual) {
+      super(actual, TestProxyableMapAssert.class);
+    }
+
+    @Override
+    protected <ELEMENT> AbstractListAssert<?, List<? extends ELEMENT>, ELEMENT, ObjectAssert<ELEMENT>> newListAssertInstance(List<? extends ELEMENT> newActual) {
+      return new ListAssert<>(newActual);
+    }
+  }
+
+  public static class TestSoftAssertions extends AbstractSoftAssertions {
+    @SuppressWarnings("unchecked")
+    public <K, V> TestProxyableMapAssert<K, V> assertThat(Map<K, V> actual) {
+      return proxy(TestProxyableMapAssert.class, Map.class, actual);
+    }
+  }
+
+}

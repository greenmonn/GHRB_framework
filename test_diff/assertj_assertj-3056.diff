diff --git a/assertj-core/src/test/java/org/assertj/core/api/classes/ClassAssert_hasNoPackage_Test.java b/assertj-core/src/test/java/org/assertj/core/api/classes/ClassAssert_hasNoPackage_Test.java
new file mode 100644
index 0000000..1e565d7
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/api/classes/ClassAssert_hasNoPackage_Test.java
@@ -0,0 +1,69 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.api.classes;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldHaveNoPackage.shouldHaveNoPackage;
+import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
+import static org.assertj.core.util.FailureMessages.actualIsNull;
+
+import java.util.stream.Stream;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+class ClassAssert_hasNoPackage_Test {
+
+  @Test
+  void should_fail_if_actual_is_null() {
+    // GIVEN
+    Class<?> actual = null;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).hasNoPackage());
+    // THEN
+    then(assertionError).hasMessage(actualIsNull());
+  }
+
+  @Test
+  void should_fail_if_actual_has_a_package() {
+    // GIVEN
+    Class<?> actual = Object.class;
+    // WHEN
+    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).hasNoPackage());
+    // THEN
+    then(assertionError).hasMessage(shouldHaveNoPackage(actual).create());
+  }
+
+  @ParameterizedTest
+  @MethodSource("nullPackageTypes")
+  void should_pass_if_actual_has_no_package(Class<?> actual) {
+    // WHEN/THEN
+    assertThat(actual).hasNoPackage();
+  }
+
+  private static Stream<Class<?>> nullPackageTypes() {
+    return Stream.of(int[].class, // any array
+                     Boolean.TYPE,
+                     Byte.TYPE,
+                     Character.TYPE,
+                     Double.TYPE,
+                     Float.TYPE,
+                     Integer.TYPE,
+                     Long.TYPE,
+                     Short.TYPE,
+                     Void.TYPE);
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveNoPackage_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveNoPackage_create_Test.java
new file mode 100644
index 0000000..ec11215
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveNoPackage_create_Test.java
@@ -0,0 +1,37 @@
+/*
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
+ * the License. You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
+ * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
+ * specific language governing permissions and limitations under the License.
+ *
+ * Copyright 2012-2023 the original author or authors.
+ */
+package org.assertj.core.error;
+
+import static java.lang.String.format;
+import static org.assertj.core.api.BDDAssertions.then;
+import static org.assertj.core.error.ShouldHaveNoPackage.shouldHaveNoPackage;
+import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
+
+import org.assertj.core.internal.TestDescription;
+import org.junit.jupiter.api.Test;
+
+class ShouldHaveNoPackage_create_Test {
+
+  @Test
+  void should_create_error_message() {
+    // WHEN
+    String message = shouldHaveNoPackage(String.class).create(new TestDescription("TEST"), STANDARD_REPRESENTATION);
+    // THEN
+    then(message).isEqualTo(format("[TEST] %n" +
+                                   "Expecting%n" +
+                                   "  java.lang.String%n" +
+                                   "to have no package, but had:%n" +
+                                   "  java.lang.Object"));
+  }
+
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveNoSuperclass_create_Test.java b/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveNoSuperclass_create_Test.java
index b518692..2330feb 100644
--- a/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveNoSuperclass_create_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/error/ShouldHaveNoSuperclass_create_Test.java
@@ -17,18 +17,9 @@ import static org.assertj.core.api.BDDAssertions.then;
 import static org.assertj.core.error.ShouldHaveNoSuperclass.shouldHaveNoSuperclass;
 import static org.assertj.core.presentation.StandardRepresentation.STANDARD_REPRESENTATION;
 
-import org.assertj.core.description.Description;
 import org.assertj.core.internal.TestDescription;
-import org.assertj.core.presentation.Representation;
-import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
 
-/**
- * Tests for <code>{@link ShouldHaveNoSuperclass#create(Description, Representation)}</code>.
- *
- * @author Stefano Cordio
- */
-@DisplayName("ShouldHaveNoSuperclass create")
 class ShouldHaveNoSuperclass_create_Test {
 
   @Test

diff --git a/assertj-core/src/test/java/org/assertj/core/presentation/PrimitiveArrayListTest.java b/assertj-core/src/test/java/org/assertj/core/presentation/PrimitiveArrayListTest.java
new file mode 100644
index 0000000..568130e
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/presentation/PrimitiveArrayListTest.java
@@ -0,0 +1,50 @@
+package org.assertj.core.presentation;
+
+import com.google.common.collect.ImmutableList;
+import org.junit.jupiter.api.Test;
+
+import java.util.List;
+
+import static org.assertj.core.api.Assertions.catchThrowableOfType;
+import static org.assertj.core.api.BDDAssertions.then;
+
+class PrimitiveArrayListTest {
+  @Test
+  void should_not_be_able_to_create_for_non_array() {
+    // WHEN
+    IllegalArgumentException exception = catchThrowableOfType(
+      () -> new PrimitiveArrayList("not an array"), IllegalArgumentException.class);
+    // THEN
+    then(exception).hasMessageContaining("array");
+  }
+
+  @Test
+  void should_handle_empty() {
+    // GIVEN
+    int[] array = new int[0];
+    // WHEN
+    List<Object> view = new PrimitiveArrayList(array);
+    // THEN
+    then(view).isEmpty();
+  }
+
+  @Test
+  void should_handle_non_empty_primitive() {
+    // GIVEN
+    int[] array = new int[] {1, 2, 3};
+    // WHEN
+    List<Object> view = new PrimitiveArrayList(array);
+    // THEN
+    then(view).isEqualTo(ImmutableList.of(1, 2, 3));
+  }
+
+  @Test
+  void should_handle_non_empty_objects() {
+    // GIVEN
+    Integer[] array = new Integer[] {1, 2, 3};
+    // WHEN
+    List<Object> view = new PrimitiveArrayList(array);
+    // THEN
+    then(view).isEqualTo(ImmutableList.of(1, 2, 3));
+  }
+}
diff --git a/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_array_format_Test.java b/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_array_format_Test.java
index 40bae87..6c612f6 100644
--- a/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_array_format_Test.java
+++ b/assertj-core/src/test/java/org/assertj/core/presentation/StandardRepresentation_array_format_Test.java
@@ -20,6 +20,8 @@ import static org.assertj.core.util.Strings.quote;
 
 import java.util.stream.Stream;
 
+import org.apache.commons.lang3.StringUtils;
+import org.assertj.core.configuration.Configuration;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
@@ -182,6 +184,28 @@ class StandardRepresentation_array_format_Test extends AbstractBaseRepresentatio
   }
 
   @Test
+  void should_format_big_primitive_array() {
+    // GIVEN
+    int[] array = new int[1 << 30];
+    // WHEN
+    String formatted = STANDARD_REPRESENTATION.formatArray(array);
+    // THEN
+    then(formatted).contains("...");
+    then(StringUtils.countMatches(formatted, "0")).isEqualTo(Configuration.MAX_ELEMENTS_FOR_PRINTING);
+  }
+
+  @Test
+  void should_format_big_object_array() {
+    // GIVEN
+    Object[] array = new Object[1 << 30];
+    // WHEN
+    String formatted = STANDARD_REPRESENTATION.formatArray(array);
+    // THEN
+    then(formatted).contains("...");
+    then(StringUtils.countMatches(formatted, "null")).isEqualTo(Configuration.MAX_ELEMENTS_FOR_PRINTING);
+  }
+
+  @Test
   void should_format_array_up_to_the_maximum_allowed_elements() {
     // GIVEN
     StandardRepresentation.setMaxElementsForPrinting(3);
diff --git a/assertj-core/src/test/java/org/assertj/core/presentation/TransformingListTest.java b/assertj-core/src/test/java/org/assertj/core/presentation/TransformingListTest.java
new file mode 100644
index 0000000..09487bb
--- /dev/null
+++ b/assertj-core/src/test/java/org/assertj/core/presentation/TransformingListTest.java
@@ -0,0 +1,27 @@
+package org.assertj.core.presentation;
+
+import static org.assertj.core.api.BDDAssertions.then;
+
+import com.google.common.collect.ImmutableList;
+import java.util.List;
+import org.junit.jupiter.api.Test;
+
+class TransformingListTest {
+  @Test
+  void should_handle_empty() {
+    // GIVEN
+    List<Integer> source = ImmutableList.of();
+    List<String> transformed = new TransformingList<>(source, Object::toString);
+    // WHEN/THEN
+    then(transformed).isEmpty();
+  }
+
+  @Test
+  void should_handle_non_empty() {
+    // GIVEN
+    List<Integer> source = ImmutableList.of(1, 2, 3);
+    List<String> transformed = new TransformingList<>(source, Object::toString);
+    // WHEN/THEN
+    then(transformed).isEqualTo(ImmutableList.of("1", "2", "3"));
+  }
+}

diff --git a/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java b/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
index f8dfb9d..ad42dcf 100644
--- a/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/RequestBuilderTest.java
@@ -11,9 +11,12 @@ import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import android.app.Application;
+import android.net.Uri;
 import android.widget.ImageView;
+import androidx.annotation.Nullable;
 import androidx.test.core.app.ApplicationProvider;
 import com.bumptech.glide.load.DataSource;
+import com.bumptech.glide.load.engine.GlideException;
 import com.bumptech.glide.load.resource.SimpleResource;
 import com.bumptech.glide.request.Request;
 import com.bumptech.glide.request.RequestListener;
@@ -23,6 +26,7 @@ import com.bumptech.glide.request.target.Target;
 import com.bumptech.glide.request.target.ViewTarget;
 import com.bumptech.glide.tests.BackgroundUtil.BackgroundTester;
 import com.bumptech.glide.tests.TearDownGlide;
+import com.google.common.testing.EqualsTester;
 import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
@@ -159,13 +163,128 @@ public class RequestBuilderTest {
         .onResourceReady(any(), any(), isA(Target.class), isA(DataSource.class), anyBoolean());
   }
 
+  @Test
+  public void testEquals() {
+    Object firstModel = new Object();
+    Object secondModel = new Object();
+
+    RequestListener<Object> firstListener =
+        new RequestListener<>() {
+          @Override
+          public boolean onLoadFailed(
+              @Nullable GlideException e,
+              Object model,
+              Target<Object> target,
+              boolean isFirstResource) {
+            return false;
+          }
+
+          @Override
+          public boolean onResourceReady(
+              Object resource,
+              Object model,
+              Target<Object> target,
+              DataSource dataSource,
+              boolean isFirstResource) {
+            return false;
+          }
+        };
+    RequestListener<Object> secondListener =
+        new RequestListener<>() {
+          @Override
+          public boolean onLoadFailed(
+              @Nullable GlideException e,
+              Object model,
+              Target<Object> target,
+              boolean isFirstResource) {
+            return false;
+          }
+
+          @Override
+          public boolean onResourceReady(
+              Object resource,
+              Object model,
+              Target<Object> target,
+              DataSource dataSource,
+              boolean isFirstResource) {
+            return false;
+          }
+        };
+
+    new EqualsTester()
+        .addEqualityGroup(new Object())
+        .addEqualityGroup(newRequestBuilder(Object.class), newRequestBuilder(Object.class))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).load((Object) null),
+            newRequestBuilder(Object.class).load((Object) null),
+            newRequestBuilder(Object.class).load((Uri) null))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).load(firstModel),
+            newRequestBuilder(Object.class).load(firstModel))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).load(secondModel),
+            newRequestBuilder(Object.class).load(secondModel))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).load(Uri.EMPTY),
+            newRequestBuilder(Object.class).load(Uri.EMPTY))
+        .addEqualityGroup(
+            newRequestBuilder(Uri.class).load(Uri.EMPTY),
+            newRequestBuilder(Uri.class).load(Uri.EMPTY))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).centerCrop(),
+            newRequestBuilder(Object.class).centerCrop())
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).addListener(firstListener),
+            newRequestBuilder(Object.class).addListener(firstListener))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).addListener(secondListener),
+            newRequestBuilder(Object.class).addListener(secondListener))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).error(newRequestBuilder(Object.class)),
+            newRequestBuilder(Object.class).error(newRequestBuilder(Object.class)))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).error(firstModel),
+            newRequestBuilder(Object.class).error(firstModel),
+            newRequestBuilder(Object.class).error(newRequestBuilder(Object.class).load(firstModel)))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class).error(secondModel),
+            newRequestBuilder(Object.class).error(secondModel),
+            newRequestBuilder(Object.class)
+                .error(newRequestBuilder(Object.class).load(secondModel)))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class)
+                .error(newRequestBuilder(Object.class).load(firstModel).centerCrop()),
+            newRequestBuilder(Object.class)
+                .error(newRequestBuilder(Object.class).load(firstModel).centerCrop()))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class)
+                .thumbnail(newRequestBuilder(Object.class).load(firstModel)),
+            newRequestBuilder(Object.class)
+                .thumbnail(newRequestBuilder(Object.class).load(firstModel)))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class)
+                .thumbnail(newRequestBuilder(Object.class).load(secondModel)),
+            newRequestBuilder(Object.class)
+                .thumbnail(newRequestBuilder(Object.class).load(secondModel)))
+        .addEqualityGroup(
+            newRequestBuilder(Object.class)
+                .transition(new GenericTransitionOptions<>().dontTransition()),
+            newRequestBuilder(Object.class)
+                .transition(new GenericTransitionOptions<>().dontTransition()))
+        .testEquals();
+  }
+
   private RequestBuilder<Object> getNullModelRequest() {
+    return newRequestBuilder(Object.class).load((Object) null);
+  }
+
+  private <ModelT> RequestBuilder<ModelT> newRequestBuilder(Class<ModelT> modelClass) {
     when(glideContext.buildImageViewTarget(isA(ImageView.class), isA(Class.class)))
         .thenReturn(mock(ViewTarget.class));
     when(glideContext.getDefaultRequestOptions()).thenReturn(new RequestOptions());
     when(requestManager.getDefaultRequestOptions()).thenReturn(new RequestOptions());
     when(requestManager.getDefaultTransitionOptions(any(Class.class)))
         .thenReturn(new GenericTransitionOptions<>());
-    return new RequestBuilder<>(glide, requestManager, Object.class, context).load((Object) null);
+    return new RequestBuilder<>(glide, requestManager, modelClass, context);
   }
 }
diff --git a/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
index 3eed10c..f5c559b 100644
--- a/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
+++ b/library/test/src/test/java/com/bumptech/glide/request/RequestOptionsTest.java
@@ -559,8 +559,31 @@ public class RequestOptionsTest {
     Drawable second = new GradientDrawable();
     assertThat(first).isNotEqualTo(second);
     assertThat(Util.bothNullOrEqual(first, second)).isFalse();
+    // Make sure we're not equal to any other subclass of RequestOptions.
+    class FakeOptions extends BaseRequestOptions<FakeOptions> {
+      @Override
+      public boolean equals(Object o) {
+        return o instanceof FakeOptions && super.equals(o);
+      }
+
+      // Our class doesn't include any additional properties, so we don't need to modify hashcode,
+      // but
+      // keep it here as a reminder in case we add properties.
+      @SuppressWarnings("PMD.UselessOverridingMethod")
+      @Override
+      public int hashCode() {
+        return super.hashCode();
+      }
+    }
     new EqualsTester()
         .addEqualityGroup(
+            new RequestOptions(),
+            new RequestOptions(),
+            new RequestOptions().skipMemoryCache(false),
+            new RequestOptions().onlyRetrieveFromCache(false),
+            new RequestOptions().useUnlimitedSourceGeneratorsPool(false))
+        .addEqualityGroup(new FakeOptions(), new FakeOptions())
+        .addEqualityGroup(
             new RequestOptions().sizeMultiplier(.7f), new RequestOptions().sizeMultiplier(.7f))
         .addEqualityGroup(new RequestOptions().sizeMultiplier(0.8f))
         .addEqualityGroup(new RequestOptions().error(1), new RequestOptions().error(1))
@@ -580,11 +603,6 @@ public class RequestOptionsTest {
         .addEqualityGroup(
             new RequestOptions().skipMemoryCache(true), new RequestOptions().skipMemoryCache(true))
         .addEqualityGroup(
-            new RequestOptions(),
-            new RequestOptions().skipMemoryCache(false),
-            new RequestOptions().onlyRetrieveFromCache(false),
-            new RequestOptions().useUnlimitedSourceGeneratorsPool(false))
-        .addEqualityGroup(
             new RequestOptions().override(100), new RequestOptions().override(100, 100))
         .addEqualityGroup(
             new RequestOptions().override(200), new RequestOptions().override(200, 200))

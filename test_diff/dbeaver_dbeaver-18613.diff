diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserGenericsTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserGenericsTest.java
index 4997d59..0c7be81 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserGenericsTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserGenericsTest.java
@@ -29,6 +29,7 @@ import org.jkiss.dbeaver.model.exec.jdbc.JDBCSession;
 import org.jkiss.dbeaver.model.impl.jdbc.JDBCSQLDialect;
 import org.jkiss.dbeaver.model.preferences.DBPPreferenceStore;
 import org.jkiss.dbeaver.model.sql.SQLDialect;
+import org.jkiss.dbeaver.model.sql.SQLQueryParameter;
 import org.jkiss.dbeaver.model.sql.SQLScriptElement;
 import org.jkiss.dbeaver.model.sql.SQLSyntaxManager;
 import org.jkiss.dbeaver.model.sql.registry.SQLDialectRegistry;
@@ -41,9 +42,11 @@ import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.mockito.junit.MockitoJUnitRunner;
 
+import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.StringJoiner;
 import java.util.stream.Collectors;
 
 @RunWith(MockitoJUnitRunner.class)
@@ -120,6 +123,23 @@ public class SQLScriptParserGenericsTest {
         };
         assertParse("snowflake", query);
     }
+
+    @Test
+    public void parseNamedParameters() throws DBException {
+        List<String> inputParamNames = List.of("1", "\"SYs_B_1\"", "\"MyVar8\"", "AbC", "\"#d2\"");
+        List<String> invalidParamNames = List.of("&6^34", "%#2", "\"\"\"\"");
+        StringJoiner joiner = new StringJoiner(", ", "select ", " from dual");
+        inputParamNames.stream().forEach(p -> joiner.add(":" + p));
+        invalidParamNames.stream().forEach(p -> joiner.add(":" + p));
+        String query = joiner.toString();
+        SQLParserContext context = createParserContext(setDialect("snowflake"), query);
+        List<SQLQueryParameter> params = SQLScriptParser.parseParametersAndVariables(context, 0, query.length());
+        List<String> actualParamNames = new ArrayList<String>();
+        for (SQLQueryParameter sqlQueryParameter : params) {
+            actualParamNames.add(sqlQueryParameter.getName());
+        }
+        Assert.assertEquals(List.of("1", "SYs_B_1", "MyVar8", "ABC", "#d2"), actualParamNames);
+    }
     
     private void assertParse(String dialectName, String[] expected) throws DBException {
         String source = Arrays.stream(expected).filter(e -> e != null).collect(Collectors.joining());
@@ -156,8 +176,14 @@ public class SQLScriptParserGenericsTest {
     private SQLDialect setDialect(String name) throws DBException {
         SQLDialectRegistry registry = SQLDialectRegistry.getInstance();
         SQLDialect dialect = registry.getDialect(name).createInstance();
+        try {
+            Mockito.when(databaseMetaData.getIdentifierQuoteString()).thenReturn("\"");
+        } catch (SQLException e) {
+            throw new DBException("Can't initialize identifier quote string for dialect " + name, e);
+        }
         ((JDBCSQLDialect) dialect).initDriverSettings(session, dataSource, databaseMetaData);
         Mockito.when(dataSource.getSQLDialect()).thenReturn(dialect);
+
         return dialect;
     }
 

diff --git a/test/org.jkiss.dbeaver.test.platform/META-INF/MANIFEST.MF b/test/org.jkiss.dbeaver.test.platform/META-INF/MANIFEST.MF
index 786e99d..9cbd03e 100644
--- a/test/org.jkiss.dbeaver.test.platform/META-INF/MANIFEST.MF
+++ b/test/org.jkiss.dbeaver.test.platform/META-INF/MANIFEST.MF
@@ -2,8 +2,8 @@ Manifest-Version: 1.0
 Bundle-ManifestVersion: 2
 Bundle-Name: %Bundle-Name
 Bundle-SymbolicName: org.jkiss.dbeaver.test.platform
-Bundle-Version: 1.0.63.qualifier
-Bundle-Release-Date: 20230522
+Bundle-Version: 1.0.66.qualifier
+Bundle-Release-Date: 20230710
 Bundle-Vendor: %Bundle-Vendor
 Bundle-RequiredExecutionEnvironment: JavaSE-11
 Bundle-ActivationPolicy: lazy
diff --git a/test/org.jkiss.dbeaver.test.platform/pom.xml b/test/org.jkiss.dbeaver.test.platform/pom.xml
index 1105bc2..57f75f8 100644
--- a/test/org.jkiss.dbeaver.test.platform/pom.xml
+++ b/test/org.jkiss.dbeaver.test.platform/pom.xml
@@ -10,7 +10,7 @@
         <relativePath>../</relativePath>
     </parent>
     <artifactId>org.jkiss.dbeaver.test.platform</artifactId>
-    <version>1.0.63-SNAPSHOT</version>
+    <version>1.0.66-SNAPSHOT</version>
     <packaging>eclipse-test-plugin</packaging>
 
 </project>
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/jdbc/DatabaseURLTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/jdbc/DatabaseURLTest.java
new file mode 100644
index 0000000..32c430f
--- /dev/null
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/jdbc/DatabaseURLTest.java
@@ -0,0 +1,86 @@
+/*
+ * DBeaver - Universal Database Manager
+ * Copyright (C) 2010-2023 DBeaver Corp and others
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jkiss.dbeaver.model.impl.jdbc;
+
+import org.jkiss.code.NotNull;
+import org.jkiss.dbeaver.model.DatabaseURL;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.util.regex.Matcher;
+
+public class DatabaseURLTest {
+    @Test
+    public void testMatchPattern() {
+        assertMatches(
+            "jdbc:postgresql://{host}[:{port}]/[{database}]",
+            "jdbc:postgresql://localhost:5432/dvdrental",
+            new String[][]{
+                {"host", "localhost"},
+                {"port", "5432"},
+                {"database", "dvdrental"}
+            });
+
+        assertMatches(
+            "jdbc:teradata://{host}/DATABASE={database},DBS_PORT={port}",
+            "jdbc:teradata://localhost/DATABASE=test,DBS_PORT=1234",
+            new String[][]{
+                {"host", "localhost"},
+                {"database", "test"},
+                {"port", "1234"}
+            });
+
+        assertMatches(
+            "jdbc:oracle:thin:@{host}[:{port}]/{database}",
+            "jdbc:oracle:thin:@localhost/orcl",
+            new String[][]{
+                {"host", "localhost"},
+                {"database", "orcl"}
+            });
+
+        assertMatches(
+            "jdbc:sqlserver://{host}[:{port}][;databaseName={database}]",
+            "jdbc:sqlserver://localhost:1433;databaseName=master",
+            new String[][]{
+                {"host", "localhost"},
+                {"port", "1433"},
+                {"database", "master"}
+            });
+
+        assertMatches(
+            "jdbc:sqlserver://{host}[:{port}][;databaseName={database}]",
+            "jdbc:sqlserver://localhost",
+            new String[][]{
+                {"host", "localhost"}
+            });
+
+        assertMatches(
+            "jdbc:sqlite:{file}",
+            "jdbc:sqlite:C:\\Users\\%USERNAME%\\Documents\\Chinook.db",
+            new String[][]{
+                {"file", "C:\\Users\\%USERNAME%\\Documents\\Chinook.db"}
+            });
+    }
+
+    private void assertMatches(@NotNull String sampleUrl, @NotNull String targetUrl, @NotNull String[][] properties) {
+        final Matcher matcher = DatabaseURL.getPattern(sampleUrl).matcher(targetUrl);
+        Assert.assertTrue(sampleUrl, matcher.matches());
+        for (String[] property : properties) {
+            Assert.assertEquals(sampleUrl, property[1], matcher.group(property[0]));
+        }
+    }
+}
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCURLTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCURLTest.java
deleted file mode 100644
index d5fbb0c..0000000
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/impl/jdbc/JDBCURLTest.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- * DBeaver - Universal Database Manager
- * Copyright (C) 2010-2023 DBeaver Corp and others
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.jkiss.dbeaver.model.impl.jdbc;
-
-import org.jkiss.code.NotNull;
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.regex.Matcher;
-
-public class JDBCURLTest {
-    @Test
-    public void testMatchPattern() {
-        assertMatches(
-            "jdbc:postgresql://{host}[:{port}]/[{database}]",
-            "jdbc:postgresql://localhost:5432/dvdrental",
-            new String[][]{
-                {"host", "localhost"},
-                {"port", "5432"},
-                {"database", "dvdrental"}
-            });
-
-        assertMatches(
-            "jdbc:teradata://{host}/DATABASE={database},DBS_PORT={port}",
-            "jdbc:teradata://localhost/DATABASE=test,DBS_PORT=1234",
-            new String[][]{
-                {"host", "localhost"},
-                {"database", "test"},
-                {"port", "1234"}
-            });
-
-        assertMatches(
-            "jdbc:oracle:thin:@{host}[:{port}]/{database}",
-            "jdbc:oracle:thin:@localhost/orcl",
-            new String[][]{
-                {"host", "localhost"},
-                {"database", "orcl"}
-            });
-
-        assertMatches(
-            "jdbc:sqlserver://{host}[:{port}][;databaseName={database}]",
-            "jdbc:sqlserver://localhost:1433;databaseName=master",
-            new String[][]{
-                {"host", "localhost"},
-                {"port", "1433"},
-                {"database", "master"}
-            });
-
-        assertMatches(
-            "jdbc:sqlserver://{host}[:{port}][;databaseName={database}]",
-            "jdbc:sqlserver://localhost",
-            new String[][]{
-                {"host", "localhost"}
-            });
-
-        assertMatches(
-            "jdbc:sqlite:{file}",
-            "jdbc:sqlite:C:\\Users\\%USERNAME%\\Documents\\Chinook.db",
-            new String[][]{
-                {"file", "C:\\Users\\%USERNAME%\\Documents\\Chinook.db"}
-            });
-    }
-
-    private void assertMatches(@NotNull String sampleUrl, @NotNull String targetUrl, @NotNull String[][] properties) {
-        final Matcher matcher = JDBCURL.getPattern(sampleUrl).matcher(targetUrl);
-        Assert.assertTrue(sampleUrl, matcher.matches());
-        for (String[] property : properties) {
-            Assert.assertEquals(sampleUrl, property[1], matcher.group(property[0]));
-        }
-    }
-}
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserTest.java
index 37fb0ce..f9c6094 100644
--- a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserTest.java
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/dbeaver/model/sql/parser/SQLScriptParserTest.java
@@ -33,7 +33,6 @@ import org.jkiss.dbeaver.model.sql.SQLSyntaxManager;
 import org.jkiss.dbeaver.model.sql.parser.tokens.SQLTokenType;
 import org.jkiss.dbeaver.model.sql.registry.SQLDialectRegistry;
 import org.jkiss.dbeaver.model.text.parser.TPRuleBasedScanner;
-import org.jkiss.dbeaver.model.text.parser.TPToken;
 import org.jkiss.dbeaver.runtime.DBWorkbench;
 import org.junit.Assert;
 import org.junit.Before;
diff --git a/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/utils/RestTest.java b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/utils/RestTest.java
new file mode 100644
index 0000000..287b7f2
--- /dev/null
+++ b/test/org.jkiss.dbeaver.test.platform/src/org/jkiss/utils/RestTest.java
@@ -0,0 +1,96 @@
+/*
+ * DBeaver - Universal Database Manager
+ * Copyright (C) 2010-2023 DBeaver Corp and others
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.jkiss.utils;
+
+import org.jkiss.code.NotNull;
+import org.jkiss.code.Nullable;
+import org.jkiss.utils.rest.RequestMapping;
+import org.jkiss.utils.rest.RequestParameter;
+import org.jkiss.utils.rest.RestClient;
+import org.jkiss.utils.rest.RestServer;
+import org.junit.Assert;
+import org.junit.Test;
+
+import java.net.URI;
+import java.util.Map;
+
+public class RestTest {
+    @Test
+    public void restClientServerTest() {
+        final RestServer<Controller> server = RestServer
+            .builder(Controller.class, new ControllerImpl())
+            .setFilter(address -> address.getAddress().isLoopbackAddress())
+            .create();
+
+        final Controller client = RestClient
+            .builder(URI.create("http://localhost:" + server.getAddress().getPort()), Controller.class)
+            .create();
+
+        Assert.assertEquals("1.0", client.getVersion());
+        Assert.assertEquals(Map.of("version", "1.0", "name", "dbeaver"), client.getSettings());
+        Assert.assertEquals("1.0", client.getSetting("version"));
+        Assert.assertEquals("dbeaver", client.getSetting("name"));
+        Assert.assertEquals("cool", client.getSetting("something", "cool"));
+        Assert.assertNull(client.getSetting("something"));
+
+        server.stop();
+    }
+
+    private interface Controller {
+        @NotNull
+        @RequestMapping("version")
+        String getVersion();
+
+        @NotNull
+        @RequestMapping("settings")
+        Map<String, Object> getSettings();
+
+        @Nullable
+        @RequestMapping("setting")
+        Object getSetting(@RequestParameter("key") @NotNull String key);
+
+        @Nullable
+        @RequestMapping("setting/default")
+        Object getSetting(@RequestParameter("key") @NotNull String key, @RequestParameter("default") @Nullable Object def);
+    }
+
+    private static class ControllerImpl implements Controller {
+        @NotNull
+        @Override
+        public String getVersion() {
+            return "1.0";
+        }
+
+        @NotNull
+        @Override
+        public Map<String, Object> getSettings() {
+            return Map.of("version", "1.0", "name", "dbeaver");
+        }
+
+        @Nullable
+        @Override
+        public Object getSetting(@NotNull String key) {
+            return getSettings().get(key);
+        }
+
+        @Nullable
+        @Override
+        public Object getSetting(@NotNull String key, @Nullable Object def) {
+            return getSettings().getOrDefault(key, def);
+        }
+    }
+}

diff --git a/server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java
index d123cb0..db0a89b 100644
--- a/server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java
+++ b/server/src/test/java/org/elasticsearch/action/admin/cluster/node/stats/NodeStatsTests.java
@@ -72,7 +72,6 @@ import org.elasticsearch.search.suggest.completion.CompletionStats;
 import org.elasticsearch.test.ESTestCase;
 import org.elasticsearch.test.VersionUtils;
 import org.elasticsearch.threadpool.ThreadPoolStats;
-import org.elasticsearch.threadpool.ThreadPoolStatsTests;
 import org.elasticsearch.transport.TransportActionStats;
 import org.elasticsearch.transport.TransportStats;
 import org.elasticsearch.xcontent.ToXContent;
@@ -90,6 +89,7 @@ import java.util.stream.IntStream;
 import static java.util.Collections.emptyMap;
 import static java.util.Collections.emptySet;
 import static org.elasticsearch.test.AbstractChunkedSerializingTestCase.assertChunkCount;
+import static org.elasticsearch.threadpool.ThreadPoolStatsTests.randomStats;
 
 public class NodeStatsTests extends ESTestCase {
     public void testSerialization() throws IOException {
@@ -795,12 +795,9 @@ public class NodeStatsTests extends ESTestCase {
         }
         ThreadPoolStats threadPoolStats = null;
         if (frequently()) {
-            var numThreadPoolStats = randomIntBetween(0, 10);
-            var threadPoolStatsList = new ArrayList<ThreadPoolStats.Stats>();
-            for (int i = 0; i < numThreadPoolStats; i++) {
-                threadPoolStatsList.add(ThreadPoolStatsTests.randomStats(randomAlphaOfLengthBetween(3, 10)));
-            }
-            threadPoolStats = new ThreadPoolStats(threadPoolStatsList);
+            threadPoolStats = new ThreadPoolStats(
+                IntStream.range(0, randomIntBetween(0, 10)).mapToObj(i -> randomStats(randomAlphaOfLengthBetween(3, 10))).toList()
+            );
         }
         FsInfo fsInfo = null;
         if (frequently()) {
diff --git a/server/src/test/java/org/elasticsearch/threadpool/ThreadPoolStatsTests.java b/server/src/test/java/org/elasticsearch/threadpool/ThreadPoolStatsTests.java
index fd9abcd..95080f1 100644
--- a/server/src/test/java/org/elasticsearch/threadpool/ThreadPoolStatsTests.java
+++ b/server/src/test/java/org/elasticsearch/threadpool/ThreadPoolStatsTests.java
@@ -18,27 +18,59 @@ import java.util.List;
 
 import static org.elasticsearch.threadpool.ThreadPool.THREAD_POOL_TYPES;
 import static org.hamcrest.Matchers.contains;
+import static org.hamcrest.Matchers.containsInAnyOrder;
+import static org.hamcrest.Matchers.hasSize;
 
 public class ThreadPoolStatsTests extends ESTestCase {
-    public void testThreadPoolStatsSort() {
-        var stats = List.of(
-            new ThreadPoolStats.Stats("z", -1, 0, 0, 0, 0, 0L),
-            new ThreadPoolStats.Stats("m", 3, 0, 0, 0, 0, 0L),
-            new ThreadPoolStats.Stats("m", 1, 0, 0, 0, 0, 0L),
-            new ThreadPoolStats.Stats("d", -1, 0, 0, 0, 0, 0L),
-            new ThreadPoolStats.Stats("m", 2, 0, 0, 0, 0, 0L),
-            new ThreadPoolStats.Stats("t", -1, 0, 0, 0, 0, 0L),
+    public void testThreadPoolStatsConstructorSortTheStats() {
+        var unorderedStats = List.of(
+            new ThreadPoolStats.Stats("z", 7, 0, 0, 0, 0, 0L),
+            new ThreadPoolStats.Stats("m", 5, 0, 0, 0, 0, 0L),
+            new ThreadPoolStats.Stats("m", -3, 0, 0, 0, 0, 0L),
+            new ThreadPoolStats.Stats("d", 2, 0, 0, 0, 0, 0L),
+            new ThreadPoolStats.Stats("m", 4, 0, 0, 0, 0, 0L),
+            new ThreadPoolStats.Stats("t", 6, 0, 0, 0, 0, 0L),
             new ThreadPoolStats.Stats("a", -1, 0, 0, 0, 0, 0L)
         );
 
-        var copy = new ArrayList<>(stats);
+        var copy = new ArrayList<>(unorderedStats);
         Collections.sort(copy);
 
-        var names = copy.stream().map(ThreadPoolStats.Stats::name).toList();
-        assertThat(names, contains("a", "d", "m", "m", "m", "t", "z"));
+        var threadPoolStats = new ThreadPoolStats(unorderedStats);
+        assertThat(threadPoolStats.stats().stream().map(ThreadPoolStats.Stats::name).toList(), contains("a", "d", "m", "m", "m", "t", "z"));
+        assertThat(threadPoolStats.stats().stream().map(ThreadPoolStats.Stats::threads).toList(), contains(-1, 2, -3, 4, 5, 6, 7));
+    }
+
+    public void testMergeThreadPoolStats() {
+        var firstStats = List.of(randomStats("name-1"), randomStats("name-2"), randomStats("name-3"));
+        var secondStats = List.of(randomStats("name-4"), randomStats("name-5"), randomStats("name-2"), randomStats("name-3"));
+
+        var tps1 = new ThreadPoolStats(firstStats);
+        var tps2 = new ThreadPoolStats(secondStats);
+        var target = ThreadPoolStats.merge(tps1, tps2);
+
+        assertThat(target.stats(), hasSize(5));
+        assertThat(
+            target.stats(),
+            containsInAnyOrder(
+                firstStats.get(0), // name-1
+                ThreadPoolStats.Stats.merge(firstStats.get(1), secondStats.get(2)), // name-2
+                ThreadPoolStats.Stats.merge(firstStats.get(2), secondStats.get(3)), // name-3
+                secondStats.get(0), // name-4
+                secondStats.get(1) // name-5
+            )
+        );
+    }
+
+    public void testStatsMerge() {
+        assertEquals(ThreadPoolStats.Stats.merge(stats(-1), stats(-1)), stats(-1));
+        assertEquals(ThreadPoolStats.Stats.merge(stats(1), stats(-1)), stats(1));
+        assertEquals(ThreadPoolStats.Stats.merge(stats(-1), stats(1)), stats(1));
+        assertEquals(ThreadPoolStats.Stats.merge(stats(1), stats(2)), stats(3));
+    }
 
-        var threads = copy.stream().map(ThreadPoolStats.Stats::threads).toList();
-        assertThat(threads, contains(-1, -1, 1, 2, 3, -1, -1));
+    private static ThreadPoolStats.Stats stats(int value) {
+        return new ThreadPoolStats.Stats("a", value, value, value, value, value, value);
     }
 
     public void testSerialization() throws IOException {
@@ -72,6 +104,6 @@ public class ThreadPoolStatsTests extends ESTestCase {
     }
 
     private static int randomMinusOneOrOther() {
-        return randomBoolean() ? -1 : randomIntBetween(0, Integer.MAX_VALUE);
+        return randomBoolean() ? -1 : randomIntBetween(0, 1000);
     }
 }

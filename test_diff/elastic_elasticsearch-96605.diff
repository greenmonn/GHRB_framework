diff --git a/x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/rate/InternalResetTrackingRateTests.java b/x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/rate/InternalResetTrackingRateTests.java
index 04f88cc..e12697e 100644
--- a/x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/rate/InternalResetTrackingRateTests.java
+++ b/x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/rate/InternalResetTrackingRateTests.java
@@ -7,6 +7,7 @@
 
 package org.elasticsearch.xpack.analytics.rate;
 
+import org.elasticsearch.common.Rounding;
 import org.elasticsearch.common.util.CollectionUtils;
 import org.elasticsearch.plugins.SearchPlugin;
 import org.elasticsearch.search.aggregations.Aggregation;
@@ -28,6 +29,18 @@ import static org.mockito.Mockito.mock;
 
 public class InternalResetTrackingRateTests extends InternalAggregationTestCase<InternalResetTrackingRate> {
 
+    private static final int MILLIS_IN_SECOND = 1_000;
+    private static final int SECONDS_IN_MINUTE = 60;
+    private static final int MILLIS_IN_MINUTE = MILLIS_IN_SECOND * SECONDS_IN_MINUTE;
+    private static final int MINUTES_IN_HOUR = 60;
+    private static final int MILLIS_IN_HOUR = MILLIS_IN_SECOND * SECONDS_IN_MINUTE * MINUTES_IN_HOUR;
+    private static final int HOURS_IN_DAY = 24;
+    private static final int MILLIS_IN_DAY = MILLIS_IN_SECOND * SECONDS_IN_MINUTE * MINUTES_IN_HOUR * HOURS_IN_DAY;
+    private static final int DAYS_IN_WEEK = 7;
+    private static final int MILLIS_IN_WEEK = MILLIS_IN_SECOND * SECONDS_IN_MINUTE * MINUTES_IN_HOUR * HOURS_IN_DAY * DAYS_IN_WEEK;
+    private static final int MONTHS_IN_QUARTER = 3;
+    private static final int MONTHS_IN_YEAR = 12;
+
     @Override
     protected SearchPlugin registerPlugin() {
         return new AnalyticsPlugin();
@@ -35,32 +48,58 @@ public class InternalResetTrackingRateTests extends InternalAggregationTestCase<
 
     @Override
     protected InternalResetTrackingRate createTestInstance(String name, Map<String, Object> metadata) {
-        return new InternalResetTrackingRate(name, null, metadata, 0, 0, 0, 0, 0);
+        return new InternalResetTrackingRate(name, null, metadata, 0, 0, 0, 0, 0, Rounding.DateTimeUnit.SECOND_OF_MINUTE);
     }
 
-    private static InternalResetTrackingRate rate(double startValue, double endValue, long startTime, long endTime, double resetComp) {
-        return new InternalResetTrackingRate("n", null, null, startValue, endValue, startTime, endTime, resetComp);
+    private static InternalResetTrackingRate rate(
+        double startValue,
+        double endValue,
+        long startTime,
+        long endTime,
+        double resetComp,
+        Rounding.DateTimeUnit rateUnit
+    ) {
+        return new InternalResetTrackingRate("n", null, null, startValue, endValue, startTime, endTime, resetComp, rateUnit);
     }
 
-    public void testReduction() {
-        List<InternalAggregation> rates = List.of(
-            rate(0, 10, 1000, 2000, 0),
-            rate(10, 20, 2000, 3000, 0),
-            rate(20, 5, 3000, 4000, 25), // internal reset
-            rate(5, 15, 4000, 5000, 0),
-            rate(0, 10, 5000, 6000, 0)  // cross-boundary reset
-        );
-        InternalAggregation reduced = rates.get(0).reduce(rates, null);
-        assertThat(reduced, instanceOf(Rate.class));
-        assertThat(((Rate) reduced).getValue(), equalTo(0.01));
+    public void testReductionSecond() {
+        testReduction(Rounding.DateTimeUnit.SECOND_OF_MINUTE, 0.01 * MILLIS_IN_SECOND);
+    }
+
+    public void testReductionMinute() {
+        testReduction(Rounding.DateTimeUnit.MINUTES_OF_HOUR, 0.01 * MILLIS_IN_MINUTE);
+    }
+
+    public void testReductionHour() {
+        testReduction(Rounding.DateTimeUnit.HOUR_OF_DAY, 0.01 * MILLIS_IN_HOUR);
+    }
+
+    public void testReductionDay() {
+        testReduction(Rounding.DateTimeUnit.DAY_OF_MONTH, 0.01 * MILLIS_IN_DAY);
+    }
+
+    public void testReductionWeek() {
+        testReduction(Rounding.DateTimeUnit.WEEK_OF_WEEKYEAR, 0.01 * MILLIS_IN_WEEK);
+    }
+
+    public void testReductionMonth() {
+        testReduction(Rounding.DateTimeUnit.MONTH_OF_YEAR, 26297.46 * MILLIS_IN_SECOND);
+    }
+
+    public void testReductionQuarter() {
+        testReduction(Rounding.DateTimeUnit.QUARTER_OF_YEAR, 26297.46 * MILLIS_IN_SECOND * MONTHS_IN_QUARTER);
+    }
+
+    public void testReductionYear() {
+        testReduction(Rounding.DateTimeUnit.YEAR_OF_CENTURY, 26297.46 * MILLIS_IN_SECOND * MONTHS_IN_YEAR);
     }
 
     @Override
     protected void assertReduced(InternalResetTrackingRate reduced, List<InternalResetTrackingRate> inputs) {
         for (InternalResetTrackingRate input : inputs) {
-            assertEquals(0.01f, input.getValue(), 0.001);
+            assertEquals(0.01f * MILLIS_IN_SECOND, input.getValue(), 0.01);
         }
-        assertEquals(0.01f, reduced.getValue(), 0.001);
+        assertEquals(0.01f * MILLIS_IN_SECOND, reduced.getValue(), 0.01);
     }
 
     // Buckets must always be in-order so that we can detect resets between consecutive buckets
@@ -88,7 +127,7 @@ public class InternalResetTrackingRateTests extends InternalAggregationTestCase<
                 currentValue = 0;
             }
             if (randomInt(45) == 0) {
-                internalRates.add(rate(startValue, currentValue, startTime, endTime, resetComp));
+                internalRates.add(rate(startValue, currentValue, startTime, endTime, resetComp, Rounding.DateTimeUnit.SECOND_OF_MINUTE));
                 startValue = currentValue;
                 resetComp = 0;
                 startTime = endTime;
@@ -98,7 +137,7 @@ public class InternalResetTrackingRateTests extends InternalAggregationTestCase<
             endTime += 1000;
             currentValue += 10;
         }
-        internalRates.add(rate(startValue, currentValue, startTime, endTime, resetComp));
+        internalRates.add(rate(startValue, currentValue, startTime, endTime, resetComp, Rounding.DateTimeUnit.SECOND_OF_MINUTE));
         return new BuilderAndToReduce<>(mock(RateAggregationBuilder.class), internalRates);
     }
 
@@ -119,12 +158,42 @@ public class InternalResetTrackingRateTests extends InternalAggregationTestCase<
     }
 
     public void testIncludes() {
-        InternalResetTrackingRate big = new InternalResetTrackingRate("n", null, null, 0, 0, 1000, 3000, 0);
-        InternalResetTrackingRate small = new InternalResetTrackingRate("n", null, null, 0, 0, 1500, 2500, 0);
+        InternalResetTrackingRate big = new InternalResetTrackingRate(
+            "n",
+            null,
+            null,
+            0,
+            0,
+            1000,
+            3000,
+            0,
+            Rounding.DateTimeUnit.SECOND_OF_MINUTE
+        );
+        InternalResetTrackingRate small = new InternalResetTrackingRate(
+            "n",
+            null,
+            null,
+            0,
+            0,
+            1500,
+            2500,
+            0,
+            Rounding.DateTimeUnit.SECOND_OF_MINUTE
+        );
         assertTrue(big.includes(small));
         assertFalse(small.includes(big));
 
-        InternalResetTrackingRate unrelated = new InternalResetTrackingRate("n", null, null, 0, 0, 100000, 1000010, 0);
+        InternalResetTrackingRate unrelated = new InternalResetTrackingRate(
+            "n",
+            null,
+            null,
+            0,
+            0,
+            100000,
+            1000010,
+            0,
+            Rounding.DateTimeUnit.SECOND_OF_MINUTE
+        );
         assertFalse(big.includes(unrelated));
         assertFalse(unrelated.includes(big));
         assertFalse(small.includes(unrelated));
@@ -135,4 +204,17 @@ public class InternalResetTrackingRateTests extends InternalAggregationTestCase<
     protected InternalResetTrackingRate mutateInstance(InternalResetTrackingRate instance) {
         return null;// TODO implement https://github.com/elastic/elasticsearch/issues/25929
     }
+
+    private static void testReduction(final Rounding.DateTimeUnit dateTimeUnit, double operand) {
+        List<InternalAggregation> rates = List.of(
+            rate(0, 10, 1000, 2000, 0, dateTimeUnit),
+            rate(10, 20, 2000, 3000, 0, dateTimeUnit),
+            rate(20, 5, 3000, 4000, 25, dateTimeUnit), // internal reset
+            rate(5, 15, 4000, 5000, 0, dateTimeUnit),
+            rate(0, 10, 5000, 6000, 0, dateTimeUnit)  // cross-boundary reset
+        );
+        InternalAggregation reduced = rates.get(0).reduce(rates, null);
+        assertThat(reduced, instanceOf(Rate.class));
+        assertThat(((Rate) reduced).getValue(), equalTo(operand));
+    }
 }
diff --git a/x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/rate/TimeSeriesRateAggregatorTests.java b/x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/rate/TimeSeriesRateAggregatorTests.java
index 81073f9..32a337f 100644
--- a/x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/rate/TimeSeriesRateAggregatorTests.java
+++ b/x-pack/plugin/analytics/src/test/java/org/elasticsearch/xpack/analytics/rate/TimeSeriesRateAggregatorTests.java
@@ -40,6 +40,8 @@ import static org.hamcrest.Matchers.instanceOf;
 
 public class TimeSeriesRateAggregatorTests extends AggregatorTestCase {
 
+    private static final int MILLIS_IN_SECOND = 1_000;
+
     @Override
     protected List<SearchPlugin> getSearchPlugins() {
         return List.of(new AggregationsPlugin(), new AnalyticsPlugin());
@@ -51,8 +53,14 @@ public class TimeSeriesRateAggregatorTests extends AggregatorTestCase {
         tsBuilder.subAggregation(builder);
         Consumer<InternalTimeSeries> verifier = r -> {
             assertThat(r.getBuckets(), hasSize(2));
-            assertThat(((Rate) r.getBucketByKey("{dim=1}").getAggregations().asList().get(0)).getValue(), closeTo(59.0 / 3000.0, 0.00001));
-            assertThat(((Rate) r.getBucketByKey("{dim=2}").getAggregations().asList().get(0)).getValue(), closeTo(206.0 / 4000.0, 0.00001));
+            assertThat(
+                ((Rate) r.getBucketByKey("{dim=1}").getAggregations().asList().get(0)).getValue(),
+                closeTo(59.0 / 3000.0 * MILLIS_IN_SECOND, 0.00001)
+            );
+            assertThat(
+                ((Rate) r.getBucketByKey("{dim=2}").getAggregations().asList().get(0)).getValue(),
+                closeTo(206.0 / 4000.0 * MILLIS_IN_SECOND, 0.00001)
+            );
         };
         AggTestConfig aggTestConfig = new AggTestConfig(tsBuilder, timeStampField(), counterField("counter_field"))
             .withSplitLeavesIntoSeperateAggregators(false);
@@ -77,20 +85,20 @@ public class TimeSeriesRateAggregatorTests extends AggregatorTestCase {
             InternalDateHistogram hb = r.getBucketByKey("{dim=1}").getAggregations().get("date");
             {
                 Rate rate = hb.getBuckets().get(1).getAggregations().get("counter_field");
-                assertThat(rate.getValue(), closeTo((60 - 37 + 14) / 2000.0, 0.00001));
+                assertThat(rate.getValue(), closeTo((60 - 37 + 14) / 2000.0 * MILLIS_IN_SECOND, 0.00001));
             }
             {
                 Rate rate = hb.getBuckets().get(0).getAggregations().get("counter_field");
-                assertThat(rate.getValue(), closeTo((37 - 15) / 1000.0, 0.00001));
+                assertThat(rate.getValue(), closeTo((37 - 15) / 1000.0 * MILLIS_IN_SECOND, 0.00001));
             }
             hb = r.getBucketByKey("{dim=2}").getAggregations().get("date");
             {
                 Rate rate = hb.getBuckets().get(0).getAggregations().get("counter_field");
-                assertThat(rate.getValue(), closeTo((150 - 74) / 1000.0, 0.00001));
+                assertThat(rate.getValue(), closeTo((150 - 74) / 1000.0 * MILLIS_IN_SECOND, 0.00001));
             }
             {
                 Rate rate = hb.getBuckets().get(1).getAggregations().get("counter_field");
-                assertThat(rate.getValue(), closeTo(90 / 2000.0, 0.00001));
+                assertThat(rate.getValue(), closeTo(90 / 2000.0 * MILLIS_IN_SECOND, 0.00001));
             }
         };
 

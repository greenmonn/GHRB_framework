diff --git a/server/src/test/java/org/elasticsearch/script/ScriptContextStatsTests.java b/server/src/test/java/org/elasticsearch/script/ScriptContextStatsTests.java
new file mode 100644
index 0000000..2ece53f
--- /dev/null
+++ b/server/src/test/java/org/elasticsearch/script/ScriptContextStatsTests.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
+ * or more contributor license agreements. Licensed under the Elastic License
+ * 2.0 and the Server Side Public License, v 1; you may not use this file except
+ * in compliance with, at your election, the Elastic License 2.0 or the Server
+ * Side Public License, v 1.
+ */
+
+package org.elasticsearch.script;
+
+import org.elasticsearch.test.ESTestCase;
+
+import static org.elasticsearch.script.TimeSeriesTests.randomTimeseries;
+
+public class ScriptContextStatsTests extends ESTestCase {
+    public void testMerge() {
+        {
+            var first = randomScriptContextStats();
+            var second = randomScriptContextStats();
+
+            var e = expectThrows(AssertionError.class, () -> ScriptContextStats.merge(first, second));
+            assertEquals(e.getMessage(), "To merge 2 ScriptContextStats both of them must have the same context.");
+        }
+        {
+            var context = randomAlphaOfLength(30);
+            var first = randomScriptContextStats(context);
+            var second = randomScriptContextStats(context);
+
+            assertEquals(
+                ScriptContextStats.merge(first, second),
+                new ScriptContextStats(
+                    context,
+                    first.compilations() + second.compilations(),
+                    TimeSeries.merge(first.compilationsHistory(), second.compilationsHistory()),
+                    first.cacheEvictions() + second.cacheEvictions(),
+                    TimeSeries.merge(first.cacheEvictionsHistory(), second.cacheEvictionsHistory()),
+                    first.compilationLimitTriggered() + second.compilationLimitTriggered()
+                )
+            );
+        }
+    }
+
+    public static ScriptContextStats randomScriptContextStats() {
+        return randomScriptContextStats(randomAlphaOfLength(30));
+    }
+
+    public static ScriptContextStats randomScriptContextStats(String contextName) {
+        return new ScriptContextStats(
+            contextName,
+            randomLongBetween(0, 10000),
+            randomTimeseries(),
+            randomLongBetween(0, 10000),
+            randomTimeseries(),
+            randomLongBetween(0, 10000)
+        );
+    }
+
+}
diff --git a/server/src/test/java/org/elasticsearch/script/ScriptStatsTests.java b/server/src/test/java/org/elasticsearch/script/ScriptStatsTests.java
index 5dcda94..83823bf 100644
--- a/server/src/test/java/org/elasticsearch/script/ScriptStatsTests.java
+++ b/server/src/test/java/org/elasticsearch/script/ScriptStatsTests.java
@@ -22,6 +22,8 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Function;
 
+import static org.elasticsearch.script.ScriptContextStatsTests.randomScriptContextStats;
+import static org.elasticsearch.script.TimeSeriesTests.randomTimeseries;
 import static org.hamcrest.Matchers.equalTo;
 
 public class ScriptStatsTests extends ESTestCase {
@@ -166,6 +168,38 @@ public class ScriptStatsTests extends ESTestCase {
         assertEquals(stats, deserStats);
     }
 
+    public void testMerge() {
+        var first = randomScriptStats();
+        var second = randomScriptStats();
+
+        assertEquals(
+            ScriptStats.merge(first, second),
+            new ScriptStats(
+                List.of(
+                    ScriptContextStats.merge(first.contextStats().get(0), second.contextStats().get(0)),
+                    ScriptContextStats.merge(first.contextStats().get(1), second.contextStats().get(1)),
+                    ScriptContextStats.merge(first.contextStats().get(2), second.contextStats().get(2))
+                ),
+                first.compilations() + second.compilations(),
+                first.cacheEvictions() + second.cacheEvictions(),
+                first.compilationLimitTriggered() + second.compilationLimitTriggered(),
+                TimeSeries.merge(first.compilationsHistory(), second.compilationsHistory()),
+                TimeSeries.merge(first.cacheEvictionsHistory(), second.cacheEvictionsHistory())
+            )
+        );
+    }
+
+    public static ScriptStats randomScriptStats() {
+        return new ScriptStats(
+            List.of(randomScriptContextStats("context-a"), randomScriptContextStats("context-b"), randomScriptContextStats("context-c")),
+            randomLongBetween(0, 10000),
+            randomLongBetween(0, 10000),
+            randomLongBetween(0, 10000),
+            randomTimeseries(),
+            randomTimeseries()
+        );
+    }
+
     public ScriptContextStats serDeser(TransportVersion outVersion, TransportVersion inVersion, ScriptContextStats stats)
         throws IOException {
         try (BytesStreamOutput out = new BytesStreamOutput()) {
diff --git a/server/src/test/java/org/elasticsearch/script/TimeSeriesTests.java b/server/src/test/java/org/elasticsearch/script/TimeSeriesTests.java
new file mode 100644
index 0000000..f4c36d6
--- /dev/null
+++ b/server/src/test/java/org/elasticsearch/script/TimeSeriesTests.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
+ * or more contributor license agreements. Licensed under the Elastic License
+ * 2.0 and the Server Side Public License, v 1; you may not use this file except
+ * in compliance with, at your election, the Elastic License 2.0 or the Server
+ * Side Public License, v 1.
+ */
+
+package org.elasticsearch.script;
+
+import org.elasticsearch.test.ESTestCase;
+
+public class TimeSeriesTests extends ESTestCase {
+    public void testMerge() {
+        var first = randomTimeseries();
+        var second = randomTimeseries();
+
+        assertEquals(
+            TimeSeries.merge(first, second),
+            new TimeSeries(
+                first.fiveMinutes + second.fiveMinutes,
+                first.fifteenMinutes + second.fifteenMinutes,
+                first.twentyFourHours + second.twentyFourHours,
+                first.total + second.total
+            )
+        );
+    }
+
+    static TimeSeries randomTimeseries() {
+        return new TimeSeries(
+            randomLongBetween(0, 10000),
+            randomLongBetween(0, 10000),
+            randomLongBetween(0, 10000),
+            randomLongBetween(0, 10000)
+        );
+    }
+}

diff --git a/server/src/test/java/org/elasticsearch/search/internal/ContextIndexSearcherTests.java b/server/src/test/java/org/elasticsearch/search/internal/ContextIndexSearcherTests.java
index c075853..a830709 100644
--- a/server/src/test/java/org/elasticsearch/search/internal/ContextIndexSearcherTests.java
+++ b/server/src/test/java/org/elasticsearch/search/internal/ContextIndexSearcherTests.java
@@ -45,6 +45,7 @@ import org.apache.lucene.search.TermQuery;
 import org.apache.lucene.search.TopDocs;
 import org.apache.lucene.search.Weight;
 import org.apache.lucene.store.Directory;
+import org.apache.lucene.tests.index.RandomIndexWriter;
 import org.apache.lucene.util.Accountable;
 import org.apache.lucene.util.BitSet;
 import org.apache.lucene.util.BitSetIterator;
@@ -66,6 +67,7 @@ import org.elasticsearch.test.IndexSettingsModule;
 
 import java.io.IOException;
 import java.io.UncheckedIOException;
+import java.util.Arrays;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.IdentityHashMap;
@@ -80,7 +82,9 @@ import static org.elasticsearch.search.internal.ExitableDirectoryReader.Exitable
 import static org.elasticsearch.search.internal.ExitableDirectoryReader.ExitablePointValues;
 import static org.elasticsearch.search.internal.ExitableDirectoryReader.ExitableTerms;
 import static org.hamcrest.Matchers.equalTo;
+import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.lessThanOrEqualTo;
 
 public class ContextIndexSearcherTests extends ESTestCase {
     public void testIntersectScorerAndRoleBits() throws Exception {
@@ -376,6 +380,45 @@ public class ContextIndexSearcherTests extends ESTestCase {
         IOUtils.close(reader, w, dir);
     }
 
+    public void testComputeSlices() throws IOException {
+        Directory dir = newDirectory();
+        RandomIndexWriter w = new RandomIndexWriter(random(), dir);
+        int numDocs = rarely() ? randomIntBetween(0, 1000) : randomIntBetween(1000, 25000);
+        Document doc = new Document();
+        for (int i = 0; i < numDocs; i++) {
+            w.addDocument(doc);
+        }
+        DirectoryReader reader = w.getReader();
+        List<LeafReaderContext> contexts = reader.leaves();
+        int iter = randomIntBetween(16, 64);
+        for (int i = 0; i < iter; i++) {
+            int numThreads = randomIntBetween(1, 16);
+            IndexSearcher.LeafSlice[] slices = ContextIndexSearcher.computeSlices(contexts, numThreads, 1);
+            assertSlices(slices, numDocs, numThreads);
+        }
+        // expect exception for numThreads < 1
+        int numThreads = randomIntBetween(-16, 0);
+        IllegalArgumentException ex = expectThrows(
+            IllegalArgumentException.class,
+            () -> ContextIndexSearcher.computeSlices(contexts, numThreads, 1)
+        );
+        assertThat(ex.getMessage(), equalTo("maxSliceNum must be >= 1 (got " + numThreads + ")"));
+        IOUtils.close(reader, w, dir);
+    }
+
+    private void assertSlices(IndexSearcher.LeafSlice[] slices, int numDocs, int numThreads) {
+        // checks that the number of slices is not bigger than the number of available threads
+        // and each slice contains at least 10% of the data (which means the max number of slices is 10)
+        int sumDocs = 0;
+        assertThat(slices.length, lessThanOrEqualTo(numThreads));
+        for (IndexSearcher.LeafSlice slice : slices) {
+            int sliceDocs = Arrays.stream(slice.leaves).mapToInt(l -> l.reader().maxDoc()).sum();
+            assertThat(sliceDocs, greaterThanOrEqualTo((int) (0.1 * numDocs)));
+            sumDocs += sliceDocs;
+        }
+        assertThat(sumDocs, equalTo(numDocs));
+    }
+
     public void testExitableTermsMinAndMax() throws IOException {
         Directory dir = newDirectory();
         IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(null));

diff --git a/server/src/test/java/org/elasticsearch/search/query/NonCountingTermQuery.java b/server/src/test/java/org/elasticsearch/search/query/NonCountingTermQuery.java
index 649417f..502345cf 100644
--- a/server/src/test/java/org/elasticsearch/search/query/NonCountingTermQuery.java
+++ b/server/src/test/java/org/elasticsearch/search/query/NonCountingTermQuery.java
@@ -29,10 +29,11 @@ class NonCountingTermQuery extends TermQuery {
         super(term);
     }
 
+    @Override
     public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {
         Weight w = super.createWeight(searcher, scoreMode, boost);
         return new FilterWeight(w) {
-            public int count(LeafReaderContext context) throws IOException {
+            public int count(LeafReaderContext context) {
                 return -1;
             }
         };
diff --git a/server/src/test/java/org/elasticsearch/search/query/QueryPhaseCollectorTests.java b/server/src/test/java/org/elasticsearch/search/query/QueryPhaseCollectorTests.java
index bb2519f..8cad9df 100644
--- a/server/src/test/java/org/elasticsearch/search/query/QueryPhaseCollectorTests.java
+++ b/server/src/test/java/org/elasticsearch/search/query/QueryPhaseCollectorTests.java
@@ -948,8 +948,22 @@ public class QueryPhaseCollectorTests extends ESTestCase {
 
     public void testSetMinCompetitiveScoreIsEnabledTopDocsOnly() throws IOException {
         // without aggs no need to disable set min competitive score
+        Weight filterWeight = null;
+        int terminateAfter = 0;
+        Float minScore = null;
+        if (randomBoolean()) {
+            if (randomBoolean()) {
+                filterWeight = new MatchAllDocsQuery().createWeight(searcher, ScoreMode.TOP_DOCS, 1f);
+            }
+            if (randomBoolean()) {
+                terminateAfter = randomIntBetween(1, Integer.MAX_VALUE);
+            }
+            if (randomBoolean()) {
+                minScore = 0f;
+            }
+        }
         TopScoresCollector topDocs = new TopScoresCollector();
-        Collector queryPhaseCollector = new QueryPhaseCollector(topDocs, null, 0, null, null);
+        Collector queryPhaseCollector = new QueryPhaseCollector(topDocs, filterWeight, terminateAfter, null, minScore);
         LeafReaderContext leafReaderContext = searcher.getLeafContexts().get(0);
         LeafCollector leafCollector = queryPhaseCollector.getLeafCollector(leafReaderContext);
         MinCompetitiveScoreScorable scorer = new MinCompetitiveScoreScorable();
@@ -959,9 +973,24 @@ public class QueryPhaseCollectorTests extends ESTestCase {
     }
 
     public void testSetMinCompetitiveScoreIsDisabledWithAggs() throws IOException {
+        Weight filterWeight = null;
+        int terminateAfter = 0;
+        Float minScore = null;
+        if (randomBoolean()) {
+            if (randomBoolean()) {
+                TermQuery termQuery = new TermQuery(new Term("field2", "value"));
+                filterWeight = termQuery.createWeight(searcher, ScoreMode.TOP_DOCS, 1f);
+            }
+            if (randomBoolean()) {
+                terminateAfter = randomIntBetween(1, Integer.MAX_VALUE);
+            }
+            if (randomBoolean()) {
+                minScore = randomFloat();
+            }
+        }
         TopScoresCollector topDocs = new TopScoresCollector();
         Collector aggs = new MockCollector(randomBoolean() ? ScoreMode.COMPLETE : ScoreMode.COMPLETE_NO_SCORES);
-        Collector queryPhaseCollector = new QueryPhaseCollector(topDocs, null, 0, aggs, null);
+        Collector queryPhaseCollector = new QueryPhaseCollector(topDocs, filterWeight, terminateAfter, aggs, minScore);
         LeafReaderContext leafReaderContext = searcher.getLeafContexts().get(0);
         LeafCollector leafCollector = queryPhaseCollector.getLeafCollector(leafReaderContext);
         MinCompetitiveScoreScorable scorer = new MinCompetitiveScoreScorable();
@@ -1053,24 +1082,6 @@ public class QueryPhaseCollectorTests extends ESTestCase {
         assertTrue(mockCollector.competitiveIteratorCalled);
     }
 
-    public void testCompetitiveIteratorNoAggsCollectionTerminated() throws IOException {
-        // use a post_filter so that we wrap the top docs leaf collector, as this test verifies that
-        // the wrapper calls competitiveIterator when appropriated
-        Weight postFilterWeight = searcher.createWeight(new MatchAllDocsQuery(), ScoreMode.COMPLETE_NO_SCORES, 1.0f);
-        MockCollector mockCollector = new MockCollector(randomFrom(ScoreMode.values()));
-        TerminateAfterCollector terminateAfterCollector = new TerminateAfterCollector(mockCollector, 1);
-        QueryPhaseCollector queryPhaseCollector = new QueryPhaseCollector(terminateAfterCollector, postFilterWeight, 0, null, null);
-        LeafReaderContext context = searcher.getLeafContexts().get(0);
-        LeafCollector leafCollector = queryPhaseCollector.getLeafCollector(context);
-        leafCollector.competitiveIterator();
-        assertTrue(mockCollector.competitiveIteratorCalled);
-        mockCollector.competitiveIteratorCalled = false;
-        leafCollector.collect(0);
-        expectThrows(CollectionTerminatedException.class, () -> leafCollector.collect(1));
-        leafCollector.competitiveIterator();
-        assertFalse(mockCollector.competitiveIteratorCalled);
-    }
-
     public void testCompetitiveIteratorWithAggs() throws IOException {
         MockCollector topDocs = new MockCollector(randomFrom(ScoreMode.values()));
         MockCollector aggs = new MockCollector(randomScoreModeExceptTopScores());
@@ -1113,6 +1124,22 @@ public class QueryPhaseCollectorTests extends ESTestCase {
         assertFalse(aggsMockCollector.competitiveIteratorCalled);
     }
 
+    public void testLeafCollectorsAreNotPulledOnceTerminatedAfter() throws IOException {
+        {
+            MockCollector topDocsMockCollector = new MockCollector(randomFrom(ScoreMode.values()));
+            QueryPhaseCollector queryPhaseCollector = new QueryPhaseCollector(topDocsMockCollector, null, 1, null, null);
+            searcher.search(new NonCountingTermQuery(new Term("field1", "value")), queryPhaseCollector);
+            assertEquals(1, topDocsMockCollector.leafCollectorsPulled);
+        }
+        {
+            MockCollector topDocsMockCollector = new MockCollector(randomFrom(ScoreMode.values()));
+            MockCollector aggsMockCollector = new MockCollector(randomScoreModeExceptTopScores());
+            QueryPhaseCollector queryPhaseCollector = new QueryPhaseCollector(topDocsMockCollector, null, 1, aggsMockCollector, null);
+            searcher.search(new NonCountingTermQuery(new Term("field1", "value")), queryPhaseCollector);
+            assertEquals(1, topDocsMockCollector.leafCollectorsPulled);
+        }
+    }
+
     private static ScoreMode randomScoreModeExceptTopScores() {
         return randomFrom(Arrays.stream(ScoreMode.values()).filter(scoreMode -> scoreMode != ScoreMode.TOP_SCORES).toList());
     }
@@ -1181,7 +1208,7 @@ public class QueryPhaseCollectorTests extends ESTestCase {
 
         @Override
         public int docID() {
-            throw new UnsupportedOperationException();
+            return 0;
         }
 
         @Override
@@ -1196,6 +1223,7 @@ public class QueryPhaseCollectorTests extends ESTestCase {
         private boolean setScorerCalled = false;
         private boolean setWeightCalled = false;
         private boolean competitiveIteratorCalled = false;
+        private int leafCollectorsPulled = 0;
 
         MockCollector(ScoreMode scoreMode) {
             this(scoreMode, null);
@@ -1207,6 +1235,11 @@ public class QueryPhaseCollectorTests extends ESTestCase {
         }
 
         @Override
+        protected void doSetNextReader(LeafReaderContext context) {
+            leafCollectorsPulled++;
+        }
+
+        @Override
         public void setWeight(Weight weight) {
             setWeightCalled = true;
         }
diff --git a/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java b/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java
index 3a9cf22..a866e56 100644
--- a/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java
+++ b/server/src/test/java/org/elasticsearch/search/query/QueryPhaseTests.java
@@ -93,10 +93,12 @@ import java.util.List;
 import static org.elasticsearch.search.query.TopDocsCollectorManagerFactory.hasInfMaxScore;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.arrayWithSize;
+import static org.hamcrest.Matchers.either;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.instanceOf;
+import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.lessThan;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
@@ -351,92 +353,61 @@ public class QueryPhaseTests extends IndexShardTestCase {
     }
 
     /**
-     * Test the terminate after functionality when no hits are collected (size is set to 0) and the total hit count is
-     * shortcut by {@link org.apache.lucene.search.TotalHitCountCollector} using {@link Weight#count(LeafReaderContext)}.
-     * A match all query is used to leverage the hit count shortcut as it enables retrieving the count from the index statistics.
+     * Test the terminate after functionality when no hits are collected (size is set to 0) and the total hit count is shortcut by
+     * {@link org.apache.lucene.search.TotalHitCountCollector} using {@link Weight#count(LeafReaderContext)}. A match all query is used
+     * to leverage the hit count shortcut as it enables retrieving the count from the index statistics. Terminate_after has no effect as
+     * there is no collection effectively. It is fine that the total hit count is higher than the provided threshold in this case.
      */
     public void testTerminateAfterSize0HitCountShortcut() throws Exception {
-        indexDocs();
+        int numDocs = indexDocs();
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 1), new MatchAllDocsQuery());
+            TestSearchContext context = createContext(noCollectionContextSearcher(reader), new MatchAllDocsQuery());
             context.terminateAfter(1);
             context.setSize(0);
             QueryPhase.addCollectorsAndSearch(context);
-            assertTrue(context.queryResult().terminatedEarly());
-            assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo(getExpectedTotalHitCountWithShortcut(reader, 1)));
+            assertFalse(context.queryResult().terminatedEarly());
+            assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo((long) numDocs));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.EQUAL_TO));
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(0));
         }
         // test interaction between trackTotalHits and terminateAfter
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 10), new MatchAllDocsQuery());
+            TestSearchContext context = createContext(noCollectionContextSearcher(reader), new MatchAllDocsQuery());
             context.terminateAfter(10);
             context.setSize(0);
             context.trackTotalHitsUpTo(-1);
             QueryPhase.executeQuery(context);
-            assertTrue(context.queryResult().terminatedEarly());
+            assertFalse(context.queryResult().terminatedEarly());
             assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo(0L));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO));
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(0));
         }
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 10), new MatchAllDocsQuery());
+            TestSearchContext context = createContext(noCollectionContextSearcher(reader), new MatchAllDocsQuery());
             context.terminateAfter(10);
             context.setSize(0);
-            // track total hits is lower than terminate_after
-            context.trackTotalHitsUpTo(randomIntBetween(1, 9));
+            // terminate_after is not honored, no matter the value of track_total_hits.
+            context.trackTotalHitsUpTo(randomIntBetween(1, Integer.MAX_VALUE));
             QueryPhase.executeQuery(context);
-            assertTrue(context.queryResult().terminatedEarly());
+            assertFalse(context.queryResult().terminatedEarly());
             // Given that total hit count does not require collection, PartialHitCountCollector does not early terminate.
-            // The overall search, and consequently the total hit count collection, will early terminate based on the terminate_after value
-            assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo(getExpectedTotalHitCountWithShortcut(reader, 10)));
-            assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.EQUAL_TO));
-            assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(0));
-        }
-        {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 10), new MatchAllDocsQuery());
-            context.terminateAfter(10);
-            context.setSize(0);
-            // track total hits is greater than terminate_after but lower than the number of docs
-            context.trackTotalHitsUpTo(randomIntBetween(11, Integer.MAX_VALUE));
-            QueryPhase.executeQuery(context);
-            assertTrue(context.queryResult().terminatedEarly());
-            assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo(getExpectedTotalHitCountWithShortcut(reader, 10)));
+            assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo((long) numDocs));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.EQUAL_TO));
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(0));
         }
     }
 
     /**
-     * Computes the expected early terminated hit count when retrieved from {@link Weight#count(LeafReaderContext)}, given the
-     * <code>totalHitsThreshold</code>.
-     * {@link org.apache.lucene.search.TotalHitCountCollector} (used when size==0) shortcuts total hit count via
-     * {@link Weight#count(LeafReaderContext)} segment by segment. When that happens, {@link PartialHitCountCollector} will detect that
-     * the threshold is reached at the beginning of the following leaf collection. That means that the returned total hit count may be
-     * higher than <code>terminate_after</code> or <code>track_total_hits</code> (yet lower than the number of docs).
-     */
-    private static long getExpectedTotalHitCountWithShortcut(IndexReader reader, int totalHitsThreshold) {
-        int total = 0;
-        for (LeafReaderContext leaf : reader.leaves()) {
-            total += leaf.reader().numDocs();
-            if (total >= totalHitsThreshold) {
-                break;
-            }
-        }
-        return total;
-    }
-
-    /**
      * Test the terminate after functionality when no hits are collected (size is set to 0) and the
      * total hit count cannot be shortcut using {@link Weight#count(LeafReaderContext)}.
-     * We use a boolean query with two optional clauses, which makes it impossible to shortcut the total hit count. This test also
-     * requires disabling the query cache otherwise the count could be cached from previous runs and cause different behaviour.
+     * We use a special term query that doesn't expose doc count via Weight#count, which makes it impossible to shortcut the hit count.
+     * This test also requires disabling the query cache or the count could be cached from previous runs and cause different behaviour.
      */
     public void testTerminateAfterSize0NoHitCountShortcut() throws Exception {
         indexDocs();
         Query query = new NonCountingTermQuery(new Term("foo", "bar"));
         {
-            TestSearchContext context = createContext(newContextSearcher(reader), query);
+            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 1), query);
             context.terminateAfter(1);
             context.setSize(0);
             QueryPhase.executeQuery(context);
@@ -447,25 +418,28 @@ public class QueryPhaseTests extends IndexShardTestCase {
         }
         // test interaction between trackTotalHits and terminateAfter
         {
-            TestSearchContext context = createContext(newContextSearcher(reader), query);
+            TestSearchContext context = createContext(noCollectionContextSearcher(reader), query);
             context.terminateAfter(10);
             context.setSize(0);
+            // not tracking total hits makes the hit count collection early terminate, in which case terminate_after can't be honored
             context.trackTotalHitsUpTo(-1);
             QueryPhase.executeQuery(context);
-            assertTrue(context.queryResult().terminatedEarly());
+            assertFalse(context.queryResult().terminatedEarly());
             assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo(0L));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO));
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(0));
         }
         {
-            TestSearchContext context = createContext(newContextSearcher(reader), query);
+            // track total hits is lower than terminate_after, hit count collection early terminates, terminate_after is not honored
+            // we don't use 9 (terminate_after - 1) because it makes the test unpredictable depending on the number of segments and
+            // documents distribution: terminate_after may be honored at time due to the check before pulling each leaf collector.
+            int trackTotalHits = randomIntBetween(1, 8);
+            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, trackTotalHits), query);
             context.terminateAfter(10);
             context.setSize(0);
-            // track total hits is lower than terminate_after
-            int trackTotalHits = randomIntBetween(1, 9);
             context.trackTotalHitsUpTo(trackTotalHits);
             QueryPhase.executeQuery(context);
-            assertTrue(context.queryResult().terminatedEarly());
+            assertFalse(context.queryResult().terminatedEarly());
             assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo((long) trackTotalHits));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO));
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(0));
@@ -474,7 +448,7 @@ public class QueryPhaseTests extends IndexShardTestCase {
             TestSearchContext context = createContext(newContextSearcher(reader), query);
             context.terminateAfter(10);
             context.setSize(0);
-            // track total hits is higher than terminate_after
+            // track total hits is higher than terminate_after, in which case collection effectively terminates after 10 documents
             context.trackTotalHitsUpTo(randomIntBetween(11, Integer.MAX_VALUE));
             QueryPhase.executeQuery(context);
             assertTrue(context.queryResult().terminatedEarly());
@@ -488,6 +462,7 @@ public class QueryPhaseTests extends IndexShardTestCase {
      * Test the terminate after functionality when hits are collected (size is greater than 0) and the
      * total hit count is shortcut using {@link TopDocsCollectorManagerFactory#shortcutTotalHitCount(IndexReader, Query)}
      * A match all query is used to leverage the hit count shortcut as it enables retrieving the count from the index statistics.
+     * Note that track_total_hits is effectively ignored in this case, and the hit count threshold applied is instead <code>size</code>.
      */
     public void testTerminateAfterWithHitsHitCountShortcut() throws Exception {
         int numDocs = indexDocs();
@@ -503,6 +478,7 @@ public class QueryPhaseTests extends IndexShardTestCase {
         {
             TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 1), new MatchAllDocsQuery());
             context.terminateAfter(1);
+            // default track_total_hits, size 1: terminate_after kicks in first
             context.setSize(1);
             QueryPhase.addCollectorsAndSearch(context);
             assertTrue(context.queryResult().terminatedEarly());
@@ -514,6 +490,7 @@ public class QueryPhaseTests extends IndexShardTestCase {
         {
             TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), new MatchAllDocsQuery());
             context.terminateAfter(7);
+            // total hits tracking disabled but 10 hits need to be collected, terminate_after is lower than size, so it kicks in first
             context.setSize(10);
             context.trackTotalHitsUpTo(-1);
             QueryPhase.executeQuery(context);
@@ -525,10 +502,9 @@ public class QueryPhaseTests extends IndexShardTestCase {
         {
             TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), new MatchAllDocsQuery());
             context.terminateAfter(7);
-            // size is greater than terminate_after
+            // size is greater than terminate_after (track_total_hits does not matter): terminate_after kicks in first
             context.setSize(10);
-            // track_total_hits is lower than terminate_after
-            context.trackTotalHitsUpTo(randomIntBetween(1, 6));
+            context.trackTotalHitsUpTo(randomIntBetween(1, Integer.MAX_VALUE));
             QueryPhase.executeQuery(context);
             assertTrue(context.queryResult().terminatedEarly());
             assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo((long) numDocs));
@@ -536,30 +512,19 @@ public class QueryPhaseTests extends IndexShardTestCase {
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(7));
         }
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), new MatchAllDocsQuery());
+            int size = randomIntBetween(1, 6);
+            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, size), new MatchAllDocsQuery());
             context.terminateAfter(7);
-            // size is lower than terminate_after
-            context.setSize(5);
-            // track_total_hits is also lower than terminate_after
-            context.trackTotalHitsUpTo(randomIntBetween(1, 6));
+            // size is lower than terminate_after, track_total_hits does not matter: depending on docs distribution we may or may not be
+            // able to honor terminate_after. low scoring hits are skipped via setMinCompetitiveScore, which bypasses terminate_after
+            // until the next leaf collector is pulled, when that happens.
+            context.setSize(size);
+            context.trackTotalHitsUpTo(randomIntBetween(1, Integer.MAX_VALUE));
             QueryPhase.executeQuery(context);
-            assertTrue(context.queryResult().terminatedEarly());
+            assertThat(context.queryResult().terminatedEarly(), either(is(true)).or(is(false)));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo((long) numDocs));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.EQUAL_TO));
-            assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(5));
-        }
-        {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), new MatchAllDocsQuery());
-            context.terminateAfter(7);
-            context.setSize(10);
-            // track_total_hits is greater than terminate_after
-            context.trackTotalHitsUpTo(randomIntBetween(8, Integer.MAX_VALUE));
-            QueryPhase.executeQuery(context);
-            assertTrue(context.queryResult().terminatedEarly());
-            // this is from our own shortcutTotalHitCount, which does not early terminate based on track_total_hits
-            assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo((long) numDocs));
-            assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.EQUAL_TO));
-            assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(7));
+            assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(size));
         }
     }
 
@@ -570,11 +535,9 @@ public class QueryPhaseTests extends IndexShardTestCase {
      */
     public void testTerminateAfterWithHitsNoHitCountShortcut() throws Exception {
         indexDocs();
-        BooleanQuery bq = new BooleanQuery.Builder().add(new TermQuery(new Term("foo", "bar")), Occur.SHOULD)
-            .add(new TermQuery(new Term("foo", "baz")), Occur.SHOULD)
-            .build();
+        TermQuery query = new NonCountingTermQuery(new Term("foo", "bar"));
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 1), bq);
+            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 1), query);
             context.terminateAfter(1);
             context.setSize(1);
             QueryPhase.addCollectorsAndSearch(context);
@@ -585,7 +548,7 @@ public class QueryPhaseTests extends IndexShardTestCase {
         }
         // test interaction between trackTotalHits and terminateAfter
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), bq);
+            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), query);
             context.terminateAfter(7);
             context.setSize(10);
             context.trackTotalHitsUpTo(-1);
@@ -596,7 +559,7 @@ public class QueryPhaseTests extends IndexShardTestCase {
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(7));
         }
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), bq);
+            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), query);
             context.terminateAfter(7);
             // size is greater than terminate_after
             context.setSize(10);
@@ -609,22 +572,22 @@ public class QueryPhaseTests extends IndexShardTestCase {
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(7));
         }
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), bq);
+            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), query);
             context.terminateAfter(7);
             // size is lower than terminate_after
             context.setSize(5);
             // track_total_hits is lower than terminate_after
             context.trackTotalHitsUpTo(randomIntBetween(1, 6));
             QueryPhase.executeQuery(context);
-            assertTrue(context.queryResult().terminatedEarly());
-            // MultiCollector ignores calls to setMinCompetitiveScore, because one collector is TOP_DOCS and the other TOP_SCORES,
-            // hence we effectively don't early terminate tracking total hits
+            // depending on docs distribution we may or may not be able to honor terminate_after: low scoring hits are skipped via
+            // setMinCompetitiveScore, which bypasses terminate_after until the next leaf collector is pulled, when that happens.
+            assertThat(context.queryResult().terminatedEarly(), either(is(true)).or(is(false)));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.value, equalTo(7L));
             assertThat(context.queryResult().topDocs().topDocs.totalHits.relation, equalTo(TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO));
             assertThat(context.queryResult().topDocs().topDocs.scoreDocs.length, equalTo(5));
         }
         {
-            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), bq);
+            TestSearchContext context = createContext(earlyTerminationContextSearcher(reader, 7), query);
             context.terminateAfter(7);
             // size is greater than terminate_after
             context.setSize(10);

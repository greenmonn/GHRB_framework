diff --git a/server/src/test/java/org/elasticsearch/action/admin/indices/stats/CommonStatsTests.java b/server/src/test/java/org/elasticsearch/action/admin/indices/stats/CommonStatsTests.java
new file mode 100644
index 0000000..0366a69
--- /dev/null
+++ b/server/src/test/java/org/elasticsearch/action/admin/indices/stats/CommonStatsTests.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
+ * or more contributor license agreements. Licensed under the Elastic License
+ * 2.0 and the Server Side Public License, v 1; you may not use this file except
+ * in compliance with, at your election, the Elastic License 2.0 or the Server
+ * Side Public License, v 1.
+ */
+
+package org.elasticsearch.action.admin.indices.stats;
+
+import org.elasticsearch.index.shard.ShardId;
+import org.elasticsearch.indices.IndicesQueryCache;
+import org.elasticsearch.test.ESTestCase;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+public class CommonStatsTests extends ESTestCase {
+
+    public void testQueryCacheStatsCalculatorIsLazilyInitialized() {
+        var mockedIndicesQueryCache = mock(IndicesQueryCache.class);
+        var queryCacheStatsMemoized = new CommonStats.QueryCacheStatsMemoized(mockedIndicesQueryCache);
+
+        for (int i = 0; i < randomIntBetween(2, 1000); i++) {
+            queryCacheStatsMemoized.get(new ShardId(randomAlphaOfLength(5), randomAlphaOfLength(5), randomIntBetween(1, 100)));
+        }
+
+        verify(mockedIndicesQueryCache, times(1)).getGeneralStats();
+    }
+}
diff --git a/server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java b/server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java
index a00e988..ef711f9 100644
--- a/server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java
+++ b/server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java
@@ -1611,7 +1611,11 @@ public class IndexShardTests extends IndexShardTestCase {
         ShardStats stats = new ShardStats(
             shard.routingEntry(),
             shard.shardPath(),
-            CommonStats.getShardLevelStats(new IndicesQueryCache(Settings.EMPTY), shard, new CommonStatsFlags()),
+            CommonStats.getShardLevelStats(
+                new CommonStats.QueryCacheStatsMemoized(new IndicesQueryCache(Settings.EMPTY)),
+                shard,
+                new CommonStatsFlags()
+            ),
             shard.commitStats(),
             shard.seqNoStats(),
             shard.getRetentionLeaseStats(),
diff --git a/server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java b/server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
index 2a0d0a0..62bcee9 100644
--- a/server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
+++ b/server/src/test/java/org/elasticsearch/indices/IndicesServiceTests.java
@@ -91,6 +91,8 @@ import static org.hamcrest.Matchers.instanceOf;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.Matchers.nullValue;
+import static org.mockito.ArgumentMatchers.any;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
@@ -527,6 +529,8 @@ public class IndicesServiceTests extends ESSingleNodeTestCase {
         final IndicesService mockIndicesService = mock(IndicesService.class);
         final IndexService indexService = mock(IndexService.class);
 
+        when(mockIndicesService.getIndicesQueryCache()).thenReturn(mock(IndicesQueryCache.class));
+
         // generate fake shards and their responses
         for (int i = 0; i < shardCount; ++i) {
             final IndexShard shard = mock(IndexShard.class);
@@ -538,9 +542,9 @@ public class IndicesServiceTests extends ESSingleNodeTestCase {
 
                 shardStats.add(successfulShardStats);
 
-                when(mockIndicesService.indexShardStats(mockIndicesService, shard, CommonStatsFlags.ALL)).thenReturn(successfulShardStats);
+                when(mockIndicesService.indexShardStats(any(), eq(shard), eq(CommonStatsFlags.ALL))).thenReturn(successfulShardStats);
             } else {
-                when(mockIndicesService.indexShardStats(mockIndicesService, shard, CommonStatsFlags.ALL)).thenThrow(expectedException);
+                when(mockIndicesService.indexShardStats(any(), eq(shard), eq(CommonStatsFlags.ALL))).thenThrow(expectedException);
             }
         }
 
@@ -548,9 +552,6 @@ public class IndicesServiceTests extends ESSingleNodeTestCase {
         when(indexService.iterator()).thenReturn(shards.iterator());
         when(indexService.index()).thenReturn(index);
 
-        // real one, which has a logger defined
-        final IndicesService indicesService = getIndicesService();
-
         final Map<Index, List<IndexShardStats>> indexStats = IndicesService.statsByShard(mockIndicesService, CommonStatsFlags.ALL);
 
         assertThat(indexStats.isEmpty(), equalTo(false));

diff --git a/android/guava-tests/test/com/google/common/base/AbstractIteratorTest.java b/android/guava-tests/test/com/google/common/base/AbstractIteratorTest.java
index ad13b97..b1cdae5 100644
--- a/android/guava-tests/test/com/google/common/base/AbstractIteratorTest.java
+++ b/android/guava-tests/test/com/google/common/base/AbstractIteratorTest.java
@@ -18,6 +18,7 @@ package com.google.common.base;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.GcFinalization;
 import java.lang.ref.WeakReference;
 import java.util.Iterator;
@@ -50,8 +51,7 @@ public class AbstractIteratorTest extends TestCase {
               case 2:
                 return endOfData();
               default:
-                fail("Should not have been invoked again");
-                return null;
+                throw new AssertionError("Should not have been invoked again");
             }
           }
         };
@@ -85,12 +85,12 @@ public class AbstractIteratorTest extends TestCase {
           @Override
           public Integer computeNext() {
             if (haveBeenCalled) {
-              fail("Should not have been called again");
+              throw new AssertionError("Should not have been called again");
             } else {
               haveBeenCalled = true;
               sneakyThrow(new SomeCheckedException());
+              throw new AssertionError(); // unreachable
             }
-            return null; // never reached
           }
         };
 
@@ -173,6 +173,7 @@ public class AbstractIteratorTest extends TestCase {
 
 
   @GwtIncompatible // weak references
+  @J2ktIncompatible
   @AndroidIncompatible // depends on details of GC
   public void testFreesNextReference() {
     Iterator<Object> itr =
@@ -192,7 +193,7 @@ public class AbstractIteratorTest extends TestCase {
           @Override
           protected Integer computeNext() {
             boolean unused = hasNext();
-            return null;
+            throw new AssertionError();
           }
         };
     try {
diff --git a/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java
index 5e190a3..9ed987a 100644
--- a/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java
+++ b/android/guava-tests/test/com/google/common/base/AndroidIncompatible.java
@@ -30,7 +30,7 @@ import java.lang.annotation.Target;
 /**
  * Signifies that a test should not be run under Android. This annotation is respected only by our
  * Google-internal Android suite generators. Note that those generators also suppress any test
- * annotated with MediumTest or LargeTest.
+ * annotated with LargeTest.
  *
  * <p>Why use a custom annotation instead of {@code android.test.suitebuilder.annotation.Suppress}?
  * I'm not completely sure that this is the right choice, but it has various advantages:
diff --git a/android/guava-tests/test/com/google/common/base/AsciiTest.java b/android/guava-tests/test/com/google/common/base/AsciiTest.java
index 9e6b0e4..371a6a3 100644
--- a/android/guava-tests/test/com/google/common/base/AsciiTest.java
+++ b/android/guava-tests/test/com/google/common/base/AsciiTest.java
@@ -18,6 +18,7 @@ package com.google.common.base;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import junit.framework.TestCase;
 
 /**
@@ -138,6 +139,7 @@ public class AsciiTest extends TestCase {
     assertFalse(Ascii.equalsIgnoreCase("[", "{"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // String.toUpperCase() has browser semantics
   public void testEqualsIgnoreCaseUnicodeEquivalence() {
     // Note that it's possible in future that the JDK's idea to toUpperCase() or equalsIgnoreCase()
diff --git a/android/guava-tests/test/com/google/common/base/CaseFormatTest.java b/android/guava-tests/test/com/google/common/base/CaseFormatTest.java
index f08d9f9..57c7e17 100644
--- a/android/guava-tests/test/com/google/common/base/CaseFormatTest.java
+++ b/android/guava-tests/test/com/google/common/base/CaseFormatTest.java
@@ -24,6 +24,7 @@ import static com.google.common.base.CaseFormat.UPPER_UNDERSCORE;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.NullPointerTester;
 import com.google.common.testing.SerializableTester;
 import junit.framework.TestCase;
@@ -46,6 +47,7 @@ public class CaseFormatTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullArguments() {
     NullPointerTester tester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/base/CharMatcherTest.java b/android/guava-tests/test/com/google/common/base/CharMatcherTest.java
index 49bdbba..d78327e 100644
--- a/android/guava-tests/test/com/google/common/base/CharMatcherTest.java
+++ b/android/guava-tests/test/com/google/common/base/CharMatcherTest.java
@@ -27,6 +27,7 @@ import static com.google.common.base.CharMatcher.whitespace;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.Sets;
 import com.google.common.testing.NullPointerTester;
 import java.util.Arrays;
@@ -43,8 +44,10 @@ import junit.framework.TestCase;
  * @author Kevin Bourrillion
  */
 @GwtCompatible(emulated = true)
+@ElementTypesAreNonnullByDefault
 public class CharMatcherTest extends TestCase {
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testStaticNullPointers() throws Exception {
     NullPointerTester tester = new NullPointerTester();
@@ -90,6 +93,7 @@ public class CharMatcherTest extends TestCase {
   // The next tests require ICU4J and have, at least for now, been sliced out
   // of the open-source view of the tests.
 
+  @J2ktIncompatible
   @GwtIncompatible // Character.isISOControl
   public void testJavaIsoControl() {
     for (int c = 0; c <= Character.MAX_VALUE; c++) {
@@ -108,6 +112,7 @@ public class CharMatcherTest extends TestCase {
   // method, but by overall "scenario". Also, the variety of actual tests we
   // do borders on absurd overkill. Better safe than sorry, though?
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.BitSet
   public void testSetBits() {
     doTestSetBits(CharMatcher.any());
@@ -128,6 +133,7 @@ public class CharMatcherTest extends TestCase {
     doTestSetBits(inRange('A', 'Z').and(inRange('F', 'K').negate()));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.BitSet
   private void doTestSetBits(CharMatcher matcher) {
     BitSet bitset = new BitSet();
@@ -151,6 +157,7 @@ public class CharMatcherTest extends TestCase {
     doTestEmpty(forPredicate(Predicates.equalTo('c')));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNull() throws Exception {
     doTestNull(CharMatcher.any());
@@ -196,6 +203,7 @@ public class CharMatcherTest extends TestCase {
     assertEquals(0, matcher.countIn(""));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   private static void doTestNull(CharMatcher matcher) throws Exception {
     NullPointerTester tester = new NullPointerTester();
@@ -644,6 +652,14 @@ public class CharMatcherTest extends TestCase {
     assertEquals("12 &gt; 5", is('>').replaceFrom("12 > 5", "&gt;"));
   }
 
+  public void testRetainFrom() {
+    assertEquals("aaa", is('a').retainFrom("bazaar"));
+    assertEquals("z", is('z').retainFrom("bazaar"));
+    assertEquals("!", is('!').retainFrom("!@#$%^&*()-="));
+    assertEquals("", is('x').retainFrom("bazaar"));
+    assertEquals("", is('a').retainFrom(""));
+  }
+
   public void testPrecomputedOptimizations() {
     // These are testing behavior that's never promised by the API.
     // Some matchers are so efficient that it is a waste of effort to
@@ -664,11 +680,13 @@ public class CharMatcherTest extends TestCase {
     assertSame(CharMatcher.any(), CharMatcher.any().precomputed());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.BitSet
   private static BitSet bitSet(String chars) {
     return bitSet(chars.toCharArray());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.BitSet
   private static BitSet bitSet(char[] chars) {
     BitSet tmp = new BitSet();
@@ -678,6 +696,7 @@ public class CharMatcherTest extends TestCase {
     return tmp;
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.Random, java.util.BitSet
   public void testSmallCharMatcher() {
     CharMatcher len1 = SmallCharMatcher.from(bitSet("#"), "#");
diff --git a/android/guava-tests/test/com/google/common/base/CharsetsTest.java b/android/guava-tests/test/com/google/common/base/CharsetsTest.java
index c968c8d..8ff80d0 100644
--- a/android/guava-tests/test/com/google/common/base/CharsetsTest.java
+++ b/android/guava-tests/test/com/google/common/base/CharsetsTest.java
@@ -18,6 +18,7 @@ package com.google.common.base;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import java.nio.charset.Charset;
 import java.util.Arrays;
 import junit.framework.TestCase;
@@ -30,11 +31,13 @@ import junit.framework.TestCase;
 @GwtCompatible(emulated = true)
 public class CharsetsTest extends TestCase {
 
+  @J2ktIncompatible
   @GwtIncompatible // Non-UTF-8 Charset
   public void testUsAscii() {
     assertEquals(Charset.forName("US-ASCII"), Charsets.US_ASCII);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Non-UTF-8 Charset
   public void testIso88591() {
     assertEquals(Charset.forName("ISO-8859-1"), Charsets.ISO_8859_1);
@@ -44,21 +47,25 @@ public class CharsetsTest extends TestCase {
     assertEquals(Charset.forName("UTF-8"), Charsets.UTF_8);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Non-UTF-8 Charset
   public void testUtf16be() {
     assertEquals(Charset.forName("UTF-16BE"), Charsets.UTF_16BE);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Non-UTF-8 Charset
   public void testUtf16le() {
     assertEquals(Charset.forName("UTF-16LE"), Charsets.UTF_16LE);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Non-UTF-8 Charset
   public void testUtf16() {
     assertEquals(Charset.forName("UTF-16"), Charsets.UTF_16);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Non-UTF-8 Charset
   public void testWhyUsAsciiIsDangerous() {
     byte[] b1 = "朝日新聞".getBytes(Charsets.US_ASCII);
diff --git a/android/guava-tests/test/com/google/common/base/EnumsTest.java b/android/guava-tests/test/com/google/common/base/EnumsTest.java
index 8d9c332..66dfe59 100644
--- a/android/guava-tests/test/com/google/common/base/EnumsTest.java
+++ b/android/guava-tests/test/com/google/common/base/EnumsTest.java
@@ -20,8 +20,8 @@ import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;
 import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;
 import static com.google.common.truth.Truth.assertThat;
 
-import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.testing.GcFinalization;
@@ -44,7 +44,8 @@ import junit.framework.TestCase;
  *
  * @author Steve McKay
  */
-@GwtCompatible(emulated = true)
+@GwtIncompatible
+@J2ktIncompatible
 public class EnumsTest extends TestCase {
 
   private enum TestEnum {
@@ -80,6 +81,7 @@ public class EnumsTest extends TestCase {
   }
 
 
+  @J2ktIncompatible
   @GwtIncompatible // weak references
   @AndroidIncompatible // depends on details of GC and classloading
   public void testGetIfPresent_doesNotPreventClassUnloading() throws Exception {
@@ -92,6 +94,7 @@ public class EnumsTest extends TestCase {
   // new ClassLoader. If Enums.getIfPresent does caching that prevents the shadow TestEnum
   // (and therefore its ClassLoader) from being unloaded, then this WeakReference will never be
   // cleared.
+  @J2ktIncompatible
   @GwtIncompatible // weak references
   private WeakReference<?> doTestClassUnloading() throws Exception {
     URLClassLoader shadowLoader = new URLClassLoader(getClassPathUrls(), null);
@@ -113,6 +116,7 @@ public class EnumsTest extends TestCase {
     return new WeakReference<>(shadowLoader);
   }
 
+  @GwtIncompatible // stringConverter
   public void testStringConverter_convert() {
     Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);
     assertEquals(TestEnum.CHEETO, converter.convert("CHEETO"));
@@ -122,6 +126,7 @@ public class EnumsTest extends TestCase {
     assertNull(converter.reverse().convert(null));
   }
 
+  @GwtIncompatible // stringConverter
   public void testStringConverter_convertError() {
     Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);
     try {
@@ -131,6 +136,7 @@ public class EnumsTest extends TestCase {
     }
   }
 
+  @GwtIncompatible // stringConverter
   public void testStringConverter_reverse() {
     Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);
     assertEquals("CHEETO", converter.reverse().convert(TestEnum.CHEETO));
@@ -138,19 +144,22 @@ public class EnumsTest extends TestCase {
     assertEquals("POODLE", converter.reverse().convert(TestEnum.POODLE));
   }
 
-  @GwtIncompatible // NullPointerTester
+  @J2ktIncompatible
+  @GwtIncompatible // stringConverter
   public void testStringConverter_nullPointerTester() throws Exception {
     Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);
     NullPointerTester tester = new NullPointerTester();
     tester.testAllPublicInstanceMethods(converter);
   }
 
+  @GwtIncompatible // stringConverter
   public void testStringConverter_nullConversions() {
     Converter<String, TestEnum> converter = Enums.stringConverter(TestEnum.class);
     assertNull(converter.convert(null));
     assertNull(converter.reverse().convert(null));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class.getName()
   public void testStringConverter_toString() {
     assertEquals(
@@ -158,10 +167,12 @@ public class EnumsTest extends TestCase {
         Enums.stringConverter(TestEnum.class).toString());
   }
 
+  @GwtIncompatible // stringConverter
   public void testStringConverter_serialization() {
     SerializableTester.reserializeAndAssert(Enums.stringConverter(TestEnum.class));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointerExceptions() {
     NullPointerTester tester = new NullPointerTester();
@@ -177,6 +188,7 @@ public class EnumsTest extends TestCase {
     BAR
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // reflection
   public void testGetField() {
     Field foo = Enums.getField(AnEnum.FOO);
@@ -188,6 +200,7 @@ public class EnumsTest extends TestCase {
     assertFalse(bar.isAnnotationPresent(ExampleAnnotation.class));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class.getClassLoader()
   private URL[] getClassPathUrls() {
     ClassLoader classLoader = getClass().getClassLoader();
@@ -201,6 +214,7 @@ public class EnumsTest extends TestCase {
    * System#getProperty system property}.
    */
   // TODO(b/65488446): Make this a public API.
+  @J2ktIncompatible
   @GwtIncompatible
   private static ImmutableList<URL> parseJavaClassPath() {
     ImmutableList.Builder<URL> urls = ImmutableList.builder();
diff --git a/android/guava-tests/test/com/google/common/base/EquivalenceTest.java b/android/guava-tests/test/com/google/common/base/EquivalenceTest.java
index 07c86ea..46b191a 100644
--- a/android/guava-tests/test/com/google/common/base/EquivalenceTest.java
+++ b/android/guava-tests/test/com/google/common/base/EquivalenceTest.java
@@ -18,6 +18,7 @@ package com.google.common.base;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.base.Equivalence.Wrapper;
 import com.google.common.collect.ImmutableList;
 import com.google.common.testing.EqualsTester;
@@ -31,6 +32,7 @@ import junit.framework.TestCase;
  *
  * @author Jige Yu
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public class EquivalenceTest extends TestCase {
   @SuppressWarnings("unchecked") // varargs
@@ -81,6 +83,7 @@ public class EquivalenceTest extends TestCase {
     assertSame(test, wrapper.get());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testSerialization() {
     SerializableTester.reserializeAndAssert(LENGTH_EQUIVALENCE.wrap("hello"));
@@ -157,10 +160,16 @@ public class EquivalenceTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
-  public void testNulls() {
-    new NullPointerTester().testAllPublicStaticMethods(Equivalence.class);
-    new NullPointerTester().testAllPublicInstanceMethods(Equivalence.equals());
-    new NullPointerTester().testAllPublicInstanceMethods(Equivalence.identity());
+  public void testNulls() throws NoSuchMethodException {
+    NullPointerTester tester = new NullPointerTester();
+    // Necessary until JDK15:
+    // https://bugs.openjdk.org/browse/JDK-8202469
+    tester.ignore(Equivalence.class.getMethod("wrap", Object.class));
+
+    tester.testAllPublicStaticMethods(Equivalence.class);
+    tester.testAllPublicInstanceMethods(Equivalence.equals());
+    tester.testAllPublicInstanceMethods(Equivalence.identity());
   }
 }
diff --git a/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueTest.java b/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueTest.java
index 201fe53..7838f37 100644
--- a/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueTest.java
+++ b/android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueTest.java
@@ -25,6 +25,7 @@ import java.net.URLClassLoader;
 import java.util.Arrays;
 import java.util.Collections;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link FinalizableReferenceQueue}.
@@ -37,7 +38,7 @@ import junit.framework.TestCase;
 @AndroidIncompatible
 public class FinalizableReferenceQueueTest extends TestCase {
 
-  private FinalizableReferenceQueue frq;
+  private @Nullable FinalizableReferenceQueue frq;
 
   @Override
   protected void tearDown() throws Exception {
@@ -83,7 +84,7 @@ public class FinalizableReferenceQueueTest extends TestCase {
   }
 
   /** If we don't keep a strong reference to the reference object, it won't be enqueued. */
-  FinalizableWeakReference<Object> reference;
+  @Nullable FinalizableWeakReference<Object> reference;
 
   /** Create the FRQ in a method that goes out of scope so that we're sure it will be reclaimed. */
   private void weaklyReferenceQueue() {
diff --git a/android/guava-tests/test/com/google/common/base/FunctionsTest.java b/android/guava-tests/test/com/google/common/base/FunctionsTest.java
index 1411c19..75b7a9d 100644
--- a/android/guava-tests/test/com/google/common/base/FunctionsTest.java
+++ b/android/guava-tests/test/com/google/common/base/FunctionsTest.java
@@ -18,6 +18,7 @@ package com.google.common.base;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Maps;
 import com.google.common.testing.ClassSanityTester;
@@ -27,6 +28,7 @@ import com.google.common.testing.SerializableTester;
 import java.io.Serializable;
 import java.util.Map;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Functions}.
@@ -35,6 +37,7 @@ import junit.framework.TestCase;
  * @author Vlad Patryshev
  */
 @GwtCompatible(emulated = true)
+@ElementTypesAreNonnullByDefault
 public class FunctionsTest extends TestCase {
 
   public void testIdentity_same() {
@@ -48,6 +51,7 @@ public class FunctionsTest extends TestCase {
     assertNotSame(new Long(135135L), identity.apply(new Long(135135L)));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testIdentitySerializable() {
     checkCanReserializeSingleton(Functions.identity());
@@ -73,11 +77,13 @@ public class FunctionsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testToStringFunctionSerializable() {
     checkCanReserializeSingleton(Functions.toStringFunction());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointerExceptions() {
     NullPointerTester tester = new NullPointerTester();
@@ -107,6 +113,7 @@ public class FunctionsTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testForMapWithoutDefaultSerializable() {
     checkCanReserialize(Functions.forMap(ImmutableMap.of(1, 2)));
@@ -132,6 +139,7 @@ public class FunctionsTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testForMapWithDefault_includeSerializable() {
     Map<String, Integer> map = Maps.newHashMap();
@@ -152,6 +160,7 @@ public class FunctionsTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testForMapWithDefaultSerializable() {
     checkCanReserialize(Functions.forMap(ImmutableMap.of(1, 2), 3));
@@ -171,6 +180,7 @@ public class FunctionsTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testForMapWithDefault_null_compareWithSerializable() {
     ImmutableMap<String, Integer> map = ImmutableMap.of("One", 1);
@@ -235,6 +245,7 @@ public class FunctionsTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testComposition_includeReserializabled() {
     Map<String, Integer> mJapaneseToInteger = Maps.newHashMap();
@@ -273,9 +284,9 @@ public class FunctionsTest extends TestCase {
         Functions.compose(numberToSpanish, japaneseToInteger);
   }
 
-  private static class HashCodeFunction implements Function<Object, Integer> {
+  private static class HashCodeFunction implements Function<@Nullable Object, Integer> {
     @Override
-    public Integer apply(Object o) {
+    public Integer apply(@Nullable Object o) {
       return (o == null) ? 0 : o.hashCode();
     }
   }
@@ -332,6 +343,7 @@ public class FunctionsTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testForPredicateSerializable() {
     checkCanReserialize(Functions.forPredicate(Predicates.equalTo(5)));
@@ -361,6 +373,7 @@ public class FunctionsTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testConstantSerializable() {
     checkCanReserialize(Functions.constant(5));
@@ -378,7 +391,7 @@ public class FunctionsTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       if (obj instanceof CountingSupplier) {
         return this.value == ((CountingSupplier) obj).value;
       }
@@ -406,16 +419,19 @@ public class FunctionsTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testForSupplierSerializable() {
     checkCanReserialize(Functions.forSupplier(new CountingSupplier()));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // reflection
   public void testNulls() throws Exception {
     new ClassSanityTester().forAllPublicStaticMethods(Functions.class).testNulls();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // reflection
   @AndroidIncompatible // TODO(cpovirk): ClassNotFoundException: com.google.common.base.Function
   // (I suspect that this and the other similar failures happen with ArbitraryInstances proxies.)
@@ -423,6 +439,7 @@ public class FunctionsTest extends TestCase {
     new ClassSanityTester().forAllPublicStaticMethods(Functions.class).testEqualsAndSerializable();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   private static <Y> void checkCanReserialize(Function<? super Integer, Y> f) {
     Function<? super Integer, Y> g = SerializableTester.reserializeAndAssert(f);
@@ -443,6 +460,7 @@ public class FunctionsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   private static <Y> void checkCanReserializeSingleton(Function<? super String, Y> f) {
     Function<? super String, Y> g = SerializableTester.reserializeAndAssert(f);
diff --git a/android/guava-tests/test/com/google/common/base/JoinerTest.java b/android/guava-tests/test/com/google/common/base/JoinerTest.java
index d9ed347..c5eb73d 100644
--- a/android/guava-tests/test/com/google/common/base/JoinerTest.java
+++ b/android/guava-tests/test/com/google/common/base/JoinerTest.java
@@ -18,6 +18,7 @@ package com.google.common.base;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.base.Joiner.MapJoiner;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableMultimap;
@@ -33,6 +34,7 @@ import java.util.Map.Entry;
 import java.util.Set;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Joiner}.
@@ -40,6 +42,7 @@ import junit.framework.TestCase;
  * @author Kevin Bourrillion
  */
 @GwtCompatible(emulated = true)
+@ElementTypesAreNonnullByDefault
 public class JoinerTest extends TestCase {
   private static final Joiner J = Joiner.on("-");
 
@@ -162,12 +165,13 @@ public class JoinerTest extends TestCase {
   private static final Appendable NASTY_APPENDABLE =
       new Appendable() {
         @Override
-        public Appendable append(CharSequence csq) throws IOException {
+        public Appendable append(@Nullable CharSequence csq) throws IOException {
           throw new IOException();
         }
 
         @Override
-        public Appendable append(CharSequence csq, int start, int end) throws IOException {
+        public Appendable append(@Nullable CharSequence csq, int start, int end)
+            throws IOException {
           throw new IOException();
         }
 
@@ -359,6 +363,7 @@ public class JoinerTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // StringBuilder.append in GWT invokes Object.toString(), unlike the JRE version.
   public void testDontConvertCharSequenceToString() {
     assertEquals("foo,foo", Joiner.on(",").join(new DontStringMeBro(), new DontStringMeBro()));
@@ -367,6 +372,7 @@ public class JoinerTest extends TestCase {
         Joiner.on(",").useForNull("bar").join(new DontStringMeBro(), null, new DontStringMeBro()));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester tester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/base/MoreObjectsTest.java b/android/guava-tests/test/com/google/common/base/MoreObjectsTest.java
new file mode 100644
index 0000000..6a7149d
--- /dev/null
+++ b/android/guava-tests/test/com/google/common/base/MoreObjectsTest.java
@@ -0,0 +1,497 @@
+/*
+ * Copyright (C) 2014 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.common.base;
+
+import com.google.common.annotations.GwtCompatible;
+import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.testing.NullPointerTester;
+import java.util.Arrays;
+import java.util.Map;
+import junit.framework.TestCase;
+
+/** Tests for {@link MoreObjects}. */
+@GwtCompatible(emulated = true)
+public class MoreObjectsTest extends TestCase {
+  public void testFirstNonNull_withNonNull() {
+    String s1 = "foo";
+    String s2 = MoreObjects.firstNonNull(s1, "bar");
+    assertSame(s1, s2);
+
+    Long n1 = 42L;
+    Long n2 = MoreObjects.firstNonNull(null, n1);
+    assertSame(n1, n2);
+
+    Boolean b1 = true;
+    Boolean b2 = MoreObjects.firstNonNull(b1, null);
+    assertSame(b1, b2);
+  }
+
+  public void testFirstNonNull_throwsNullPointerException() {
+    try {
+      MoreObjects.firstNonNull(null, null);
+      fail();
+    } catch (NullPointerException expected) {
+    }
+  }
+
+  public void testToStringHelperWithArrays() {
+    String[] strings = {"hello", "world"};
+    int[] ints = {2, 42};
+    Object[] objects = {"obj"};
+    String[] arrayWithNull = {null};
+    Object[] empty = {};
+    String toTest =
+        MoreObjects.toStringHelper("TSH")
+            .add("strings", strings)
+            .add("ints", ints)
+            .add("objects", objects)
+            .add("arrayWithNull", arrayWithNull)
+            .add("empty", empty)
+            .toString();
+    assertEquals(
+        "TSH{strings=[hello, world], ints=[2, 42], objects=[obj], arrayWithNull=[null], empty=[]}",
+        toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testConstructor_instance() {
+    String toTest = MoreObjects.toStringHelper(this).toString();
+    assertEquals("MoreObjectsTest{}", toTest);
+  }
+
+  public void testConstructorLenient_instance() {
+    String toTest = MoreObjects.toStringHelper(this).toString();
+    assertTrue(toTest, toTest.matches(".*\\{\\}"));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testConstructor_innerClass() {
+    String toTest = MoreObjects.toStringHelper(new TestClass()).toString();
+    assertEquals("TestClass{}", toTest);
+  }
+
+  public void testConstructorLenient_innerClass() {
+    String toTest = MoreObjects.toStringHelper(new TestClass()).toString();
+    assertTrue(toTest, toTest.matches(".*\\{\\}"));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testConstructor_anonymousClass() {
+    String toTest = MoreObjects.toStringHelper(new Object() {}).toString();
+    assertEquals("{}", toTest);
+  }
+
+  public void testConstructorLenient_anonymousClass() {
+    String toTest = MoreObjects.toStringHelper(new Object() {}).toString();
+    assertTrue(toTest, toTest.matches(".*\\{\\}"));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testConstructor_classObject() {
+    String toTest = MoreObjects.toStringHelper(TestClass.class).toString();
+    assertEquals("TestClass{}", toTest);
+  }
+
+  public void testConstructorLenient_classObject() {
+    String toTest = MoreObjects.toStringHelper(TestClass.class).toString();
+    assertTrue(toTest, toTest.matches(".*\\{\\}"));
+  }
+
+  public void testConstructor_stringObject() {
+    String toTest = MoreObjects.toStringHelper("FooBar").toString();
+    assertEquals("FooBar{}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringHelper_localInnerClass() {
+    // Local inner classes have names ending like "Outer.$1Inner"
+    class LocalInnerClass {}
+    String toTest = MoreObjects.toStringHelper(new LocalInnerClass()).toString();
+    assertEquals("LocalInnerClass{}", toTest);
+  }
+
+  public void testToStringHelperLenient_localInnerClass() {
+    class LocalInnerClass {}
+    String toTest = MoreObjects.toStringHelper(new LocalInnerClass()).toString();
+    assertTrue(toTest, toTest.matches(".*\\{\\}"));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringHelper_localInnerNestedClass() {
+    class LocalInnerClass {
+      class LocalInnerNestedClass {}
+    }
+    String toTest =
+        MoreObjects.toStringHelper(new LocalInnerClass().new LocalInnerNestedClass()).toString();
+    assertEquals("LocalInnerNestedClass{}", toTest);
+  }
+
+  public void testToStringHelperLenient_localInnerNestedClass() {
+    class LocalInnerClass {
+      class LocalInnerNestedClass {}
+    }
+    String toTest =
+        MoreObjects.toStringHelper(new LocalInnerClass().new LocalInnerNestedClass()).toString();
+    assertTrue(toTest, toTest.matches(".*\\{\\}"));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringHelper_moreThanNineAnonymousClasses() {
+    // The nth anonymous class has a name ending like "Outer.$n"
+    Object o1 = new Object() {};
+    Object o2 = new Object() {};
+    Object o3 = new Object() {};
+    Object o4 = new Object() {};
+    Object o5 = new Object() {};
+    Object o6 = new Object() {};
+    Object o7 = new Object() {};
+    Object o8 = new Object() {};
+    Object o9 = new Object() {};
+    Object o10 = new Object() {};
+    String toTest = MoreObjects.toStringHelper(o10).toString();
+    assertEquals("{}", toTest);
+  }
+
+  public void testToStringHelperLenient_moreThanNineAnonymousClasses() {
+    // The nth anonymous class has a name ending like "Outer.$n"
+    Object o1 = new Object() {};
+    Object o2 = new Object() {};
+    Object o3 = new Object() {};
+    Object o4 = new Object() {};
+    Object o5 = new Object() {};
+    Object o6 = new Object() {};
+    Object o7 = new Object() {};
+    Object o8 = new Object() {};
+    Object o9 = new Object() {};
+    Object o10 = new Object() {};
+    String toTest = MoreObjects.toStringHelper(o10).toString();
+    assertTrue(toTest, toTest.matches(".*\\{\\}"));
+  }
+
+  // all remaining test are on an inner class with various fields
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToString_oneField() {
+    String toTest = MoreObjects.toStringHelper(new TestClass()).add("field1", "Hello").toString();
+    assertEquals("TestClass{field1=Hello}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToString_oneIntegerField() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass()).add("field1", new Integer(42)).toString();
+    assertEquals("TestClass{field1=42}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToString_nullInteger() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass()).add("field1", (Integer) null).toString();
+    assertEquals("TestClass{field1=null}", toTest);
+  }
+
+  public void testToStringLenient_oneField() {
+    String toTest = MoreObjects.toStringHelper(new TestClass()).add("field1", "Hello").toString();
+    assertTrue(toTest, toTest.matches(".*\\{field1\\=Hello\\}"));
+  }
+
+  public void testToStringLenient_oneIntegerField() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass()).add("field1", new Integer(42)).toString();
+    assertTrue(toTest, toTest.matches(".*\\{field1\\=42\\}"));
+  }
+
+  public void testToStringLenient_nullInteger() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass()).add("field1", (Integer) null).toString();
+    assertTrue(toTest, toTest.matches(".*\\{field1\\=null\\}"));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToString_complexFields() {
+    Map<String, Integer> map =
+        ImmutableMap.<String, Integer>builder().put("abc", 1).put("def", 2).put("ghi", 3).build();
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .add("field1", "This is string.")
+            .add("field2", Arrays.asList("abc", "def", "ghi"))
+            .add("field3", map)
+            .toString();
+    final String expected =
+        "TestClass{"
+            + "field1=This is string., field2=[abc, def, ghi], field3={abc=1, def=2, ghi=3}}";
+
+    assertEquals(expected, toTest);
+  }
+
+  public void testToStringLenient_complexFields() {
+    Map<String, Integer> map =
+        ImmutableMap.<String, Integer>builder().put("abc", 1).put("def", 2).put("ghi", 3).build();
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .add("field1", "This is string.")
+            .add("field2", Arrays.asList("abc", "def", "ghi"))
+            .add("field3", map)
+            .toString();
+    final String expectedRegex =
+        ".*\\{"
+            + "field1\\=This is string\\., "
+            + "field2\\=\\[abc, def, ghi\\], "
+            + "field3=\\{abc\\=1, def\\=2, ghi\\=3\\}\\}";
+
+    assertTrue(toTest, toTest.matches(expectedRegex));
+  }
+
+  public void testToString_addWithNullName() {
+    MoreObjects.ToStringHelper helper = MoreObjects.toStringHelper(new TestClass());
+    try {
+      helper.add(null, "Hello");
+      fail("No exception was thrown.");
+    } catch (NullPointerException expected) {
+    }
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToString_addWithNullValue() {
+    final String result = MoreObjects.toStringHelper(new TestClass()).add("Hello", null).toString();
+
+    assertEquals("TestClass{Hello=null}", result);
+  }
+
+  public void testToStringLenient_addWithNullValue() {
+    final String result = MoreObjects.toStringHelper(new TestClass()).add("Hello", null).toString();
+    assertTrue(result, result.matches(".*\\{Hello\\=null\\}"));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToString_ToStringTwice() {
+    MoreObjects.ToStringHelper helper =
+        MoreObjects.toStringHelper(new TestClass())
+            .add("field1", 1)
+            .addValue("value1")
+            .add("field2", "value2");
+    final String expected = "TestClass{field1=1, value1, field2=value2}";
+
+    assertEquals(expected, helper.toString());
+    // Call toString again
+    assertEquals(expected, helper.toString());
+
+    // Make sure the cached value is reset when we modify the helper at all
+    final String expected2 = "TestClass{field1=1, value1, field2=value2, 2}";
+    helper.addValue(2);
+    assertEquals(expected2, helper.toString());
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToString_addValue() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .add("field1", 1)
+            .addValue("value1")
+            .add("field2", "value2")
+            .addValue(2)
+            .toString();
+    final String expected = "TestClass{field1=1, value1, field2=value2, 2}";
+
+    assertEquals(expected, toTest);
+  }
+
+  public void testToStringLenient_addValue() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .add("field1", 1)
+            .addValue("value1")
+            .add("field2", "value2")
+            .addValue(2)
+            .toString();
+    final String expected = ".*\\{field1\\=1, value1, field2\\=value2, 2\\}";
+
+    assertTrue(toTest, toTest.matches(expected));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToString_addValueWithNullValue() {
+    final String result =
+        MoreObjects.toStringHelper(new TestClass())
+            .addValue(null)
+            .addValue("Hello")
+            .addValue(null)
+            .toString();
+    final String expected = "TestClass{null, Hello, null}";
+
+    assertEquals(expected, result);
+  }
+
+  public void testToStringLenient_addValueWithNullValue() {
+    final String result =
+        MoreObjects.toStringHelper(new TestClass())
+            .addValue(null)
+            .addValue("Hello")
+            .addValue(null)
+            .toString();
+    final String expected = ".*\\{null, Hello, null\\}";
+
+    assertTrue(result, result.matches(expected));
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_oneField() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass()).omitNullValues().add("field1", null).toString();
+    assertEquals("TestClass{}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_manyFieldsFirstNull() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .omitNullValues()
+            .add("field1", null)
+            .add("field2", "Googley")
+            .add("field3", "World")
+            .toString();
+    assertEquals("TestClass{field2=Googley, field3=World}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_manyFieldsOmitAfterNull() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .add("field1", null)
+            .add("field2", "Googley")
+            .add("field3", "World")
+            .omitNullValues()
+            .toString();
+    assertEquals("TestClass{field2=Googley, field3=World}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_manyFieldsLastNull() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .omitNullValues()
+            .add("field1", "Hello")
+            .add("field2", "Googley")
+            .add("field3", null)
+            .toString();
+    assertEquals("TestClass{field1=Hello, field2=Googley}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_oneValue() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass()).omitNullValues().addValue(null).toString();
+    assertEquals("TestClass{}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_manyValuesFirstNull() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .omitNullValues()
+            .addValue(null)
+            .addValue("Googley")
+            .addValue("World")
+            .toString();
+    assertEquals("TestClass{Googley, World}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_manyValuesLastNull() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .omitNullValues()
+            .addValue("Hello")
+            .addValue("Googley")
+            .addValue(null)
+            .toString();
+    assertEquals("TestClass{Hello, Googley}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_differentOrder() {
+    String expected = "TestClass{field1=Hello, field2=Googley, field3=World}";
+    String toTest1 =
+        MoreObjects.toStringHelper(new TestClass())
+            .omitNullValues()
+            .add("field1", "Hello")
+            .add("field2", "Googley")
+            .add("field3", "World")
+            .toString();
+    String toTest2 =
+        MoreObjects.toStringHelper(new TestClass())
+            .add("field1", "Hello")
+            .add("field2", "Googley")
+            .omitNullValues()
+            .add("field3", "World")
+            .toString();
+    assertEquals(expected, toTest1);
+    assertEquals(expected, toTest2);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible // Class names are obfuscated in GWT
+  public void testToStringOmitNullValues_canBeCalledManyTimes() {
+    String toTest =
+        MoreObjects.toStringHelper(new TestClass())
+            .omitNullValues()
+            .omitNullValues()
+            .add("field1", "Hello")
+            .omitNullValues()
+            .add("field2", "Googley")
+            .omitNullValues()
+            .add("field3", "World")
+            .toString();
+    assertEquals("TestClass{field1=Hello, field2=Googley, field3=World}", toTest);
+  }
+
+  @J2ktIncompatible
+  @GwtIncompatible("NullPointerTester")
+  public void testNulls() throws Exception {
+    NullPointerTester tester = new NullPointerTester();
+    tester.ignore(MoreObjects.class.getMethod("firstNonNull", Object.class, Object.class));
+    tester.testAllPublicStaticMethods(MoreObjects.class);
+    tester.testAllPublicInstanceMethods(MoreObjects.toStringHelper(new TestClass()));
+  }
+
+  /** Test class for testing formatting of inner classes. */
+  private static class TestClass {}
+}
diff --git a/android/guava-tests/test/com/google/common/base/ObjectsTest.java b/android/guava-tests/test/com/google/common/base/ObjectsTest.java
index 0388140..34428e2 100644
--- a/android/guava-tests/test/com/google/common/base/ObjectsTest.java
+++ b/android/guava-tests/test/com/google/common/base/ObjectsTest.java
@@ -18,6 +18,7 @@ package com.google.common.base;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.NullPointerTester;
 import junit.framework.TestCase;
 
@@ -58,6 +59,7 @@ public class ObjectsTest extends TestCase {
     assertTrue(Objects.hashCode(1, 2, 3) != Objects.hashCode(2, 3, 1));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester tester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/base/OptionalTest.java b/android/guava-tests/test/com/google/common/base/OptionalTest.java
index ba6ace7..ea930dc 100644
--- a/android/guava-tests/test/com/google/common/base/OptionalTest.java
+++ b/android/guava-tests/test/com/google/common/base/OptionalTest.java
@@ -21,6 +21,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.FluentIterable;
 import com.google.common.collect.ImmutableList;
 import com.google.common.testing.EqualsTester;
@@ -29,12 +30,14 @@ import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Optional}.
  *
  * @author Kurt Alfred Kluever
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public final class OptionalTest extends TestCase {
   public void testAbsent() {
@@ -183,12 +186,13 @@ public final class OptionalTest extends TestCase {
       Optional<String> unused =
           Optional.of("a")
               .transform(
-                  new Function<String, String>() {
-                    @Override
-                    public String apply(String input) {
-                      return null;
-                    }
-                  });
+                  (Function<String, String>)
+                      new Function<String, @Nullable String>() {
+                        @Override
+                        public @Nullable String apply(String input) {
+                          return null;
+                        }
+                      });
       fail("Should throw if Function returns null.");
     } catch (NullPointerException expected) {
     }
@@ -199,12 +203,13 @@ public final class OptionalTest extends TestCase {
         Optional.absent(),
         Optional.absent()
             .transform(
-                new Function<Object, Object>() {
-                  @Override
-                  public Object apply(Object input) {
-                    return null;
-                  }
-                }));
+                (Function<Object, Object>)
+                    new Function<Object, @Nullable Object>() {
+                      @Override
+                      public @Nullable Object apply(Object input) {
+                        return null;
+                      }
+                    }));
   }
 
   public void testEqualsAndHashCode() {
@@ -298,6 +303,7 @@ public final class OptionalTest extends TestCase {
     Number value = first.or(0.5); // fine
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester npTester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/base/PreconditionsTest.java b/android/guava-tests/test/com/google/common/base/PreconditionsTest.java
index eccbf25..6209d3a 100644
--- a/android/guava-tests/test/com/google/common/base/PreconditionsTest.java
+++ b/android/guava-tests/test/com/google/common/base/PreconditionsTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
@@ -31,6 +32,7 @@ import java.util.Arrays;
 import java.util.List;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Preconditions}.
@@ -38,6 +40,8 @@ import junit.framework.TestCase;
  * @author Kevin Bourrillion
  * @author Jared Levy
  */
+@ElementTypesAreNonnullByDefault
+@J2ktIncompatible // TODO(b/278877942): Enable
 @SuppressWarnings("LenientFormatStringValidation") // Intentional for testing
 @GwtCompatible(emulated = true)
 public class PreconditionsTest extends TestCase {
@@ -385,6 +389,7 @@ public class PreconditionsTest extends TestCase {
   }
 
   @GwtIncompatible("Reflection")
+  @J2ktIncompatible
   public void testAllOverloads_checkArgument() throws Exception {
     for (ImmutableList<Class<?>> sig : allSignatures(boolean.class)) {
       Method checkArgumentMethod =
@@ -402,6 +407,7 @@ public class PreconditionsTest extends TestCase {
   }
 
   @GwtIncompatible("Reflection")
+  @J2ktIncompatible
   public void testAllOverloads_checkState() throws Exception {
     for (ImmutableList<Class<?>> sig : allSignatures(boolean.class)) {
       Method checkArgumentMethod =
@@ -419,6 +425,7 @@ public class PreconditionsTest extends TestCase {
   }
 
   @GwtIncompatible("Reflection")
+  @J2ktIncompatible
   public void testAllOverloads_checkNotNull() throws Exception {
     for (ImmutableList<Class<?>> sig : allSignatures(Object.class)) {
       Method checkArgumentMethod =
@@ -462,7 +469,9 @@ public class PreconditionsTest extends TestCase {
    * @param sig The method signature
    */
   @GwtIncompatible("ArbitraryInstances")
-  private Object[] getParametersForSignature(Object firstParam, ImmutableList<Class<?>> sig) {
+  @J2ktIncompatible
+  private Object[] getParametersForSignature(
+      @Nullable Object firstParam, ImmutableList<Class<?>> sig) {
     Object[] params = new Object[sig.size()];
     params[0] = firstParam;
     if (params.length > 1) {
@@ -537,6 +546,7 @@ public class PreconditionsTest extends TestCase {
     Preconditions.checkState(boxedBoolean.booleanValue(), "", s);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     /*
diff --git a/android/guava-tests/test/com/google/common/base/PredicatesTest.java b/android/guava-tests/test/com/google/common/base/PredicatesTest.java
index 8f8647f..24b4e10 100644
--- a/android/guava-tests/test/com/google/common/base/PredicatesTest.java
+++ b/android/guava-tests/test/com/google/common/base/PredicatesTest.java
@@ -21,6 +21,7 @@ import static com.google.common.collect.Lists.newArrayList;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.testing.ClassSanityTester;
 import com.google.common.testing.EqualsTester;
@@ -36,12 +37,15 @@ import java.util.List;
 import java.util.regex.Pattern;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Predicates}.
  *
  * @author Kevin Bourrillion
  */
+@ElementTypesAreNonnullByDefault
+@J2ktIncompatible // TODO(b/278877942): Enable
 @GwtCompatible(emulated = true)
 public class PredicatesTest extends TestCase {
   private static final Predicate<Integer> TRUE = Predicates.alwaysTrue();
@@ -69,7 +73,7 @@ public class PredicatesTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       return obj instanceof IsOdd;
     }
 
@@ -105,6 +109,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testAlwaysTrue_serialization() {
     checkSerialization(Predicates.alwaysTrue());
@@ -126,6 +131,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testAlwaysFalse_serialization() {
     checkSerialization(Predicates.alwaysFalse());
@@ -175,6 +181,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testNot_serialization() {
     checkSerialization(Predicates.not(isOdd()));
@@ -198,6 +205,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked") // varargs
   public void testAnd_serializationNoArgs() {
@@ -221,6 +229,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked") // varargs
   public void testAnd_serializationOneArg() {
@@ -243,6 +252,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testAnd_serializationBinary() {
     checkSerialization(Predicates.and(TRUE, isOdd()));
@@ -268,6 +278,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked") // varargs
   public void testAnd_serializationTernary() {
@@ -295,6 +306,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked") // varargs
   public void testAnd_serializationIterable() {
@@ -351,6 +363,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked") // varargs
   public void testOr_serializationNoArgs() {
@@ -374,6 +387,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked") // varargs
   public void testOr_serializationOneArg() {
@@ -400,6 +414,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testOr_serializationBinary() {
     checkSerialization(Predicates.or(isOdd(), TRUE));
@@ -424,6 +439,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked") // varargs
   public void testOr_serializationTernary() {
@@ -457,6 +473,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked") // varargs
   public void testOr_serializationIterable() {
@@ -517,6 +534,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testIsEqualTo_serialization() {
     checkSerialization(Predicates.equalTo(1));
@@ -536,6 +554,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testIsEqualToNull_serialization() {
     checkSerialization(Predicates.equalTo(null));
@@ -546,6 +565,7 @@ public class PredicatesTest extends TestCase {
    * stripper to remove comments properly. Currently, all tests before the comments are removed as
    * well.
    */
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.instanceOf
   public void testIsInstanceOf_apply() {
     Predicate<Object> isInteger = Predicates.instanceOf(Integer.class);
@@ -556,6 +576,7 @@ public class PredicatesTest extends TestCase {
     assertFalse(isInteger.apply(null));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.instanceOf
   public void testIsInstanceOf_subclass() {
     Predicate<Object> isNumber = Predicates.instanceOf(Number.class);
@@ -566,6 +587,7 @@ public class PredicatesTest extends TestCase {
     assertFalse(isNumber.apply(null));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.instanceOf
   public void testIsInstanceOf_interface() {
     Predicate<Object> isComparable = Predicates.instanceOf(Comparable.class);
@@ -576,6 +598,7 @@ public class PredicatesTest extends TestCase {
     assertFalse(isComparable.apply(null));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.instanceOf
   public void testIsInstanceOf_equality() {
     new EqualsTester()
@@ -586,11 +609,13 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.instanceOf, SerializableTester
   public void testIsInstanceOf_serialization() {
     checkSerialization(Predicates.instanceOf(Integer.class));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.subtypeOf
   public void testSubtypeOf_apply() {
     Predicate<Class<?>> isInteger = Predicates.subtypeOf(Integer.class);
@@ -605,6 +630,7 @@ public class PredicatesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.subtypeOf
   public void testSubtypeOf_subclass() {
     Predicate<Class<?>> isNumber = Predicates.subtypeOf(Number.class);
@@ -613,6 +639,7 @@ public class PredicatesTest extends TestCase {
     assertTrue(isNumber.apply(Float.class));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.subtypeOf
   public void testSubtypeOf_interface() {
     Predicate<Class<?>> isComparable = Predicates.subtypeOf(Comparable.class);
@@ -621,6 +648,7 @@ public class PredicatesTest extends TestCase {
     assertTrue(isComparable.apply(Float.class));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.subtypeOf
   public void testSubtypeOf_equality() {
     new EqualsTester()
@@ -630,6 +658,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.subtypeOf, SerializableTester
   public void testSubtypeOf_serialization() {
     Predicate<Class<?>> predicate = Predicates.subtypeOf(Integer.class);
@@ -657,6 +686,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testIsNull_serialization() {
     Predicate<String> pre = Predicates.isNull();
@@ -678,6 +708,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testNotNull_serialization() {
     checkSerialization(Predicates.notNull());
@@ -709,6 +740,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testIn_serialization() {
     checkSerialization(Predicates.in(Arrays.asList(1, 2, 3, null)));
@@ -757,6 +789,7 @@ public class PredicatesTest extends TestCase {
     // Predicate<Integer> p4 = Predicates.<Integer>in(nums);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointerExceptions() {
     NullPointerTester tester = new NullPointerTester();
@@ -764,7 +797,8 @@ public class PredicatesTest extends TestCase {
   }
 
   @SuppressWarnings("unchecked") // varargs
-  @GwtIncompatible // SerializbleTester
+  @J2ktIncompatible
+  @GwtIncompatible // SerializableTester
   public void testCascadingSerialization() throws Exception {
     // Eclipse says Predicate<Integer>; javac says Predicate<Object>.
     Predicate<? super Integer> nasty =
@@ -815,6 +849,7 @@ public class PredicatesTest extends TestCase {
         .testEquals();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testComposeSerialization() {
     Function<String, String> trim = TrimStringFunction.INSTANCE;
@@ -828,6 +863,7 @@ public class PredicatesTest extends TestCase {
    * works, so there are only trivial tests of that aspect. TODO: Fix comment style once annotation
    * stripper is fixed.
    */
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.containsPattern
   public void testContainsPattern_apply() {
     Predicate<CharSequence> isFoobar = Predicates.containsPattern("^Fo.*o.*bar$");
@@ -835,6 +871,7 @@ public class PredicatesTest extends TestCase {
     assertFalse(isFoobar.apply("Foobarx"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Predicates.containsPattern
   public void testContains_apply() {
     Predicate<CharSequence> isFoobar = Predicates.contains(Pattern.compile("^Fo.*o.*bar$"));
@@ -843,6 +880,7 @@ public class PredicatesTest extends TestCase {
     assertFalse(isFoobar.apply("Foobarx"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testContainsPattern_nulls() throws Exception {
     NullPointerTester tester = new NullPointerTester();
@@ -851,6 +889,7 @@ public class PredicatesTest extends TestCase {
     tester.testAllPublicInstanceMethods(isWooString);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testContains_nulls() throws Exception {
     NullPointerTester tester = new NullPointerTester();
@@ -859,6 +898,7 @@ public class PredicatesTest extends TestCase {
     tester.testAllPublicInstanceMethods(isWooPattern);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testContainsPattern_serialization() {
     Predicate<CharSequence> pre = Predicates.containsPattern("foo");
@@ -866,6 +906,7 @@ public class PredicatesTest extends TestCase {
     assertEquals(pre.apply("foo"), post.apply("foo"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testContains_equals() {
     new EqualsTester()
@@ -897,11 +938,13 @@ public class PredicatesTest extends TestCase {
     assertTrue(Predicates.and(p1, p2).hashCode() != Predicates.or(p1, p2).hashCode());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // reflection
   public void testNulls() throws Exception {
     new ClassSanityTester().forAllPublicStaticMethods(Predicates.class).testNulls();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // reflection
   @AndroidIncompatible // TODO(cpovirk): ClassNotFoundException: com.google.common.base.Function
   public void testEqualsAndSerializable() throws Exception {
@@ -956,6 +999,7 @@ public class PredicatesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   private static void checkSerialization(Predicate<? super Integer> predicate) {
     Predicate<? super Integer> reserialized = SerializableTester.reserializeAndAssert(predicate);
diff --git a/android/guava-tests/test/com/google/common/base/SplitterTest.java b/android/guava-tests/test/com/google/common/base/SplitterTest.java
index 46928aa..728e57a 100644
--- a/android/guava-tests/test/com/google/common/base/SplitterTest.java
+++ b/android/guava-tests/test/com/google/common/base/SplitterTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.base.Splitter.MapSplitter;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.testing.NullPointerTester;
@@ -29,7 +30,10 @@ import java.util.Map;
 import java.util.regex.Pattern;
 import junit.framework.TestCase;
 
-/** @author Julien Silland */
+/**
+ * @author Julien Silland
+ */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public class SplitterTest extends TestCase {
 
@@ -287,6 +291,7 @@ public class SplitterTest extends TestCase {
         .inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Splitter.onPattern
   public void testPatternSimpleSplit() {
     String simple = "a,b,c";
@@ -294,6 +299,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "b", "c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Splitter.onPattern
   public void testPatternSimpleSplitWithNoDelimiter() {
     String simple = "a,b,c";
@@ -301,6 +307,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a,b,c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Splitter.onPattern
   public void testPatternSplitWithDoubleDelimiter() {
     String doubled = "a,,b,c";
@@ -308,6 +315,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "", "b", "c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Splitter.onPattern
   public void testPatternSplitWithDoubleDelimiterAndSpace() {
     String doubled = "a,, b,c";
@@ -315,6 +323,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "", " b", "c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Splitter.onPattern
   public void testPatternSplitWithTrailingDelimiter() {
     String trailing = "a,b,c,";
@@ -322,6 +331,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "b", "c", "").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Splitter.onPattern
   public void testPatternSplitWithLeadingDelimiter() {
     String leading = ",a,b,c";
@@ -331,6 +341,7 @@ public class SplitterTest extends TestCase {
 
   // TODO(kevinb): the name of this method suggests it might not actually be testing what it
   // intends to be testing?
+  @J2ktIncompatible
   @GwtIncompatible // Splitter.onPattern
   public void testPatternSplitWithMultipleLetters() {
     Iterable<String> testPatterningMotto =
@@ -340,11 +351,13 @@ public class SplitterTest extends TestCase {
         .inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   private static Pattern literalDotPattern() {
     return Pattern.compile("\\.");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitWithDoubleDelimiterOmitEmptyStrings() {
     String doubled = "a..b.c";
@@ -352,6 +365,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "b", "c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   @AndroidIncompatible // Bug in older versions of Android we test against, since fixed.
   public void testPatternSplitLookBehind() {
@@ -365,6 +379,7 @@ public class SplitterTest extends TestCase {
     // splits into chunks ending in :
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   @AndroidIncompatible // Bug in older versions of Android we test against, since fixed.
   public void testPatternSplitWordBoundary() {
@@ -373,6 +388,7 @@ public class SplitterTest extends TestCase {
     assertThat(words).containsExactly("foo", "<", "bar", ">", "bletch").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitWordBoundary_singleCharInput() {
     String string = "f";
@@ -381,6 +397,7 @@ public class SplitterTest extends TestCase {
   }
 
   @AndroidIncompatible // Apparently Gingerbread's regex API is buggy.
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitWordBoundary_singleWordInput() {
     String string = "foo";
@@ -388,6 +405,7 @@ public class SplitterTest extends TestCase {
     assertThat(words).containsExactly("foo").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitEmptyToken() {
     String emptyToken = "a. .c";
@@ -395,6 +413,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "", "c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitEmptyTokenOmitEmptyStrings() {
     String emptyToken = "a. .c";
@@ -403,6 +422,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitOnOnlyDelimiter() {
     Iterable<String> blankblank = Splitter.on(literalDotPattern()).split(".");
@@ -410,12 +430,14 @@ public class SplitterTest extends TestCase {
     assertThat(blankblank).containsExactly("", "").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitOnOnlyDelimitersOmitEmptyStrings() {
     Iterable<String> empty = Splitter.on(literalDotPattern()).omitEmptyStrings().split("...");
     assertThat(empty).isEmpty();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitMatchingIsGreedy() {
     String longDelimiter = "a, b,   c";
@@ -423,6 +445,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "b", "c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitWithLongLeadingDelimiter() {
     String longDelimiter = ", a, b, c";
@@ -430,6 +453,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("", "a", "b", "c").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitWithLongTrailingDelimiter() {
     String longDelimiter = "a, b, c/ ";
@@ -437,6 +461,7 @@ public class SplitterTest extends TestCase {
     assertThat(letters).containsExactly("a", "b", "c", "").inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitInvalidPattern() {
     try {
@@ -446,6 +471,7 @@ public class SplitterTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testPatternSplitWithTrim() {
     String jacksons =
@@ -467,6 +493,7 @@ public class SplitterTest extends TestCase {
     assertIteratorIsUnmodifiable(Splitter.on(",").split("a,b").iterator());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   public void testSplitterIterableIsUnmodifiable_pattern() {
     assertIteratorIsUnmodifiable(Splitter.on(Pattern.compile(",")).split("a,b").iterator());
@@ -489,6 +516,7 @@ public class SplitterTest extends TestCase {
     assertSplitterIterableIsLazy(Splitter.on(","));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.util.regex.Pattern
   @AndroidIncompatible // not clear that j.u.r.Matcher promises to handle mutations during use
   public void testSplitterIterableIsLazy_pattern() {
@@ -663,6 +691,7 @@ public class SplitterTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester tester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/base/StopwatchTest.java b/android/guava-tests/test/com/google/common/base/StopwatchTest.java
index b85ebb7..21d36d6 100644
--- a/android/guava-tests/test/com/google/common/base/StopwatchTest.java
+++ b/android/guava-tests/test/com/google/common/base/StopwatchTest.java
@@ -21,6 +21,7 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static java.util.concurrent.TimeUnit.NANOSECONDS;
 
 import com.google.common.annotations.GwtCompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.FakeTicker;
 import junit.framework.TestCase;
 
@@ -166,6 +167,7 @@ public class StopwatchTest extends TestCase {
     assertEquals(1, stopwatch.elapsed(MILLISECONDS));
   }
 
+  @J2ktIncompatible // TODO(b/259213718): Enable
   public void testToString() {
     stopwatch.start();
     assertEquals("0.000 ns", stopwatch.toString());
diff --git a/android/guava-tests/test/com/google/common/base/StringsTest.java b/android/guava-tests/test/com/google/common/base/StringsTest.java
index 229eb52..c495ff5 100644
--- a/android/guava-tests/test/com/google/common/base/StringsTest.java
+++ b/android/guava-tests/test/com/google/common/base/StringsTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.NullPointerTester;
 import junit.framework.TestCase;
 
@@ -28,6 +29,7 @@ import junit.framework.TestCase;
  *
  * @author Kevin Bourrillion
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public class StringsTest extends TestCase {
   public void testNullToEmpty() {
@@ -233,6 +235,7 @@ public class StringsTest extends TestCase {
     assertEquals("(Object[])null", Strings.lenientFormat("%s", (Object[]) null));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // GWT reflection includes less data
   public void testLenientFormat_badArgumentToString() {
     assertThat(Strings.lenientFormat("boiler %s plate", new ThrowsOnToString()))
@@ -253,6 +256,7 @@ public class StringsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester tester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/base/SuppliersTest.java b/android/guava-tests/test/com/google/common/base/SuppliersTest.java
index e7262f0..9befacc 100644
--- a/android/guava-tests/test/com/google/common/base/SuppliersTest.java
+++ b/android/guava-tests/test/com/google/common/base/SuppliersTest.java
@@ -21,6 +21,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.Lists;
 import com.google.common.testing.ClassSanityTester;
 import com.google.common.testing.EqualsTester;
@@ -39,6 +40,7 @@ import junit.framework.TestCase;
  * @author Laurence Gonsalves
  * @author Harry Heymann
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public class SuppliersTest extends TestCase {
 
@@ -126,6 +128,7 @@ public class SuppliersTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testMemoizeNonSerializable() throws Exception {
     CountingSupplier countingSupplier = new CountingSupplier();
@@ -133,7 +136,7 @@ public class SuppliersTest extends TestCase {
     assertThat(memoizedSupplier.toString()).isEqualTo("Suppliers.memoize(CountingSupplier)");
     checkMemoize(countingSupplier, memoizedSupplier);
     // Calls to the original memoized supplier shouldn't affect its copy.
-    memoizedSupplier.get();
+    Object unused = memoizedSupplier.get();
     assertThat(memoizedSupplier.toString())
         .isEqualTo("Suppliers.memoize(<supplier that returned 10>)");
 
@@ -146,6 +149,7 @@ public class SuppliersTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testMemoizeSerializable() throws Exception {
     SerializableCountingSupplier countingSupplier = new SerializableCountingSupplier();
@@ -153,12 +157,12 @@ public class SuppliersTest extends TestCase {
     assertThat(memoizedSupplier.toString()).isEqualTo("Suppliers.memoize(CountingSupplier)");
     checkMemoize(countingSupplier, memoizedSupplier);
     // Calls to the original memoized supplier shouldn't affect its copy.
-    memoizedSupplier.get();
+    Object unused = memoizedSupplier.get();
     assertThat(memoizedSupplier.toString())
         .isEqualTo("Suppliers.memoize(<supplier that returned 10>)");
 
     Supplier<Integer> copy = reserialize(memoizedSupplier);
-    memoizedSupplier.get();
+    Object unused2 = memoizedSupplier.get();
 
     CountingSupplier countingCopy =
         (CountingSupplier) ((Suppliers.MemoizingSupplier<Integer>) copy).delegate;
@@ -213,6 +217,7 @@ public class SuppliersTest extends TestCase {
     assertEquals(Integer.valueOf(1), result.get(1));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Thread.sleep
   public void testMemoizeWithExpiration() throws InterruptedException {
     CountingSupplier countingSupplier = new CountingSupplier();
@@ -223,6 +228,7 @@ public class SuppliersTest extends TestCase {
     checkExpiration(countingSupplier, memoizedSupplier);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Thread.sleep, SerializationTester
   public void testMemoizeWithExpirationSerialized() throws InterruptedException {
     SerializableCountingSupplier countingSupplier = new SerializableCountingSupplier();
@@ -230,16 +236,17 @@ public class SuppliersTest extends TestCase {
     Supplier<Integer> memoizedSupplier =
         Suppliers.memoizeWithExpiration(countingSupplier, 75, TimeUnit.MILLISECONDS);
     // Calls to the original memoized supplier shouldn't affect its copy.
-    memoizedSupplier.get();
+    Object unused = memoizedSupplier.get();
 
     Supplier<Integer> copy = reserialize(memoizedSupplier);
-    memoizedSupplier.get();
+    Object unused2 = memoizedSupplier.get();
 
     CountingSupplier countingCopy =
         (CountingSupplier) ((Suppliers.ExpiringMemoizingSupplier<Integer>) copy).delegate;
     checkExpiration(countingCopy, copy);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Thread.sleep
   private void checkExpiration(
       CountingSupplier countingSupplier, Supplier<Integer> memoizedSupplier)
@@ -278,6 +285,7 @@ public class SuppliersTest extends TestCase {
     assertNull(nullSupplier.get());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Thread
   public void testExpiringMemoizedSupplierThreadSafe() throws Throwable {
     Function<Supplier<Boolean>, Supplier<Boolean>> memoizer =
@@ -290,6 +298,7 @@ public class SuppliersTest extends TestCase {
     testSupplierThreadSafe(memoizer);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Thread
   public void testMemoizedSupplierThreadSafe() throws Throwable {
     Function<Supplier<Boolean>, Supplier<Boolean>> memoizer =
@@ -302,6 +311,7 @@ public class SuppliersTest extends TestCase {
     testSupplierThreadSafe(memoizer);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Thread
   private void testSupplierThreadSafe(Function<Supplier<Boolean>, Supplier<Boolean>> memoizer)
       throws Throwable {
@@ -378,6 +388,7 @@ public class SuppliersTest extends TestCase {
     assertEquals(1, count.get());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Thread
   public void testSynchronizedSupplierThreadSafe() throws InterruptedException {
     final Supplier<Integer> nonThreadSafe =
@@ -402,7 +413,7 @@ public class SuppliersTest extends TestCase {
             @Override
             public void run() {
               for (int j = 0; j < iterations; j++) {
-                Suppliers.synchronizedSupplier(nonThreadSafe).get();
+                Object unused = Suppliers.synchronizedSupplier(nonThreadSafe).get();
               }
             }
           };
@@ -424,6 +435,7 @@ public class SuppliersTest extends TestCase {
     assertEquals(14, (int) supplierFunction.apply(supplier));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializationTester
   public void testSerialization() {
     assertEquals(Integer.valueOf(5), reserialize(Suppliers.ofInstance(5)).get());
@@ -440,11 +452,13 @@ public class SuppliersTest extends TestCase {
         reserialize(Suppliers.synchronizedSupplier(Suppliers.ofInstance(5))).get());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // reflection
   public void testSuppliersNullChecks() throws Exception {
     new ClassSanityTester().forAllPublicStaticMethods(Suppliers.class).testNulls();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // reflection
   @AndroidIncompatible // TODO(cpovirk): ClassNotFoundException: com.google.common.base.Function
   public void testSuppliersSerializable() throws Exception {
diff --git a/android/guava-tests/test/com/google/common/base/ThrowablesTest.java b/android/guava-tests/test/com/google/common/base/ThrowablesTest.java
index e4c64aa..9757653 100644
--- a/android/guava-tests/test/com/google/common/base/ThrowablesTest.java
+++ b/android/guava-tests/test/com/google/common/base/ThrowablesTest.java
@@ -28,6 +28,7 @@ import static java.util.regex.Pattern.quote;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.Iterables;
 import com.google.common.primitives.Ints;
 import com.google.common.testing.NullPointerTester;
@@ -62,6 +63,7 @@ public class ThrowablesTest extends TestCase {
     throwIfUnchecked(new SomeCheckedException());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible
   public void testPropagateIfPossible_NoneDeclared_NoneThrown() {
     Sample sample =
@@ -81,6 +83,7 @@ public class ThrowablesTest extends TestCase {
     sample.noneDeclared();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible
   public void testPropagateIfPossible_NoneDeclared_UncheckedThrown() {
     Sample sample =
@@ -104,6 +107,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible
   public void testPropagateIfPossible_NoneDeclared_UndeclaredThrown() {
     Sample sample =
@@ -127,6 +131,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class)
   public void testPropagateIfPossible_OneDeclared_NoneThrown() throws SomeCheckedException {
     Sample sample =
@@ -148,6 +153,7 @@ public class ThrowablesTest extends TestCase {
     sample.oneDeclared();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class)
   public void testPropagateIfPossible_OneDeclared_UncheckedThrown() throws SomeCheckedException {
     Sample sample =
@@ -171,6 +177,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class)
   public void testPropagateIfPossible_OneDeclared_CheckedThrown() {
     Sample sample =
@@ -194,6 +201,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class)
   public void testPropagateIfPossible_OneDeclared_UndeclaredThrown() throws SomeCheckedException {
     Sample sample =
@@ -217,6 +225,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class, Class)
   public void testPropagateIfPossible_TwoDeclared_NoneThrown()
       throws SomeCheckedException, SomeOtherCheckedException {
@@ -238,6 +247,7 @@ public class ThrowablesTest extends TestCase {
     sample.twoDeclared();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class, Class)
   public void testPropagateIfPossible_TwoDeclared_UncheckedThrown()
       throws SomeCheckedException, SomeOtherCheckedException {
@@ -263,6 +273,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class, Class)
   public void testPropagateIfPossible_TwoDeclared_CheckedThrown() throws SomeOtherCheckedException {
     Sample sample =
@@ -287,6 +298,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class, Class)
   public void testPropagateIfPossible_TwoDeclared_OtherCheckedThrown() throws SomeCheckedException {
     Sample sample =
@@ -319,21 +331,25 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible
   public void testPropageIfPossible_null() throws SomeCheckedException {
     Throwables.propagateIfPossible(null);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class)
   public void testPropageIfPossible_OneDeclared_null() throws SomeCheckedException {
     Throwables.propagateIfPossible(null, SomeCheckedException.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagateIfPossible(Throwable, Class, Class)
   public void testPropageIfPossible_TwoDeclared_null() throws SomeCheckedException {
     Throwables.propagateIfPossible(null, SomeCheckedException.class, SomeUncheckedException.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagate
   public void testPropagate_NoneDeclared_NoneThrown() {
     Sample sample =
@@ -352,6 +368,7 @@ public class ThrowablesTest extends TestCase {
     sample.noneDeclared();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagate
   public void testPropagate_NoneDeclared_UncheckedThrown() {
     Sample sample =
@@ -374,6 +391,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagate
   public void testPropagate_NoneDeclared_ErrorThrown() {
     Sample sample =
@@ -396,6 +414,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // propagate
   public void testPropagate_NoneDeclared_CheckedThrown() {
     Sample sample =
@@ -419,16 +438,19 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testThrowIfInstanceOf_Unchecked() throws SomeCheckedException {
     throwIfInstanceOf(new SomeUncheckedException(), SomeCheckedException.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testThrowIfInstanceOf_CheckedDifferent() throws SomeCheckedException {
     throwIfInstanceOf(new SomeOtherCheckedException(), SomeCheckedException.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testThrowIfInstanceOf_CheckedSame() {
     try {
@@ -438,6 +460,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testThrowIfInstanceOf_CheckedSubclass() {
     try {
@@ -447,6 +470,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testPropagateIfInstanceOf_NoneThrown() throws SomeCheckedException {
     Sample sample =
@@ -466,6 +490,7 @@ public class ThrowablesTest extends TestCase {
     sample.oneDeclared();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testPropagateIfInstanceOf_DeclaredThrown() {
     Sample sample =
@@ -489,6 +514,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testPropagateIfInstanceOf_UncheckedThrown() throws SomeCheckedException {
     Sample sample =
@@ -512,6 +538,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testPropagateIfInstanceOf_UndeclaredThrown() throws SomeCheckedException {
     Sample sample =
@@ -536,6 +563,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testThrowIfInstanceOf_null() throws SomeCheckedException {
     try {
@@ -545,6 +573,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // throwIfInstanceOf
   public void testPropageIfInstanceOf_null() throws SomeCheckedException {
     Throwables.propagateIfInstanceOf(null, SomeCheckedException.class);
@@ -625,6 +654,7 @@ public class ThrowablesTest extends TestCase {
     throw new SomeUndeclaredCheckedException();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // getStackTraceAsString(Throwable)
   public void testGetStackTraceAsString() {
     class StackTraceException extends Exception {
@@ -637,8 +667,9 @@ public class ThrowablesTest extends TestCase {
 
     String firstLine = quote(e.getClass().getName() + ": " + e.getMessage());
     String secondLine = "\\s*at " + ThrowablesTest.class.getName() + "\\..*";
-    String moreLines = "(?:.*\n?)*";
-    String expected = firstLine + "\n" + secondLine + "\n" + moreLines;
+    String moreLines = "(?:.*" + System.lineSeparator() + "?)*";
+    String expected =
+        firstLine + System.lineSeparator() + secondLine + System.lineSeparator() + moreLines;
     assertThat(getStackTraceAsString(e)).matches(expected);
   }
 
@@ -679,6 +710,7 @@ public class ThrowablesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Throwables.getCauseAs(Throwable, Class)
   public void testGetCauseAs() {
     SomeCheckedException cause = new SomeCheckedException();
@@ -697,6 +729,7 @@ public class ThrowablesTest extends TestCase {
   }
 
   @AndroidIncompatible // No getJavaLangAccess in Android (at least not in the version we use).
+  @J2ktIncompatible
   @GwtIncompatible // lazyStackTraceIsLazy()
   public void testLazyStackTraceWorksInProd() {
     // TODO(b/64442212): Remove this guard once lazyStackTrace() works in Java 9+.
@@ -708,6 +741,7 @@ public class ThrowablesTest extends TestCase {
     assertTrue(lazyStackTraceIsLazy());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // lazyStackTrace(Throwable)
   public void testLazyStackTrace() {
     Exception e = new Exception();
@@ -731,6 +765,7 @@ public class ThrowablesTest extends TestCase {
     assertThat(lazyStackTrace(e)).containsExactly((Object[]) originalStackTrace).inOrder();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // lazyStackTrace
   private void doTestLazyStackTraceFallback() {
     assertFalse(lazyStackTraceIsLazy());
@@ -749,6 +784,7 @@ public class ThrowablesTest extends TestCase {
     assertThat(lazyStackTrace(e)).isEmpty();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     new NullPointerTester().testAllPublicStaticMethods(Throwables.class);
diff --git a/android/guava-tests/test/com/google/common/base/ToStringHelperTest.java b/android/guava-tests/test/com/google/common/base/ToStringHelperTest.java
index db15f2e..62ee891 100644
--- a/android/guava-tests/test/com/google/common/base/ToStringHelperTest.java
+++ b/android/guava-tests/test/com/google/common/base/ToStringHelperTest.java
@@ -18,6 +18,7 @@ package com.google.common.base;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableMap;
 import java.util.Arrays;
 import java.util.Map;
@@ -31,6 +32,7 @@ import junit.framework.TestCase;
 @GwtCompatible
 public class ToStringHelperTest extends TestCase {
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testConstructor_instance() {
     String toTest = MoreObjects.toStringHelper(this).toString();
@@ -42,6 +44,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(toTest, toTest.matches(".*\\{\\}"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testConstructor_innerClass() {
     String toTest = MoreObjects.toStringHelper(new TestClass()).toString();
@@ -53,6 +56,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(toTest, toTest.matches(".*\\{\\}"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testConstructor_anonymousClass() {
     String toTest = MoreObjects.toStringHelper(new Object() {}).toString();
@@ -64,6 +68,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(toTest, toTest.matches(".*\\{\\}"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testConstructor_classObject() {
     String toTest = MoreObjects.toStringHelper(TestClass.class).toString();
@@ -80,6 +85,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("FooBar{}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringHelper_localInnerClass() {
     // Local inner classes have names ending like "Outer.$1Inner"
@@ -94,6 +100,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(toTest, toTest.matches(".*\\{\\}"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringHelper_localInnerNestedClass() {
     class LocalInnerClass {
@@ -113,6 +120,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(toTest, toTest.matches(".*\\{\\}"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringHelper_moreThanNineAnonymousClasses() {
     // The nth anonymous class has a name ending like "Outer.$n"
@@ -147,12 +155,14 @@ public class ToStringHelperTest extends TestCase {
   }
 
   // all remaining test are on an inner class with various fields
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToString_oneField() {
     String toTest = MoreObjects.toStringHelper(new TestClass()).add("field1", "Hello").toString();
     assertEquals("TestClass{field1=Hello}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToString_oneIntegerField() {
     String toTest =
@@ -160,6 +170,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("TestClass{field1=42}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToString_nullInteger() {
     String toTest =
@@ -184,6 +195,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(toTest, toTest.matches(".*\\{field1\\=null\\}"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToString_complexFields() {
 
@@ -230,6 +242,7 @@ public class ToStringHelperTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToString_addWithNullValue() {
     final String result = MoreObjects.toStringHelper(new TestClass()).add("Hello", null).toString();
@@ -242,6 +255,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(result, result.matches(".*\\{Hello\\=null\\}"));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToString_ToStringTwice() {
     MoreObjects.ToStringHelper helper =
@@ -261,6 +275,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals(expected2, helper.toString());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToString_addValue() {
     String toTest =
@@ -288,6 +303,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(toTest, toTest.matches(expected));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToString_addValueWithNullValue() {
     final String result =
@@ -313,6 +329,7 @@ public class ToStringHelperTest extends TestCase {
     assertTrue(result, result.matches(expected));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitNullValues_oneField() {
     String toTest =
@@ -320,6 +337,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("TestClass{}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitNullValues_manyFieldsFirstNull() {
     String toTest =
@@ -332,6 +350,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("TestClass{field2=Googley, field3=World}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitNullValues_manyFieldsOmitAfterNull() {
     String toTest =
@@ -344,6 +363,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("TestClass{field2=Googley, field3=World}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitNullValues_manyFieldsLastNull() {
     String toTest =
@@ -356,6 +376,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("TestClass{field1=Hello, field2=Googley}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitEmptyValues_oneValue() {
     String toTest =
@@ -363,6 +384,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("TestClass{}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitNullValues_manyValuesFirstNull() {
     String toTest =
@@ -375,6 +397,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("TestClass{Googley, World}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitNullValues_manyValuesLastNull() {
     String toTest =
@@ -387,6 +410,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals("TestClass{Hello, Googley}", toTest);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitNullValues_differentOrder() {
     String expected = "TestClass{field1=Hello, field2=Googley, field3=World}";
@@ -408,6 +432,7 @@ public class ToStringHelperTest extends TestCase {
     assertEquals(expected, toTest2);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Class names are obfuscated in GWT
   public void testToStringOmitNullValues_canBeCalledManyTimes() {
     String toTest =
diff --git a/android/guava-tests/test/com/google/common/base/Utf8Test.java b/android/guava-tests/test/com/google/common/base/Utf8Test.java
index 049e8d2..57464a9 100644
--- a/android/guava-tests/test/com/google/common/base/Utf8Test.java
+++ b/android/guava-tests/test/com/google/common/base/Utf8Test.java
@@ -26,6 +26,7 @@ import static java.lang.Character.MIN_SUPPLEMENTARY_CODE_POINT;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -187,18 +188,21 @@ public class Utf8Test extends TestCase {
           FOUR_BYTE_ROUNDTRIPPABLE_CHARACTERS;
 
   /** Tests that round tripping of all two byte permutations work. */
+  @J2ktIncompatible
   @GwtIncompatible // java.nio.charset.Charset
   public void testIsWellFormed_1Byte() {
     testBytes(1, EXPECTED_ONE_BYTE_ROUNDTRIPPABLE_COUNT);
   }
 
   /** Tests that round tripping of all two byte permutations work. */
+  @J2ktIncompatible
   @GwtIncompatible // java.nio.charset.Charset
   public void testIsWellFormed_2Bytes() {
     testBytes(2, EXPECTED_TWO_BYTE_ROUNDTRIPPABLE_COUNT);
   }
 
   /** Tests that round tripping of all three byte permutations work. */
+  @J2ktIncompatible
   @GwtIncompatible // java.nio.charset.Charset
 
   public void testIsWellFormed_3Bytes() {
@@ -302,6 +306,7 @@ public class Utf8Test extends TestCase {
    * @param numBytes the number of bytes in the byte array
    * @param expectedCount the expected number of roundtrippable permutations
    */
+  @J2ktIncompatible
   @GwtIncompatible // java.nio.charset.Charset
   private static void testBytes(int numBytes, long expectedCount) {
     testBytes(numBytes, expectedCount, 0, -1);
@@ -317,6 +322,7 @@ public class Utf8Test extends TestCase {
    * @param lim the limit of bytes to process encoded as a long as big-endian, or -1 to mean the max
    *     limit for numBytes
    */
+  @J2ktIncompatible
   @GwtIncompatible // java.nio.charset.Charset
   private static void testBytes(int numBytes, long expectedCount, long start, long lim) {
     byte[] bytes = new byte[numBytes];
diff --git a/android/guava-tests/test/com/google/common/base/VerifyTest.java b/android/guava-tests/test/com/google/common/base/VerifyTest.java
index 37c6efc..36465ea 100644
--- a/android/guava-tests/test/com/google/common/base/VerifyTest.java
+++ b/android/guava-tests/test/com/google/common/base/VerifyTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
 
@@ -93,6 +94,7 @@ public class VerifyTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     // Don't bother testing: Verify is like Preconditions. See the discussion on that class.
diff --git a/android/guava-tests/test/com/google/common/cache/AbstractCacheTest.java b/android/guava-tests/test/com/google/common/cache/AbstractCacheTest.java
index 13ef33d..8602e58 100644
--- a/android/guava-tests/test/com/google/common/cache/AbstractCacheTest.java
+++ b/android/guava-tests/test/com/google/common/cache/AbstractCacheTest.java
@@ -24,6 +24,7 @@ import com.google.common.collect.Lists;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicReference;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link AbstractCache}.
@@ -37,7 +38,7 @@ public class AbstractCacheTest extends TestCase {
     Cache<Object, Object> cache =
         new AbstractCache<Object, Object>() {
           @Override
-          public Object getIfPresent(Object key) {
+          public @Nullable Object getIfPresent(Object key) {
             return valueRef.get();
           }
         };
@@ -53,7 +54,7 @@ public class AbstractCacheTest extends TestCase {
     Cache<Object, Object> cache =
         new AbstractCache<Object, Object>() {
           @Override
-          public Object getIfPresent(Object key) {
+          public @Nullable Object getIfPresent(Object key) {
             return null;
           }
         };
@@ -67,7 +68,7 @@ public class AbstractCacheTest extends TestCase {
     Cache<Object, Object> cache =
         new AbstractCache<Object, Object>() {
           @Override
-          public Object getIfPresent(Object key) {
+          public @Nullable Object getIfPresent(Object key) {
             return cachedKey.equals(key) ? cachedValue : null;
           }
         };
diff --git a/android/guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java b/android/guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java
index c2ddef7..84e004a 100644
--- a/android/guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java
+++ b/android/guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java
@@ -23,6 +23,7 @@ import com.google.common.util.concurrent.UncheckedExecutionException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicReference;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link AbstractLoadingCache}.
@@ -46,7 +47,7 @@ public class AbstractLoadingCacheTest extends TestCase {
           }
 
           @Override
-          public Object getIfPresent(Object key) {
+          public @Nullable Object getIfPresent(Object key) {
             return valueRef.get();
           }
         };
@@ -78,7 +79,7 @@ public class AbstractLoadingCacheTest extends TestCase {
           }
 
           @Override
-          public Object getIfPresent(Object key) {
+          public @Nullable Object getIfPresent(Object key) {
             return valueRef.get();
           }
         };
@@ -110,7 +111,7 @@ public class AbstractLoadingCacheTest extends TestCase {
           }
 
           @Override
-          public Object getIfPresent(Object key) {
+          public @Nullable Object getIfPresent(Object key) {
             return valueRef.get();
           }
         };
@@ -142,7 +143,7 @@ public class AbstractLoadingCacheTest extends TestCase {
           }
 
           @Override
-          public Object getIfPresent(Object key) {
+          public @Nullable Object getIfPresent(Object key) {
             return valueRef.get();
           }
         };
diff --git a/android/guava-tests/test/com/google/common/cache/CacheBuilderFactory.java b/android/guava-tests/test/com/google/common/cache/CacheBuilderFactory.java
index 948b4b5..77a4734 100644
--- a/android/guava-tests/test/com/google/common/cache/CacheBuilderFactory.java
+++ b/android/guava-tests/test/com/google/common/cache/CacheBuilderFactory.java
@@ -26,7 +26,7 @@ import com.google.common.collect.Sets;
 import java.util.List;
 import java.util.Set;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Helper class for creating {@link CacheBuilder} instances with all combinations of several sets of
@@ -120,15 +120,15 @@ class CacheBuilderFactory {
   private static final Function<Object, Optional<?>> NULLABLE_TO_OPTIONAL =
       new Function<Object, Optional<?>>() {
         @Override
-        public Optional<?> apply(@CheckForNull Object obj) {
+        public Optional<?> apply(@Nullable Object obj) {
           return Optional.fromNullable(obj);
         }
       };
 
-  private static final Function<Optional<?>, Object> OPTIONAL_TO_NULLABLE =
-      new Function<Optional<?>, Object>() {
+  private static final Function<Optional<?>, @Nullable Object> OPTIONAL_TO_NULLABLE =
+      new Function<Optional<?>, @Nullable Object>() {
         @Override
-        public Object apply(Optional<?> optional) {
+        public @Nullable Object apply(Optional<?> optional) {
           return optional.orNull();
         }
       };
@@ -158,14 +158,14 @@ class CacheBuilderFactory {
   }
 
   private CacheBuilder<Object, Object> createCacheBuilder(
-      Integer concurrencyLevel,
-      Integer initialCapacity,
-      Integer maximumSize,
-      DurationSpec expireAfterWrite,
-      DurationSpec expireAfterAccess,
-      DurationSpec refresh,
-      Strength keyStrength,
-      Strength valueStrength) {
+      @Nullable Integer concurrencyLevel,
+      @Nullable Integer initialCapacity,
+      @Nullable Integer maximumSize,
+      @Nullable DurationSpec expireAfterWrite,
+      @Nullable DurationSpec expireAfterAccess,
+      @Nullable DurationSpec refresh,
+      @Nullable Strength keyStrength,
+      @Nullable Strength valueStrength) {
 
     CacheBuilder<Object, Object> builder = CacheBuilder.newBuilder();
     if (concurrencyLevel != null) {
@@ -214,7 +214,7 @@ class CacheBuilderFactory {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
       if (o instanceof DurationSpec) {
         DurationSpec that = (DurationSpec) o;
         return unit.toNanos(duration) == that.unit.toNanos(that.duration);
diff --git a/android/guava-tests/test/com/google/common/cache/CacheLoadingTest.java b/android/guava-tests/test/com/google/common/cache/CacheLoadingTest.java
index 7971d71..9b193ed 100644
--- a/android/guava-tests/test/com/google/common/cache/CacheLoadingTest.java
+++ b/android/guava-tests/test/com/google/common/cache/CacheLoadingTest.java
@@ -1767,6 +1767,7 @@ public class CacheLoadingTest extends TestCase {
   }
 
 
+  @AndroidIncompatible // Depends on GC behavior
   public void testReloadAfterValueReclamation() throws InterruptedException, ExecutionException {
     CountingLoader countingLoader = new CountingLoader();
     LoadingCache<Object, Object> cache =
diff --git a/android/guava-tests/test/com/google/common/cache/CacheTesting.java b/android/guava-tests/test/com/google/common/cache/CacheTesting.java
index 4c58ed5..47a75c0 100644
--- a/android/guava-tests/test/com/google/common/cache/CacheTesting.java
+++ b/android/guava-tests/test/com/google/common/cache/CacheTesting.java
@@ -44,7 +44,7 @@ import java.util.Set;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicReferenceArray;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * A collection of utilities for {@link Cache} testing.
@@ -98,7 +98,7 @@ class CacheTesting {
   }
 
   /**
-   * Forces the segment containing the given {@code key} to expand (see {@link Segment#expand()}.
+   * Forces the segment containing the given {@code key} to expand (see {@link Segment#expand()}).
    */
   static <K, V> void forceExpandSegment(Cache<K, V> cache, K key) {
     checkNotNull(cache);
@@ -367,7 +367,7 @@ class CacheTesting {
   }
 
   interface Receiver<T> {
-    void accept(@CheckForNull T object);
+    void accept(@Nullable T object);
   }
 
   /**
diff --git a/android/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java b/android/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java
index 412ff78..639a208 100644
--- a/android/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java
+++ b/android/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java
@@ -104,7 +104,7 @@ public class ForwardingCacheTest extends TestCase {
   private static class OnlyGet<K, V> extends ForwardingCache<K, V> {
     @Override
     protected Cache<K, V> delegate() {
-      return null;
+      throw new AssertionError();
     }
   }
 }
diff --git a/android/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java b/android/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java
index d78db2d..fe41612 100644
--- a/android/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java
+++ b/android/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java
@@ -112,7 +112,7 @@ public class ForwardingLoadingCacheTest extends TestCase {
   private static class OnlyGet<K, V> extends ForwardingLoadingCache<K, V> {
     @Override
     protected LoadingCache<K, V> delegate() {
-      return null;
+      throw new AssertionError();
     }
   }
 }
diff --git a/android/guava-tests/test/com/google/common/cache/LocalCacheTest.java b/android/guava-tests/test/com/google/common/cache/LocalCacheTest.java
index 9bfaa2b..431c962 100644
--- a/android/guava-tests/test/com/google/common/cache/LocalCacheTest.java
+++ b/android/guava-tests/test/com/google/common/cache/LocalCacheTest.java
@@ -76,6 +76,7 @@ import java.util.logging.LogRecord;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /** @author Charles Fry */
 @SuppressWarnings("GuardedBy") // TODO(b/35466881): Fix or suppress.
@@ -329,7 +330,7 @@ public class LocalCacheTest extends TestCase {
   }
 
   public void testSetConcurrencyLevel() {
-    // round up to nearest power of two
+    // round up to the nearest power of two
 
     checkConcurrencyLevel(1, 1);
     checkConcurrencyLevel(2, 2);
@@ -348,7 +349,7 @@ public class LocalCacheTest extends TestCase {
   }
 
   public void testSetInitialCapacity() {
-    // share capacity over each segment, then round up to nearest power of two
+    // share capacity over each segment, then round up to the nearest power of two
 
     checkInitialCapacity(1, 0, 1);
     checkInitialCapacity(1, 1, 1);
@@ -2695,7 +2696,7 @@ public class LocalCacheTest extends TestCase {
   // entries and values
 
   private static <K, V> DummyEntry<K, V> createDummyEntry(
-      K key, int hash, V value, ReferenceEntry<K, V> next) {
+      K key, int hash, V value, @Nullable ReferenceEntry<K, V> next) {
     DummyEntry<K, V> entry = DummyEntry.create(key, hash, next);
     DummyValueReference<K, V> valueRef = DummyValueReference.create(value);
     entry.setValueReference(valueRef);
@@ -2703,7 +2704,7 @@ public class LocalCacheTest extends TestCase {
   }
 
   static class DummyEntry<K, V> implements ReferenceEntry<K, V> {
-    private K key;
+    private @Nullable K key;
     private final int hash;
     private final ReferenceEntry<K, V> next;
 
@@ -2713,7 +2714,8 @@ public class LocalCacheTest extends TestCase {
       this.next = next;
     }
 
-    public static <K, V> DummyEntry<K, V> create(K key, int hash, ReferenceEntry<K, V> next) {
+    public static <K, V> DummyEntry<K, V> create(
+        K key, int hash, @Nullable ReferenceEntry<K, V> next) {
       return new DummyEntry<>(key, hash, next);
     }
 
@@ -2822,7 +2824,7 @@ public class LocalCacheTest extends TestCase {
   }
 
   static class DummyValueReference<K, V> implements ValueReference<K, V> {
-    private V value;
+    private @Nullable V value;
     boolean loading = false;
 
     public DummyValueReference() {
@@ -2852,7 +2854,7 @@ public class LocalCacheTest extends TestCase {
     }
 
     @Override
-    public ReferenceEntry<K, V> getEntry() {
+    public @Nullable ReferenceEntry<K, V> getEntry() {
       return null;
     }
 
@@ -2902,7 +2904,7 @@ public class LocalCacheTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
       return (o instanceof SerializableCacheLoader);
     }
   }
@@ -2918,7 +2920,7 @@ public class LocalCacheTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
       return (o instanceof SerializableRemovalListener);
     }
   }
@@ -2935,7 +2937,7 @@ public class LocalCacheTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
       return (o instanceof SerializableTicker);
     }
   }
@@ -2952,7 +2954,7 @@ public class LocalCacheTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
       return (o instanceof SerializableWeigher);
     }
   }
diff --git a/android/guava-tests/test/com/google/common/cache/LocalLoadingCacheTest.java b/android/guava-tests/test/com/google/common/cache/LocalLoadingCacheTest.java
index 6b73bdc..3a7f416 100644
--- a/android/guava-tests/test/com/google/common/cache/LocalLoadingCacheTest.java
+++ b/android/guava-tests/test/com/google/common/cache/LocalLoadingCacheTest.java
@@ -323,7 +323,7 @@ public class LocalLoadingCacheTest extends TestCase {
     recursiveCache = CacheBuilder.newBuilder().weakKeys().weakValues().build(recursiveLoader);
     cacheRef.set(recursiveCache);
 
-    // tells the test when the compution has completed
+    // tells the test when the computation has completed
     final CountDownLatch doneSignal = new CountDownLatch(1);
 
     Thread thread =
diff --git a/android/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java b/android/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java
index 6cc0260..e4a06c9 100644
--- a/android/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java
+++ b/android/guava-tests/test/com/google/common/cache/TestingCacheLoaders.java
@@ -23,7 +23,7 @@ import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Utility {@link CacheLoader} implementations intended for use in testing.
@@ -57,7 +57,7 @@ class TestingCacheLoaders {
   }
 
   /** Returns a {@link CacheLoader} that returns the given {@code constant} for every request. */
-  static <K, V> ConstantLoader<K, V> constantLoader(@CheckForNull V constant) {
+  static <K, V> ConstantLoader<K, V> constantLoader(@Nullable V constant) {
     return new ConstantLoader<>(constant);
   }
 
diff --git a/android/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java b/android/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java
index d7a8d16..705b15a 100644
--- a/android/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/AbstractImmutableSetTest.java
@@ -33,6 +33,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Base class for {@link ImmutableSet} and {@link ImmutableSortedSet} tests.
@@ -59,7 +60,7 @@ public abstract class AbstractImmutableSetTest extends TestCase {
   protected abstract <E extends Comparable<? super E>> Set<E> of(
       E e1, E e2, E e3, E e4, E e5, E e6, E... rest);
 
-  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(E[] elements);
+  protected abstract <E extends Comparable<? super E>> Set<E> copyOf(E @Nullable [] elements);
 
   protected abstract <E extends Comparable<? super E>> Set<E> copyOf(
       Collection<? extends E> elements);
diff --git a/android/guava-tests/test/com/google/common/collect/AbstractIteratorTest.java b/android/guava-tests/test/com/google/common/collect/AbstractIteratorTest.java
index a76907c..60ad785 100644
--- a/android/guava-tests/test/com/google/common/collect/AbstractIteratorTest.java
+++ b/android/guava-tests/test/com/google/common/collect/AbstractIteratorTest.java
@@ -51,8 +51,7 @@ public class AbstractIteratorTest extends TestCase {
               case 2:
                 return endOfData();
               default:
-                fail("Should not have been invoked again");
-                return null;
+                throw new AssertionError("Should not have been invoked again");
             }
           }
         };
@@ -97,8 +96,7 @@ public class AbstractIteratorTest extends TestCase {
               case 2:
                 return endOfData();
               default:
-                fail("Should not have been invoked again");
-                return null;
+                throw new AssertionError("Should not have been invoked again");
             }
           }
         };
@@ -188,12 +186,12 @@ public class AbstractIteratorTest extends TestCase {
           @Override
           public Integer computeNext() {
             if (haveBeenCalled) {
-              fail("Should not have been called again");
+              throw new AssertionError("Should not have been called again");
             } else {
               haveBeenCalled = true;
               sneakyThrow(new SomeCheckedException());
+              throw new AssertionError(); // unreachable
             }
-            return null; // never reached
           }
         };
 
@@ -281,7 +279,7 @@ public class AbstractIteratorTest extends TestCase {
           @Override
           protected Integer computeNext() {
             boolean unused = hasNext();
-            return null;
+            throw new AssertionError();
           }
         };
     try {
@@ -295,7 +293,7 @@ public class AbstractIteratorTest extends TestCase {
   // hasNext/next/peek), but we'll cop out for now, knowing that peek() and
   // next() both start by invoking hasNext() anyway.
 
-  /** Throws a undeclared checked exception. */
+  /** Throws an undeclared checked exception. */
   private static void sneakyThrow(Throwable t) {
     class SneakyThrower<T extends Throwable> {
       @SuppressWarnings("unchecked") // not really safe, but that's the point
diff --git a/android/guava-tests/test/com/google/common/collect/AbstractMapEntryTest.java b/android/guava-tests/test/com/google/common/collect/AbstractMapEntryTest.java
index 63c17de..6e6b254 100644
--- a/android/guava-tests/test/com/google/common/collect/AbstractMapEntryTest.java
+++ b/android/guava-tests/test/com/google/common/collect/AbstractMapEntryTest.java
@@ -20,6 +20,7 @@ import com.google.common.annotations.GwtCompatible;
 import java.util.Collections;
 import java.util.Map.Entry;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code AbstractMapEntry}.
@@ -28,8 +29,8 @@ import junit.framework.TestCase;
  */
 @GwtCompatible
 public class AbstractMapEntryTest extends TestCase {
-  private static final String NK = null;
-  private static final Integer NV = null;
+  private static final @Nullable String NK = null;
+  private static final @Nullable Integer NV = null;
 
   private static <K, V> Entry<K, V> entry(final K key, final V value) {
     return new AbstractMapEntry<K, V>() {
diff --git a/android/guava-tests/test/com/google/common/collect/AbstractSequentialIteratorTest.java b/android/guava-tests/test/com/google/common/collect/AbstractSequentialIteratorTest.java
index c0b7d91..16a9ba7 100644
--- a/android/guava-tests/test/com/google/common/collect/AbstractSequentialIteratorTest.java
+++ b/android/guava-tests/test/com/google/common/collect/AbstractSequentialIteratorTest.java
@@ -26,6 +26,7 @@ import java.util.Iterator;
 import java.util.NoSuchElementException;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /** Tests for {@link AbstractSequentialIterator}. */
 @GwtCompatible(emulated = true)
@@ -59,7 +60,8 @@ public class AbstractSequentialIteratorTest extends TestCase {
           public Iterator<Integer> iterator() {
             Iterator<Integer> powersOfTwo =
                 new AbstractSequentialIterator<Integer>(1) {
-                  protected Integer computeNext(Integer previous) {
+                  @Override
+                  protected @Nullable Integer computeNext(Integer previous) {
                     return (previous == 1 << 30) ? null : previous * 2;
                   }
                 };
@@ -136,7 +138,7 @@ public class AbstractSequentialIteratorTest extends TestCase {
   private static Iterator<Integer> newDoubler(int first, final int last) {
     return new AbstractSequentialIterator<Integer>(first) {
       @Override
-      protected Integer computeNext(Integer previous) {
+      protected @Nullable Integer computeNext(Integer previous) {
         return (previous == last) ? null : previous * 2;
       }
     };
diff --git a/android/guava-tests/test/com/google/common/collect/CollectionBenchmarkSampleData.java b/android/guava-tests/test/com/google/common/collect/CollectionBenchmarkSampleData.java
index cdc7a91..0504e6a 100644
--- a/android/guava-tests/test/com/google/common/collect/CollectionBenchmarkSampleData.java
+++ b/android/guava-tests/test/com/google/common/collect/CollectionBenchmarkSampleData.java
@@ -22,6 +22,7 @@ import com.google.common.primitives.Ints;
 import java.util.Collections;
 import java.util.List;
 import java.util.Set;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Package up sample data for common collections benchmarking.
@@ -111,7 +112,7 @@ class CollectionBenchmarkSampleData {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       return this == obj || (obj instanceof Element && ((Element) obj).hash == hash);
     }
 
@@ -137,7 +138,7 @@ class CollectionBenchmarkSampleData {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       return slowItDown() != 1 && super.equals(obj);
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/Collections2Test.java b/android/guava-tests/test/com/google/common/collect/Collections2Test.java
index 4b87618..2cf05f6 100644
--- a/android/guava-tests/test/com/google/common/collect/Collections2Test.java
+++ b/android/guava-tests/test/com/google/common/collect/Collections2Test.java
@@ -16,16 +16,15 @@
 
 package com.google.common.collect;
 
+import static com.google.common.base.Strings.isNullOrEmpty;
 import static com.google.common.collect.Iterables.concat;
 import static com.google.common.collect.Lists.newArrayList;
 import static com.google.common.collect.Lists.newLinkedList;
 import static com.google.common.truth.Truth.assertThat;
-import static java.util.Arrays.asList;
 import static java.util.Collections.nCopies;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
-import com.google.common.base.Function;
 import com.google.common.base.Predicate;
 import com.google.common.collect.testing.CollectionTestSuiteBuilder;
 import com.google.common.collect.testing.TestStringCollectionGenerator;
@@ -40,6 +39,7 @@ import java.util.NoSuchElementException;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Collections2}.
@@ -62,29 +62,10 @@ public class Collections2Test extends TestCase {
     return suite;
   }
 
-  static final Predicate<String> NOT_YYY_ZZZ =
-      new Predicate<String>() {
-        @Override
-        public boolean apply(String input) {
-          return !"yyy".equals(input) && !"zzz".equals(input);
-        }
-      };
-
-  static final Predicate<String> LENGTH_1 =
-      new Predicate<String>() {
-        @Override
-        public boolean apply(String input) {
-          return input.length() == 1;
-        }
-      };
-
-  static final Predicate<String> STARTS_WITH_VOWEL =
-      new Predicate<String>() {
-        @Override
-        public boolean apply(String input) {
-          return asList('a', 'e', 'i', 'o', 'u').contains(input.charAt(0));
-        }
-      };
+  static final Predicate<@Nullable String> NOT_YYY_ZZZ =
+      input -> !"yyy".equals(input) && !"zzz".equals(input);
+
+  static final Predicate<String> LENGTH_1 = input -> input.length() == 1;
 
   @GwtIncompatible // suite
   private static Test testsForFilter() {
@@ -200,25 +181,18 @@ public class Collections2Test extends TestCase {
         .createTestSuite();
   }
 
-  private static final Function<String, String> REMOVE_FIRST_CHAR =
-      new Function<String, String>() {
-        @Override
-        public String apply(String from) {
-          return ((from == null) || "".equals(from)) ? null : from.substring(1);
-        }
-      };
-
   @GwtIncompatible // suite
   private static Test testsForTransform() {
     return CollectionTestSuiteBuilder.using(
             new TestStringCollectionGenerator() {
               @Override
-              public Collection<String> create(String[] elements) {
-                List<String> list = newArrayList();
+              public Collection<@Nullable String> create(@Nullable String[] elements) {
+                List<@Nullable String> list = newArrayList();
                 for (String element : elements) {
                   list.add((element == null) ? null : "q" + element);
                 }
-                return Collections2.transform(list, REMOVE_FIRST_CHAR);
+                return Collections2.transform(
+                    list, from -> isNullOrEmpty(from) ? null : from.substring(1));
               }
             })
         .named("Collections2.transform")
diff --git a/android/guava-tests/test/com/google/common/collect/ComparatorsTest.java b/android/guava-tests/test/com/google/common/collect/ComparatorsTest.java
index b30cb76..0368611 100644
--- a/android/guava-tests/test/com/google/common/collect/ComparatorsTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ComparatorsTest.java
@@ -25,6 +25,7 @@ import com.google.common.testing.EqualsTester;
 import java.util.Collections;
 import java.util.Comparator;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code Comparators}.
@@ -118,7 +119,7 @@ public class ComparatorsTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
       return (o instanceof Foo) && ((Foo) o).value.equals(value);
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/EnumBiMapTest.java b/android/guava-tests/test/com/google/common/collect/EnumBiMapTest.java
index 25b057a..fa927e2 100644
--- a/android/guava-tests/test/com/google/common/collect/EnumBiMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/EnumBiMapTest.java
@@ -183,11 +183,13 @@ public class EnumBiMapTest extends TestCase {
     assertEquals(bimap3, emptyBimap);
   }
 
+  @GwtIncompatible // keyType
   public void testKeyType() {
     EnumBiMap<Currency, Country> bimap = EnumBiMap.create(Currency.class, Country.class);
     assertEquals(Currency.class, bimap.keyType());
   }
 
+  @GwtIncompatible // valueType
   public void testValueType() {
     EnumBiMap<Currency, Country> bimap = EnumBiMap.create(Currency.class, Country.class);
     assertEquals(Country.class, bimap.valueType());
diff --git a/android/guava-tests/test/com/google/common/collect/EnumHashBiMapTest.java b/android/guava-tests/test/com/google/common/collect/EnumHashBiMapTest.java
index 2a78f55..24f3953 100644
--- a/android/guava-tests/test/com/google/common/collect/EnumHashBiMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/EnumHashBiMapTest.java
@@ -197,6 +197,7 @@ public class EnumHashBiMapTest extends TestCase {
     assertEquals(bimap3, emptyBimap);
   }
 
+  @GwtIncompatible // keyType
   public void testKeyType() {
     EnumHashBiMap<Currency, String> bimap = EnumHashBiMap.create(Currency.class);
     assertEquals(Currency.class, bimap.keyType());
diff --git a/android/guava-tests/test/com/google/common/collect/FauxveridesTest.java b/android/guava-tests/test/com/google/common/collect/FauxveridesTest.java
index ff0b86b..f7eda67 100644
--- a/android/guava-tests/test/com/google/common/collect/FauxveridesTest.java
+++ b/android/guava-tests/test/com/google/common/collect/FauxveridesTest.java
@@ -34,6 +34,7 @@ import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests that all {@code public static} methods "inherited" from superclasses are "overridden" in
@@ -176,7 +177,7 @@ public class FauxveridesTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       if (obj instanceof MethodSignature) {
         MethodSignature other = (MethodSignature) obj;
         return name.equals(other.name)
@@ -219,7 +220,7 @@ public class FauxveridesTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       if (obj instanceof TypeSignature) {
         TypeSignature other = (TypeSignature) obj;
         return parameterSignatures.equals(other.parameterSignatures);
@@ -251,7 +252,7 @@ public class FauxveridesTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       if (obj instanceof TypeParameterSignature) {
         TypeParameterSignature other = (TypeParameterSignature) obj;
         /*
diff --git a/android/guava-tests/test/com/google/common/collect/FluentIterableTest.java b/android/guava-tests/test/com/google/common/collect/FluentIterableTest.java
index b8427b1..a6aeee6 100644
--- a/android/guava-tests/test/com/google/common/collect/FluentIterableTest.java
+++ b/android/guava-tests/test/com/google/common/collect/FluentIterableTest.java
@@ -38,9 +38,9 @@ import java.util.List;
 import java.util.Set;
 import java.util.SortedSet;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckForNull;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link FluentIterable}.
@@ -57,7 +57,7 @@ public class FluentIterableTest extends TestCase {
   }
 
   public void testFromArrayAndAppend() {
-    FluentIterable<TimeUnit> units =
+    FluentIterable<TimeUnit> unused =
         FluentIterable.from(TimeUnit.values()).append(TimeUnit.SECONDS);
   }
 
@@ -101,7 +101,6 @@ public class FluentIterableTest extends TestCase {
     List<Integer> list1 = newArrayList(1);
     List<Integer> list2 = newArrayList(4);
 
-    @SuppressWarnings("unchecked")
     List<List<Integer>> input = newArrayList(list1, list2);
 
     FluentIterable<Integer> result = FluentIterable.concat(input);
@@ -123,7 +122,6 @@ public class FluentIterableTest extends TestCase {
     List<Integer> list3 = newArrayList(7, 8);
     List<Integer> list4 = newArrayList(9);
     List<Integer> list5 = newArrayList(10);
-    @SuppressWarnings("unchecked")
     FluentIterable<Integer> result = FluentIterable.concat(list1, list2, list3, list4, list5);
     assertEquals(asList(1, 4, 7, 8, 9, 10), newArrayList(result));
     assertEquals("[1, 4, 7, 8, 9, 10]", result.toString());
@@ -850,7 +848,7 @@ public class FluentIterableTest extends TestCase {
               .uniqueIndex(
                   new Function<Integer, Object>() {
                     @Override
-                    public Object apply(@CheckForNull Integer input) {
+                    public Object apply(@Nullable Integer input) {
                       return String.valueOf(input);
                     }
                   });
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingListTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingListTest.java
index 7d3466e..8812282 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingListTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingListTest.java
@@ -31,6 +31,7 @@ import java.util.ListIterator;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code ForwardingList}.
@@ -112,7 +113,7 @@ public class ForwardingListTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingMapTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingMapTest.java
index cf2ed0d..6654f54 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingMapTest.java
@@ -47,6 +47,7 @@ import java.util.Set;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link ForwardingMap}.
@@ -83,12 +84,12 @@ public class ForwardingMapTest extends TestCase {
     }
 
     @Override
-    public V remove(Object object) {
+    public @Nullable V remove(Object object) {
       return standardRemove(object);
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
@@ -335,7 +336,7 @@ public class ForwardingMapTest extends TestCase {
           "java.util.function.Consumer", "accept",
           "java.util.function.IntFunction", "apply");
 
-  private static Object getDefaultValue(final TypeToken<?> type) {
+  private static @Nullable Object getDefaultValue(final TypeToken<?> type) {
     Class<?> rawType = type.getRawType();
     Object defaultValue = ArbitraryInstances.get(rawType);
     if (defaultValue != null) {
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingMultisetTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingMultisetTest.java
index 327885d..c2d7830 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingMultisetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingMultisetTest.java
@@ -33,6 +33,7 @@ import java.util.Set;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link ForwardingMultiset}.
@@ -115,7 +116,7 @@ public class ForwardingMultisetTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
@@ -277,7 +278,7 @@ public class ForwardingMultisetTest extends TestCase {
                       }
 
                       @Override
-                      public boolean equals(Object object) {
+                      public boolean equals(@Nullable Object object) {
                         throw new UnsupportedOperationException();
                       }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingNavigableMapTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingNavigableMapTest.java
index b70cd07..41e29ec 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingNavigableMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingNavigableMapTest.java
@@ -39,6 +39,7 @@ import java.util.SortedMap;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code ForwardingNavigableMap}.
@@ -75,12 +76,12 @@ public class ForwardingNavigableMapTest extends TestCase {
     }
 
     @Override
-    public V remove(Object object) {
+    public @Nullable V remove(Object object) {
       return standardRemove(object);
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
@@ -134,47 +135,47 @@ public class ForwardingNavigableMapTest extends TestCase {
     }
 
     @Override
-    public Entry<K, V> lowerEntry(K key) {
+    public @Nullable Entry<K, V> lowerEntry(K key) {
       return standardLowerEntry(key);
     }
 
     @Override
-    public K lowerKey(K key) {
+    public @Nullable K lowerKey(K key) {
       return standardLowerKey(key);
     }
 
     @Override
-    public Entry<K, V> floorEntry(K key) {
+    public @Nullable Entry<K, V> floorEntry(K key) {
       return standardFloorEntry(key);
     }
 
     @Override
-    public K floorKey(K key) {
+    public @Nullable K floorKey(K key) {
       return standardFloorKey(key);
     }
 
     @Override
-    public Entry<K, V> ceilingEntry(K key) {
+    public @Nullable Entry<K, V> ceilingEntry(K key) {
       return standardCeilingEntry(key);
     }
 
     @Override
-    public K ceilingKey(K key) {
+    public @Nullable K ceilingKey(K key) {
       return standardCeilingKey(key);
     }
 
     @Override
-    public Entry<K, V> higherEntry(K key) {
+    public @Nullable Entry<K, V> higherEntry(K key) {
       return standardHigherEntry(key);
     }
 
     @Override
-    public K higherKey(K key) {
+    public @Nullable K higherKey(K key) {
       return standardHigherKey(key);
     }
 
     @Override
-    public Entry<K, V> firstEntry() {
+    public @Nullable Entry<K, V> firstEntry() {
       return standardFirstEntry();
     }
 
@@ -184,12 +185,12 @@ public class ForwardingNavigableMapTest extends TestCase {
      */
 
     @Override
-    public Entry<K, V> pollFirstEntry() {
+    public @Nullable Entry<K, V> pollFirstEntry() {
       return standardPollFirstEntry();
     }
 
     @Override
-    public Entry<K, V> pollLastEntry() {
+    public @Nullable Entry<K, V> pollLastEntry() {
       return standardPollLastEntry();
     }
 
@@ -242,7 +243,7 @@ public class ForwardingNavigableMapTest extends TestCase {
     }
 
     @Override
-    public Entry<K, V> lastEntry() {
+    public @Nullable Entry<K, V> lastEntry() {
       return standardLastEntry();
     }
   }
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingNavigableSetTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingNavigableSetTest.java
index fd47bf8..2fbc42a 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingNavigableSetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingNavigableSetTest.java
@@ -34,6 +34,7 @@ import java.util.SortedSet;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code ForwardingNavigableSet}.
@@ -54,7 +55,7 @@ public class ForwardingNavigableSetTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
@@ -119,32 +120,32 @@ public class ForwardingNavigableSetTest extends TestCase {
     }
 
     @Override
-    public T lower(T e) {
+    public @Nullable T lower(T e) {
       return standardLower(e);
     }
 
     @Override
-    public T floor(T e) {
+    public @Nullable T floor(T e) {
       return standardFloor(e);
     }
 
     @Override
-    public T ceiling(T e) {
+    public @Nullable T ceiling(T e) {
       return standardCeiling(e);
     }
 
     @Override
-    public T higher(T e) {
+    public @Nullable T higher(T e) {
       return standardHigher(e);
     }
 
     @Override
-    public T pollFirst() {
+    public @Nullable T pollFirst() {
       return standardPollFirst();
     }
 
     @Override
-    public T pollLast() {
+    public @Nullable T pollLast() {
       return standardPollLast();
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingQueueTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingQueueTest.java
index 248f132..033a96d 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingQueueTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingQueueTest.java
@@ -29,6 +29,7 @@ import java.util.Queue;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code ForwardingQueue}.
@@ -106,12 +107,12 @@ public class ForwardingQueueTest extends TestCase {
     }
 
     @Override
-    public T peek() {
+    public @Nullable T peek() {
       return standardPeek();
     }
 
     @Override
-    public T poll() {
+    public @Nullable T poll() {
       return standardPoll();
     }
   }
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingSetTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingSetTest.java
index 89bf7b3..53d12c3 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingSetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingSetTest.java
@@ -31,6 +31,7 @@ import java.util.Set;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code ForwardingSet}.
@@ -52,7 +53,7 @@ public class ForwardingSetTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingSortedMapTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingSortedMapTest.java
index 59e7ece..a4d8290 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingSortedMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingSortedMapTest.java
@@ -36,6 +36,7 @@ import java.util.SortedMap;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code ForwardingSortedMap}.
@@ -71,12 +72,12 @@ public class ForwardingSortedMapTest extends TestCase {
     }
 
     @Override
-    public V remove(Object object) {
+    public @Nullable V remove(Object object) {
       return standardRemove(object);
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java
index 2b77cd5..4f69dea 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java
@@ -27,10 +27,10 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
 import java.util.NavigableSet;
-import javax.annotation.CheckForNull;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link ForwardingSortedMultiset}.
@@ -93,12 +93,12 @@ public class ForwardingSortedMultisetTest extends TestCase {
     }
 
     @Override
-    public int count(@CheckForNull Object element) {
+    public int count(@Nullable Object element) {
       return standardCount(element);
     }
 
     @Override
-    public boolean equals(@CheckForNull Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
@@ -123,7 +123,7 @@ public class ForwardingSortedMultisetTest extends TestCase {
     }
 
     @Override
-    public boolean contains(@CheckForNull Object object) {
+    public boolean contains(@Nullable Object object) {
       return standardContains(object);
     }
 
@@ -143,7 +143,7 @@ public class ForwardingSortedMultisetTest extends TestCase {
     }
 
     @Override
-    public boolean remove(@CheckForNull Object object) {
+    public boolean remove(@Nullable Object object) {
       return standardRemove(object);
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ForwardingSortedSetTest.java b/android/guava-tests/test/com/google/common/collect/ForwardingSortedSetTest.java
index b83ee6b..4173704 100644
--- a/android/guava-tests/test/com/google/common/collect/ForwardingSortedSetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ForwardingSortedSetTest.java
@@ -31,6 +31,7 @@ import java.util.SortedSet;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code ForwardingSortedSet}.
@@ -51,7 +52,7 @@ public class ForwardingSortedSetTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       return standardEquals(object);
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java b/android/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java
index bce73b8..b969630 100644
--- a/android/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ImmutableClassToInstanceMapTest.java
@@ -33,6 +33,7 @@ import java.util.Map.Entry;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link ImmutableClassToInstanceMap}.
@@ -213,7 +214,7 @@ public class ImmutableClassToInstanceMapTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       return obj instanceof Impl && value == ((Impl) obj).value;
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ImmutableMapTest.java b/android/guava-tests/test/com/google/common/collect/ImmutableMapTest.java
index 2ef0dca..67c039a 100644
--- a/android/guava-tests/test/com/google/common/collect/ImmutableMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ImmutableMapTest.java
@@ -57,6 +57,7 @@ import java.util.regex.Pattern;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link ImmutableMap}.
@@ -530,7 +531,7 @@ public class ImmutableMapTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object x) {
+    public boolean equals(@Nullable Object x) {
       return x instanceof ClassWithTerribleHashCode
           && ((ClassWithTerribleHashCode) x).value == value;
     }
@@ -917,7 +918,7 @@ public class ImmutableMapTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
       return (o instanceof IntHolder) && ((IntHolder) o).value == value;
     }
 
@@ -977,7 +978,7 @@ public class ImmutableMapTest extends TestCase {
   @GwtIncompatible // SerializableTester
   @SuppressWarnings("unchecked")
   public void ignore_testSerializationNoDuplication_regularImmutableMap() throws Exception {
-    // Tests that searializing a map, its keySet, and values only writes the underlying data once.
+    // Tests that serializing a map, its keySet, and values only writes the underlying data once.
 
     Object[] entries = new Object[2000];
     for (int i = 0; i < entries.length; i++) {
diff --git a/android/guava-tests/test/com/google/common/collect/ImmutableSortedMapTest.java b/android/guava-tests/test/com/google/common/collect/ImmutableSortedMapTest.java
index 817e3db..f3e7c1b 100644
--- a/android/guava-tests/test/com/google/common/collect/ImmutableSortedMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ImmutableSortedMapTest.java
@@ -45,6 +45,7 @@ import java.util.TreeMap;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link ImmutableSortedMap}.
@@ -717,7 +718,7 @@ public class ImmutableSortedMapTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
       return (o instanceof IntHolder) && ((IntHolder) o).value == value;
     }
 
diff --git a/android/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java b/android/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java
index ea0e3a8..4043497 100644
--- a/android/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java
@@ -954,7 +954,7 @@ public class ImmutableSortedSetTest extends AbstractImmutableSetTest {
     assertEquals(list, copy);
   }
 
-  public void testAsListInconsistentComprator() {
+  public void testAsListInconsistentComparator() {
     ImmutableSet<String> set =
         ImmutableSortedSet.orderedBy(STRING_LENGTH)
             .add("in", "the", "quick", "jumped", "over", "a")
diff --git a/android/guava-tests/test/com/google/common/collect/LegacyComparable.java b/android/guava-tests/test/com/google/common/collect/LegacyComparable.java
index 8b0c962..05a6607 100644
--- a/android/guava-tests/test/com/google/common/collect/LegacyComparable.java
+++ b/android/guava-tests/test/com/google/common/collect/LegacyComparable.java
@@ -19,6 +19,7 @@ package com.google.common.collect;
 import com.google.common.annotations.GwtCompatible;
 import java.io.Serializable;
 import java.util.Arrays;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * A class that implements {@code Comparable} without generics, such as those found in libraries
@@ -51,7 +52,7 @@ class LegacyComparable implements Comparable, Serializable {
   }
 
   @Override
-  public boolean equals(Object object) {
+  public boolean equals(@Nullable Object object) {
     if (object instanceof LegacyComparable) {
       LegacyComparable that = (LegacyComparable) object;
       return this.value.equals(that.value);
diff --git a/android/guava-tests/test/com/google/common/collect/ListsImplTest.java b/android/guava-tests/test/com/google/common/collect/ListsImplTest.java
index 2d18f5a..8ef599c 100644
--- a/android/guava-tests/test/com/google/common/collect/ListsImplTest.java
+++ b/android/guava-tests/test/com/google/common/collect/ListsImplTest.java
@@ -64,7 +64,7 @@ public class ListsImplTest extends TestCase {
     /** Creates a new list with the given contents. */
     public abstract <T> List<T> createList(Class<T> listType, Collection<? extends T> contents);
 
-    /** The modifiablity of this list example. */
+    /** The modifiability of this list example. */
     public Modifiability modifiability() {
       return modifiability;
     }
diff --git a/android/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java b/android/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java
index 47fc74c..453e3e7 100644
--- a/android/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java
@@ -90,7 +90,7 @@ public class MapMakerInternalMapTest extends TestCase {
   }
 
   public void testSetConcurrencyLevel() {
-    // round up to nearest power of two
+    // round up to the nearest power of two
 
     checkConcurrencyLevel(1, 1);
     checkConcurrencyLevel(2, 2);
@@ -109,7 +109,7 @@ public class MapMakerInternalMapTest extends TestCase {
   }
 
   public void testSetInitialCapacity() {
-    // share capacity over each segment, then round up to nearest power of two
+    // share capacity over each segment, then round up to the nearest power of two
 
     checkInitialCapacity(1, 0, 1);
     checkInitialCapacity(1, 1, 1);
@@ -152,42 +152,6 @@ public class MapMakerInternalMapTest extends TestCase {
     }
   }
 
-  public void testSetMaximumSize() {
-    // vary maximumSize wrt concurrencyLevel
-
-    for (int maxSize = 1; maxSize < 8; maxSize++) {
-      checkMaximumSize(1, 8, maxSize);
-      checkMaximumSize(2, 8, maxSize);
-      checkMaximumSize(4, 8, maxSize);
-      checkMaximumSize(8, 8, maxSize);
-    }
-
-    checkMaximumSize(1, 8, Integer.MAX_VALUE);
-    checkMaximumSize(2, 8, Integer.MAX_VALUE);
-    checkMaximumSize(4, 8, Integer.MAX_VALUE);
-    checkMaximumSize(8, 8, Integer.MAX_VALUE);
-
-    // vary initial capacity wrt maximumSize
-
-    for (int capacity = 0; capacity < 8; capacity++) {
-      checkMaximumSize(1, capacity, 4);
-      checkMaximumSize(2, capacity, 4);
-      checkMaximumSize(4, capacity, 4);
-      checkMaximumSize(8, capacity, 4);
-    }
-  }
-
-  private static void checkMaximumSize(int concurrencyLevel, int initialCapacity, int maxSize) {
-    MapMakerInternalMap<Object, Object, ?, ?> map =
-        makeMap(
-            createMapMaker().concurrencyLevel(concurrencyLevel).initialCapacity(initialCapacity));
-    int totalCapacity = 0;
-    for (int i = 0; i < map.segments.length; i++) {
-      totalCapacity += map.segments[i].maxSegmentSize;
-    }
-    assertTrue("totalCapcity=" + totalCapacity + ", maxSize=" + maxSize, totalCapacity <= maxSize);
-  }
-
   public void testSetWeakKeys() {
     MapMakerInternalMap<Object, Object, ?, ?> map = makeMap(createMapMaker().weakKeys());
     checkStrength(map, Strength.WEAK, Strength.STRONG);
diff --git a/android/guava-tests/test/com/google/common/collect/MapsCollectionTest.java b/android/guava-tests/test/com/google/common/collect/MapsCollectionTest.java
index 9aa8e66..1e60064 100644
--- a/android/guava-tests/test/com/google/common/collect/MapsCollectionTest.java
+++ b/android/guava-tests/test/com/google/common/collect/MapsCollectionTest.java
@@ -49,10 +49,10 @@ import java.util.NavigableSet;
 import java.util.Set;
 import java.util.SortedMap;
 import java.util.SortedSet;
-import javax.annotation.CheckForNull;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Test suites for wrappers in {@code Maps}.
@@ -561,7 +561,7 @@ public class MapsCollectionTest extends TestCase {
   static final Predicate<String> FILTER_KEYS =
       new Predicate<String>() {
         @Override
-        public boolean apply(@CheckForNull String string) {
+        public boolean apply(@Nullable String string) {
           return !"banana".equals(string) && !"eggplant".equals(string);
         }
       };
@@ -569,7 +569,7 @@ public class MapsCollectionTest extends TestCase {
   static final Predicate<String> FILTER_VALUES =
       new Predicate<String>() {
         @Override
-        public boolean apply(@CheckForNull String string) {
+        public boolean apply(@Nullable String string) {
           return !"toast".equals(string) && !"spam".equals(string);
         }
       };
diff --git a/android/guava-tests/test/com/google/common/collect/MapsTest.java b/android/guava-tests/test/com/google/common/collect/MapsTest.java
index b170310..1672efa 100644
--- a/android/guava-tests/test/com/google/common/collect/MapsTest.java
+++ b/android/guava-tests/test/com/google/common/collect/MapsTest.java
@@ -62,6 +62,7 @@ import java.util.SortedSet;
 import java.util.TreeMap;
 import java.util.concurrent.ConcurrentMap;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@code Maps}.
@@ -1325,18 +1326,18 @@ public class MapsTest extends TestCase {
     assertEquals(ImmutableSet.of(1, 2, 3), sync.inverse().keySet());
   }
 
-  static final Predicate<String> NOT_LENGTH_3 =
-      new Predicate<String>() {
+  static final Predicate<@Nullable String> NOT_LENGTH_3 =
+      new Predicate<@Nullable String>() {
         @Override
-        public boolean apply(String input) {
+        public boolean apply(@Nullable String input) {
           return input == null || input.length() != 3;
         }
       };
 
-  static final Predicate<Integer> EVEN =
-      new Predicate<Integer>() {
+  static final Predicate<@Nullable Integer> EVEN =
+      new Predicate<@Nullable Integer>() {
         @Override
-        public boolean apply(Integer input) {
+        public boolean apply(@Nullable Integer input) {
           return input == null || input % 2 == 0;
         }
       };
diff --git a/android/guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java b/android/guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java
index b4382db..a88ff9c 100644
--- a/android/guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java
+++ b/android/guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java
@@ -25,7 +25,7 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Maps#transformValues}.
@@ -156,7 +156,7 @@ public class MapsTransformValuesTest extends MapInterfaceTest<String, String> {
             underlying,
             new Function<String, Boolean>() {
               @Override
-              public Boolean apply(@CheckForNull String from) {
+              public Boolean apply(@Nullable String from) {
                 return from == null;
               }
             });
@@ -264,22 +264,22 @@ public class MapsTransformValuesTest extends MapInterfaceTest<String, String> {
   }
 
   public void testTransformEntrySetContains() {
-    Map<String, Boolean> underlying = Maps.newHashMap();
+    Map<@Nullable String, @Nullable Boolean> underlying = Maps.newHashMap();
     underlying.put("a", null);
     underlying.put("b", true);
     underlying.put(null, true);
 
-    Map<String, Boolean> map =
+    Map<@Nullable String, @Nullable Boolean> map =
         Maps.transformValues(
             underlying,
-            new Function<Boolean, Boolean>() {
+            new Function<@Nullable Boolean, @Nullable Boolean>() {
               @Override
-              public Boolean apply(@CheckForNull Boolean from) {
+              public @Nullable Boolean apply(@Nullable Boolean from) {
                 return (from == null) ? true : null;
               }
             });
 
-    Set<Entry<String, Boolean>> entries = map.entrySet();
+    Set<Entry<@Nullable String, @Nullable Boolean>> entries = map.entrySet();
     assertTrue(entries.contains(Maps.immutableEntry("a", true)));
     assertTrue(entries.contains(Maps.immutableEntry("b", (Boolean) null)));
     assertTrue(entries.contains(Maps.immutableEntry((String) null, (Boolean) null)));
diff --git a/android/guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java b/android/guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java
index 1073951..7411bec 100644
--- a/android/guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java
+++ b/android/guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java
@@ -25,7 +25,7 @@ import java.util.Iterator;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Maps#transformValues} when the backing map's views have iterators that don't
@@ -232,7 +232,7 @@ public class MapsTransformValuesUnmodifiableIteratorTest extends MapInterfaceTes
             underlying,
             new Function<String, Boolean>() {
               @Override
-              public Boolean apply(@CheckForNull String from) {
+              public Boolean apply(@Nullable String from) {
                 return from == null;
               }
             });
@@ -340,22 +340,22 @@ public class MapsTransformValuesUnmodifiableIteratorTest extends MapInterfaceTes
   }
 
   public void testTransformEntrySetContains() {
-    Map<String, Boolean> underlying = Maps.newHashMap();
+    Map<@Nullable String, @Nullable Boolean> underlying = Maps.newHashMap();
     underlying.put("a", null);
     underlying.put("b", true);
     underlying.put(null, true);
 
-    Map<String, Boolean> map =
+    Map<@Nullable String, @Nullable Boolean> map =
         Maps.transformValues(
             underlying,
-            new Function<Boolean, Boolean>() {
+            new Function<@Nullable Boolean, @Nullable Boolean>() {
               @Override
-              public Boolean apply(@CheckForNull Boolean from) {
+              public @Nullable Boolean apply(@Nullable Boolean from) {
                 return (from == null) ? true : null;
               }
             });
 
-    Set<Entry<String, Boolean>> entries = map.entrySet();
+    Set<Entry<@Nullable String, @Nullable Boolean>> entries = map.entrySet();
     assertTrue(entries.contains(Maps.immutableEntry("a", true)));
     assertTrue(entries.contains(Maps.immutableEntry("b", (Boolean) null)));
     assertTrue(entries.contains(Maps.immutableEntry((String) null, (Boolean) null)));
diff --git a/android/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java b/android/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java
index 5471e36..9a39e19 100644
--- a/android/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java
+++ b/android/guava-tests/test/com/google/common/collect/MinMaxPriorityQueueTest.java
@@ -276,7 +276,7 @@ public class MinMaxPriorityQueueTest extends TestCase {
   public void testRemove() {
     MinMaxPriorityQueue<Integer> mmHeap = MinMaxPriorityQueue.create();
     mmHeap.addAll(Lists.newArrayList(1, 2, 3, 4, 47, 1, 5, 3, 0));
-    assertTrue("Heap is not intact initally", mmHeap.isIntact());
+    assertTrue("Heap is not intact initially", mmHeap.isIntact());
     assertEquals(9, mmHeap.size());
     mmHeap.remove(5);
     assertEquals(8, mmHeap.size());
diff --git a/android/guava-tests/test/com/google/common/collect/MultimapsTest.java b/android/guava-tests/test/com/google/common/collect/MultimapsTest.java
index 02ea574..1894c26 100644
--- a/android/guava-tests/test/com/google/common/collect/MultimapsTest.java
+++ b/android/guava-tests/test/com/google/common/collect/MultimapsTest.java
@@ -55,8 +55,8 @@ import java.util.Set;
 import java.util.SortedMap;
 import java.util.SortedSet;
 import java.util.TreeSet;
-import javax.annotation.CheckForNull;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@code Multimaps}.
@@ -267,8 +267,8 @@ public class MultimapsTest extends TestCase {
   private static void checkUnmodifiableMultimap(
       Multimap<String, Integer> multimap,
       boolean permitsDuplicates,
-      @CheckForNull String nullKey,
-      @CheckForNull Integer nullValue) {
+      @Nullable String nullKey,
+      @Nullable Integer nullValue) {
     Multimap<String, Integer> unmodifiable =
         prepareUnmodifiableTests(multimap, permitsDuplicates, nullKey, nullValue);
 
@@ -297,8 +297,8 @@ public class MultimapsTest extends TestCase {
   private static Multimap<String, Integer> prepareUnmodifiableTests(
       Multimap<String, Integer> multimap,
       boolean permitsDuplicates,
-      @CheckForNull String nullKey,
-      @CheckForNull Integer nullValue) {
+      @Nullable String nullKey,
+      @Nullable Integer nullValue) {
     multimap.clear();
     multimap.put("foo", 1);
     multimap.put("foo", 2);
diff --git a/android/guava-tests/test/com/google/common/collect/MultisetsImmutableEntryTest.java b/android/guava-tests/test/com/google/common/collect/MultisetsImmutableEntryTest.java
index bef27b9..870490e 100644
--- a/android/guava-tests/test/com/google/common/collect/MultisetsImmutableEntryTest.java
+++ b/android/guava-tests/test/com/google/common/collect/MultisetsImmutableEntryTest.java
@@ -20,6 +20,7 @@ import com.google.common.annotations.GwtCompatible;
 import com.google.common.collect.Multiset.Entry;
 import java.util.Collections;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Multisets#immutableEntry}.
@@ -28,7 +29,7 @@ import junit.framework.TestCase;
  */
 @GwtCompatible
 public class MultisetsImmutableEntryTest extends TestCase {
-  private static final String NE = null;
+  private static final @Nullable String NE = null;
 
   private static <E> Entry<E> entry(final E element, final int count) {
     return Multisets.immutableEntry(element, count);
diff --git a/android/guava-tests/test/com/google/common/collect/OrderingTest.java b/android/guava-tests/test/com/google/common/collect/OrderingTest.java
index 7c4acc9..a983799 100644
--- a/android/guava-tests/test/com/google/common/collect/OrderingTest.java
+++ b/android/guava-tests/test/com/google/common/collect/OrderingTest.java
@@ -40,8 +40,8 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
 import java.util.RandomAccess;
-import javax.annotation.CheckForNull;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit tests for {@code Ordering}.
@@ -833,7 +833,7 @@ public class OrderingTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object other) {
+    public boolean equals(@Nullable Object other) {
       return other instanceof NumberOrdering;
     }
 
@@ -1030,7 +1030,7 @@ public class OrderingTest extends TestCase {
             scenario.ordering.onResultOf(
                 new Function<Integer, T>() {
                   @Override
-                  public T apply(@CheckForNull Integer from) {
+                  public T apply(@Nullable Integer from) {
                     return scenario.strictlyOrderedList.get(from);
                   }
                 });
diff --git a/android/guava-tests/test/com/google/common/collect/QueuesTest.java b/android/guava-tests/test/com/google/common/collect/QueuesTest.java
index 7232a82..e2c3485 100644
--- a/android/guava-tests/test/com/google/common/collect/QueuesTest.java
+++ b/android/guava-tests/test/com/google/common/collect/QueuesTest.java
@@ -40,6 +40,7 @@ import java.util.concurrent.PriorityBlockingQueue;
 import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.TimeUnit;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Queues}.
@@ -220,8 +221,9 @@ public class QueuesTest extends TestCase {
     @SuppressWarnings("unused") // https://errorprone.info/bugpattern/FutureReturnValueIgnored
     Future<?> possiblyIgnoredError =
         threadPool.submit(
-            new Callable<Void>() {
-              public Void call() throws InterruptedException {
+            new Callable<@Nullable Void>() {
+              @Override
+              public @Nullable Void call() throws InterruptedException {
                 new Producer(q, 50).call();
                 new Interrupter(mainThread).run();
                 new Producer(q, 50).call();
@@ -302,7 +304,7 @@ public class QueuesTest extends TestCase {
     }
   }
 
-  private static class Producer implements Callable<Void> {
+  private static class Producer implements Callable<@Nullable Void> {
     final BlockingQueue<Object> q;
     final int elements;
     final CountDownLatch beganProducing = new CountDownLatch(1);
@@ -314,7 +316,7 @@ public class QueuesTest extends TestCase {
     }
 
     @Override
-    public Void call() throws InterruptedException {
+    public @Nullable Void call() throws InterruptedException {
       try {
         beganProducing.countDown();
         for (int i = 0; i < elements; i++) {
diff --git a/android/guava-tests/test/com/google/common/collect/SetsTest.java b/android/guava-tests/test/com/google/common/collect/SetsTest.java
index d7799ce..82c40b0 100644
--- a/android/guava-tests/test/com/google/common/collect/SetsTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SetsTest.java
@@ -73,10 +73,10 @@ import java.util.Set;
 import java.util.SortedSet;
 import java.util.TreeSet;
 import java.util.concurrent.CopyOnWriteArraySet;
-import javax.annotation.CheckForNull;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@code Sets}.
@@ -578,48 +578,56 @@ public class SetsTest extends TestCase {
     verifySetContents(set, SOME_COLLECTION);
   }
 
+  @GwtIncompatible // complementOf
   public void testComplementOfEnumSet() {
     Set<SomeEnum> units = EnumSet.of(SomeEnum.B, SomeEnum.D);
     EnumSet<SomeEnum> otherUnits = Sets.complementOf(units);
     verifySetContents(otherUnits, EnumSet.of(SomeEnum.A, SomeEnum.C));
   }
 
+  @GwtIncompatible // complementOf
   public void testComplementOfEnumSetWithType() {
     Set<SomeEnum> units = EnumSet.of(SomeEnum.B, SomeEnum.D);
     EnumSet<SomeEnum> otherUnits = Sets.complementOf(units, SomeEnum.class);
     verifySetContents(otherUnits, EnumSet.of(SomeEnum.A, SomeEnum.C));
   }
 
+  @GwtIncompatible // complementOf
   public void testComplementOfRegularSet() {
     Set<SomeEnum> units = Sets.newHashSet(SomeEnum.B, SomeEnum.D);
     EnumSet<SomeEnum> otherUnits = Sets.complementOf(units);
     verifySetContents(otherUnits, EnumSet.of(SomeEnum.A, SomeEnum.C));
   }
 
+  @GwtIncompatible // complementOf
   public void testComplementOfRegularSetWithType() {
     Set<SomeEnum> units = Sets.newHashSet(SomeEnum.B, SomeEnum.D);
     EnumSet<SomeEnum> otherUnits = Sets.complementOf(units, SomeEnum.class);
     verifySetContents(otherUnits, EnumSet.of(SomeEnum.A, SomeEnum.C));
   }
 
+  @GwtIncompatible // complementOf
   public void testComplementOfEmptySet() {
     Set<SomeEnum> noUnits = Collections.emptySet();
     EnumSet<SomeEnum> allUnits = Sets.complementOf(noUnits, SomeEnum.class);
     verifySetContents(EnumSet.allOf(SomeEnum.class), allUnits);
   }
 
+  @GwtIncompatible // complementOf
   public void testComplementOfFullSet() {
     Set<SomeEnum> allUnits = Sets.newHashSet(SomeEnum.values());
     EnumSet<SomeEnum> noUnits = Sets.complementOf(allUnits, SomeEnum.class);
     verifySetContents(noUnits, EnumSet.noneOf(SomeEnum.class));
   }
 
+  @GwtIncompatible // complementOf
   public void testComplementOfEmptyEnumSetWithoutType() {
     Set<SomeEnum> noUnits = EnumSet.noneOf(SomeEnum.class);
     EnumSet<SomeEnum> allUnits = Sets.complementOf(noUnits);
     verifySetContents(allUnits, EnumSet.allOf(SomeEnum.class));
   }
 
+  @GwtIncompatible // complementOf
   public void testComplementOfEmptySetWithoutTypeDoesntWork() {
     Set<SomeEnum> set = Collections.emptySet();
     try {
@@ -1077,7 +1085,7 @@ public class SetsTest extends TestCase {
    * same as the given comparator.
    */
   private static <E> void verifySortedSetContents(
-      SortedSet<E> set, Iterable<E> iterable, @CheckForNull Comparator<E> comparator) {
+      SortedSet<E> set, Iterable<E> iterable, @Nullable Comparator<E> comparator) {
     assertSame(comparator, set.comparator());
     verifySetContents(set, iterable);
   }
@@ -1113,7 +1121,7 @@ public class SetsTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object other) {
+    public boolean equals(@Nullable Object other) {
       if (other == null) {
         return false;
       } else if (other instanceof Base) {
diff --git a/android/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java b/android/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java
index 02ab44b..04f4fe6 100644
--- a/android/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java
@@ -28,10 +28,10 @@ import java.util.Collections;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
-import javax.annotation.CheckForNull;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link AbstractMultiset}.
@@ -106,7 +106,7 @@ public class SimpleAbstractMultisetTest extends TestCase {
     }
 
     @Override
-    public int count(@CheckForNull Object element) {
+    public int count(@Nullable Object element) {
       for (Entry<E> entry : entrySet()) {
         if (Objects.equal(entry.getElement(), element)) {
           return entry.getCount();
@@ -116,7 +116,7 @@ public class SimpleAbstractMultisetTest extends TestCase {
     }
 
     @Override
-    public int add(@CheckForNull E element, int occurrences) {
+    public int add(@Nullable E element, int occurrences) {
       checkArgument(occurrences >= 0);
       Integer frequency = backingMap.get(element);
       if (frequency == null) {
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedBiMapTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedBiMapTest.java
index 1e422b2..c563703 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedBiMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedBiMapTest.java
@@ -29,6 +29,7 @@ import com.google.common.collect.testing.google.TestStringBiMapGenerator;
 import java.util.Map.Entry;
 import java.util.Set;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code Synchronized#biMap}.
@@ -111,7 +112,7 @@ public class SynchronizedBiMapTest extends SynchronizedMapTest {
     }
 
     @Override
-    public V forcePut(K key, V value) {
+    public @Nullable V forcePut(K key, V value) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.forcePut(key, value);
     }
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedDequeTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedDequeTest.java
index 1df6aa1..09f9c42 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedDequeTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedDequeTest.java
@@ -21,6 +21,7 @@ import java.util.Collection;
 import java.util.Deque;
 import java.util.Iterator;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Synchronized#deque} and {@link Queues#synchronizedDeque}.
@@ -47,7 +48,7 @@ public class SynchronizedDequeTest extends TestCase {
     }
 
     @Override
-    public E poll() {
+    public @Nullable E poll() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.poll();
     }
@@ -65,7 +66,7 @@ public class SynchronizedDequeTest extends TestCase {
     }
 
     @Override
-    public E peek() {
+    public @Nullable E peek() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.peek();
     }
@@ -186,13 +187,13 @@ public class SynchronizedDequeTest extends TestCase {
     }
 
     @Override
-    public E pollFirst() {
+    public @Nullable E pollFirst() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.pollFirst();
     }
 
     @Override
-    public E pollLast() {
+    public @Nullable E pollLast() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.pollLast();
     }
@@ -210,13 +211,13 @@ public class SynchronizedDequeTest extends TestCase {
     }
 
     @Override
-    public E peekFirst() {
+    public @Nullable E peekFirst() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.peekFirst();
     }
 
     @Override
-    public E peekLast() {
+    public @Nullable E peekLast() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.peekLast();
     }
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedMapTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedMapTest.java
index 2e15eda..1aeae36 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedMapTest.java
@@ -28,6 +28,7 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code Synchronized#map}.
@@ -71,7 +72,7 @@ public class SynchronizedMapTest extends TestCase {
     }
 
     @Override
-    public V remove(Object object) {
+    public @Nullable V remove(Object object) {
       assertTrue(Thread.holdsLock(mutex));
       return super.remove(object);
     }
@@ -95,13 +96,13 @@ public class SynchronizedMapTest extends TestCase {
     }
 
     @Override
-    public V get(Object key) {
+    public @Nullable V get(Object key) {
       assertTrue(Thread.holdsLock(mutex));
       return super.get(key);
     }
 
     @Override
-    public V put(K key, V value) {
+    public @Nullable V put(K key, V value) {
       assertTrue(Thread.holdsLock(mutex));
       return super.put(key, value);
     }
@@ -131,7 +132,7 @@ public class SynchronizedMapTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       assertTrue(Thread.holdsLock(mutex));
       return super.equals(obj);
     }
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java
index 3c4f137..6475dad 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java
@@ -30,10 +30,10 @@ import java.util.Map;
 import java.util.Map.Entry;
 import java.util.RandomAccess;
 import java.util.Set;
-import javax.annotation.CheckForNull;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code Synchronized#multimap}.
@@ -89,7 +89,7 @@ public class SynchronizedMultimapTest extends TestCase {
     }
 
     @Override
-    public boolean equals(@CheckForNull Object o) {
+    public boolean equals(@Nullable Object o) {
       assertTrue(Thread.holdsLock(mutex));
       return super.equals(o);
     }
@@ -113,25 +113,25 @@ public class SynchronizedMultimapTest extends TestCase {
     }
 
     @Override
-    public boolean containsKey(@CheckForNull Object key) {
+    public boolean containsKey(@Nullable Object key) {
       assertTrue(Thread.holdsLock(mutex));
       return super.containsKey(key);
     }
 
     @Override
-    public boolean containsValue(@CheckForNull Object value) {
+    public boolean containsValue(@Nullable Object value) {
       assertTrue(Thread.holdsLock(mutex));
       return super.containsValue(value);
     }
 
     @Override
-    public boolean containsEntry(@CheckForNull Object key, @CheckForNull Object value) {
+    public boolean containsEntry(@Nullable Object key, @Nullable Object value) {
       assertTrue(Thread.holdsLock(mutex));
       return super.containsEntry(key, value);
     }
 
     @Override
-    public Set<V> get(@CheckForNull K key) {
+    public Set<V> get(@Nullable K key) {
       assertTrue(Thread.holdsLock(mutex));
       /* TODO: verify that the Collection is also synchronized? */
       return super.get(key);
@@ -144,7 +144,7 @@ public class SynchronizedMultimapTest extends TestCase {
     }
 
     @Override
-    public boolean putAll(@CheckForNull K key, Iterable<? extends V> values) {
+    public boolean putAll(@Nullable K key, Iterable<? extends V> values) {
       assertTrue(Thread.holdsLock(mutex));
       return super.putAll(key, values);
     }
@@ -156,19 +156,19 @@ public class SynchronizedMultimapTest extends TestCase {
     }
 
     @Override
-    public Set<V> replaceValues(@CheckForNull K key, Iterable<? extends V> values) {
+    public Set<V> replaceValues(@Nullable K key, Iterable<? extends V> values) {
       assertTrue(Thread.holdsLock(mutex));
       return super.replaceValues(key, values);
     }
 
     @Override
-    public boolean remove(@CheckForNull Object key, @CheckForNull Object value) {
+    public boolean remove(@Nullable Object key, @Nullable Object value) {
       assertTrue(Thread.holdsLock(mutex));
       return super.remove(key, value);
     }
 
     @Override
-    public Set<V> removeAll(@CheckForNull Object key) {
+    public Set<V> removeAll(@Nullable Object key) {
       assertTrue(Thread.holdsLock(mutex));
       return super.removeAll(key);
     }
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableMapTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableMapTest.java
index 41b597a..ad9fd23 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableMapTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableMapTest.java
@@ -33,6 +33,7 @@ import java.util.NavigableMap;
 import java.util.NavigableSet;
 import java.util.SortedMap;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Maps#synchronizedNavigableMap(NavigableMap)}.
@@ -65,7 +66,7 @@ public class SynchronizedNavigableMapTest extends SynchronizedMapTest {
     }
 
     @Override
-    public boolean equals(Object object) {
+    public boolean equals(@Nullable Object object) {
       assertTrue(Thread.holdsLock(mutex));
       return super.equals(object);
     }
@@ -110,13 +111,13 @@ public class SynchronizedNavigableMapTest extends SynchronizedMapTest {
     }
 
     @Override
-    public Entry<K, V> ceilingEntry(K key) {
+    public @Nullable Entry<K, V> ceilingEntry(K key) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().ceilingEntry(key);
     }
 
     @Override
-    public K ceilingKey(K key) {
+    public @Nullable K ceilingKey(K key) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().ceilingKey(key);
     }
@@ -134,19 +135,19 @@ public class SynchronizedNavigableMapTest extends SynchronizedMapTest {
     }
 
     @Override
-    public Entry<K, V> firstEntry() {
+    public @Nullable Entry<K, V> firstEntry() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().firstEntry();
     }
 
     @Override
-    public Entry<K, V> floorEntry(K key) {
+    public @Nullable Entry<K, V> floorEntry(K key) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().floorEntry(key);
     }
 
     @Override
-    public K floorKey(K key) {
+    public @Nullable K floorKey(K key) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().floorKey(key);
     }
@@ -163,31 +164,31 @@ public class SynchronizedNavigableMapTest extends SynchronizedMapTest {
     }
 
     @Override
-    public Entry<K, V> higherEntry(K key) {
+    public @Nullable Entry<K, V> higherEntry(K key) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().higherEntry(key);
     }
 
     @Override
-    public K higherKey(K key) {
+    public @Nullable K higherKey(K key) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().higherKey(key);
     }
 
     @Override
-    public Entry<K, V> lastEntry() {
+    public @Nullable Entry<K, V> lastEntry() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().lastEntry();
     }
 
     @Override
-    public Entry<K, V> lowerEntry(K key) {
+    public @Nullable Entry<K, V> lowerEntry(K key) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().lowerEntry(key);
     }
 
     @Override
-    public K lowerKey(K key) {
+    public @Nullable K lowerKey(K key) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().lowerKey(key);
     }
@@ -199,13 +200,13 @@ public class SynchronizedNavigableMapTest extends SynchronizedMapTest {
     }
 
     @Override
-    public Entry<K, V> pollFirstEntry() {
+    public @Nullable Entry<K, V> pollFirstEntry() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().pollFirstEntry();
     }
 
     @Override
-    public Entry<K, V> pollLastEntry() {
+    public @Nullable Entry<K, V> pollLastEntry() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().pollLastEntry();
     }
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableSetTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableSetTest.java
index 8638b0d..572bea4 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableSetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedNavigableSetTest.java
@@ -32,6 +32,7 @@ import java.util.SortedSet;
 import java.util.TreeSet;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Sets#synchronizedNavigableSet(NavigableSet)}.
@@ -51,7 +52,7 @@ public class SynchronizedNavigableSetTest extends TestCase {
 
   static class TestSet<E> extends SynchronizedSetTest.TestSet<E> implements NavigableSet<E> {
 
-    TestSet(NavigableSet<E> delegate, Object mutex) {
+    TestSet(NavigableSet<E> delegate, @Nullable Object mutex) {
       super(delegate, mutex);
     }
 
@@ -61,7 +62,7 @@ public class SynchronizedNavigableSetTest extends TestCase {
     }
 
     @Override
-    public E ceiling(E e) {
+    public @Nullable E ceiling(E e) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().ceiling(e);
     }
@@ -78,7 +79,7 @@ public class SynchronizedNavigableSetTest extends TestCase {
     }
 
     @Override
-    public E floor(E e) {
+    public @Nullable E floor(E e) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().floor(e);
     }
@@ -95,24 +96,24 @@ public class SynchronizedNavigableSetTest extends TestCase {
     }
 
     @Override
-    public E higher(E e) {
+    public @Nullable E higher(E e) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().higher(e);
     }
 
     @Override
-    public E lower(E e) {
+    public @Nullable E lower(E e) {
       return delegate().lower(e);
     }
 
     @Override
-    public E pollFirst() {
+    public @Nullable E pollFirst() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().pollFirst();
     }
 
     @Override
-    public E pollLast() {
+    public @Nullable E pollLast() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate().pollLast();
     }
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedQueueTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedQueueTest.java
index f7b04fe..b677c28 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedQueueTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedQueueTest.java
@@ -21,6 +21,7 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.Queue;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Synchronized#queue} and {@link Queues#synchronizedQueue}.
@@ -47,7 +48,7 @@ public class SynchronizedQueueTest extends TestCase {
     }
 
     @Override
-    public E poll() {
+    public @Nullable E poll() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.poll();
     }
@@ -65,7 +66,7 @@ public class SynchronizedQueueTest extends TestCase {
     }
 
     @Override
-    public E peek() {
+    public @Nullable E peek() {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.peek();
     }
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedSetTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedSetTest.java
index 5ffcf5d..0e85a24 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedSetTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedSetTest.java
@@ -27,9 +27,9 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
-import javax.annotation.CheckForNull;
 import junit.framework.Test;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code Synchronized#set}.
@@ -40,6 +40,9 @@ public class SynchronizedSetTest extends TestCase {
 
   public static final Object MUTEX = new Integer(1); // something Serializable
 
+  // TODO(cpovirk): Resolve difference between branches in their choice of mutex:
+  // - The mainline uses `null` (even since the change in cl/99720576 was integrated).
+  // - The backport continued to use MUTEX.
   public static Test suite() {
     return SetTestSuiteBuilder.using(
             new TestStringSetGenerator() {
@@ -82,7 +85,7 @@ public class SynchronizedSetTest extends TestCase {
     }
 
     @Override
-    public boolean equals(@CheckForNull Object o) {
+    public boolean equals(@Nullable Object o) {
       assertTrue(Thread.holdsLock(mutex));
       return super.equals(o);
     }
@@ -94,7 +97,7 @@ public class SynchronizedSetTest extends TestCase {
     }
 
     @Override
-    public boolean add(@CheckForNull E o) {
+    public boolean add(@Nullable E o) {
       assertTrue(Thread.holdsLock(mutex));
       return super.add(o);
     }
@@ -112,7 +115,7 @@ public class SynchronizedSetTest extends TestCase {
     }
 
     @Override
-    public boolean contains(@CheckForNull Object o) {
+    public boolean contains(@Nullable Object o) {
       assertTrue(Thread.holdsLock(mutex));
       return super.contains(o);
     }
@@ -132,7 +135,7 @@ public class SynchronizedSetTest extends TestCase {
     /* Don't test iterator(); it may or may not hold the mutex. */
 
     @Override
-    public boolean remove(@CheckForNull Object o) {
+    public boolean remove(@Nullable Object o) {
       assertTrue(Thread.holdsLock(mutex));
       return super.remove(o);
     }
diff --git a/android/guava-tests/test/com/google/common/collect/SynchronizedTableTest.java b/android/guava-tests/test/com/google/common/collect/SynchronizedTableTest.java
index e1b4544..216f32b 100644
--- a/android/guava-tests/test/com/google/common/collect/SynchronizedTableTest.java
+++ b/android/guava-tests/test/com/google/common/collect/SynchronizedTableTest.java
@@ -20,7 +20,7 @@ import java.io.Serializable;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 public class SynchronizedTableTest extends AbstractTableTest {
   private static final class TestTable<R, C, V> implements Table<R, C, V>, Serializable {
@@ -34,7 +34,7 @@ public class SynchronizedTableTest extends AbstractTableTest {
     }
 
     @Override
-    public boolean equals(@CheckForNull Object o) {
+    public boolean equals(@Nullable Object o) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.equals(o);
     }
@@ -58,7 +58,7 @@ public class SynchronizedTableTest extends AbstractTableTest {
     }
 
     @Override
-    public boolean containsValue(@CheckForNull Object value) {
+    public boolean containsValue(@Nullable Object value) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.containsValue(value);
     }
@@ -119,13 +119,13 @@ public class SynchronizedTableTest extends AbstractTableTest {
     }
 
     @Override
-    public V get(Object rowKey, Object columnKey) {
+    public @Nullable V get(Object rowKey, Object columnKey) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.get(rowKey, columnKey);
     }
 
     @Override
-    public V put(R rowKey, C columnKey, V value) {
+    public @Nullable V put(R rowKey, C columnKey, V value) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.put(rowKey, columnKey, value);
     }
@@ -137,7 +137,7 @@ public class SynchronizedTableTest extends AbstractTableTest {
     }
 
     @Override
-    public V remove(Object rowKey, Object columnKey) {
+    public @Nullable V remove(Object rowKey, Object columnKey) {
       assertTrue(Thread.holdsLock(mutex));
       return delegate.remove(rowKey, columnKey);
     }
diff --git a/android/guava-tests/test/com/google/common/collect/TableCollectionTest.java b/android/guava-tests/test/com/google/common/collect/TableCollectionTest.java
index 6a49382..18ad549 100644
--- a/android/guava-tests/test/com/google/common/collect/TableCollectionTest.java
+++ b/android/guava-tests/test/com/google/common/collect/TableCollectionTest.java
@@ -44,6 +44,7 @@ import java.util.SortedSet;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Collection tests for {@link Table} implementations.
@@ -767,10 +768,10 @@ public class TableCollectionTest extends TestCase {
     }
   }
 
-  static final Function<Integer, Integer> DIVIDE_BY_2 =
-      new Function<Integer, Integer>() {
+  static final Function<@Nullable Integer, @Nullable Integer> DIVIDE_BY_2 =
+      new Function<@Nullable Integer, @Nullable Integer>() {
         @Override
-        public Integer apply(Integer input) {
+        public @Nullable Integer apply(@Nullable Integer input) {
           return (input == null) ? null : input / 2;
         }
       };
@@ -889,10 +890,10 @@ public class TableCollectionTest extends TestCase {
     }
   }
 
-  static final Function<String, Character> FIRST_CHARACTER =
-      new Function<String, Character>() {
+  static final Function<@Nullable String, @Nullable Character> FIRST_CHARACTER =
+      new Function<@Nullable String, @Nullable Character>() {
         @Override
-        public Character apply(String input) {
+        public @Nullable Character apply(@Nullable String input) {
           return input == null ? null : input.charAt(0);
         }
       };
diff --git a/android/guava-tests/test/com/google/common/collect/TablesTransformValuesTest.java b/android/guava-tests/test/com/google/common/collect/TablesTransformValuesTest.java
index 6730b3f..d6330a2 100644
--- a/android/guava-tests/test/com/google/common/collect/TablesTransformValuesTest.java
+++ b/android/guava-tests/test/com/google/common/collect/TablesTransformValuesTest.java
@@ -21,6 +21,7 @@ import static com.google.common.base.Preconditions.checkArgument;
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
 import com.google.common.base.Function;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Test cases for {@link Tables#transformValues}.
@@ -30,10 +31,10 @@ import com.google.common.base.Function;
 @GwtCompatible(emulated = true)
 public class TablesTransformValuesTest extends AbstractTableTest {
 
-  private static final Function<String, Character> FIRST_CHARACTER =
-      new Function<String, Character>() {
+  private static final Function<@Nullable String, @Nullable Character> FIRST_CHARACTER =
+      new Function<@Nullable String, @Nullable Character>() {
         @Override
-        public Character apply(String input) {
+        public @Nullable Character apply(@Nullable String input) {
           return input == null ? null : input.charAt(0);
         }
       };
diff --git a/android/guava-tests/test/com/google/common/collect/TreeMultimapExplicitTest.java b/android/guava-tests/test/com/google/common/collect/TreeMultimapExplicitTest.java
index 92a3d83..4b00570 100644
--- a/android/guava-tests/test/com/google/common/collect/TreeMultimapExplicitTest.java
+++ b/android/guava-tests/test/com/google/common/collect/TreeMultimapExplicitTest.java
@@ -28,6 +28,7 @@ import java.util.Iterator;
 import java.util.Map.Entry;
 import java.util.SortedSet;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit tests for {@code TreeMultimap} with explicit comparators.
@@ -41,11 +42,11 @@ public class TreeMultimapExplicitTest extends TestCase {
    * Compare strings lengths, and if the lengths are equal compare the strings. A {@code null} is
    * less than any non-null value.
    */
-  private enum StringLength implements Comparator<String> {
+  private enum StringLength implements Comparator<@Nullable String> {
     COMPARATOR;
 
     @Override
-    public int compare(String first, String second) {
+    public int compare(@Nullable String first, @Nullable String second) {
       if (first == second) {
         return 0;
       } else if (first == null) {
diff --git a/android/guava-tests/test/com/google/common/escape/ArrayBasedEscaperMapTest.java b/android/guava-tests/test/com/google/common/escape/ArrayBasedEscaperMapTest.java
index 6d9c1d8..47d04bf 100644
--- a/android/guava-tests/test/com/google/common/escape/ArrayBasedEscaperMapTest.java
+++ b/android/guava-tests/test/com/google/common/escape/ArrayBasedEscaperMapTest.java
@@ -62,7 +62,7 @@ public class ArrayBasedEscaperMapTest extends TestCase {
     char[][] replacementArray = fem.getReplacementArray();
     // Array length is highest character value + 1
     assertEquals(65536, replacementArray.length);
-    // The final element should always be non null.
+    // The final element should always be non-null.
     assertNotNull(replacementArray[replacementArray.length - 1]);
     // Exhaustively check all mappings (an int index avoids wrapping).
     for (int n = 0; n < replacementArray.length; ++n) {
diff --git a/android/guava-tests/test/com/google/common/escape/EscapersTest.java b/android/guava-tests/test/com/google/common/escape/EscapersTest.java
index 4422320..e9549d0 100644
--- a/android/guava-tests/test/com/google/common/escape/EscapersTest.java
+++ b/android/guava-tests/test/com/google/common/escape/EscapersTest.java
@@ -60,7 +60,7 @@ public class EscapersTest extends TestCase {
   }
 
   public void testBuilderCreatesIndependentEscapers() {
-    // Setup a simple builder and create the first escaper.
+    // Set up a simple builder and create the first escaper.
     Escapers.Builder builder = Escapers.builder();
     builder.setSafeRange('a', 'z');
     builder.setUnsafeReplacement("X");
@@ -108,7 +108,7 @@ public class EscapersTest extends TestCase {
     }
   }
 
-  // A trival non-optimized escaper for testing.
+  // A trivial non-optimized escaper for testing.
   static CharEscaper createSimpleCharEscaper(final ImmutableMap<Character, char[]> replacementMap) {
     return new CharEscaper() {
       @Override
@@ -118,7 +118,7 @@ public class EscapersTest extends TestCase {
     };
   }
 
-  // A trival non-optimized escaper for testing.
+  // A trivial non-optimized escaper for testing.
   static UnicodeEscaper createSimpleUnicodeEscaper(
       final ImmutableMap<Integer, char[]> replacementMap) {
     return new UnicodeEscaper() {
diff --git a/android/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java b/android/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java
index 96cfa10..48f2f17 100644
--- a/android/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java
+++ b/android/guava-tests/test/com/google/common/escape/UnicodeEscaperTest.java
@@ -18,6 +18,7 @@ package com.google.common.escape;
 
 import com.google.common.annotations.GwtCompatible;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link UnicodeEscaper}.
@@ -39,7 +40,7 @@ public class UnicodeEscaperTest extends TestCase {
   private static final UnicodeEscaper NOP_ESCAPER =
       new UnicodeEscaper() {
         @Override
-        protected char[] escape(int c) {
+        protected char @Nullable [] escape(int c) {
           return null;
         }
       };
@@ -48,7 +49,7 @@ public class UnicodeEscaperTest extends TestCase {
   private static final UnicodeEscaper SIMPLE_ESCAPER =
       new UnicodeEscaper() {
         @Override
-        protected char[] escape(int cp) {
+        protected char @Nullable [] escape(int cp) {
           return ('a' <= cp && cp <= 'z') || ('A' <= cp && cp <= 'Z') || ('0' <= cp && cp <= '9')
               ? null
               : ("[" + String.valueOf(cp) + "]").toCharArray();
@@ -163,7 +164,7 @@ public class UnicodeEscaperTest extends TestCase {
         new UnicodeEscaper() {
           // Canonical escaper method that only escapes lower case ASCII letters.
           @Override
-          protected char[] escape(int cp) {
+          protected char @Nullable [] escape(int cp) {
             return ('a' <= cp && cp <= 'z') ? new char[] {Character.toUpperCase((char) cp)} : null;
           }
           // Inefficient implementation that defines all letters as escapable.
diff --git a/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java b/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java
index 485ec06..d314f7e 100644
--- a/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java
+++ b/android/guava-tests/test/com/google/common/eventbus/EventBusTest.java
@@ -168,7 +168,7 @@ public class EventBusTest extends TestCase {
     GhostCatcher catcher = new GhostCatcher();
     bus.register(catcher);
 
-    // A String -- an event for which noone has registered.
+    // A String -- an event for which no one has registered.
     bus.post(EVENT);
 
     List<DeadEvent> events = catcher.getEvents();
diff --git a/android/guava-tests/test/com/google/common/eventbus/PackageSanityTests.java b/android/guava-tests/test/com/google/common/eventbus/PackageSanityTests.java
index 225e555..539e136 100644
--- a/android/guava-tests/test/com/google/common/eventbus/PackageSanityTests.java
+++ b/android/guava-tests/test/com/google/common/eventbus/PackageSanityTests.java
@@ -18,7 +18,7 @@ package com.google.common.eventbus;
 
 import com.google.common.testing.AbstractPackageSanityTests;
 import java.lang.reflect.Method;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Basic sanity tests for the entire package.
@@ -41,7 +41,7 @@ public class PackageSanityTests extends AbstractPackageSanityTests {
     private final EventBus eventBus = new EventBus();
 
     @Subscribe
-    public void handle(@CheckForNull Object anything) {}
+    public void handle(@Nullable Object anything) {}
 
     Subscriber toSubscriber() throws Exception {
       return Subscriber.create(eventBus, this, subscriberMethod());
diff --git a/android/guava-tests/test/com/google/common/eventbus/StringCatcher.java b/android/guava-tests/test/com/google/common/eventbus/StringCatcher.java
index 198fa2e..0fb9cec 100644
--- a/android/guava-tests/test/com/google/common/eventbus/StringCatcher.java
+++ b/android/guava-tests/test/com/google/common/eventbus/StringCatcher.java
@@ -18,8 +18,8 @@ package com.google.common.eventbus;
 
 import com.google.common.collect.Lists;
 import java.util.List;
-import javax.annotation.CheckForNull;
 import junit.framework.Assert;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * A simple EventSubscriber mock that records Strings.
@@ -33,11 +33,11 @@ public class StringCatcher {
   private List<String> events = Lists.newArrayList();
 
   @Subscribe
-  public void hereHaveAString(@CheckForNull String string) {
+  public void hereHaveAString(@Nullable String string) {
     events.add(string);
   }
 
-  public void methodWithoutAnnotation(@CheckForNull String string) {
+  public void methodWithoutAnnotation(@Nullable String string) {
     Assert.fail("Event bus must not call methods without @Subscribe!");
   }
 
diff --git a/android/guava-tests/test/com/google/common/eventbus/SubscriberTest.java b/android/guava-tests/test/com/google/common/eventbus/SubscriberTest.java
index e2380df..14210ac 100644
--- a/android/guava-tests/test/com/google/common/eventbus/SubscriberTest.java
+++ b/android/guava-tests/test/com/google/common/eventbus/SubscriberTest.java
@@ -22,6 +22,7 @@ import com.google.common.testing.EqualsTester;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Subscriber}.
@@ -35,7 +36,7 @@ public class SubscriberTest extends TestCase {
 
   private EventBus bus;
   private boolean methodCalled;
-  private Object methodArgument;
+  private @Nullable Object methodArgument;
 
   @Override
   protected void setUp() throws Exception {
diff --git a/android/guava-tests/test/com/google/common/eventbus/outside/AbstractEventBusTest.java b/android/guava-tests/test/com/google/common/eventbus/outside/AbstractEventBusTest.java
index f4af7a7..54d6c93 100644
--- a/android/guava-tests/test/com/google/common/eventbus/outside/AbstractEventBusTest.java
+++ b/android/guava-tests/test/com/google/common/eventbus/outside/AbstractEventBusTest.java
@@ -18,6 +18,7 @@ package com.google.common.eventbus.outside;
 
 import com.google.common.eventbus.EventBus;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Abstract base class for tests that EventBus finds the correct subscribers.
@@ -34,7 +35,7 @@ abstract class AbstractEventBusTest<H> extends TestCase {
 
   abstract H createSubscriber();
 
-  private H subscriber;
+  private @Nullable H subscriber;
 
   H getSubscriber() {
     return subscriber;
diff --git a/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java
index e386252..a02783f 100644
--- a/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java
+++ b/android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java
@@ -36,6 +36,7 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.CyclicBarrier;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
+import org.checkerframework.checker.nullness.qual.Nullable;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -798,9 +799,9 @@ public abstract class AbstractNetworkTest {
     for (int i = 0; i < threadCount; i++) {
       futures.add(
           executor.submit(
-              new Callable<Object>() {
+              new Callable<@Nullable Void>() {
                 @Override
-                public Object call() throws Exception {
+                public @Nullable Void call() throws Exception {
                   barrier.await();
                   Integer first = network.nodes().iterator().next();
                   for (Integer node : network.nodes()) {
diff --git a/android/guava-tests/test/com/google/common/graph/ElementOrderTest.java b/android/guava-tests/test/com/google/common/graph/ElementOrderTest.java
index 0557fb7..5e4c8d4 100644
--- a/android/guava-tests/test/com/google/common/graph/ElementOrderTest.java
+++ b/android/guava-tests/test/com/google/common/graph/ElementOrderTest.java
@@ -150,7 +150,7 @@ public final class ElementOrderTest {
   // Combined node and edge order tests
 
   @Test
-  public void nodeOrderUnorderedandEdgesSorted() {
+  public void nodeOrderUnorderedAndEdgesSorted() {
     MutableNetwork<Integer, String> network =
         NetworkBuilder.directed()
             .nodeOrder(unordered())
diff --git a/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java b/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java
index 71b6439..24323ca 100644
--- a/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java
+++ b/android/guava-tests/test/com/google/common/graph/ValueGraphTest.java
@@ -28,6 +28,7 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.CyclicBarrier;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Future;
+import org.checkerframework.checker.nullness.qual.Nullable;
 import org.junit.After;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -422,9 +423,9 @@ public final class ValueGraphTest {
     for (int i = 0; i < threadCount; i++) {
       futures.add(
           executor.submit(
-              new Callable<Object>() {
+              new Callable<@Nullable Void>() {
                 @Override
-                public Object call() throws Exception {
+                public @Nullable Void call() throws Exception {
                   barrier.await();
                   Integer first = graph.nodes().iterator().next();
                   for (Integer node : graph.nodes()) {
diff --git a/android/guava-tests/test/com/google/common/hash/BloomFilterTest.java b/android/guava-tests/test/com/google/common/hash/BloomFilterTest.java
index d99be09..8ee920c 100644
--- a/android/guava-tests/test/com/google/common/hash/BloomFilterTest.java
+++ b/android/guava-tests/test/com/google/common/hash/BloomFilterTest.java
@@ -36,8 +36,8 @@ import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckForNull;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for SimpleGenericBloomFilter and derived BloomFilter views.
@@ -408,7 +408,7 @@ public class BloomFilterTest extends TestCase {
     }
 
     @Override
-    public boolean equals(@CheckForNull Object object) {
+    public boolean equals(@Nullable Object object) {
       return (object instanceof CustomFunnel);
     }
 
diff --git a/android/guava-tests/test/com/google/common/hash/HashCodeTest.java b/android/guava-tests/test/com/google/common/hash/HashCodeTest.java
index 4cccefe..231fd40 100644
--- a/android/guava-tests/test/com/google/common/hash/HashCodeTest.java
+++ b/android/guava-tests/test/com/google/common/hash/HashCodeTest.java
@@ -24,6 +24,7 @@ import com.google.common.io.BaseEncoding;
 import com.google.common.testing.ClassSanityTester;
 import java.util.Arrays;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit tests for {@link HashCode}.
@@ -391,7 +392,7 @@ public class HashCodeTest extends TestCase {
     final Long asLong; // null means that asLong should throw an exception
     final String toString;
 
-    ExpectedHashCode(byte[] bytes, int asInt, Long asLong, String toString) {
+    ExpectedHashCode(byte[] bytes, int asInt, @Nullable Long asLong, String toString) {
       this.bytes = bytes;
       this.asInt = asInt;
       this.asLong = asLong;
diff --git a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java
index 9e9944b..3a9b46c 100644
--- a/android/guava-tests/test/com/google/common/hash/HashTestUtils.java
+++ b/android/guava-tests/test/com/google/common/hash/HashTestUtils.java
@@ -376,7 +376,7 @@ final class HashTestUtils {
       for (int j = 0; j < keyBits; j++) {
         if (j <= i) continue;
         int count = 0;
-        int maxCount = 20; // the probability of error here is miniscule
+        int maxCount = 20; // the probability of error here is minuscule
         boolean diff = false;
 
         while (!diff) {
diff --git a/android/guava-tests/test/com/google/common/hash/MacHashFunctionTest.java b/android/guava-tests/test/com/google/common/hash/MacHashFunctionTest.java
index 4dbb424..7783b5f 100644
--- a/android/guava-tests/test/com/google/common/hash/MacHashFunctionTest.java
+++ b/android/guava-tests/test/com/google/common/hash/MacHashFunctionTest.java
@@ -29,6 +29,7 @@ import javax.crypto.Mac;
 import javax.crypto.SecretKey;
 import javax.crypto.spec.SecretKeySpec;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 import sun.security.jca.ProviderList;
 import sun.security.jca.Providers;
 
@@ -155,7 +156,7 @@ public class MacHashFunctionTest extends TestCase {
           }
 
           @Override
-          public byte[] getEncoded() {
+          public byte @Nullable [] getEncoded() {
             return null;
           }
 
diff --git a/android/guava-tests/test/com/google/common/io/BaseEncodingTest.java b/android/guava-tests/test/com/google/common/io/BaseEncodingTest.java
index 15e155a..e67f70c 100644
--- a/android/guava-tests/test/com/google/common/io/BaseEncodingTest.java
+++ b/android/guava-tests/test/com/google/common/io/BaseEncodingTest.java
@@ -35,8 +35,8 @@ import java.io.OutputStream;
 import java.io.Reader;
 import java.io.StringReader;
 import java.io.StringWriter;
-import javax.annotation.CheckForNull;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@code BaseEncoding}.
@@ -462,7 +462,7 @@ public class BaseEncodingTest extends TestCase {
   }
 
   private static void assertFailsToDecode(
-      BaseEncoding encoding, String cannotDecode, @CheckForNull String expectedMessage) {
+      BaseEncoding encoding, String cannotDecode, @Nullable String expectedMessage) {
     // We use this somewhat weird pattern with an enum for each assertion we want to make as a way
     // of dealing with the fact that one of the assertions is @GwtIncompatible but we don't want to
     // have to have duplicate @GwtIncompatible test methods just to make that assertion.
@@ -476,7 +476,7 @@ public class BaseEncodingTest extends TestCase {
     DECODING_STREAM {
       @Override
       void assertFailsToDecode(
-          BaseEncoding encoding, String cannotDecode, @CheckForNull String expectedMessage) {
+          BaseEncoding encoding, String cannotDecode, @Nullable String expectedMessage) {
         // Regression test for case where DecodingException was swallowed by default implementation
         // of
         // InputStream.read(byte[], int, int)
@@ -497,14 +497,14 @@ public class BaseEncodingTest extends TestCase {
     CAN_DECODE {
       @Override
       void assertFailsToDecode(
-          BaseEncoding encoding, String cannotDecode, @CheckForNull String expectedMessage) {
+          BaseEncoding encoding, String cannotDecode, @Nullable String expectedMessage) {
         assertThat(encoding.canDecode(cannotDecode)).isFalse();
       }
     },
     DECODE {
       @Override
       void assertFailsToDecode(
-          BaseEncoding encoding, String cannotDecode, @CheckForNull String expectedMessage) {
+          BaseEncoding encoding, String cannotDecode, @Nullable String expectedMessage) {
         try {
           encoding.decode(cannotDecode);
           fail("Expected IllegalArgumentException");
@@ -518,7 +518,7 @@ public class BaseEncodingTest extends TestCase {
     DECODE_CHECKED {
       @Override
       void assertFailsToDecode(
-          BaseEncoding encoding, String cannotDecode, @CheckForNull String expectedMessage) {
+          BaseEncoding encoding, String cannotDecode, @Nullable String expectedMessage) {
         try {
           encoding.decodeChecked(cannotDecode);
           fail("Expected DecodingException");
@@ -531,7 +531,7 @@ public class BaseEncodingTest extends TestCase {
     };
 
     abstract void assertFailsToDecode(
-        BaseEncoding encoding, String cannotDecode, @CheckForNull String expectedMessage);
+        BaseEncoding encoding, String cannotDecode, @Nullable String expectedMessage);
   }
 
   @GwtIncompatible // Reader/Writer
diff --git a/android/guava-tests/test/com/google/common/io/ByteSinkTester.java b/android/guava-tests/test/com/google/common/io/ByteSinkTester.java
index 77c3edb..6baf377 100644
--- a/android/guava-tests/test/com/google/common/io/ByteSinkTester.java
+++ b/android/guava-tests/test/com/google/common/io/ByteSinkTester.java
@@ -31,7 +31,7 @@ import junit.framework.TestSuite;
 
 /**
  * A generator of {@code TestSuite} instances for testing {@code ByteSink} implementations.
- * Generates tests of a all methods on a {@code ByteSink} given various inputs written to it as well
+ * Generates tests of all methods on a {@code ByteSink} given various inputs written to it as well
  * as sub-suites for testing the {@code CharSink} view in the same way.
  *
  * @author Colin Decker
diff --git a/android/guava-tests/test/com/google/common/io/ByteSourceTest.java b/android/guava-tests/test/com/google/common/io/ByteSourceTest.java
index edf4501..58ad653 100644
--- a/android/guava-tests/test/com/google/common/io/ByteSourceTest.java
+++ b/android/guava-tests/test/com/google/common/io/ByteSourceTest.java
@@ -40,6 +40,7 @@ import java.io.OutputStream;
 import java.util.Arrays;
 import java.util.EnumSet;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for the default implementations of {@code ByteSource} methods.
@@ -151,8 +152,8 @@ public class ByteSourceTest extends IoTestCase {
   }
 
   public void testRead_withProcessor_stopsOnFalse() throws IOException {
-    ByteProcessor<Void> processor =
-        new ByteProcessor<Void>() {
+    ByteProcessor<@Nullable Void> processor =
+        new ByteProcessor<@Nullable Void>() {
           boolean firstCall = true;
 
           @Override
@@ -163,7 +164,7 @@ public class ByteSourceTest extends IoTestCase {
           }
 
           @Override
-          public Void getResult() {
+          public @Nullable Void getResult() {
             return null;
           }
         };
diff --git a/android/guava-tests/test/com/google/common/io/ByteSourceTester.java b/android/guava-tests/test/com/google/common/io/ByteSourceTester.java
index 25cf48d..fe10810 100644
--- a/android/guava-tests/test/com/google/common/io/ByteSourceTester.java
+++ b/android/guava-tests/test/com/google/common/io/ByteSourceTester.java
@@ -37,7 +37,7 @@ import junit.framework.TestSuite;
 
 /**
  * A generator of {@code TestSuite} instances for testing {@code ByteSource} implementations.
- * Generates tests of a all methods on a {@code ByteSource} given various inputs the source is
+ * Generates tests of all methods on a {@code ByteSource} given various inputs the source is
  * expected to contain as well as sub-suites for testing the {@code CharSource} view and {@code
  * slice()} views in the same way.
  *
diff --git a/android/guava-tests/test/com/google/common/io/ByteStreamsTest.java b/android/guava-tests/test/com/google/common/io/ByteStreamsTest.java
index 6bc0bf0..2598b9f 100644
--- a/android/guava-tests/test/com/google/common/io/ByteStreamsTest.java
+++ b/android/guava-tests/test/com/google/common/io/ByteStreamsTest.java
@@ -51,7 +51,6 @@ public class ByteStreamsTest extends IoTestCase {
     assertThat(out.toByteArray()).isEqualTo(expected);
   }
 
-  @AndroidIncompatible // Android forbids much filesystem access. Maybe we could make it work?
 
   public void testCopyFileChannel() throws IOException {
     final int chunkSize = 14407; // Random prime, unlikely to match any internal chunk size
@@ -381,7 +380,7 @@ public class ByteStreamsTest extends IoTestCase {
     assertThat(out.toByteArray()).isEqualTo(expected);
   }
 
-  @AndroidIncompatible // https://code.google.com/p/android/issues/detail?id=196848
+  @AndroidIncompatible // https://issuetracker.google.com/issues/37074504
   public void testUtf16Expected() {
     byte[] hardcodedExpected = utf16ExpectedWithBom;
     byte[] computedExpected = "r\u00C9sum\u00C9".getBytes(Charsets.UTF_16);
diff --git a/android/guava-tests/test/com/google/common/io/CharSinkTester.java b/android/guava-tests/test/com/google/common/io/CharSinkTester.java
index 5b2892d..58a7549 100644
--- a/android/guava-tests/test/com/google/common/io/CharSinkTester.java
+++ b/android/guava-tests/test/com/google/common/io/CharSinkTester.java
@@ -28,7 +28,7 @@ import junit.framework.TestSuite;
 
 /**
  * A generator of {@code TestSuite} instances for testing {@code CharSink} implementations.
- * Generates tests of a all methods on a {@code CharSink} given various inputs written to it.
+ * Generates tests of all methods on a {@code CharSink} given various inputs written to it.
  *
  * @author Colin Decker
  */
diff --git a/android/guava-tests/test/com/google/common/io/CharSourceTester.java b/android/guava-tests/test/com/google/common/io/CharSourceTester.java
index 82b65e9..1f75b12 100644
--- a/android/guava-tests/test/com/google/common/io/CharSourceTester.java
+++ b/android/guava-tests/test/com/google/common/io/CharSourceTester.java
@@ -33,7 +33,7 @@ import junit.framework.TestSuite;
 
 /**
  * A generator of {@code TestSuite} instances for testing {@code CharSource} implementations.
- * Generates tests of a all methods on a {@code CharSource} given various inputs the source is
+ * Generates tests of all methods on a {@code CharSource} given various inputs the source is
  * expected to contain.
  *
  * @author Colin Decker
diff --git a/android/guava-tests/test/com/google/common/io/CloserTest.java b/android/guava-tests/test/com/google/common/io/CloserTest.java
index 38ff700..f30d771 100644
--- a/android/guava-tests/test/com/google/common/io/CloserTest.java
+++ b/android/guava-tests/test/com/google/common/io/CloserTest.java
@@ -31,8 +31,8 @@ import java.io.IOException;
 import java.lang.reflect.Method;
 import java.util.List;
 import java.util.logging.LogRecord;
-import javax.annotation.CheckForNull;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Closer}.
@@ -393,7 +393,7 @@ public class CloserTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       if (obj instanceof Suppression) {
         Suppression other = (Suppression) obj;
         return closeable.equals(other.closeable)
@@ -435,7 +435,7 @@ public class CloserTest extends TestCase {
       throw new IOException();
     }
 
-    private TestCloseable(@CheckForNull Throwable throwOnClose) {
+    private TestCloseable(@Nullable Throwable throwOnClose) {
       this.throwOnClose = throwOnClose;
     }
 
diff --git a/android/guava-tests/test/com/google/common/io/FileBackedOutputStreamAndroidIncompatibleTest.java b/android/guava-tests/test/com/google/common/io/FileBackedOutputStreamAndroidIncompatibleTest.java
new file mode 100644
index 0000000..4ecdcf8
--- /dev/null
+++ b/android/guava-tests/test/com/google/common/io/FileBackedOutputStreamAndroidIncompatibleTest.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (C) 2008 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.common.io;
+
+import static com.google.common.io.FileBackedOutputStreamTest.write;
+
+import com.google.common.testing.GcFinalization;
+import java.io.File;
+
+/**
+ * Android-incompatible tests for {@link FileBackedOutputStream}.
+ *
+ * @author Chris Nokleberg
+ */
+@AndroidIncompatible // Finalization probably just doesn't happen fast enough?
+public class FileBackedOutputStreamAndroidIncompatibleTest extends IoTestCase {
+
+  public void testFinalizeDeletesFile() throws Exception {
+    byte[] data = newPreFilledByteArray(100);
+    FileBackedOutputStream out = new FileBackedOutputStream(0, true);
+
+    write(out, data, 0, 100, true);
+    final File file = out.getFile();
+    assertEquals(100, file.length());
+    assertTrue(file.exists());
+    out.close();
+
+    // Make sure that finalize deletes the file
+    out = null;
+
+    // times out and throws RuntimeException on failure
+    GcFinalization.awaitDone(
+        new GcFinalization.FinalizationPredicate() {
+          @Override
+          public boolean isDone() {
+            return !file.exists();
+          }
+        });
+  }
+}
diff --git a/android/guava-tests/test/com/google/common/io/FileBackedOutputStreamTest.java b/android/guava-tests/test/com/google/common/io/FileBackedOutputStreamTest.java
index abd27db..3d756a8 100644
--- a/android/guava-tests/test/com/google/common/io/FileBackedOutputStreamTest.java
+++ b/android/guava-tests/test/com/google/common/io/FileBackedOutputStreamTest.java
@@ -16,19 +16,27 @@
 
 package com.google.common.io;
 
+import static com.google.common.base.StandardSystemProperty.JAVA_IO_TMPDIR;
+import static com.google.common.base.StandardSystemProperty.OS_NAME;
+import static com.google.common.truth.Truth.assertThat;
+import static java.nio.file.attribute.PosixFilePermission.OWNER_READ;
+import static java.nio.file.attribute.PosixFilePermission.OWNER_WRITE;
+import static org.junit.Assert.assertThrows;
 
-import com.google.common.testing.GcFinalization;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.file.attribute.PosixFileAttributeView;
+import java.nio.file.attribute.PosixFileAttributes;
 import java.util.Arrays;
 
 /**
  * Unit tests for {@link FileBackedOutputStream}.
  *
+ * <p>For a tiny bit more testing, see {@link FileBackedOutputStreamAndroidIncompatibleTest}.
+ *
  * @author Chris Nokleberg
  */
-@AndroidIncompatible // Android forbids much filesystem access. Maybe we could make it work?
 public class FileBackedOutputStreamTest extends IoTestCase {
 
 
@@ -62,10 +70,21 @@ public class FileBackedOutputStreamTest extends IoTestCase {
 
     // Write data to go over the threshold
     if (chunk2 > 0) {
+      if (JAVA_IO_TMPDIR.value().equals("/sdcard")) {
+        assertThrows(IOException.class, () -> write(out, data, chunk1, chunk2, singleByte));
+        return;
+      }
       write(out, data, chunk1, chunk2, singleByte);
       file = out.getFile();
       assertEquals(dataSize, file.length());
       assertTrue(file.exists());
+      assertThat(file.getName()).contains("FileBackedOutputStream");
+      if (!isAndroid() && !isWindows()) {
+        PosixFileAttributes attributes =
+            java.nio.file.Files.getFileAttributeView(file.toPath(), PosixFileAttributeView.class)
+                .readAttributes();
+        assertThat(attributes.permissions()).containsExactly(OWNER_READ, OWNER_WRITE);
+      }
     }
     out.close();
 
@@ -80,30 +99,6 @@ public class FileBackedOutputStreamTest extends IoTestCase {
   }
 
 
-  public void testFinalizeDeletesFile() throws Exception {
-    byte[] data = newPreFilledByteArray(100);
-    FileBackedOutputStream out = new FileBackedOutputStream(0, true);
-
-    write(out, data, 0, 100, true);
-    final File file = out.getFile();
-    assertEquals(100, file.length());
-    assertTrue(file.exists());
-    out.close();
-
-    // Make sure that finalize deletes the file
-    out = null;
-
-    // times out and throws RuntimeException on failure
-    GcFinalization.awaitDone(
-        new GcFinalization.FinalizationPredicate() {
-          @Override
-          public boolean isDone() {
-            return !file.exists();
-          }
-        });
-  }
-
-
   public void testThreshold_resetOnFinalize() throws Exception {
     testThreshold(0, 100, true, true);
     testThreshold(10, 100, true, true);
@@ -115,7 +110,7 @@ public class FileBackedOutputStreamTest extends IoTestCase {
     testThreshold(1000, 100, false, true);
   }
 
-  private static void write(OutputStream out, byte[] b, int off, int len, boolean singleByte)
+  static void write(OutputStream out, byte[] b, int off, int len, boolean singleByte)
       throws IOException {
     if (singleByte) {
       for (int i = off; i < off + len; i++) {
@@ -134,6 +129,10 @@ public class FileBackedOutputStreamTest extends IoTestCase {
     FileBackedOutputStream out = new FileBackedOutputStream(50);
     ByteSource source = out.asByteSource();
 
+    if (JAVA_IO_TMPDIR.value().equals("/sdcard")) {
+      assertThrows(IOException.class, () -> out.write(data));
+      return;
+    }
     out.write(data);
     assertTrue(Arrays.equals(data, source.read()));
 
@@ -165,4 +164,12 @@ public class FileBackedOutputStreamTest extends IoTestCase {
 
     out.close();
   }
+
+  private static boolean isAndroid() {
+    return System.getProperty("java.runtime.name", "").contains("Android");
+  }
+
+  private static boolean isWindows() {
+    return OS_NAME.value().startsWith("Windows");
+  }
 }
diff --git a/android/guava-tests/test/com/google/common/io/FilesCreateTempDirTest.java b/android/guava-tests/test/com/google/common/io/FilesCreateTempDirTest.java
new file mode 100644
index 0000000..a31c437
--- /dev/null
+++ b/android/guava-tests/test/com/google/common/io/FilesCreateTempDirTest.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (C) 2007 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.common.io;
+
+import static com.google.common.base.StandardSystemProperty.JAVA_IO_TMPDIR;
+import static com.google.common.base.StandardSystemProperty.OS_NAME;
+import static com.google.common.truth.Truth.assertThat;
+import static java.nio.file.attribute.PosixFilePermission.OWNER_EXECUTE;
+import static java.nio.file.attribute.PosixFilePermission.OWNER_READ;
+import static java.nio.file.attribute.PosixFilePermission.OWNER_WRITE;
+import static org.junit.Assert.assertThrows;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.attribute.PosixFileAttributeView;
+import java.nio.file.attribute.PosixFileAttributes;
+import junit.framework.TestCase;
+
+/**
+ * Unit test for {@link Files#createTempDir}.
+ *
+ * @author Chris Nokleberg
+ */
+
+@SuppressWarnings("deprecation") // tests of a deprecated method
+public class FilesCreateTempDirTest extends TestCase {
+  public void testCreateTempDir() throws IOException {
+    if (JAVA_IO_TMPDIR.value().equals("/sdcard")) {
+      assertThrows(IllegalStateException.class, Files::createTempDir);
+      return;
+    }
+    File temp = Files.createTempDir();
+    try {
+      assertThat(temp.exists()).isTrue();
+      assertThat(temp.isDirectory()).isTrue();
+      assertThat(temp.listFiles()).isEmpty();
+      File child = new File(temp, "child");
+      assertThat(child.createNewFile()).isTrue();
+      assertThat(child.delete()).isTrue();
+
+      if (!isAndroid() && !isWindows()) {
+        PosixFileAttributes attributes =
+            java.nio.file.Files.getFileAttributeView(temp.toPath(), PosixFileAttributeView.class)
+                .readAttributes();
+        assertThat(attributes.permissions())
+            .containsExactly(OWNER_READ, OWNER_WRITE, OWNER_EXECUTE);
+      }
+    } finally {
+      assertThat(temp.delete()).isTrue();
+    }
+  }
+
+  private static boolean isAndroid() {
+    return System.getProperty("java.runtime.name", "").contains("Android");
+  }
+
+  private static boolean isWindows() {
+    return OS_NAME.value().startsWith("Windows");
+  }
+}
diff --git a/android/guava-tests/test/com/google/common/io/FilesFileTraverserTest.java b/android/guava-tests/test/com/google/common/io/FilesFileTraverserTest.java
index 104ced6..9409d21 100644
--- a/android/guava-tests/test/com/google/common/io/FilesFileTraverserTest.java
+++ b/android/guava-tests/test/com/google/common/io/FilesFileTraverserTest.java
@@ -22,11 +22,6 @@ import com.google.common.collect.Iterables;
 import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import java.io.File;
 import java.io.IOException;
-import java.nio.file.FileVisitResult;
-import java.nio.file.Path;
-import java.nio.file.SimpleFileVisitor;
-import java.nio.file.attribute.BasicFileAttributes;
-import junit.framework.TestCase;
 
 /**
  * Tests for {@link Files#fileTraverser()}.
@@ -34,38 +29,13 @@ import junit.framework.TestCase;
  * @author Jens Nyman
  */
 
-@AndroidIncompatible // Android forbids much filesystem access. Maybe we could make it work?
-public class FilesFileTraverserTest extends TestCase {
+public class FilesFileTraverserTest extends IoTestCase {
 
   private File rootDir;
 
   @Override
   public void setUp() throws IOException {
-    rootDir = Files.createTempDir();
-  }
-
-  @Override
-  public void tearDown() throws IOException {
-    // delete rootDir and its contents
-    java.nio.file.Files.walkFileTree(
-        rootDir.toPath(),
-        new SimpleFileVisitor<Path>() {
-          @Override
-          public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
-              throws IOException {
-            java.nio.file.Files.deleteIfExists(file);
-            return FileVisitResult.CONTINUE;
-          }
-
-          @Override
-          public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
-            if (exc != null) {
-              return FileVisitResult.TERMINATE;
-            }
-            java.nio.file.Files.deleteIfExists(dir);
-            return FileVisitResult.CONTINUE;
-          }
-        });
+    rootDir = createTempDir();
   }
 
   public void testFileTraverser_emptyDirectory() throws Exception {
diff --git a/android/guava-tests/test/com/google/common/io/FilesTest.java b/android/guava-tests/test/com/google/common/io/FilesTest.java
index 68e2174..6ffcf5c 100644
--- a/android/guava-tests/test/com/google/common/io/FilesTest.java
+++ b/android/guava-tests/test/com/google/common/io/FilesTest.java
@@ -42,14 +42,19 @@ import junit.framework.TestSuite;
 /**
  * Unit test for {@link Files}.
  *
- * <p>Note: {@link Files#fileTraverser()} is tested in {@link FilesFileTraverserTest}.
+ * <p>Some methods are tested in separate files:
+ *
+ * <ul>
+ *   <li>{@link Files#fileTraverser()} is tested in {@link FilesFileTraverserTest}.
+ *   <li>{@link Files#createTempDir()} is tested in {@link FilesCreateTempDirTest}.
+ * </ul>
  *
  * @author Chris Nokleberg
  */
 
-@AndroidIncompatible // Android forbids much filesystem access. Maybe we could make it work?
 public class FilesTest extends IoTestCase {
 
+  @AndroidIncompatible // suites, ByteSourceTester (b/230620681)
   public static TestSuite suite() {
     TestSuite suite = new TestSuite();
     suite.addTest(
@@ -358,14 +363,6 @@ public class FilesTest extends IoTestCase {
     }
   }
 
-  public void testCreateTempDir() {
-    File temp = Files.createTempDir();
-    assertTrue(temp.exists());
-    assertTrue(temp.isDirectory());
-    assertThat(temp.listFiles()).isEmpty();
-    assertTrue(temp.delete());
-  }
-
   public void testMove() throws IOException {
     File i18nFile = getTestFile("i18n.txt");
     File temp1 = createTempFile();
diff --git a/android/guava-tests/test/com/google/common/io/IoTestCase.java b/android/guava-tests/test/com/google/common/io/IoTestCase.java
index fa89619..c79ebcb 100644
--- a/android/guava-tests/test/com/google/common/io/IoTestCase.java
+++ b/android/guava-tests/test/com/google/common/io/IoTestCase.java
@@ -28,6 +28,7 @@ import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Base test case class for I/O tests.
@@ -92,7 +93,7 @@ public abstract class IoTestCase extends TestCase {
   }
 
   /** Returns the file with the given name under the testdata directory. */
-  protected final File getTestFile(String name) throws IOException {
+  protected final @Nullable File getTestFile(String name) throws IOException {
     File file = new File(getTestDir(), name);
     if (!file.exists()) {
       URL resourceUrl = IoTestCase.class.getResource("testdata/" + name);
diff --git a/android/guava-tests/test/com/google/common/io/ResourcesTest.java b/android/guava-tests/test/com/google/common/io/ResourcesTest.java
index 37580ff..b1a46c6 100644
--- a/android/guava-tests/test/com/google/common/io/ResourcesTest.java
+++ b/android/guava-tests/test/com/google/common/io/ResourcesTest.java
@@ -133,7 +133,6 @@ public class ResourcesTest extends IoTestCase {
     assertNotNull(Resources.getResource(getClass(), "testdata/i18n.txt"));
   }
 
-  @AndroidIncompatible // Android prevents most access to files
   public void testGetResource_contextClassLoader() throws IOException {
     // Check that we can find a resource if it is visible to the context class
     // loader, even if it is not visible to the loader of the Resources class.
@@ -160,7 +159,7 @@ public class ResourcesTest extends IoTestCase {
       Thread.currentThread().setContextClassLoader(loader);
       URL url = Resources.getResource(tempFile.getName());
       String text = Resources.toString(url, Charsets.UTF_8);
-      assertEquals("rud a chur ar an méar fhada\n", text);
+      assertEquals("rud a chur ar an méar fhada" + System.lineSeparator(), text);
     } finally {
       Thread.currentThread().setContextClassLoader(oldContextLoader);
     }
diff --git a/android/guava-tests/test/com/google/common/io/SourceSinkFactories.java b/android/guava-tests/test/com/google/common/io/SourceSinkFactories.java
index e70370e..b6dab35 100644
--- a/android/guava-tests/test/com/google/common/io/SourceSinkFactories.java
+++ b/android/guava-tests/test/com/google/common/io/SourceSinkFactories.java
@@ -37,7 +37,7 @@ import java.io.Writer;
 import java.nio.CharBuffer;
 import java.util.Arrays;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * {@link SourceSinkFactory} implementations.
@@ -305,7 +305,7 @@ public class SourceSinkFactories {
 
     private final byte[] initialBytes;
 
-    private FileByteSinkFactory(@CheckForNull byte[] initialBytes) {
+    private FileByteSinkFactory(byte @Nullable [] initialBytes) {
       this.initialBytes = initialBytes;
     }
 
@@ -375,7 +375,7 @@ public class SourceSinkFactories {
 
     private final String initialString;
 
-    private FileCharSinkFactory(@CheckForNull String initialString) {
+    private FileCharSinkFactory(@Nullable String initialString) {
       this.initialString = initialString;
     }
 
diff --git a/android/guava-tests/test/com/google/common/math/BigIntegerMathTest.java b/android/guava-tests/test/com/google/common/math/BigIntegerMathTest.java
index 170261b..2bfe3a3 100644
--- a/android/guava-tests/test/com/google/common/math/BigIntegerMathTest.java
+++ b/android/guava-tests/test/com/google/common/math/BigIntegerMathTest.java
@@ -40,7 +40,9 @@ import static java.util.Arrays.asList;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.NullPointerTester;
+import com.google.errorprone.annotations.CanIgnoreReturnValue;
 import java.math.BigDecimal;
 import java.math.BigInteger;
 import java.math.RoundingMode;
@@ -54,6 +56,7 @@ import junit.framework.TestCase;
  *
  * @author Louis Wasserman
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public class BigIntegerMathTest extends TestCase {
   public void testCeilingPowerOfTwo() {
@@ -110,6 +113,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testConstantSqrt2PrecomputedBits() {
     assertEquals(
@@ -213,6 +217,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10ZeroAlwaysThrows() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -224,6 +229,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10NegativeAlwaysThrows() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -235,6 +241,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10Floor() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -246,6 +253,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10Ceiling() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -258,6 +266,7 @@ public class BigIntegerMathTest extends TestCase {
   }
 
   // Relies on the correctness of log10(BigInteger, FLOOR).
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10Exact() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -272,6 +281,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10HalfUp() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -284,6 +294,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10HalfDown() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -297,6 +308,7 @@ public class BigIntegerMathTest extends TestCase {
   }
 
   // Relies on the correctness of log10(BigInteger, {HALF_UP,HALF_DOWN}).
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10HalfEven() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -308,6 +320,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10TrivialOnPowerOf10() {
     BigInteger x = BigInteger.TEN.pow(100);
@@ -316,6 +329,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtZeroAlwaysZero() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -323,6 +337,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtNegativeAlwaysThrows() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -334,6 +349,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtFloor() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -346,6 +362,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtCeiling() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -359,6 +376,7 @@ public class BigIntegerMathTest extends TestCase {
   }
 
   // Relies on the correctness of sqrt(BigInteger, FLOOR).
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtExact() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -374,6 +392,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtHalfUp() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -390,6 +409,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtHalfDown() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -407,6 +427,7 @@ public class BigIntegerMathTest extends TestCase {
   }
 
   // Relies on the correctness of sqrt(BigInteger, {HALF_UP,HALF_DOWN}).
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtHalfEven() {
     for (BigInteger x : POSITIVE_BIGINTEGER_CANDIDATES) {
@@ -418,6 +439,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   @AndroidIncompatible // slow
   public void testDivNonZero() {
@@ -438,6 +460,7 @@ public class BigIntegerMathTest extends TestCase {
   private static final BigInteger BAD_FOR_GINGERBREAD_P = new BigInteger("-9223372036854775808");
   private static final BigInteger BAD_FOR_GINGERBREAD_Q = new BigInteger("-4294967296");
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   @AndroidIncompatible // slow
   public void testDivNonZeroExact() {
@@ -469,6 +492,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testZeroDivIsAlwaysZero() {
     for (BigInteger q : NONZERO_BIGINTEGER_CANDIDATES) {
@@ -478,6 +502,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testDivByZeroAlwaysFails() {
     for (BigInteger p : ALL_BIGINTEGER_CANDIDATES) {
@@ -515,6 +540,7 @@ public class BigIntegerMathTest extends TestCase {
     runBinomialTest(0, 30);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // too slow
   public void testBinomialLarge() {
     runBinomialTest(31, 100);
@@ -548,6 +574,7 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   private static final class RoundToDoubleTester {
     private final BigInteger input;
@@ -558,6 +585,7 @@ public class BigIntegerMathTest extends TestCase {
       this.input = input;
     }
 
+    @CanIgnoreReturnValue
     RoundToDoubleTester setExpectation(double expectedValue, RoundingMode... modes) {
       for (RoundingMode mode : modes) {
         Double previous = expectedValues.put(mode, expectedValue);
@@ -568,6 +596,7 @@ public class BigIntegerMathTest extends TestCase {
       return this;
     }
 
+    @CanIgnoreReturnValue
     public RoundToDoubleTester roundUnnecessaryShouldThrow() {
       unnecessaryShouldThrow = true;
       return this;
@@ -598,16 +627,19 @@ public class BigIntegerMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_Zero() {
     new RoundToDoubleTester(BigInteger.ZERO).setExpectation(0.0, values()).test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_smallPositive() {
     new RoundToDoubleTester(BigInteger.valueOf(16)).setExpectation(16.0, values()).test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_maxPreciselyRepresentable() {
     new RoundToDoubleTester(BigInteger.valueOf(1L << 53))
@@ -615,6 +647,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_maxPreciselyRepresentablePlusOne() {
     double twoToThe53 = Math.pow(2, 53);
@@ -627,6 +660,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_twoToThe54PlusOne() {
     double twoToThe54 = Math.pow(2, 54);
@@ -639,6 +673,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_twoToThe54PlusThree() {
     double twoToThe54 = Math.pow(2, 54);
@@ -651,6 +686,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_twoToThe54PlusFour() {
     new RoundToDoubleTester(BigInteger.valueOf((1L << 54) + 4))
@@ -658,12 +694,14 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_maxDouble() {
     BigInteger maxDoubleAsBI = DoubleMath.roundToBigInteger(Double.MAX_VALUE, UNNECESSARY);
     new RoundToDoubleTester(maxDoubleAsBI).setExpectation(Double.MAX_VALUE, values()).test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_maxDoublePlusOne() {
     BigInteger maxDoubleAsBI =
@@ -675,6 +713,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_wayTooBig() {
     BigInteger bi = BigInteger.ONE.shiftLeft(2 * Double.MAX_EXPONENT);
@@ -685,11 +724,13 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_smallNegative() {
     new RoundToDoubleTester(BigInteger.valueOf(-16)).setExpectation(-16.0, values()).test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_minPreciselyRepresentable() {
     new RoundToDoubleTester(BigInteger.valueOf(-1L << 53))
@@ -697,6 +738,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_minPreciselyRepresentableMinusOne() {
     // the representable doubles are -2^53 and -2^53 - 2.
@@ -708,6 +750,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_negativeTwoToThe54MinusOne() {
     new RoundToDoubleTester(BigInteger.valueOf((-1L << 54) - 1))
@@ -717,6 +760,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_negativeTwoToThe54MinusThree() {
     new RoundToDoubleTester(BigInteger.valueOf((-1L << 54) - 3))
@@ -727,6 +771,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_negativeTwoToThe54MinusFour() {
     new RoundToDoubleTester(BigInteger.valueOf((-1L << 54) - 4))
@@ -734,12 +779,14 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_minDouble() {
     BigInteger minDoubleAsBI = DoubleMath.roundToBigInteger(-Double.MAX_VALUE, UNNECESSARY);
     new RoundToDoubleTester(minDoubleAsBI).setExpectation(-Double.MAX_VALUE, values()).test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_minDoubleMinusOne() {
     BigInteger minDoubleAsBI =
@@ -751,6 +798,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDouble_negativeWayTooBig() {
     BigInteger bi = BigInteger.ONE.shiftLeft(2 * Double.MAX_EXPONENT).negate();
@@ -761,6 +809,7 @@ public class BigIntegerMathTest extends TestCase {
         .test();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester tester = new NullPointerTester();
@@ -770,6 +819,7 @@ public class BigIntegerMathTest extends TestCase {
     tester.testAllPublicStaticMethods(BigIntegerMath.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // String.format
   private static void failFormat(String template, Object... args) {
     fail(String.format(template, args));
diff --git a/android/guava-tests/test/com/google/common/math/DoubleMathTest.java b/android/guava-tests/test/com/google/common/math/DoubleMathTest.java
index 724ae96..93de8c7 100644
--- a/android/guava-tests/test/com/google/common/math/DoubleMathTest.java
+++ b/android/guava-tests/test/com/google/common/math/DoubleMathTest.java
@@ -40,6 +40,7 @@ import static java.util.Arrays.asList;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.primitives.Doubles;
@@ -79,6 +80,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToInt(double, RoundingMode)
   public void testRoundIntegralDoubleToInt() {
     for (double d : INTEGRAL_DOUBLE_CANDIDATES) {
@@ -98,6 +100,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToInt(double, RoundingMode)
   public void testRoundFractionalDoubleToInt() {
     for (double d : FRACTIONAL_DOUBLE_CANDIDATES) {
@@ -120,6 +123,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToInt(double, RoundingMode)
   public void testRoundExactIntegralDoubleToInt() {
     for (double d : INTEGRAL_DOUBLE_CANDIDATES) {
@@ -137,6 +141,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToInt(double, RoundingMode)
   public void testRoundExactFractionalDoubleToIntFails() {
     for (double d : FRACTIONAL_DOUBLE_CANDIDATES) {
@@ -148,6 +153,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToInt(double, RoundingMode)
   public void testRoundNaNToIntAlwaysFails() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -159,6 +165,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToInt(double, RoundingMode)
   public void testRoundInfiniteToIntAlwaysFails() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -175,6 +182,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToLong(double, RoundingMode)
   public void testRoundIntegralDoubleToLong() {
     for (double d : INTEGRAL_DOUBLE_CANDIDATES) {
@@ -194,6 +202,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToLong(double, RoundingMode)
   public void testRoundFractionalDoubleToLong() {
     for (double d : FRACTIONAL_DOUBLE_CANDIDATES) {
@@ -213,6 +222,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToLong(double, RoundingMode)
   public void testRoundExactIntegralDoubleToLong() {
     for (double d : INTEGRAL_DOUBLE_CANDIDATES) {
@@ -231,6 +241,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToLong(double, RoundingMode)
   public void testRoundExactFractionalDoubleToLongFails() {
     for (double d : FRACTIONAL_DOUBLE_CANDIDATES) {
@@ -242,6 +253,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToLong(double, RoundingMode)
   public void testRoundNaNToLongAlwaysFails() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -253,6 +265,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToLong(double, RoundingMode)
   public void testRoundInfiniteToLongAlwaysFails() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -269,6 +282,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToBigInteger(double, RoundingMode)
   public void testRoundIntegralDoubleToBigInteger() {
     for (double d : INTEGRAL_DOUBLE_CANDIDATES) {
@@ -279,6 +293,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToBigInteger(double, RoundingMode)
   public void testRoundFractionalDoubleToBigInteger() {
     for (double d : FRACTIONAL_DOUBLE_CANDIDATES) {
@@ -289,6 +304,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToBigInteger(double, RoundingMode)
   public void testRoundExactIntegralDoubleToBigInteger() {
     for (double d : INTEGRAL_DOUBLE_CANDIDATES) {
@@ -297,6 +313,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToBigInteger(double, RoundingMode)
   public void testRoundExactFractionalDoubleToBigIntegerFails() {
     for (double d : FRACTIONAL_DOUBLE_CANDIDATES) {
@@ -308,6 +325,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToBigInteger(double, RoundingMode)
   public void testRoundNaNToBigIntegerAlwaysFails() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -319,6 +337,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToBigInteger(double, RoundingMode)
   public void testRoundInfiniteToBigIntegerAlwaysFails() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -335,6 +354,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.roundToBigInteger(double, RoundingMode)
   public void testRoundLog2Floor() {
     for (double d : POSITIVE_FINITE_DOUBLE_CANDIDATES) {
@@ -344,6 +364,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.log2(double, RoundingMode), StrictMath
   public void testRoundLog2Ceiling() {
     for (double d : POSITIVE_FINITE_DOUBLE_CANDIDATES) {
@@ -354,6 +375,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.log2(double, RoundingMode), StrictMath
   public void testRoundLog2Down() {
     for (double d : POSITIVE_FINITE_DOUBLE_CANDIDATES) {
@@ -370,6 +392,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.log2(double, RoundingMode), StrictMath
   public void testRoundLog2Up() {
     for (double d : POSITIVE_FINITE_DOUBLE_CANDIDATES) {
@@ -386,6 +409,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.log2(double, RoundingMode)
   public void testRoundLog2Half() {
     // We don't expect perfect rounding accuracy.
@@ -404,6 +428,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.log2(double, RoundingMode)
   public void testRoundLog2Exact() {
     for (double x : POSITIVE_FINITE_DOUBLE_CANDIDATES) {
@@ -418,6 +443,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.log2(double, RoundingMode)
   public void testRoundLog2ThrowsOnZerosInfinitiesAndNaN() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -432,6 +458,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.log2(double, RoundingMode)
   public void testRoundLog2ThrowsOnNegative() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -445,6 +472,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.isPowerOfTwo, DoubleMath.log2(double, RoundingMode), StrictMath
   public void testIsPowerOfTwoYes() {
     for (int i = -1074; i <= 1023; i++) {
@@ -452,6 +480,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.isPowerOfTwo, DoubleMath.log2(double, RoundingMode), StrictMath
   public void testIsPowerOfTwo() {
     for (double x : ALL_DOUBLE_CANDIDATES) {
@@ -464,6 +493,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // #trueLog2, Math.ulp
   public void testLog2Accuracy() {
     for (double d : POSITIVE_FINITE_DOUBLE_CANDIDATES) {
@@ -496,6 +526,7 @@ public class DoubleMathTest extends TestCase {
     assertTrue(Double.isNaN(DoubleMath.log2(Double.NaN)));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // StrictMath
   private strictfp double trueLog2(double d) {
     double trueLog2 = StrictMath.log(d) / StrictMath.log(2);
@@ -514,6 +545,7 @@ public class DoubleMathTest extends TestCase {
     return trueLog2;
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.isMathematicalInteger
   public void testIsMathematicalIntegerIntegral() {
     for (double d : INTEGRAL_DOUBLE_CANDIDATES) {
@@ -521,6 +553,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.isMathematicalInteger
   public void testIsMathematicalIntegerFractional() {
     for (double d : FRACTIONAL_DOUBLE_CANDIDATES) {
@@ -528,6 +561,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.isMathematicalInteger
   public void testIsMathematicalIntegerNotFinite() {
     for (double d : Arrays.asList(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NaN)) {
@@ -535,6 +569,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Math.ulp
   public void testFactorial() {
     for (int i = 0; i <= DoubleMath.MAX_FACTORIAL; i++) {
@@ -710,6 +745,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_doubleVarargs() {
     assertEquals(-1.375, DoubleMath.mean(1.1, -2.2, 4.4, -8.8), 1.0e-10);
@@ -726,18 +762,21 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_intVarargs() {
     assertEquals(-13.75, DoubleMath.mean(11, -22, 44, -88), 1.0e-10);
     assertEquals(11.0, DoubleMath.mean(11), 1.0e-10);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_longVarargs() {
     assertEquals(-13.75, DoubleMath.mean(11L, -22L, 44L, -88L), 1.0e-10);
     assertEquals(11.0, DoubleMath.mean(11L), 1.0e-10);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_emptyVarargs() {
     try {
@@ -747,6 +786,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_doubleIterable() {
     assertEquals(-1.375, DoubleMath.mean(ImmutableList.of(1.1, -2.2, 4.4, -8.8)), 1.0e-10);
@@ -768,6 +808,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_intIterable() {
     assertEquals(-13.75, DoubleMath.mean(ImmutableList.of(11, -22, 44, -88)), 1.0e-10);
@@ -779,6 +820,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_longIterable() {
     assertEquals(-13.75, DoubleMath.mean(ImmutableList.of(11L, -22L, 44L, -88L)), 1.0e-10);
@@ -790,6 +832,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_intIterator() {
     assertEquals(-13.75, DoubleMath.mean(ImmutableList.of(11, -22, 44, -88).iterator()), 1.0e-10);
@@ -801,6 +844,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // DoubleMath.mean
   public void testMean_longIterator() {
     assertEquals(
@@ -813,6 +857,7 @@ public class DoubleMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester tester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/math/IntMathTest.java b/android/guava-tests/test/com/google/common/math/IntMathTest.java
index 4db13ad..3058887 100644
--- a/android/guava-tests/test/com/google/common/math/IntMathTest.java
+++ b/android/guava-tests/test/com/google/common/math/IntMathTest.java
@@ -30,6 +30,7 @@ import static java.math.RoundingMode.UNNECESSARY;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.NullPointerTester;
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -110,6 +111,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // BigIntegerMath // TODO(cpovirk): GWT-enable BigIntegerMath
   public void testConstantMaxPowerOfSqrt2Unsigned() {
     assertEquals(
@@ -118,6 +120,7 @@ public class IntMathTest extends TestCase {
         /*actual=*/ IntMath.MAX_POWER_OF_SQRT2_UNSIGNED);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // pow()
   public void testConstantsPowersOf10() {
     for (int i = 0; i < IntMath.powersOf10.length - 1; i++) {
@@ -125,6 +128,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // BigIntegerMath // TODO(cpovirk): GWT-enable BigIntegerMath
   public void testMaxLog10ForLeadingZeros() {
     for (int i = 0; i < Integer.SIZE; i++) {
@@ -134,6 +138,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // BigIntegerMath // TODO(cpovirk): GWT-enable BigIntegerMath
   public void testConstantsHalfPowersOf10() {
     for (int i = 0; i < IntMath.halfPowersOf10.length; i++) {
@@ -160,6 +165,7 @@ public class IntMathTest extends TestCase {
                 2 * IntMath.biggestBinomials.length, IntMath.biggestBinomials.length)));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // sqrt
   public void testPowersSqrtMaxInt() {
     assertEquals(
@@ -180,6 +186,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.math.BigInteger
   public void testIsPowerOfTwo() {
     for (int x : ALL_INTEGER_CANDIDATES) {
@@ -212,7 +219,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
-  // Relies on the correctness of BigIntegrerMath.log2 for all modes except UNNECESSARY.
+  // Relies on the correctness of BigIntegerMath.log2 for all modes except UNNECESSARY.
   public void testLog2MatchesBigInteger() {
     for (int x : POSITIVE_INTEGER_CANDIDATES) {
       for (RoundingMode mode : ALL_SAFE_ROUNDING_MODES) {
@@ -235,6 +242,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // log10
   public void testLog10ZeroAlwaysThrows() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -246,6 +254,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // log10
   public void testLog10NegativeAlwaysThrows() {
     for (int x : NEGATIVE_INTEGER_CANDIDATES) {
@@ -260,6 +269,7 @@ public class IntMathTest extends TestCase {
   }
 
   // Relies on the correctness of BigIntegerMath.log10 for all modes except UNNECESSARY.
+  @J2ktIncompatible
   @GwtIncompatible // BigIntegerMath // TODO(cpovirk): GWT-enable BigIntegerMath
   public void testLog10MatchesBigInteger() {
     for (int x : POSITIVE_INTEGER_CANDIDATES) {
@@ -271,6 +281,7 @@ public class IntMathTest extends TestCase {
   }
 
   // Relies on the correctness of log10(int, FLOOR) and of pow(int, int).
+  @J2ktIncompatible
   @GwtIncompatible // pow()
   public void testLog10Exact() {
     for (int x : POSITIVE_INTEGER_CANDIDATES) {
@@ -285,6 +296,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // log10
   public void testLog10TrivialOnPowerOfTen() {
     int x = 1000000;
@@ -294,6 +306,7 @@ public class IntMathTest extends TestCase {
   }
 
   // Simple test to cover sqrt(0) for all types and all modes.
+  @J2ktIncompatible
   @GwtIncompatible // sqrt
   public void testSqrtZeroAlwaysZero() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -301,6 +314,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // sqrt
   public void testSqrtNegativeAlwaysThrows() {
     for (int x : NEGATIVE_INTEGER_CANDIDATES) {
@@ -315,6 +329,7 @@ public class IntMathTest extends TestCase {
   }
 
   /* Relies on the correctness of BigIntegerMath.sqrt for all modes except UNNECESSARY. */
+  @J2ktIncompatible
   @GwtIncompatible // BigIntegerMath // TODO(cpovirk): GWT-enable BigIntegerMath
   public void testSqrtMatchesBigInteger() {
     for (int x : POSITIVE_INTEGER_CANDIDATES) {
@@ -328,6 +343,7 @@ public class IntMathTest extends TestCase {
   }
 
   /* Relies on the correctness of sqrt(int, FLOOR). */
+  @J2ktIncompatible
   @GwtIncompatible // sqrt
   public void testSqrtExactMatchesFloorOrThrows() {
     for (int x : POSITIVE_INTEGER_CANDIDATES) {
@@ -343,6 +359,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // 2147483646^2 expected=4
   public void testPow() {
     for (int i : ALL_INTEGER_CANDIDATES) {
@@ -353,6 +370,7 @@ public class IntMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible // TODO(b/281519661): Fails 2147483646/-2147483648 expected:<1> but was:<-1>
   public void testDivNonZero() {
     for (int p : NONZERO_INTEGER_CANDIDATES) {
       for (int q : NONZERO_INTEGER_CANDIDATES) {
@@ -549,6 +567,7 @@ public class IntMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSaturatedAdd() {
     for (int a : ALL_INTEGER_CANDIDATES) {
@@ -560,6 +579,7 @@ public class IntMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSaturatedSubtract() {
     for (int a : ALL_INTEGER_CANDIDATES) {
@@ -575,6 +595,7 @@ public class IntMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSaturatedMultiply() {
     for (int a : ALL_INTEGER_CANDIDATES) {
@@ -589,6 +610,7 @@ public class IntMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSaturatedPow() {
     for (int a : ALL_INTEGER_CANDIDATES) {
@@ -674,6 +696,7 @@ public class IntMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // java.math.BigInteger
   public void testMean() {
     // Odd-sized ranges have an obvious mean
@@ -745,6 +768,7 @@ public class IntMathTest extends TestCase {
     return big.bitLength() <= 31;
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester tester = new NullPointerTester();
@@ -752,6 +776,7 @@ public class IntMathTest extends TestCase {
     tester.testAllPublicStaticMethods(IntMath.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // isPrime is GWT-incompatible
   public void testIsPrime() {
     // Defer correctness tests to Long.isPrime
diff --git a/android/guava-tests/test/com/google/common/math/LongMathTest.java b/android/guava-tests/test/com/google/common/math/LongMathTest.java
index e7f95d5..ee6ee1c 100644
--- a/android/guava-tests/test/com/google/common/math/LongMathTest.java
+++ b/android/guava-tests/test/com/google/common/math/LongMathTest.java
@@ -33,6 +33,7 @@ import static java.math.RoundingMode.UNNECESSARY;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.NullPointerTester;
 import java.math.BigDecimal;
 import java.math.BigInteger;
@@ -54,6 +55,7 @@ public class LongMathTest extends TestCase {
     assertFalse(LongMath.isPowerOfTwo(LongMath.MAX_SIGNED_POWER_OF_TWO * 2));
   }
 
+  @J2ktIncompatible // TODO(b/281519661): expected:<-2147483648> but was:<2147483648>
   public void testCeilingPowerOfTwo() {
     for (long x : POSITIVE_LONG_CANDIDATES) {
       BigInteger expectedResult = BigIntegerMath.ceilingPowerOfTwo(BigInteger.valueOf(x));
@@ -69,6 +71,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/281519661): expected:<-2147483648> but was:<2147483648>
   public void testFloorPowerOfTwo() {
     for (long x : POSITIVE_LONG_CANDIDATES) {
       BigInteger expectedResult = BigIntegerMath.floorPowerOfTwo(BigInteger.valueOf(x));
@@ -112,6 +115,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testConstantMaxPowerOfSqrt2Unsigned() {
     assertEquals(
@@ -120,6 +124,7 @@ public class LongMathTest extends TestCase {
         /*actual=*/ LongMath.MAX_POWER_OF_SQRT2_UNSIGNED);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // BigIntegerMath // TODO(cpovirk): GWT-enable BigIntegerMath
   public void testMaxLog10ForLeadingZeros() {
     for (int i = 0; i < Long.SIZE; i++) {
@@ -129,6 +134,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testConstantsPowersOf10() {
     for (int i = 0; i < LongMath.powersOf10.length; i++) {
@@ -141,6 +147,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testConstantsHalfPowersOf10() {
     for (int i = 0; i < LongMath.halfPowersOf10.length; i++) {
@@ -153,6 +160,7 @@ public class LongMathTest extends TestCase {
     assertTrue(nextBigger.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testConstantsSqrtMaxLong() {
     assertEquals(
@@ -160,6 +168,7 @@ public class LongMathTest extends TestCase {
         /*actual=*/ LongMath.FLOOR_SQRT_MAX_LONG);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testConstantsFactorials() {
     long expected = 1;
@@ -174,6 +183,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testConstantsBiggestBinomials() {
     for (int k = 0; k < LongMath.biggestBinomials.length; k++) {
@@ -189,6 +199,7 @@ public class LongMathTest extends TestCase {
     // 2 * k is the smallest value for which we don't replace k with (n-k).
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testConstantsBiggestSimpleBinomials() {
     for (int k = 0; k < LongMath.biggestSimpleBinomials.length; k++) {
@@ -227,6 +238,7 @@ public class LongMathTest extends TestCase {
   }
 
   // Throws an ArithmeticException if "the simple implementation" of binomial coefficients overflows
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   private long simpleBinomial(int n, int k) {
     long accum = 1;
@@ -237,6 +249,7 @@ public class LongMathTest extends TestCase {
     return accum;
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // java.math.BigInteger
   public void testIsPowerOfTwo() {
     for (long x : ALL_LONG_CANDIDATES) {
@@ -293,6 +306,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10ZeroAlwaysThrows() {
     for (RoundingMode mode : ALL_ROUNDING_MODES) {
@@ -304,6 +318,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10NegativeAlwaysThrows() {
     for (long x : NEGATIVE_LONG_CANDIDATES) {
@@ -318,6 +333,7 @@ public class LongMathTest extends TestCase {
   }
 
   // Relies on the correctness of BigIntegerMath.log10 for all modes except UNNECESSARY.
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10MatchesBigInteger() {
     for (long x : POSITIVE_LONG_CANDIDATES) {
@@ -328,6 +344,7 @@ public class LongMathTest extends TestCase {
   }
 
   // Relies on the correctness of log10(long, FLOOR) and of pow(long, int).
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10Exact() {
     for (long x : POSITIVE_LONG_CANDIDATES) {
@@ -344,6 +361,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testLog10TrivialOnPowerOf10() {
     long x = 1000000000000L;
@@ -352,6 +370,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtNegativeAlwaysThrows() {
     for (long x : NEGATIVE_LONG_CANDIDATES) {
@@ -366,6 +385,7 @@ public class LongMathTest extends TestCase {
   }
 
   // Relies on the correctness of BigIntegerMath.sqrt for all modes except UNNECESSARY.
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtMatchesBigInteger() {
     for (long x : POSITIVE_LONG_CANDIDATES) {
@@ -378,6 +398,7 @@ public class LongMathTest extends TestCase {
   }
 
   /* Relies on the correctness of sqrt(long, FLOOR). */
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSqrtExactMatchesFloorOrThrows() {
     for (long x : POSITIVE_LONG_CANDIDATES) {
@@ -393,6 +414,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testPow() {
     for (long i : ALL_LONG_CANDIDATES) {
@@ -402,6 +424,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   @AndroidIncompatible // TODO(cpovirk): File BigDecimal.divide() rounding bug.
   public void testDivNonZero() {
@@ -419,6 +442,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   @AndroidIncompatible // Bug in older versions of Android we test against, since fixed.
   public void testDivNonZeroExact() {
@@ -439,6 +463,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testZeroDivIsAlwaysZero() {
     for (long q : NONZERO_LONG_CANDIDATES) {
@@ -448,6 +473,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testDivByZeroAlwaysFails() {
     for (long p : ALL_LONG_CANDIDATES) {
@@ -461,6 +487,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testIntMod() {
     for (long x : ALL_LONG_CANDIDATES) {
@@ -470,6 +497,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testIntModNegativeModulusFails() {
     for (long x : ALL_LONG_CANDIDATES) {
@@ -483,6 +511,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testIntModZeroModulusFails() {
     for (long x : ALL_LONG_CANDIDATES) {
@@ -495,6 +524,7 @@ public class LongMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testMod() {
     for (long x : ALL_LONG_CANDIDATES) {
@@ -504,6 +534,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testModNegativeModulusFails() {
     for (long x : ALL_LONG_CANDIDATES) {
@@ -517,6 +548,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/281519661): expected:<14> but was:<2>
   public void testGCDExhaustive() {
     for (long a : POSITIVE_LONG_CANDIDATES) {
       for (long b : POSITIVE_LONG_CANDIDATES) {
@@ -525,6 +557,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testGCDZero() {
     for (long a : POSITIVE_LONG_CANDIDATES) {
@@ -534,6 +567,7 @@ public class LongMathTest extends TestCase {
     assertEquals(0, LongMath.gcd(0, 0));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testGCDNegativePositiveThrows() {
     for (long a : NEGATIVE_LONG_CANDIDATES) {
@@ -550,6 +584,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testGCDNegativeZeroThrows() {
     for (long a : NEGATIVE_LONG_CANDIDATES) {
@@ -585,6 +620,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   @AndroidIncompatible // slow
   public void testCheckedSubtract() {
@@ -637,6 +673,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testCheckedPow() {
     for (long b : ALL_LONG_CANDIDATES) {
@@ -658,6 +695,7 @@ public class LongMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSaturatedAdd() {
     for (long a : ALL_LONG_CANDIDATES) {
@@ -669,6 +707,7 @@ public class LongMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSaturatedSubtract() {
     for (long a : ALL_LONG_CANDIDATES) {
@@ -684,6 +723,7 @@ public class LongMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSaturatedMultiply() {
     for (long a : ALL_LONG_CANDIDATES) {
@@ -698,6 +738,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testSaturatedPow() {
     for (long a : ALL_LONG_CANDIDATES) {
@@ -715,6 +756,7 @@ public class LongMathTest extends TestCase {
   }
 
   // Depends on the correctness of BigIntegerMath.factorial.
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testFactorial() {
     for (int n = 0; n <= 50; n++) {
@@ -724,6 +766,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // TODO
   public void testFactorialNegative() {
     for (int n : NEGATIVE_INTEGER_CANDIDATES) {
@@ -736,6 +779,7 @@ public class LongMathTest extends TestCase {
   }
 
   // Depends on the correctness of BigIntegerMath.binomial.
+  @J2ktIncompatible // TODO(b/281519661): expected:<-2091005866> but was:<2203961430>
   public void testBinomial() {
     for (int n = 0; n <= 70; n++) {
       for (int k = 0; k <= n; k++) {
@@ -747,6 +791,7 @@ public class LongMathTest extends TestCase {
   }
 
 
+  @J2ktIncompatible
   @GwtIncompatible // Slow
   public void testBinomial_exhaustiveNotOverflowing() {
     // Tests all of the inputs to LongMath.binomial that won't cause it to overflow, that weren't
@@ -784,6 +829,7 @@ public class LongMathTest extends TestCase {
   }
 
 
+  @J2ktIncompatible
   @GwtIncompatible // far too slow
   public void testSqrtOfPerfectSquareAsDoubleIsPerfect() {
     // This takes just over a minute on my machine.
@@ -799,6 +845,7 @@ public class LongMathTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // java.math.BigInteger
   public void testMean() {
     // Odd-sized ranges have an obvious mean
@@ -883,6 +930,7 @@ public class LongMathTest extends TestCase {
     return big.longValue();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNullPointers() {
     NullPointerTester tester = new NullPointerTester();
@@ -891,6 +939,7 @@ public class LongMathTest extends TestCase {
     tester.testAllPublicStaticMethods(LongMath.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // isPrime is GWT-incompatible
   public void testIsPrimeSmall() {
     // Check the first 1000 integers
@@ -899,6 +948,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // isPrime is GWT-incompatible
   public void testIsPrimeManyConstants() {
     // Test the thorough test inputs, which also includes special constants in the Miller-Rabin
@@ -908,6 +958,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // isPrime is GWT-incompatible
   public void testIsPrimeOnUniformRandom() {
     Random rand = new Random(1);
@@ -920,6 +971,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // isPrime is GWT-incompatible
   public void testIsPrimeOnRandomPrimes() {
     Random rand = new Random(1);
@@ -931,6 +983,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // isPrime is GWT-incompatible
   public void testIsPrimeOnRandomComposites() {
     Random rand = new Random(1);
@@ -943,6 +996,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // isPrime is GWT-incompatible
   public void testIsPrimeThrowsOnNegative() {
     try {
@@ -988,6 +1042,7 @@ public class LongMathTest extends TestCase {
     Long.MIN_VALUE
   };
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDoubleAgainstBigInteger() {
     for (RoundingMode roundingMode : EnumSet.complementOf(EnumSet.of(UNNECESSARY))) {
@@ -998,6 +1053,7 @@ public class LongMathTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testRoundToDoubleAgainstBigIntegerUnnecessary() {
     for (long candidate : roundToDoubleTestCandidates) {
diff --git a/android/guava-tests/test/com/google/common/math/MathPreconditionsTest.java b/android/guava-tests/test/com/google/common/math/MathPreconditionsTest.java
index 5dbe017..46c70a3 100644
--- a/android/guava-tests/test/com/google/common/math/MathPreconditionsTest.java
+++ b/android/guava-tests/test/com/google/common/math/MathPreconditionsTest.java
@@ -103,7 +103,7 @@ public class MathPreconditionsTest extends TestCase {
     }
   }
 
-  public void testCheckPositive_postiveBigInteger() {
+  public void testCheckPositive_positiveBigInteger() {
     MathPreconditions.checkPositive("BigInteger", BigInteger.ONE);
   }
 
@@ -251,7 +251,7 @@ public class MathPreconditionsTest extends TestCase {
     }
   }
 
-  public void testCheckRoundingUnnnecessary_success() {
+  public void testCheckRoundingUnnecessary_success() {
     MathPreconditions.checkRoundingUnnecessary(true);
   }
 
diff --git a/android/guava-tests/test/com/google/common/math/MathTesting.java b/android/guava-tests/test/com/google/common/math/MathTesting.java
index 6b74f11..0e49835 100644
--- a/android/guava-tests/test/com/google/common/math/MathTesting.java
+++ b/android/guava-tests/test/com/google/common/math/MathTesting.java
@@ -150,7 +150,7 @@ public class MathTesting {
 
   static {
     ImmutableSet.Builder<Long> longValues = ImmutableSet.builder();
-    // First of all add all the integer candidate values.
+    // First add all the integer candidate values.
     longValues.addAll(Iterables.transform(POSITIVE_INTEGER_CANDIDATES, TO_LONG));
     // Add boundary values manually to avoid over/under flow (this covers 2^N for 31 and 63).
     longValues.add(Integer.MAX_VALUE + 1L, Long.MAX_VALUE - 1L, Long.MAX_VALUE);
@@ -185,7 +185,7 @@ public class MathTesting {
 
   static {
     ImmutableSet.Builder<BigInteger> bigValues = ImmutableSet.builder();
-    // First of all add all the long candidate values.
+    // First add all the long candidate values.
     bigValues.addAll(Iterables.transform(POSITIVE_LONG_CANDIDATES, TO_BIGINTEGER));
     // Add boundary values manually to avoid over/under flow.
     bigValues.add(BigInteger.valueOf(Long.MAX_VALUE).add(ONE));
diff --git a/android/guava-tests/test/com/google/common/math/QuantilesTest.java b/android/guava-tests/test/com/google/common/math/QuantilesTest.java
index 77c7020..9c8d8e6 100644
--- a/android/guava-tests/test/com/google/common/math/QuantilesTest.java
+++ b/android/guava-tests/test/com/google/common/math/QuantilesTest.java
@@ -41,8 +41,8 @@ import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
-import javax.annotation.CheckForNull;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link Quantiles}.
@@ -92,7 +92,7 @@ public class QuantilesTest extends TestCase {
       Correspondence.from(
           new BinaryPredicate<Double, Double>() {
             @Override
-            public boolean apply(@CheckForNull Double actual, @CheckForNull Double expected) {
+            public boolean apply(@Nullable Double actual, @Nullable Double expected) {
               // Test for equality to allow non-finite values to match; otherwise, use the finite
               // test.
               return actual.equals(expected)
@@ -424,12 +424,12 @@ public class QuantilesTest extends TestCase {
             1, 1.5,
             2, 2.0,
             8, 5.0,
-            9, POSITIVE_INFINITY, // interpolating between 5.0 and POSITIVE_INFNINITY
+            9, POSITIVE_INFINITY, // interpolating between 5.0 and POSITIVE_INFINITY
             10, POSITIVE_INFINITY);
   }
 
   public void testScale_index_compute_doubleCollection_positiveInfinity() {
-    // interpolating between 5.0 and POSITIVE_INFNINITY
+    // interpolating between 5.0 and POSITIVE_INFINITY
     assertThat(Quantiles.scale(10).index(9).compute(ONE_TO_FIVE_AND_POSITIVE_INFINITY))
         .isPositiveInfinity();
   }
@@ -442,7 +442,7 @@ public class QuantilesTest extends TestCase {
         .comparingValuesUsing(QUANTILE_CORRESPONDENCE)
         .containsExactly(
             0, NEGATIVE_INFINITY,
-            1, NEGATIVE_INFINITY, // interpolating between NEGATIVE_INFNINITY and 1.0
+            1, NEGATIVE_INFINITY, // interpolating between NEGATIVE_INFINITY and 1.0
             2, 1.0,
             8, 4.0,
             9, 4.5,
@@ -450,7 +450,7 @@ public class QuantilesTest extends TestCase {
   }
 
   public void testScale_index_compute_doubleCollection_negativeInfinity() {
-    // interpolating between NEGATIVE_INFNINITY and 1.0
+    // interpolating between NEGATIVE_INFINITY and 1.0
     assertThat(Quantiles.scale(10).index(1).compute(ONE_TO_FIVE_AND_NEGATIVE_INFINITY))
         .isNegativeInfinity();
   }
@@ -540,7 +540,7 @@ public class QuantilesTest extends TestCase {
 
     // Assert that the dataset contains the same elements after the in-place computation (although
     // they may be reordered). We only do this for one index rather than for all indexes, as it is
-    // quite expensives (quadratic in the size of PSEUDORANDOM_DATASET).
+    // quite expensive (quadratic in the size of PSEUDORANDOM_DATASET).
     double[] dataset = Doubles.toArray(PSEUDORANDOM_DATASET);
     @SuppressWarnings("unused")
     double actual = percentiles().index(33).computeInPlace(dataset);
diff --git a/android/guava-tests/test/com/google/common/math/StatsTesting.java b/android/guava-tests/test/com/google/common/math/StatsTesting.java
index 12689d3..dddf20f 100644
--- a/android/guava-tests/test/com/google/common/math/StatsTesting.java
+++ b/android/guava-tests/test/com/google/common/math/StatsTesting.java
@@ -63,7 +63,7 @@ class StatsTesting {
           + (-56.78 - TWO_VALUES_MEAN) * (-789.012 - OTHER_TWO_VALUES_MEAN);
 
   /**
-   * Helper class for testing with non-finite values. {@link #ALL_MANY_VALUES} gives a number
+   * Helper class for testing with non-finite values. {@link #ALL_MANY_VALUES} gives a number of
    * instances with many combinations of finite and non-finite values. All have {@link
    * #MANY_VALUES_COUNT} values. If all the values are finite then the mean is {@link
    * #MANY_VALUES_MEAN} and the sum-of-squares-of-deltas is {@link
@@ -367,7 +367,7 @@ class StatsTesting {
   }
 
   /**
-   * Asserts that {@code transformation} is diagonal (i.e. neither horizontal or vertical) and
+   * Asserts that {@code transformation} is diagonal (i.e. neither horizontal nor vertical) and
    * passes through both {@code (x1, y1)} and {@code (x1 + xDelta, y1 + yDelta)}. Includes
    * assertions about all the public instance methods of {@link LinearTransformation} (on both
    * {@code transformation} and its inverse). Since the transformation is expected to be diagonal,
diff --git a/android/guava-tests/test/com/google/common/math/TestPlatform.java b/android/guava-tests/test/com/google/common/math/TestPlatform.java
index 03eb2ec..86d8e50 100644
--- a/android/guava-tests/test/com/google/common/math/TestPlatform.java
+++ b/android/guava-tests/test/com/google/common/math/TestPlatform.java
@@ -26,6 +26,6 @@ class TestPlatform {
   }
 
   static boolean isAndroid() {
-    return System.getProperty("java.runtime.name").contains("Android");
+    return System.getProperty("java.runtime.name", "").contains("Android");
   }
 }
diff --git a/android/guava-tests/test/com/google/common/net/HostAndPortTest.java b/android/guava-tests/test/com/google/common/net/HostAndPortTest.java
index 65e8096..f10cd16 100644
--- a/android/guava-tests/test/com/google/common/net/HostAndPortTest.java
+++ b/android/guava-tests/test/com/google/common/net/HostAndPortTest.java
@@ -20,6 +20,7 @@ import com.google.common.annotations.GwtCompatible;
 import com.google.common.testing.EqualsTester;
 import com.google.common.testing.SerializableTester;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link HostAndPort}
@@ -102,7 +103,7 @@ public class HostAndPortTest extends TestCase {
   private static void checkFromStringCase(
       String hpString,
       int defaultPort,
-      String expectHost,
+      @Nullable String expectHost,
       int expectPort,
       boolean expectHasExplicitPort) {
     HostAndPort hp;
diff --git a/android/guava-tests/test/com/google/common/net/HttpHeadersTest.java b/android/guava-tests/test/com/google/common/net/HttpHeadersTest.java
index 90bb0c8..ef32ccf 100644
--- a/android/guava-tests/test/com/google/common/net/HttpHeadersTest.java
+++ b/android/guava-tests/test/com/google/common/net/HttpHeadersTest.java
@@ -48,7 +48,7 @@ public class HttpHeadersTest extends TestCase {
             .put("SEC_WEBSOCKET_VERSION", "Sec-WebSocket-Version")
             .put("X_WEBKIT_CSP", "X-WebKit-CSP")
             .put("X_WEBKIT_CSP_REPORT_ONLY", "X-WebKit-CSP-Report-Only")
-            .build();
+            .buildOrThrow();
     ImmutableSet<String> uppercaseAcronyms =
         ImmutableSet.of(
             "CH", "ID", "DNT", "DNS", "DPR", "ECT", "HTTP2", "IP", "MD5", "P3P", "RTT", "TE", "UA",
diff --git a/android/guava-tests/test/com/google/common/net/InetAddressesTest.java b/android/guava-tests/test/com/google/common/net/InetAddressesTest.java
index be77e7b..7d070e4 100644
--- a/android/guava-tests/test/com/google/common/net/InetAddressesTest.java
+++ b/android/guava-tests/test/com/google/common/net/InetAddressesTest.java
@@ -645,7 +645,7 @@ public class InetAddressesTest extends TestCase {
             InetAddresses.getCoercedIPv4Address(
                 InetAddresses.forString("2001:0000:4136:e378:8000:63bf:3fff:fdd3")));
 
-    // 2 Teredo addresses NOT differing in the their embedded IPv4 addresses should hash to the same
+    // 2 Teredo addresses NOT differing in their embedded IPv4 addresses should hash to the same
     // value.
     assertThat(
             InetAddresses.getCoercedIPv4Address(
diff --git a/android/guava-tests/test/com/google/common/net/PercentEscaperTest.java b/android/guava-tests/test/com/google/common/net/PercentEscaperTest.java
index e600e4c..a8b6e25 100644
--- a/android/guava-tests/test/com/google/common/net/PercentEscaperTest.java
+++ b/android/guava-tests/test/com/google/common/net/PercentEscaperTest.java
@@ -45,7 +45,7 @@ public class PercentEscaperTest extends TestCase {
       }
     }
 
-    // Testing mutlibyte escape sequences
+    // Testing multibyte escape sequences
     assertEscaping(e, "%00", '\u0000'); // nul
     assertEscaping(e, "%7F", '\u007f'); // del
     assertEscaping(e, "%C2%80", '\u0080'); // xx-00010,x-000000
diff --git a/android/guava-tests/test/com/google/common/primitives/BooleansTest.java b/android/guava-tests/test/com/google/common/primitives/BooleansTest.java
index c4367fa..1b39ef7 100644
--- a/android/guava-tests/test/com/google/common/primitives/BooleansTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/BooleansTest.java
@@ -21,6 +21,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
 import com.google.common.testing.SerializableTester;
@@ -30,6 +31,7 @@ import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Booleans}.
@@ -37,6 +39,7 @@ import junit.framework.TestCase;
  * @author Kevin Bourrillion
  */
 @GwtCompatible(emulated = true)
+@ElementTypesAreNonnullByDefault
 public class BooleansTest extends TestCase {
   private static final boolean[] EMPTY = {};
   private static final boolean[] ARRAY_FALSE = {false};
@@ -46,6 +49,7 @@ public class BooleansTest extends TestCase {
 
   private static final boolean[] VALUES = {false, true};
 
+  @J2ktIncompatible // TODO(b/285538920): Fix and enable.
   public void testHashCode() {
     assertThat(Booleans.hashCode(true)).isEqualTo(Boolean.TRUE.hashCode());
     assertThat(Booleans.hashCode(false)).isEqualTo(Boolean.FALSE.hashCode());
@@ -172,6 +176,7 @@ public class BooleansTest extends TestCase {
     Helpers.testComparator(comparator, ordered);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testLexicographicalComparatorSerializable() {
     Comparator<boolean[]> comparator = Booleans.lexicographicalComparator();
@@ -476,7 +481,7 @@ public class BooleansTest extends TestCase {
   }
 
   public void testToArray_withNull() {
-    List<Boolean> list = Arrays.asList(false, true, null);
+    List<@Nullable Boolean> list = Arrays.asList(false, true, null);
     try {
       Booleans.toArray(list);
       fail();
@@ -570,6 +575,20 @@ public class BooleansTest extends TestCase {
     }
   }
 
+  public void testAsListCanonicalValues() {
+    List<Boolean> list = Booleans.asList(true, false);
+    assertThat(list.get(0)).isSameInstanceAs(true);
+    assertThat(list.get(1)).isSameInstanceAs(false);
+    @SuppressWarnings("deprecation")
+    Boolean anotherTrue = new Boolean(true);
+    @SuppressWarnings("deprecation")
+    Boolean anotherFalse = new Boolean(false);
+    list.set(0, anotherTrue);
+    assertThat(list.get(0)).isSameInstanceAs(true);
+    list.set(1, anotherFalse);
+    assertThat(list.get(1)).isSameInstanceAs(false);
+  }
+
   public void testCountTrue() {
     assertThat(Booleans.countTrue()).isEqualTo(0);
     assertThat(Booleans.countTrue(false)).isEqualTo(0);
@@ -578,6 +597,7 @@ public class BooleansTest extends TestCase {
     assertThat(Booleans.countTrue(false, false, true, false, false)).isEqualTo(1);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(Booleans.class);
diff --git a/android/guava-tests/test/com/google/common/primitives/ByteArrayAsListTest.java b/android/guava-tests/test/com/google/common/primitives/ByteArrayAsListTest.java
index c3d0be1..c7e6936 100644
--- a/android/guava-tests/test/com/google/common/primitives/ByteArrayAsListTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/ByteArrayAsListTest.java
@@ -20,6 +20,7 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
 import com.google.common.collect.testing.SampleElements;
@@ -48,6 +49,7 @@ public class ByteArrayAsListTest extends TestCase {
     return Bytes.asList(temp);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Byte>> builders =
diff --git a/android/guava-tests/test/com/google/common/primitives/BytesTest.java b/android/guava-tests/test/com/google/common/primitives/BytesTest.java
index da06a34..55302d7 100644
--- a/android/guava-tests/test/com/google/common/primitives/BytesTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/BytesTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
 import java.util.Arrays;
@@ -27,12 +28,14 @@ import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Bytes}.
  *
  * @author Kevin Bourrillion
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public class BytesTest extends TestCase {
   private static final byte[] EMPTY = {};
@@ -182,7 +185,7 @@ public class BytesTest extends TestCase {
   }
 
   public void testToArray_withNull() {
-    List<Byte> list = Arrays.asList((byte) 0, (byte) 1, null);
+    List<@Nullable Byte> list = Arrays.asList((byte) 0, (byte) 1, null);
     try {
       Bytes.toArray(list);
       fail();
@@ -208,6 +211,7 @@ public class BytesTest extends TestCase {
     assertThat(Bytes.toArray(doubles)).isEqualTo(array);
   }
 
+  @J2ktIncompatible // TODO(b/278877942): Enable
   public void testAsList_isAView() {
     byte[] array = {(byte) 0, (byte) 1};
     List<Byte> list = Bytes.asList(array);
@@ -367,6 +371,7 @@ public class BytesTest extends TestCase {
     testRotate(new byte[] {0, 1, 2, 3, 4, 5, 6}, 3, 3, 7, new byte[] {0, 1, 2, 4, 5, 6, 3});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(Bytes.class);
diff --git a/android/guava-tests/test/com/google/common/primitives/CharArrayAsListTest.java b/android/guava-tests/test/com/google/common/primitives/CharArrayAsListTest.java
index fa2a53d..7e521f1 100644
--- a/android/guava-tests/test/com/google/common/primitives/CharArrayAsListTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/CharArrayAsListTest.java
@@ -20,6 +20,7 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
 import com.google.common.collect.testing.SampleElements;
@@ -48,6 +49,7 @@ public class CharArrayAsListTest extends TestCase {
     return Chars.asList(temp);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Character>> builders =
diff --git a/android/guava-tests/test/com/google/common/primitives/CharsTest.java b/android/guava-tests/test/com/google/common/primitives/CharsTest.java
index 3f1d415..7a6280f 100644
--- a/android/guava-tests/test/com/google/common/primitives/CharsTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/CharsTest.java
@@ -21,6 +21,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
 import com.google.common.testing.SerializableTester;
@@ -31,6 +32,7 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.Locale;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Chars}.
@@ -38,6 +40,7 @@ import junit.framework.TestCase;
  * @author Kevin Bourrillion
  */
 @GwtCompatible(emulated = true)
+@ElementTypesAreNonnullByDefault
 @SuppressWarnings("cast") // redundant casts are intentional and harmless
 public class CharsTest extends TestCase {
   private static final char[] EMPTY = {};
@@ -86,6 +89,7 @@ public class CharsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285538920): Fix and enable.
   public void testCompare() {
     for (char x : VALUES) {
       for (char y : VALUES) {
@@ -221,12 +225,14 @@ public class CharsTest extends TestCase {
         .isEqualTo(new char[] {(char) 1, (char) 2, (char) 3, (char) 4});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Chars.fromByteArray
   public void testFromByteArray() {
     assertThat(Chars.fromByteArray(new byte[] {0x23, 0x45, (byte) 0xDC})).isEqualTo('\u2345');
     assertThat(Chars.fromByteArray(new byte[] {(byte) 0xFE, (byte) 0xDC})).isEqualTo('\uFEDC');
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Chars.fromByteArray
   public void testFromByteArrayFails() {
     try {
@@ -236,12 +242,14 @@ public class CharsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Chars.fromBytes
   public void testFromBytes() {
     assertThat(Chars.fromBytes((byte) 0x23, (byte) 0x45)).isEqualTo('\u2345');
     assertThat(Chars.fromBytes((byte) 0xFE, (byte) 0xDC)).isEqualTo('\uFEDC');
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Chars.fromByteArray, Chars.toByteArray
   public void testByteArrayRoundTrips() {
     char c = 0;
@@ -269,6 +277,7 @@ public class CharsTest extends TestCase {
     assertThat(c).isEqualTo((char) 0); // sanity check
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Chars.fromByteArray, Chars.toByteArray
   public void testByteArrayRoundTripsFails() {
     try {
@@ -324,6 +333,7 @@ public class CharsTest extends TestCase {
     Helpers.testComparator(comparator, ordered);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testLexicographicalComparatorSerializable() {
     Comparator<char[]> comparator = Chars.lexicographicalComparator();
@@ -618,7 +628,7 @@ public class CharsTest extends TestCase {
   }
 
   public void testToArray_withNull() {
-    List<Character> list = Arrays.asList((char) 0, (char) 1, null);
+    List<@Nullable Character> list = Arrays.asList((char) 0, (char) 1, null);
     try {
       Chars.toArray(list);
       fail();
@@ -626,6 +636,7 @@ public class CharsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // b/285319375
   public void testAsList_isAView() {
     char[] array = {(char) 0, (char) 1};
     List<Character> list = Chars.asList(array);
@@ -659,6 +670,7 @@ public class CharsTest extends TestCase {
     assertThat(Chars.asList(EMPTY)).isSameInstanceAs(Collections.emptyList());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(Chars.class);
diff --git a/android/guava-tests/test/com/google/common/primitives/DoubleArrayAsListTest.java b/android/guava-tests/test/com/google/common/primitives/DoubleArrayAsListTest.java
index 23a7ca1..e7cd4f3 100644
--- a/android/guava-tests/test/com/google/common/primitives/DoubleArrayAsListTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/DoubleArrayAsListTest.java
@@ -20,6 +20,7 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
 import com.google.common.collect.testing.SampleElements;
@@ -48,12 +49,13 @@ public class DoubleArrayAsListTest extends TestCase {
     return Doubles.asList(temp);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Double>> builders =
         ImmutableList.of(
             ListTestSuiteBuilder.using(new DoublesAsListGenerator()).named("Doubles.asList"),
-            ListTestSuiteBuilder.using(new DoublsAsListHeadSubListGenerator())
+            ListTestSuiteBuilder.using(new DoublesAsListHeadSubListGenerator())
                 .named("Doubles.asList, head subList"),
             ListTestSuiteBuilder.using(new DoublesAsListTailSubListGenerator())
                 .named("Doubles.asList, tail subList"),
@@ -84,7 +86,7 @@ public class DoubleArrayAsListTest extends TestCase {
     }
   }
 
-  public static final class DoublsAsListHeadSubListGenerator extends TestDoubleListGenerator {
+  public static final class DoublesAsListHeadSubListGenerator extends TestDoubleListGenerator {
     @Override
     protected List<Double> create(Double[] elements) {
       Double[] suffix = {Double.MIN_VALUE, Double.MAX_VALUE};
diff --git a/android/guava-tests/test/com/google/common/primitives/DoublesTest.java b/android/guava-tests/test/com/google/common/primitives/DoublesTest.java
index 052de39..2483f42 100644
--- a/android/guava-tests/test/com/google/common/primitives/DoublesTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/DoublesTest.java
@@ -22,6 +22,7 @@ import static java.lang.Double.NaN;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.base.Converter;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.Helpers;
@@ -34,12 +35,14 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.regex.Pattern;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Doubles}.
  *
  * @author Kevin Bourrillion
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public class DoublesTest extends TestCase {
   private static final double[] EMPTY = {};
@@ -204,6 +207,7 @@ public class DoublesTest extends TestCase {
     assertThat(Doubles.lastIndexOf(new double[] {NaN, 5.0}, NaN)).isEqualTo(-1);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testMax_noArgs() {
     try {
@@ -227,6 +231,7 @@ public class DoublesTest extends TestCase {
     assertThat(Double.isNaN(Doubles.max(VALUES))).isTrue();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testMin_noArgs() {
     try {
@@ -302,6 +307,7 @@ public class DoublesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Double.toString returns different value in GWT.
   public void testJoin() {
     assertThat(Doubles.join(",", EMPTY)).isEmpty();
@@ -500,12 +506,14 @@ public class DoublesTest extends TestCase {
         new double[] {-1, 1, Double.NaN, -2, 2}, 1, 4, new double[] {-1, Double.NaN, 1, -2, 2});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testLexicographicalComparatorSerializable() {
     Comparator<double[]> comparator = Doubles.lexicographicalComparator();
     assertThat(SerializableTester.reserialize(comparator)).isSameInstanceAs(comparator);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testStringConverterSerialization() {
     SerializableTester.reserializeAndAssert(Doubles.stringConverter());
@@ -543,7 +551,7 @@ public class DoublesTest extends TestCase {
   }
 
   public void testToArray_withNull() {
-    List<Double> list = Arrays.asList((double) 0, (double) 1, null);
+    List<@Nullable Double> list = Arrays.asList((double) 0, (double) 1, null);
     try {
       Doubles.toArray(list);
       fail();
@@ -569,6 +577,7 @@ public class DoublesTest extends TestCase {
     assertThat(Doubles.toArray(doubles)).isEqualTo(array);
   }
 
+  @J2ktIncompatible // b/285319375
   public void testAsList_isAView() {
     double[] array = {(double) 0, (double) 1};
     List<Double> list = Doubles.asList(array);
@@ -607,7 +616,7 @@ public class DoublesTest extends TestCase {
    * A reference implementation for {@code tryParse} that just catches the exception from {@link
    * Double#valueOf}.
    */
-  private static Double referenceTryParse(String input) {
+  private static @Nullable Double referenceTryParse(String input) {
     if (input.trim().length() < input.length()) {
       return null;
     }
@@ -618,6 +627,7 @@ public class DoublesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   private static void checkTryParse(String input) {
     Double expected = referenceTryParse(input);
@@ -636,6 +646,7 @@ public class DoublesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   private static void checkTryParse(double expected, String input) {
     assertThat(Doubles.tryParse(input)).isEqualTo(Double.valueOf(expected));
@@ -645,6 +656,7 @@ public class DoublesTest extends TestCase {
                 Doubles.FLOATING_POINT_PATTERN.pattern(), Doubles.FLOATING_POINT_PATTERN.flags()));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   public void testTryParseHex() {
     for (String signChar : ImmutableList.of("", "+", "-")) {
@@ -666,6 +678,7 @@ public class DoublesTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   public void testTryParseAllCodePoints() {
     // Exercise non-ASCII digit test cases and the like.
@@ -676,6 +689,7 @@ public class DoublesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   public void testTryParseOfToStringIsOriginal() {
     for (double d : NUMBERS) {
@@ -683,6 +697,7 @@ public class DoublesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   public void testTryParseOfToHexStringIsOriginal() {
     for (double d : NUMBERS) {
@@ -690,6 +705,7 @@ public class DoublesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   public void testTryParseNaN() {
     checkTryParse("NaN");
@@ -697,6 +713,7 @@ public class DoublesTest extends TestCase {
     checkTryParse("-NaN");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   public void testTryParseInfinity() {
     checkTryParse(Double.POSITIVE_INFINITY, "Infinity");
@@ -721,6 +738,7 @@ public class DoublesTest extends TestCase {
     "InfinityF"
   };
 
+  @J2ktIncompatible
   @GwtIncompatible // Doubles.tryParse
   public void testTryParseFailures() {
     for (String badInput : BAD_TRY_PARSE_INPUTS) {
@@ -734,6 +752,7 @@ public class DoublesTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(Doubles.class);
@@ -764,6 +783,7 @@ public class DoublesTest extends TestCase {
     assertThat(Doubles.stringConverter().reverse().convert(null)).isNull();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Double.toString returns different value in GWT.
   public void testStringConverter_reverse() {
     Converter<String, Double> converter = Doubles.stringConverter();
@@ -774,12 +794,14 @@ public class DoublesTest extends TestCase {
     assertThat(converter.reverse().convert(1e-6)).isEqualTo("1.0E-6");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testStringConverter_nullPointerTester() throws Exception {
     NullPointerTester tester = new NullPointerTester();
     tester.testAllPublicInstanceMethods(Doubles.stringConverter());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testTryParse_withNullNoGwt() {
     assertThat(Doubles.tryParse("null")).isNull();
diff --git a/android/guava-tests/test/com/google/common/primitives/FloatArrayAsListTest.java b/android/guava-tests/test/com/google/common/primitives/FloatArrayAsListTest.java
index 233a021..c70a8b5 100644
--- a/android/guava-tests/test/com/google/common/primitives/FloatArrayAsListTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/FloatArrayAsListTest.java
@@ -20,6 +20,7 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
 import com.google.common.collect.testing.SampleElements;
@@ -48,6 +49,7 @@ public class FloatArrayAsListTest extends TestCase {
     return Floats.asList(temp);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Float>> builders =
diff --git a/android/guava-tests/test/com/google/common/primitives/FloatsTest.java b/android/guava-tests/test/com/google/common/primitives/FloatsTest.java
index 5b72460..4a1e8fb 100644
--- a/android/guava-tests/test/com/google/common/primitives/FloatsTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/FloatsTest.java
@@ -22,6 +22,7 @@ import static java.lang.Float.NaN;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.base.Converter;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.Helpers;
@@ -33,12 +34,14 @@ import java.util.Collections;
 import java.util.Comparator;
 import java.util.List;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Floats}.
  *
  * @author Kevin Bourrillion
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 public class FloatsTest extends TestCase {
   private static final float[] EMPTY = {};
@@ -194,6 +197,7 @@ public class FloatsTest extends TestCase {
     assertThat(Floats.lastIndexOf(new float[] {NaN, 5f}, NaN)).isEqualTo(-1);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testMax_noArgs() {
     try {
@@ -216,6 +220,7 @@ public class FloatsTest extends TestCase {
     assertThat(Float.isNaN(Floats.max(VALUES))).isTrue();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testMin_noArgs() {
     try {
@@ -288,6 +293,7 @@ public class FloatsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Float.toString returns different value in GWT.
   public void testJoin() {
     assertThat(Floats.join(",", EMPTY)).isEmpty();
@@ -313,6 +319,7 @@ public class FloatsTest extends TestCase {
     Helpers.testComparator(comparator, ordered);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testLexicographicalComparatorSerializable() {
     Comparator<float[]> comparator = Floats.lexicographicalComparator();
@@ -485,6 +492,7 @@ public class FloatsTest extends TestCase {
         new float[] {-1, 1, Float.NaN, -2, 2}, 1, 4, new float[] {-1, Float.NaN, 1, -2, 2});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testStringConverterSerialization() {
     SerializableTester.reserializeAndAssert(Floats.stringConverter());
@@ -522,7 +530,7 @@ public class FloatsTest extends TestCase {
   }
 
   public void testToArray_withNull() {
-    List<Float> list = Arrays.asList((float) 0, (float) 1, null);
+    List<@Nullable Float> list = Arrays.asList((float) 0, (float) 1, null);
     try {
       Floats.toArray(list);
       fail();
@@ -548,6 +556,7 @@ public class FloatsTest extends TestCase {
     assertThat(Floats.toArray(doubles)).isEqualTo(array);
   }
 
+  @J2ktIncompatible // b/285319375
   public void testAsList_isAView() {
     float[] array = {(float) 0, (float) 1};
     List<Float> list = Floats.asList(array);
@@ -585,7 +594,7 @@ public class FloatsTest extends TestCase {
    * A reference implementation for {@code tryParse} that just catches the exception from {@link
    * Float#valueOf}.
    */
-  private static Float referenceTryParse(String input) {
+  private static @Nullable Float referenceTryParse(String input) {
     if (input.trim().length() < input.length()) {
       return null;
     }
@@ -596,16 +605,19 @@ public class FloatsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   private static void checkTryParse(String input) {
     assertThat(Floats.tryParse(input)).isEqualTo(referenceTryParse(input));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   private static void checkTryParse(float expected, String input) {
     assertThat(Floats.tryParse(input)).isEqualTo(Float.valueOf(expected));
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   public void testTryParseHex() {
     for (String signChar : ImmutableList.of("", "+", "-")) {
@@ -627,6 +639,7 @@ public class FloatsTest extends TestCase {
   }
 
   @AndroidIncompatible // slow
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   public void testTryParseAllCodePoints() {
     // Exercise non-ASCII digit test cases and the like.
@@ -637,6 +650,7 @@ public class FloatsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   public void testTryParseOfToStringIsOriginal() {
     for (float f : NUMBERS) {
@@ -644,6 +658,7 @@ public class FloatsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   public void testTryParseOfToHexStringIsOriginal() {
     for (float f : NUMBERS) {
@@ -651,6 +666,7 @@ public class FloatsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   public void testTryParseNaN() {
     checkTryParse("NaN");
@@ -658,6 +674,7 @@ public class FloatsTest extends TestCase {
     checkTryParse("-NaN");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   public void testTryParseInfinity() {
     checkTryParse(Float.POSITIVE_INFINITY, "Infinity");
@@ -682,6 +699,7 @@ public class FloatsTest extends TestCase {
     "InfinityF"
   };
 
+  @J2ktIncompatible
   @GwtIncompatible // Floats.tryParse
   public void testTryParseFailures() {
     for (String badInput : BAD_TRY_PARSE_INPUTS) {
@@ -690,11 +708,13 @@ public class FloatsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(Floats.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Float.toString returns different value in GWT.
   public void testStringConverter_convert() {
     Converter<String, Float> converter = Floats.stringConverter();
@@ -721,6 +741,7 @@ public class FloatsTest extends TestCase {
     assertThat(Floats.stringConverter().reverse().convert(null)).isNull();
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Float.toString returns different value in GWT.
   public void testStringConverter_reverse() {
     Converter<String, Float> converter = Floats.stringConverter();
@@ -731,12 +752,14 @@ public class FloatsTest extends TestCase {
     assertThat(converter.reverse().convert(1e-6f)).isEqualTo("1.0E-6");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testStringConverter_nullPointerTester() throws Exception {
     NullPointerTester tester = new NullPointerTester();
     tester.testAllPublicInstanceMethods(Floats.stringConverter());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testTryParse_withNullNoGwt() {
     assertThat(Floats.tryParse("null")).isNull();
diff --git a/android/guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java b/android/guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java
index 4d98836..b0d0fab 100644
--- a/android/guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ObjectArrays;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
@@ -40,8 +41,11 @@ import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-/** @author Kevin Bourrillion */
+/**
+ * @author Kevin Bourrillion
+ */
 @GwtCompatible(emulated = true)
+@ElementTypesAreNonnullByDefault
 public class ImmutableDoubleArrayTest extends TestCase {
   // Test all creation paths very lazily: by assuming asList() works
 
@@ -399,6 +403,7 @@ public class ImmutableDoubleArrayTest extends TestCase {
     assertActuallyTrims(underSized);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testSerialization() {
     assertThat(reserialize(ImmutableDoubleArray.of())).isSameInstanceAs(ImmutableDoubleArray.of());
@@ -423,6 +428,7 @@ public class ImmutableDoubleArrayTest extends TestCase {
     assertThat(iia.trimmed()).isSameInstanceAs(iia);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Double>> builders =
@@ -454,6 +460,7 @@ public class ImmutableDoubleArrayTest extends TestCase {
     return suite;
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   private static ImmutableDoubleArray makeArray(Double[] values) {
     return ImmutableDoubleArray.copyOf(Arrays.asList(values));
@@ -462,6 +469,7 @@ public class ImmutableDoubleArrayTest extends TestCase {
   // Test generators.  To let the GWT test suite generator access them, they need to be public named
   // classes with a public default constructor (not that we run these suites under GWT yet).
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableDoubleArrayAsListGenerator extends TestDoubleListGenerator {
     @Override
@@ -470,6 +478,7 @@ public class ImmutableDoubleArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableDoubleArrayHeadSubListAsListGenerator
       extends TestDoubleListGenerator {
@@ -481,6 +490,7 @@ public class ImmutableDoubleArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableDoubleArrayTailSubListAsListGenerator
       extends TestDoubleListGenerator {
@@ -492,6 +502,7 @@ public class ImmutableDoubleArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableDoubleArrayMiddleSubListAsListGenerator
       extends TestDoubleListGenerator {
@@ -504,11 +515,13 @@ public class ImmutableDoubleArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   private static Double[] concat(Double[] a, Double[] b) {
     return ObjectArrays.concat(a, b, Double.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public abstract static class TestDoubleListGenerator implements TestListGenerator<Double> {
     @Override
@@ -544,6 +557,7 @@ public class ImmutableDoubleArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static class SampleDoubles extends SampleElements<Double> {
     public SampleDoubles() {
diff --git a/android/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java b/android/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java
index 86274d4..3831b47 100644
--- a/android/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ObjectArrays;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
@@ -386,6 +387,7 @@ public class ImmutableIntArrayTest extends TestCase {
     assertActuallyTrims(underSized);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testSerialization() {
     assertThat(reserialize(ImmutableIntArray.of())).isSameInstanceAs(ImmutableIntArray.of());
@@ -410,6 +412,7 @@ public class ImmutableIntArrayTest extends TestCase {
     assertThat(iia.trimmed()).isSameInstanceAs(iia);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Integer>> builders =
@@ -441,6 +444,7 @@ public class ImmutableIntArrayTest extends TestCase {
     return suite;
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   private static ImmutableIntArray makeArray(Integer[] values) {
     return ImmutableIntArray.copyOf(Arrays.asList(values));
@@ -449,6 +453,7 @@ public class ImmutableIntArrayTest extends TestCase {
   // Test generators.  To let the GWT test suite generator access them, they need to be public named
   // classes with a public default constructor (not that we run these suites under GWT yet).
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableIntArrayAsListGenerator extends TestIntegerListGenerator {
     @Override
@@ -457,6 +462,7 @@ public class ImmutableIntArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableIntArrayHeadSubListAsListGenerator
       extends TestIntegerListGenerator {
@@ -468,6 +474,7 @@ public class ImmutableIntArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableIntArrayTailSubListAsListGenerator
       extends TestIntegerListGenerator {
@@ -479,6 +486,7 @@ public class ImmutableIntArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableIntArrayMiddleSubListAsListGenerator
       extends TestIntegerListGenerator {
@@ -491,11 +499,13 @@ public class ImmutableIntArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   private static Integer[] concat(Integer[] a, Integer[] b) {
     return ObjectArrays.concat(a, b, Integer.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public abstract static class TestIntegerListGenerator implements TestListGenerator<Integer> {
     @Override
@@ -531,6 +541,7 @@ public class ImmutableIntArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static class SampleIntegers extends SampleElements<Integer> {
     public SampleIntegers() {
diff --git a/android/guava-tests/test/com/google/common/primitives/ImmutableLongArrayTest.java b/android/guava-tests/test/com/google/common/primitives/ImmutableLongArrayTest.java
index ff879ec..cc00911 100644
--- a/android/guava-tests/test/com/google/common/primitives/ImmutableLongArrayTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/ImmutableLongArrayTest.java
@@ -20,6 +20,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ObjectArrays;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
@@ -388,6 +389,7 @@ public class ImmutableLongArrayTest extends TestCase {
     assertActuallyTrims(underSized);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testSerialization() {
     assertThat(reserialize(ImmutableLongArray.of())).isSameInstanceAs(ImmutableLongArray.of());
@@ -412,6 +414,7 @@ public class ImmutableLongArrayTest extends TestCase {
     assertThat(iia.trimmed()).isSameInstanceAs(iia);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Long>> builders =
@@ -443,6 +446,7 @@ public class ImmutableLongArrayTest extends TestCase {
     return suite;
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   private static ImmutableLongArray makeArray(Long[] values) {
     return ImmutableLongArray.copyOf(Arrays.asList(values));
@@ -451,6 +455,7 @@ public class ImmutableLongArrayTest extends TestCase {
   // Test generators.  To let the GWT test suite generator access them, they need to be public named
   // classes with a public default constructor (not that we run these suites under GWT yet).
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableLongArrayAsListGenerator extends TestLongListGenerator {
     @Override
@@ -459,6 +464,7 @@ public class ImmutableLongArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableLongArrayHeadSubListAsListGenerator
       extends TestLongListGenerator {
@@ -470,6 +476,7 @@ public class ImmutableLongArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableLongArrayTailSubListAsListGenerator
       extends TestLongListGenerator {
@@ -481,6 +488,7 @@ public class ImmutableLongArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static final class ImmutableLongArrayMiddleSubListAsListGenerator
       extends TestLongListGenerator {
@@ -493,11 +501,13 @@ public class ImmutableLongArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   private static Long[] concat(Long[] a, Long[] b) {
     return ObjectArrays.concat(a, b, Long.class);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public abstract static class TestLongListGenerator implements TestListGenerator<Long> {
     @Override
@@ -533,6 +543,7 @@ public class ImmutableLongArrayTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // used only from suite
   public static class SampleLongs extends SampleElements<Long> {
     public SampleLongs() {
diff --git a/android/guava-tests/test/com/google/common/primitives/IntArrayAsListTest.java b/android/guava-tests/test/com/google/common/primitives/IntArrayAsListTest.java
index e02d1aa..46611f3 100644
--- a/android/guava-tests/test/com/google/common/primitives/IntArrayAsListTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/IntArrayAsListTest.java
@@ -20,6 +20,7 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
 import com.google.common.collect.testing.SampleElements;
@@ -49,6 +50,7 @@ public class IntArrayAsListTest extends TestCase {
     return Ints.asList(temp);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Integer>> builders =
diff --git a/android/guava-tests/test/com/google/common/primitives/IntsTest.java b/android/guava-tests/test/com/google/common/primitives/IntsTest.java
index 3c3ce8a..1a60b7f 100644
--- a/android/guava-tests/test/com/google/common/primitives/IntsTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/IntsTest.java
@@ -21,6 +21,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.base.Converter;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
@@ -32,6 +33,7 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.Random;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Ints}.
@@ -39,6 +41,7 @@ import junit.framework.TestCase;
  * @author Kevin Bourrillion
  */
 @GwtCompatible(emulated = true)
+@ElementTypesAreNonnullByDefault
 @SuppressWarnings("cast") // redundant casts are intentional and harmless
 public class IntsTest extends TestCase {
   private static final int[] EMPTY = {};
@@ -163,6 +166,7 @@ public class IntsTest extends TestCase {
         .isEqualTo(3);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testMax_noArgs() {
     try {
@@ -179,6 +183,7 @@ public class IntsTest extends TestCase {
         .isEqualTo((int) 9);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testMin_noArgs() {
     try {
@@ -307,6 +312,7 @@ public class IntsTest extends TestCase {
     Helpers.testComparator(comparator, ordered);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testLexicographicalComparatorSerializable() {
     Comparator<int[]> comparator = Ints.lexicographicalComparator();
@@ -469,6 +475,7 @@ public class IntsTest extends TestCase {
     testSortDescending(new int[] {-1, -2, 1, 2}, 1, 3, new int[] {-1, 1, -2, 2});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testStringConverterSerialization() {
     SerializableTester.reserializeAndAssert(Ints.stringConverter());
@@ -506,7 +513,7 @@ public class IntsTest extends TestCase {
   }
 
   public void testToArray_withNull() {
-    List<Integer> list = Arrays.asList((int) 0, (int) 1, null);
+    List<@Nullable Integer> list = Arrays.asList((int) 0, (int) 1, null);
     try {
       Ints.toArray(list);
       fail();
@@ -532,6 +539,7 @@ public class IntsTest extends TestCase {
     assertThat(Ints.toArray(doubles)).isEqualTo(array);
   }
 
+  @J2ktIncompatible // b/285319375
   public void testAsList_isAView() {
     int[] array = {(int) 0, (int) 1};
     List<Integer> list = Ints.asList(array);
@@ -565,6 +573,7 @@ public class IntsTest extends TestCase {
     assertThat(Ints.asList(EMPTY)).isSameInstanceAs(Collections.emptyList());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(Ints.class);
@@ -606,6 +615,7 @@ public class IntsTest extends TestCase {
     assertThat(converter.reverse().convert(0666)).isEqualTo("438");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testStringConverter_nullPointerTester() throws Exception {
     NullPointerTester tester = new NullPointerTester();
@@ -670,8 +680,8 @@ public class IntsTest extends TestCase {
   }
 
   /**
-   * Encodes the an integer as a string with given radix, then uses {@link Ints#tryParse(String,
-   * int)} to parse the result. Asserts the result is the same as what we started with.
+   * Encodes an integer as a string with given radix, then uses {@link Ints#tryParse(String, int)}
+   * to parse the result. Asserts the result is the same as what we started with.
    */
   private static void radixEncodeParseAndAssertEquals(Integer value, int radix) {
     assertWithMessage("Radix: " + radix)
diff --git a/android/guava-tests/test/com/google/common/primitives/LongArrayAsListTest.java b/android/guava-tests/test/com/google/common/primitives/LongArrayAsListTest.java
index 1c51e7e..4a63251 100644
--- a/android/guava-tests/test/com/google/common/primitives/LongArrayAsListTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/LongArrayAsListTest.java
@@ -20,6 +20,7 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
 import com.google.common.collect.testing.SampleElements;
@@ -48,6 +49,7 @@ public class LongArrayAsListTest extends TestCase {
     return Longs.asList(temp);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Long>> builders =
diff --git a/android/guava-tests/test/com/google/common/primitives/LongsTest.java b/android/guava-tests/test/com/google/common/primitives/LongsTest.java
index 938df83..83363c4 100644
--- a/android/guava-tests/test/com/google/common/primitives/LongsTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/LongsTest.java
@@ -23,6 +23,7 @@ import static java.lang.Long.MIN_VALUE;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.base.Converter;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
@@ -35,12 +36,14 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.Random;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Longs}.
  *
  * @author Kevin Bourrillion
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 @SuppressWarnings("cast") // redundant casts are intentional and harmless
 public class LongsTest extends TestCase {
@@ -50,6 +53,7 @@ public class LongsTest extends TestCase {
 
   private static final long[] VALUES = {MIN_VALUE, (long) -1, (long) 0, (long) 1, MAX_VALUE};
 
+  @J2ktIncompatible
   @GwtIncompatible // Long.hashCode returns different values in GWT.
   public void testHashCode() {
     for (long value : VALUES) {
@@ -194,6 +198,37 @@ public class LongsTest extends TestCase {
         .isEqualTo(new long[] {(long) 1, (long) 2, (long) 3, (long) 4});
   }
 
+  @GwtIncompatible // different overflow behavior; could probably be made to work by using ~~
+  public void testConcat_overflow_negative() {
+    int dim1 = 1 << 16;
+    int dim2 = 1 << 15;
+    assertThat(dim1 * dim2).isLessThan(0);
+    testConcat_overflow(dim1, dim2);
+  }
+
+  @GwtIncompatible // different overflow behavior; could probably be made to work by using ~~
+  public void testConcat_overflow_nonNegative() {
+    int dim1 = 1 << 16;
+    int dim2 = 1 << 16;
+    assertThat(dim1 * dim2).isAtLeast(0);
+    testConcat_overflow(dim1, dim2);
+  }
+
+  private static void testConcat_overflow(int arraysDim1, int arraysDim2) {
+    assertThat((long) arraysDim1 * arraysDim2).isNotEqualTo((long) (arraysDim1 * arraysDim2));
+
+    long[][] arrays = new long[arraysDim1][];
+    // it's shared to avoid using too much memory in tests
+    long[] sharedArray = new long[arraysDim2];
+    Arrays.fill(arrays, sharedArray);
+
+    try {
+      Longs.concat(arrays);
+      fail();
+    } catch (IllegalArgumentException expected) {
+    }
+  }
+
   private static void assertByteArrayEquals(byte[] expected, byte[] actual) {
     assertWithMessage(
             "Expected: " + Arrays.toString(expected) + ", but got: " + Arrays.toString(actual))
@@ -319,6 +354,7 @@ public class LongsTest extends TestCase {
     Helpers.testComparator(comparator, ordered);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testLexicographicalComparatorSerializable() {
     Comparator<long[]> comparator = Longs.lexicographicalComparator();
@@ -481,6 +517,7 @@ public class LongsTest extends TestCase {
     testSortDescending(new long[] {-1, -2, 1, 2}, 1, 3, new long[] {-1, 1, -2, 2});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testStringConverterSerialization() {
     SerializableTester.reserializeAndAssert(Longs.stringConverter());
@@ -518,7 +555,7 @@ public class LongsTest extends TestCase {
   }
 
   public void testToArray_withNull() {
-    List<Long> list = Arrays.asList((long) 0, (long) 1, null);
+    List<@Nullable Long> list = Arrays.asList((long) 0, (long) 1, null);
     try {
       Longs.toArray(list);
       fail();
@@ -544,6 +581,7 @@ public class LongsTest extends TestCase {
     assertThat(Longs.toArray(doubles)).isEqualTo(array);
   }
 
+  @J2ktIncompatible // b/285319375
   public void testAsList_isAView() {
     long[] array = {(long) 0, (long) 1};
     List<Long> list = Longs.asList(array);
@@ -577,6 +615,7 @@ public class LongsTest extends TestCase {
     assertThat(Longs.asList(EMPTY)).isSameInstanceAs(Collections.emptyList());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(Longs.class);
@@ -618,6 +657,7 @@ public class LongsTest extends TestCase {
     assertThat(converter.reverse().convert(0666L)).isEqualTo("438");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testStringConverter_nullPointerTester() throws Exception {
     NullPointerTester tester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/primitives/PrimitivesTest.java b/android/guava-tests/test/com/google/common/primitives/PrimitivesTest.java
index 8fc5587..05cdc95 100644
--- a/android/guava-tests/test/com/google/common/primitives/PrimitivesTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/PrimitivesTest.java
@@ -18,6 +18,9 @@ package com.google.common.primitives;
 
 import static com.google.common.truth.Truth.assertThat;
 
+import com.google.common.annotations.GwtCompatible;
+import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.testing.NullPointerTester;
 import java.util.Set;
 import junit.framework.TestCase;
@@ -27,6 +30,7 @@ import junit.framework.TestCase;
  *
  * @author Kevin Bourrillion
  */
+@GwtCompatible(emulated = true)
 public class PrimitivesTest extends TestCase {
   public void testIsWrapperType() {
     assertThat(Primitives.isWrapperType(Void.class)).isTrue();
@@ -87,6 +91,8 @@ public class PrimitivesTest extends TestCase {
     }
   }
 
+  @GwtIncompatible
+  @J2ktIncompatible
   public void testNullPointerExceptions() {
     NullPointerTester tester = new NullPointerTester();
     tester.testAllPublicStaticMethods(Primitives.class);
diff --git a/android/guava-tests/test/com/google/common/primitives/ShortArrayAsListTest.java b/android/guava-tests/test/com/google/common/primitives/ShortArrayAsListTest.java
index 9a1fada..a79211a 100644
--- a/android/guava-tests/test/com/google/common/primitives/ShortArrayAsListTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/ShortArrayAsListTest.java
@@ -20,6 +20,7 @@ import static com.google.common.base.Preconditions.checkNotNull;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.testing.ListTestSuiteBuilder;
 import com.google.common.collect.testing.SampleElements;
@@ -48,6 +49,7 @@ public class ShortArrayAsListTest extends TestCase {
     return Shorts.asList(temp);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // suite
   public static Test suite() {
     List<ListTestSuiteBuilder<Short>> builders =
diff --git a/android/guava-tests/test/com/google/common/primitives/ShortsTest.java b/android/guava-tests/test/com/google/common/primitives/ShortsTest.java
index f7e5346..26eb047 100644
--- a/android/guava-tests/test/com/google/common/primitives/ShortsTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/ShortsTest.java
@@ -21,6 +21,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.base.Converter;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
@@ -32,12 +33,14 @@ import java.util.Comparator;
 import java.util.List;
 import java.util.Random;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link Shorts}.
  *
  * @author Kevin Bourrillion
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 @SuppressWarnings("cast") // redundant casts are intentional and harmless
 public class ShortsTest extends TestCase {
@@ -181,6 +184,7 @@ public class ShortsTest extends TestCase {
         .isEqualTo(3);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testMax_noArgs() {
     try {
@@ -198,6 +202,7 @@ public class ShortsTest extends TestCase {
         .isEqualTo((short) 9);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible
   public void testMin_noArgs() {
     try {
@@ -241,12 +246,14 @@ public class ShortsTest extends TestCase {
         .isEqualTo(new short[] {(short) 1, (short) 2, (short) 3, (short) 4});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Shorts.toByteArray
   public void testToByteArray() {
     assertThat(Shorts.toByteArray((short) 0x2345)).isEqualTo(new byte[] {0x23, 0x45});
     assertThat(Shorts.toByteArray((short) 0xFEDC)).isEqualTo(new byte[] {(byte) 0xFE, (byte) 0xDC});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Shorts.fromByteArray
   public void testFromByteArray() {
     assertThat(Shorts.fromByteArray(new byte[] {0x23, 0x45})).isEqualTo((short) 0x2345);
@@ -254,6 +261,7 @@ public class ShortsTest extends TestCase {
         .isEqualTo((short) 0xFEDC);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Shorts.fromByteArray
   public void testFromByteArrayFails() {
     try {
@@ -263,12 +271,14 @@ public class ShortsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Shorts.fromBytes
   public void testFromBytes() {
     assertThat(Shorts.fromBytes((byte) 0x23, (byte) 0x45)).isEqualTo((short) 0x2345);
     assertThat(Shorts.fromBytes((byte) 0xFE, (byte) 0xDC)).isEqualTo((short) 0xFEDC);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Shorts.fromByteArray, Shorts.toByteArray
   public void testByteArrayRoundTrips() {
     Random r = new Random(5);
@@ -313,6 +323,7 @@ public class ShortsTest extends TestCase {
     assertThat(Shorts.join("", (short) 1, (short) 2, (short) 3)).isEqualTo("123");
   }
 
+  @J2ktIncompatible // TODO(b/285297472): Enable
   public void testLexicographicalComparator() {
     List<short[]> ordered =
         Arrays.asList(
@@ -330,6 +341,7 @@ public class ShortsTest extends TestCase {
     Helpers.testComparator(comparator, ordered);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testLexicographicalComparatorSerializable() {
     Comparator<short[]> comparator = Shorts.lexicographicalComparator();
@@ -493,6 +505,7 @@ public class ShortsTest extends TestCase {
     testSortDescending(new short[] {-1, -2, 1, 2}, 1, 3, new short[] {-1, 1, -2, 2});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testStringConverterSerialization() {
     SerializableTester.reserializeAndAssert(Shorts.stringConverter());
@@ -530,7 +543,7 @@ public class ShortsTest extends TestCase {
   }
 
   public void testToArray_withNull() {
-    List<Short> list = Arrays.asList((short) 0, (short) 1, null);
+    List<@Nullable Short> list = Arrays.asList((short) 0, (short) 1, null);
     try {
       Shorts.toArray(list);
       fail();
@@ -556,6 +569,7 @@ public class ShortsTest extends TestCase {
     assertThat(Shorts.toArray(doubles)).isEqualTo(array);
   }
 
+  @J2ktIncompatible // b/285319375
   public void testAsList_isAView() {
     short[] array = {(short) 0, (short) 1};
     List<Short> list = Shorts.asList(array);
@@ -589,6 +603,7 @@ public class ShortsTest extends TestCase {
     assertThat(Shorts.asList(EMPTY)).isSameInstanceAs(Collections.emptyList());
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(Shorts.class);
@@ -630,6 +645,7 @@ public class ShortsTest extends TestCase {
     assertThat(converter.reverse().convert((short) 0666)).isEqualTo("438");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testStringConverter_nullPointerTester() throws Exception {
     NullPointerTester tester = new NullPointerTester();
diff --git a/android/guava-tests/test/com/google/common/primitives/SignedBytesTest.java b/android/guava-tests/test/com/google/common/primitives/SignedBytesTest.java
index 7e77943..a141d72 100644
--- a/android/guava-tests/test/com/google/common/primitives/SignedBytesTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/SignedBytesTest.java
@@ -21,6 +21,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
 import com.google.common.testing.SerializableTester;
@@ -34,6 +35,7 @@ import junit.framework.TestCase;
  *
  * @author Kevin Bourrillion
  */
+@ElementTypesAreNonnullByDefault
 @GwtCompatible(emulated = true)
 @SuppressWarnings("cast") // redundant casts are intentional and harmless
 public class SignedBytesTest extends TestCase {
@@ -135,6 +137,7 @@ public class SignedBytesTest extends TestCase {
     assertThat(SignedBytes.join(",", (byte) -128, (byte) -1)).isEqualTo("-128,-1");
   }
 
+  @J2ktIncompatible // b/285319375
   public void testLexicographicalComparator() {
     List<byte[]> ordered =
         Arrays.asList(
@@ -152,6 +155,7 @@ public class SignedBytesTest extends TestCase {
     Helpers.testComparator(comparator, ordered);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // SerializableTester
   public void testLexicographicalComparatorSerializable() {
     Comparator<byte[]> comparator = SignedBytes.lexicographicalComparator();
@@ -188,6 +192,7 @@ public class SignedBytesTest extends TestCase {
     testSortDescending(new byte[] {-1, -2, 1, 2}, 1, 3, new byte[] {-1, 1, -2, 2});
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(SignedBytes.class);
diff --git a/android/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java b/android/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java
index 90213a6..7034447 100644
--- a/android/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/UnsignedIntegerTest.java
@@ -19,6 +19,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.testing.EqualsTester;
 import com.google.common.testing.NullPointerTester;
@@ -111,6 +112,7 @@ public class UnsignedIntegerTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // too slow
   public void testToStringRadix() {
     for (int radix = Character.MIN_RADIX; radix <= Character.MAX_RADIX; radix++) {
@@ -172,6 +174,7 @@ public class UnsignedIntegerTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // multiply
   public void testTimes() {
     for (int a : TEST_INTS) {
@@ -247,6 +250,7 @@ public class UnsignedIntegerTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // too slow
   public void testEquals() {
     EqualsTester equalsTester = new EqualsTester();
@@ -269,6 +273,7 @@ public class UnsignedIntegerTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // serialization
   public void testSerialization() {
     for (int a : TEST_INTS) {
@@ -276,6 +281,7 @@ public class UnsignedIntegerTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(UnsignedInteger.class);
diff --git a/android/guava-tests/test/com/google/common/primitives/UnsignedIntsTest.java b/android/guava-tests/test/com/google/common/primitives/UnsignedIntsTest.java
index 8372e89..1b11886 100644
--- a/android/guava-tests/test/com/google/common/primitives/UnsignedIntsTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/UnsignedIntsTest.java
@@ -18,6 +18,7 @@ import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
 import java.util.Arrays;
@@ -245,6 +246,7 @@ public class UnsignedIntsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Too slow in GWT (~3min fully optimized)
   public void testDivideRemainderEuclideanProperty() {
     // Use a seed so that the test is deterministic:
@@ -292,7 +294,7 @@ public class UnsignedIntsTest extends TestCase {
       assertThat(UnsignedInts.parseUnsignedInt(maxAsString, radix)).isEqualTo(-1);
 
       try {
-        // tests that we get exception whre an overflow would occur.
+        // tests that we get exception where an overflow would occur.
         long overflow = 1L << 32;
         String overflowAsString = Long.toString(overflow, radix);
         UnsignedInts.parseUnsignedInt(overflowAsString, radix);
@@ -302,6 +304,7 @@ public class UnsignedIntsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285538920): Exception mismatch
   public void testParseIntThrowsExceptionForInvalidRadix() {
     // Valid radix values are Character.MIN_RADIX to Character.MAX_RADIX,
     // inclusive.
@@ -384,6 +387,7 @@ public class UnsignedIntsTest extends TestCase {
     return UnsignedInts.join(",", values);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(UnsignedInts.class);
diff --git a/android/guava-tests/test/com/google/common/primitives/UnsignedLongTest.java b/android/guava-tests/test/com/google/common/primitives/UnsignedLongTest.java
index 447fa17..335e6e3 100644
--- a/android/guava-tests/test/com/google/common/primitives/UnsignedLongTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/UnsignedLongTest.java
@@ -19,6 +19,7 @@ import static com.google.common.truth.Truth.assertWithMessage;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.testing.EqualsTester;
 import com.google.common.testing.NullPointerTester;
@@ -102,6 +103,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285562794): Wrong result for j2kt
   public void testValueOfBigInteger() {
     BigInteger min = BigInteger.ZERO;
     BigInteger max = UnsignedLong.MAX_VALUE.bigIntegerValue();
@@ -123,6 +125,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // too slow
   public void testToStringRadix() {
     for (int radix = Character.MIN_RADIX; radix <= Character.MAX_RADIX; radix++) {
@@ -164,6 +167,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285562794): Wrong result for j2kt
   public void testPlus() {
     for (long a : TEST_LONGS) {
       for (long b : TEST_LONGS) {
@@ -176,6 +180,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285562794): Wrong result for j2kt
   public void testMinus() {
     for (long a : TEST_LONGS) {
       for (long b : TEST_LONGS) {
@@ -189,6 +194,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285562794): Wrong result for j2kt
   public void testTimes() {
     for (long a : TEST_LONGS) {
       for (long b : TEST_LONGS) {
@@ -202,6 +208,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285562794): Wrong result for j2kt
   public void testDividedBy() {
     for (long a : TEST_LONGS) {
       for (long b : TEST_LONGS) {
@@ -227,6 +234,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285538920): Wrong result for j2kt
   public void testMod() {
     for (long a : TEST_LONGS) {
       for (long b : TEST_LONGS) {
@@ -263,6 +271,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // too slow
   public void testEquals() {
     EqualsTester equalsTester = new EqualsTester();
@@ -286,6 +295,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // serialization
   public void testSerialization() {
     for (long a : TEST_LONGS) {
@@ -293,6 +303,7 @@ public class UnsignedLongTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(UnsignedLong.class);
diff --git a/android/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java b/android/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java
index c622e8c..faa8ec7 100644
--- a/android/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java
+++ b/android/guava-tests/test/com/google/common/primitives/UnsignedLongsTest.java
@@ -19,6 +19,7 @@ import static java.math.BigInteger.ONE;
 
 import com.google.common.annotations.GwtCompatible;
 import com.google.common.annotations.GwtIncompatible;
+import com.google.common.annotations.J2ktIncompatible;
 import com.google.common.collect.testing.Helpers;
 import com.google.common.testing.NullPointerTester;
 import java.math.BigInteger;
@@ -194,6 +195,7 @@ public class UnsignedLongsTest extends TestCase {
     assertThat(UnsignedLongs.remainder(0xfffffffffffffffeL, 5)).isEqualTo(4);
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // Too slow in GWT (~3min fully optimized)
   public void testDivideRemainderEuclideanProperty() {
     // Use a seed so that the test is deterministic:
@@ -293,7 +295,7 @@ public class UnsignedLongsTest extends TestCase {
       assertThat(UnsignedLongs.parseUnsignedLong(maxAsString, radix)).isEqualTo(max.longValue());
 
       try {
-        // tests that we get exception whre an overflow would occur.
+        // tests that we get exception where an overflow would occur.
         BigInteger overflow = max.add(ONE);
         String overflowAsString = overflow.toString(radix);
         UnsignedLongs.parseUnsignedLong(overflowAsString, radix);
@@ -331,6 +333,7 @@ public class UnsignedLongsTest extends TestCase {
     }
   }
 
+  @J2ktIncompatible // TODO(b/285562794): Wrong result for j2kt
   public void testToString() {
     String[] tests = {
       "0",
@@ -361,6 +364,7 @@ public class UnsignedLongsTest extends TestCase {
         .isEqualTo("184467440737095516159223372036854775808");
   }
 
+  @J2ktIncompatible
   @GwtIncompatible // NullPointerTester
   public void testNulls() {
     new NullPointerTester().testAllPublicStaticMethods(UnsignedLongs.class);
diff --git a/android/guava-tests/test/com/google/common/reflect/AbstractInvocationHandlerTest.java b/android/guava-tests/test/com/google/common/reflect/AbstractInvocationHandlerTest.java
index 56b20bd..310878f 100644
--- a/android/guava-tests/test/com/google/common/reflect/AbstractInvocationHandlerTest.java
+++ b/android/guava-tests/test/com/google/common/reflect/AbstractInvocationHandlerTest.java
@@ -26,6 +26,7 @@ import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.List;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link AbstractInvocationHandler}.
@@ -136,7 +137,7 @@ public class AbstractInvocationHandlerTest extends TestCase {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
       if (obj instanceof DelegatingInvocationHandlerWithEquals) {
         DelegatingInvocationHandlerWithEquals that = (DelegatingInvocationHandlerWithEquals) obj;
         return delegate.equals(that.delegate);
diff --git a/android/guava-tests/test/com/google/common/reflect/ClassPathTest.java b/android/guava-tests/test/com/google/common/reflect/ClassPathTest.java
index 0184ed8..f5f8f37 100644
--- a/android/guava-tests/test/com/google/common/reflect/ClassPathTest.java
+++ b/android/guava-tests/test/com/google/common/reflect/ClassPathTest.java
@@ -17,6 +17,7 @@ package com.google.common.reflect;
 
 import static com.google.common.base.Charsets.US_ASCII;
 import static com.google.common.base.StandardSystemProperty.JAVA_CLASS_PATH;
+import static com.google.common.base.StandardSystemProperty.OS_NAME;
 import static com.google.common.base.StandardSystemProperty.PATH_SEPARATOR;
 import static com.google.common.truth.Truth.assertThat;
 
@@ -215,6 +216,9 @@ public class ClassPathTest extends TestCase {
   }
 
   public void testGetClassPathEntry() throws MalformedURLException, URISyntaxException {
+    if (isWindows()) {
+      return; // TODO: b/136041958 - We need to account for drive letters in the path.
+    }
     assertEquals(
         new File("/usr/test/dep.jar").toURI(),
         ClassPath.getClassPathEntry(new File("/home/build/outer.jar"), "file:/usr/test/dep.jar")
@@ -285,6 +289,9 @@ public class ClassPathTest extends TestCase {
   }
 
   public void testGetClassPathFromManifest_absoluteDirectory() throws IOException {
+    if (isWindows()) {
+      return; // TODO: b/136041958 - We need to account for drive letters in the path.
+    }
     File jarFile = new File("base/some.jar");
     Manifest manifest = manifestClasspath("file:/with/absolute/dir");
     assertThat(ClassPath.getClassPathFromManifest(jarFile, manifest))
@@ -292,6 +299,9 @@ public class ClassPathTest extends TestCase {
   }
 
   public void testGetClassPathFromManifest_absoluteJar() throws IOException {
+    if (isWindows()) {
+      return; // TODO: b/136041958 - We need to account for drive letters in the path.
+    }
     File jarFile = new File("base/some.jar");
     Manifest manifest = manifestClasspath("file:/with/absolute.jar");
     assertThat(ClassPath.getClassPathFromManifest(jarFile, manifest))
@@ -299,6 +309,9 @@ public class ClassPathTest extends TestCase {
   }
 
   public void testGetClassPathFromManifest_multiplePaths() throws IOException {
+    if (isWindows()) {
+      return; // TODO: b/136041958 - We need to account for drive letters in the path.
+    }
     File jarFile = new File("base/some.jar");
     Manifest manifest = manifestClasspath("file:/with/absolute.jar relative.jar  relative/dir");
     assertThat(ClassPath.getClassPathFromManifest(jarFile, manifest))
@@ -354,7 +367,11 @@ public class ClassPathTest extends TestCase {
   // Test that ResourceInfo.urls() returns identical content to ClassLoader.getResources()
 
 
+  @AndroidIncompatible
   public void testGetClassPathUrls() throws Exception {
+    if (isWindows()) {
+      return; // TODO: b/136041958 - We need to account for drive letters in the path.
+    }
     String oldPathSeparator = PATH_SEPARATOR.value();
     String oldClassPath = JAVA_CLASS_PATH.value();
     System.setProperty(PATH_SEPARATOR.key(), ":");
@@ -547,6 +564,10 @@ public class ClassPathTest extends TestCase {
   }
 
   private static URL makeJarUrlWithName(String name) throws IOException {
+    /*
+     * TODO: cpovirk - Use java.nio.file.Files.createTempDirectory instead of
+     * c.g.c.io.Files.createTempDir?
+     */
     File fullPath = new File(Files.createTempDir(), name);
     File jarFile = pickAnyJarFile();
     Files.copy(jarFile, fullPath);
@@ -572,4 +593,8 @@ public class ClassPathTest extends TestCase {
     }
     return builder.build();
   }
+
+  private static boolean isWindows() {
+    return OS_NAME.value().startsWith("Windows");
+  }
 }
diff --git a/android/guava-tests/test/com/google/common/reflect/InvokableTest.java b/android/guava-tests/test/com/google/common/reflect/InvokableTest.java
index e545bdd..ab5ff73 100644
--- a/android/guava-tests/test/com/google/common/reflect/InvokableTest.java
+++ b/android/guava-tests/test/com/google/common/reflect/InvokableTest.java
@@ -32,8 +32,8 @@ import java.lang.reflect.Modifier;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.TypeVariable;
 import java.util.Collections;
-import javax.annotation.CheckForNull;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit tests for {@link Invokable}.
@@ -49,9 +49,9 @@ public class InvokableTest extends TestCase {
   public void testApiCompatibleWithAccessibleObject() {
     ImmutableSet<String> invokableMethods =
         publicMethodSignatures(Invokable.class, ImmutableSet.<String>of());
-    ImmutableSet<String> accesibleObjectMethods =
+    ImmutableSet<String> accessibleObjectMethods =
         publicMethodSignatures(AccessibleObject.class, ImmutableSet.of("canAccess"));
-    assertThat(invokableMethods).containsAtLeastElementsIn(accesibleObjectMethods);
+    assertThat(invokableMethods).containsAtLeastElementsIn(accessibleObjectMethods);
     Class<?> genericDeclaration;
     try {
       genericDeclaration = Class.forName("java.lang.reflect.GenericDeclaration");
@@ -453,7 +453,7 @@ public class InvokableTest extends TestCase {
 
   static class Foo {}
 
-  public void testConstructor_isOverridablel() throws Exception {
+  public void testConstructor_isOverridable() throws Exception {
     Invokable<?, ?> delegate = Invokable.from(Foo.class.getDeclaredConstructor());
     assertFalse(delegate.isOverridable());
     assertFalse(delegate.isVarArgs());
@@ -520,7 +520,7 @@ public class InvokableTest extends TestCase {
 
   private class InnerWithAnnotatedConstructorParameter {
     @SuppressWarnings("unused") // called by reflection
-    InnerWithAnnotatedConstructorParameter(@CheckForNull String s) {}
+    InnerWithAnnotatedConstructorParameter(@Nullable String s) {}
   }
 
   public void testInnerClassWithAnnotatedConstructorParameter() {
@@ -684,7 +684,7 @@ public class InvokableTest extends TestCase {
   public void testLocalClassWithAnnotatedConstructorParameter() throws Exception {
     class LocalWithAnnotatedConstructorParameter {
       @SuppressWarnings("unused") // called by reflection
-      LocalWithAnnotatedConstructorParameter(@CheckForNull String s) {}
+      LocalWithAnnotatedConstructorParameter(@Nullable String s) {}
     }
     Constructor<?> constructor =
         LocalWithAnnotatedConstructorParameter.class.getDeclaredConstructors()[0];
@@ -733,7 +733,7 @@ public class InvokableTest extends TestCase {
     private final String prefix;
     private final int times;
 
-    Prepender(@NotBlank String prefix, int times) throws NullPointerException {
+    Prepender(@NotBlank @Nullable String prefix, int times) throws NullPointerException {
       this.prefix = prefix;
       this.times = times;
     }
diff --git a/android/guava-tests/test/com/google/common/reflect/ParameterTest.java b/android/guava-tests/test/com/google/common/reflect/ParameterTest.java
index 6e0500a..86ea010 100644
--- a/android/guava-tests/test/com/google/common/reflect/ParameterTest.java
+++ b/android/guava-tests/test/com/google/common/reflect/ParameterTest.java
@@ -29,6 +29,16 @@ import junit.framework.TestCase;
 public class ParameterTest extends TestCase {
 
   public void testNulls() {
+    try {
+      Class.forName("java.lang.reflect.AnnotatedType");
+    } catch (ClassNotFoundException runningInAndroidVm) {
+      /*
+       * Parameter declares a method that returns AnnotatedType, which isn't available on Android.
+       * This would cause NullPointerTester, which calls Class.getDeclaredMethods, to throw
+       * NoClassDefFoundError.
+       */
+      return;
+    }
     for (Method method : ParameterTest.class.getDeclaredMethods()) {
       for (Parameter param : Invokable.from(method).getParameters()) {
         new NullPointerTester().testAllPublicInstanceMethods(param);
diff --git a/android/guava-tests/test/com/google/common/reflect/SubtypeTester.java b/android/guava-tests/test/com/google/common/reflect/SubtypeTester.java
index 3eec668..7cd61c1 100644
--- a/android/guava-tests/test/com/google/common/reflect/SubtypeTester.java
+++ b/android/guava-tests/test/com/google/common/reflect/SubtypeTester.java
@@ -30,6 +30,7 @@ import java.lang.reflect.Type;
 import java.util.Arrays;
 import java.util.Comparator;
 import javax.lang.model.element.Modifier;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tester of subtyping relationships between two types.
@@ -78,7 +79,7 @@ abstract class SubtypeTester implements Cloneable {
     boolean suppressGetSupertype() default false;
   }
 
-  private Method method = null;
+  private @Nullable Method method = null;
 
   /** Call this in a {@link TestSubtype} public method asserting subtype relationship. */
   final <T> T isSubtype(T sub) {
@@ -105,7 +106,7 @@ abstract class SubtypeTester implements Cloneable {
    * Call this in a {@link TestSubtype} public method asserting that subtype relationship does not
    * hold.
    */
-  final <X> X notSubtype(@SuppressWarnings("unused") Object sub) {
+  final <X> @Nullable X notSubtype(@SuppressWarnings("unused") Object sub) {
     Type returnType = method.getGenericReturnType();
     Type paramType = getOnlyParameterType();
     TestSubtype spec = method.getAnnotation(TestSubtype.class);
diff --git a/android/guava-tests/test/com/google/common/reflect/TypeTokenResolutionTest.java b/android/guava-tests/test/com/google/common/reflect/TypeTokenResolutionTest.java
index 2aa7ae5..b8f5edb 100644
--- a/android/guava-tests/test/com/google/common/reflect/TypeTokenResolutionTest.java
+++ b/android/guava-tests/test/com/google/common/reflect/TypeTokenResolutionTest.java
@@ -255,7 +255,7 @@ public class TypeTokenResolutionTest extends TestCase {
     }
   }
 
-  public void testConextIsParameterizedType() throws Exception {
+  public void testContextIsParameterizedType() throws Exception {
     class Context {
       @SuppressWarnings("unused") // used by reflection
       Map<String, Integer> returningMap() {
diff --git a/android/guava-tests/test/com/google/common/reflect/TypeTokenSubtypeTest.java b/android/guava-tests/test/com/google/common/reflect/TypeTokenSubtypeTest.java
index 4905df7..b25aab5 100644
--- a/android/guava-tests/test/com/google/common/reflect/TypeTokenSubtypeTest.java
+++ b/android/guava-tests/test/com/google/common/reflect/TypeTokenSubtypeTest.java
@@ -237,7 +237,7 @@ public class TypeTokenSubtypeTest extends TestCase {
     @TestSubtype(suppressGetSupertype = true, suppressGetSubtype = true)
     public List<RecursiveTypeBoundBugExample<?>> ifYouUseTheTypeVariableOnTheClassAndItIsRecursive(
         List<RecursiveTypeBoundBugExample<? extends RecursiveTypeBoundBugExample<T>>> arg) {
-      return notSubtype(arg); // isSubtype() currently incorectly considers it a subtype.
+      return notSubtype(arg); // isSubtype() currently incorrectly considers it a subtype.
     }
   }
 
diff --git a/android/guava-tests/test/com/google/common/reflect/TypeTokenTest.java b/android/guava-tests/test/com/google/common/reflect/TypeTokenTest.java
index daf3486..5d66b84 100644
--- a/android/guava-tests/test/com/google/common/reflect/TypeTokenTest.java
+++ b/android/guava-tests/test/com/google/common/reflect/TypeTokenTest.java
@@ -1101,7 +1101,7 @@ public class TypeTokenTest extends TestCase {
   }
 
   public void testGetSupertype_chained() {
-    @SuppressWarnings("unchecked") // StringListIterable extensd ListIterable<String>
+    @SuppressWarnings("unchecked") // StringListIterable extends ListIterable<String>
     TypeToken<ListIterable<String>> listIterableType =
         (TypeToken<ListIterable<String>>)
             TypeToken.of(StringListIterable.class).getSupertype(ListIterable.class);
@@ -1794,7 +1794,7 @@ public class TypeTokenTest extends TestCase {
 
     abstract <T2 extends CharSequence & Iterable<T2>> void acceptT2(T2 t2);
 
-    static void verifyConsitentRawType() {
+    static void verifyConsistentRawType() {
       for (Method method : RawTypeConsistencyTester.class.getDeclaredMethods()) {
         assertEquals(
             method.getReturnType(), TypeToken.of(method.getGenericReturnType()).getRawType());
@@ -1808,7 +1808,7 @@ public class TypeTokenTest extends TestCase {
   }
 
   public void testRawTypes() {
-    RawTypeConsistencyTester.verifyConsitentRawType();
+    RawTypeConsistencyTester.verifyConsistentRawType();
     assertEquals(Object.class, TypeToken.of(Types.subtypeOf(Object.class)).getRawType());
     assertEquals(
         CharSequence.class, TypeToken.of(Types.subtypeOf(CharSequence.class)).getRawType());
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java
index 991cada..8e94f17 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java
@@ -34,6 +34,7 @@ import java.util.concurrent.CancellationException;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeoutException;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Base class for tests for emulated {@link AbstractFuture} that allow subclasses to swap in a
@@ -443,7 +444,8 @@ abstract class AbstractAbstractFutureTest extends TestCase {
     verifyTimedGetOnPendingFuture(future);
   }
 
-  private static void assertSuccessful(AbstractFuture<Integer> future, Integer expectedResult)
+  private static void assertSuccessful(
+      AbstractFuture<Integer> future, @Nullable Integer expectedResult)
       throws InterruptedException, TimeoutException, ExecutionException {
     assertDone(future);
     assertThat(future.isCancelled()).isFalse();
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java
index ed5e6a9..d90c5bb 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java
@@ -25,7 +25,7 @@ import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import java.util.concurrent.locks.AbstractQueuedSynchronizer;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /** Utilities for the AbstractFutureBenchmarks */
 final class AbstractFutureBenchmarks {
@@ -218,7 +218,7 @@ final class AbstractFutureBenchmarks {
      * @return true if the state was successfully changed.
      */
     @CanIgnoreReturnValue
-    protected boolean set(@CheckForNull V value) {
+    protected boolean set(@Nullable V value) {
       boolean result = sync.set(value);
       if (result) {
         executionList.execute();
@@ -360,7 +360,7 @@ final class AbstractFutureBenchmarks {
       }
 
       /** Transition to the COMPLETED state and set the value. */
-      boolean set(@CheckForNull V v) {
+      boolean set(@Nullable V v) {
         return complete(v, null, COMPLETED);
       }
 
@@ -384,7 +384,7 @@ final class AbstractFutureBenchmarks {
        * @param t the exception to set as the result of the computation.
        * @param finalState the state to transition to.
        */
-      private boolean complete(@CheckForNull V v, @CheckForNull Throwable t, int finalState) {
+      private boolean complete(@Nullable V v, @Nullable Throwable t, int finalState) {
         boolean doCompletion = compareAndSetState(RUNNING, COMPLETING);
         if (doCompletion) {
           // If this thread successfully transitioned to COMPLETING, set the value
@@ -406,7 +406,7 @@ final class AbstractFutureBenchmarks {
     }
 
     static final CancellationException cancellationExceptionWithCause(
-        @CheckForNull String message, @CheckForNull Throwable cause) {
+        @Nullable String message, @Nullable Throwable cause) {
       CancellationException exception = new CancellationException(message);
       exception.initCause(cause);
       return exception;
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java
index dc020fb..89d92c8 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java
@@ -16,6 +16,8 @@
 
 package com.google.common.util.concurrent;
 
+import static com.google.common.base.StandardSystemProperty.JAVA_SPECIFICATION_VERSION;
+import static com.google.common.base.StandardSystemProperty.OS_NAME;
 import static com.google.common.truth.Truth.assertThat;
 import static com.google.common.truth.Truth.assertWithMessage;
 
@@ -23,6 +25,7 @@ import com.google.common.annotations.GwtIncompatible;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Range;
 import com.google.common.collect.Sets;
+import com.google.common.primitives.Ints;
 import com.google.common.util.concurrent.internal.InternalFutureFailureAccess;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -46,6 +49,7 @@ import java.util.concurrent.atomic.AtomicReference;
 import java.util.concurrent.locks.LockSupport;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Tests for {@link AbstractFuture}.
@@ -293,6 +297,13 @@ public class AbstractFutureTest extends TestCase {
   @SuppressWarnings({"DeprecatedThreadMethods", "ThreadPriorityCheck"})
   @AndroidIncompatible // Thread.suspend
   public void testToString_delayedTimeout() throws Exception {
+    Integer javaVersion = Ints.tryParse(JAVA_SPECIFICATION_VERSION.value());
+    // Parsing to an integer might fail because Java 8 returns "1.8" instead of "8."
+    // We can continue if it's 1.8, and we can continue if it's an integer in [9, 20).
+    if (javaVersion != null && javaVersion >= 20) {
+      // TODO(b/261217224): Make this test work under newer JDKs.
+      return;
+    }
     TimedWaiterThread thread =
         new TimedWaiterThread(new AbstractFuture<Object>() {}, 2, TimeUnit.SECONDS);
     thread.start();
@@ -426,6 +437,9 @@ public class AbstractFutureTest extends TestCase {
    */
 
   public void testFutureBash() {
+    if (isWindows()) {
+      return; // TODO: b/136041958 - Running very slowly on Windows CI.
+    }
     final CyclicBarrier barrier =
         new CyclicBarrier(
             6 // for the setter threads
@@ -435,10 +449,10 @@ public class AbstractFutureTest extends TestCase {
     final ExecutorService executor = Executors.newFixedThreadPool(barrier.getParties());
     final AtomicReference<AbstractFuture<String>> currentFuture = Atomics.newReference();
     final AtomicInteger numSuccessfulSetCalls = new AtomicInteger();
-    Callable<Void> completeSuccessfullyRunnable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> completeSuccessfullyRunnable =
+        new Callable<@Nullable Void>() {
           @Override
-          public Void call() {
+          public @Nullable Void call() {
             if (currentFuture.get().set("set")) {
               numSuccessfulSetCalls.incrementAndGet();
             }
@@ -446,12 +460,12 @@ public class AbstractFutureTest extends TestCase {
             return null;
           }
         };
-    Callable<Void> completeExceptionallyRunnable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> completeExceptionallyRunnable =
+        new Callable<@Nullable Void>() {
           Exception failureCause = new Exception("setException");
 
           @Override
-          public Void call() {
+          public @Nullable Void call() {
             if (currentFuture.get().setException(failureCause)) {
               numSuccessfulSetCalls.incrementAndGet();
             }
@@ -459,10 +473,10 @@ public class AbstractFutureTest extends TestCase {
             return null;
           }
         };
-    Callable<Void> cancelRunnable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> cancelRunnable =
+        new Callable<@Nullable Void>() {
           @Override
-          public Void call() {
+          public @Nullable Void call() {
             if (currentFuture.get().cancel(true)) {
               numSuccessfulSetCalls.incrementAndGet();
             }
@@ -470,12 +484,12 @@ public class AbstractFutureTest extends TestCase {
             return null;
           }
         };
-    Callable<Void> setFutureCompleteSuccessfullyRunnable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> setFutureCompleteSuccessfullyRunnable =
+        new Callable<@Nullable Void>() {
           ListenableFuture<String> future = Futures.immediateFuture("setFuture");
 
           @Override
-          public Void call() {
+          public @Nullable Void call() {
             if (currentFuture.get().setFuture(future)) {
               numSuccessfulSetCalls.incrementAndGet();
             }
@@ -483,13 +497,13 @@ public class AbstractFutureTest extends TestCase {
             return null;
           }
         };
-    Callable<Void> setFutureCompleteExceptionallyRunnable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> setFutureCompleteExceptionallyRunnable =
+        new Callable<@Nullable Void>() {
           ListenableFuture<String> future =
               Futures.immediateFailedFuture(new Exception("setFuture"));
 
           @Override
-          public Void call() {
+          public @Nullable Void call() {
             if (currentFuture.get().setFuture(future)) {
               numSuccessfulSetCalls.incrementAndGet();
             }
@@ -497,12 +511,12 @@ public class AbstractFutureTest extends TestCase {
             return null;
           }
         };
-    Callable<Void> setFutureCancelRunnable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> setFutureCancelRunnable =
+        new Callable<@Nullable Void>() {
           ListenableFuture<String> future = Futures.immediateCancelledFuture();
 
           @Override
-          public Void call() {
+          public @Nullable Void call() {
             if (currentFuture.get().setFuture(future)) {
               numSuccessfulSetCalls.incrementAndGet();
             }
@@ -559,15 +573,15 @@ public class AbstractFutureTest extends TestCase {
     allTasks.add(setFutureCancelRunnable);
     for (int k = 0; k < 50; k++) {
       // For each listener we add a task that submits it to the executor directly for the blocking
-      // get usecase and another task that adds it as a listener to the future to exercise both
+      // get use case and another task that adds it as a listener to the future to exercise both
       // racing addListener calls and addListener calls completing after the future completes.
       final Runnable listener =
           k % 2 == 0 ? collectResultsRunnable : collectResultsTimedGetRunnable;
       allTasks.add(Executors.callable(listener));
       allTasks.add(
-          new Callable<Void>() {
+          new Callable<@Nullable Void>() {
             @Override
-            public Void call() throws Exception {
+            public @Nullable Void call() throws Exception {
               currentFuture.get().addListener(listener, executor);
               return null;
             }
@@ -607,6 +621,9 @@ public class AbstractFutureTest extends TestCase {
 
   // setFuture and cancel() interact in more complicated ways than the other setters.
   public void testSetFutureCancelBash() {
+    if (isWindows()) {
+      return; // TODO: b/136041958 - Running very slowly on Windows CI.
+    }
     final int size = 50;
     final CyclicBarrier barrier =
         new CyclicBarrier(
@@ -683,7 +700,7 @@ public class AbstractFutureTest extends TestCase {
     allTasks.add(setFutureCompleteSuccessfullyRunnable);
     for (int k = 0; k < size; k++) {
       // For each listener we add a task that submits it to the executor directly for the blocking
-      // get usecase and another task that adds it as a listener to the future to exercise both
+      // get use case and another task that adds it as a listener to the future to exercise both
       // racing addListener calls and addListener calls completing after the future completes.
       final Runnable listener =
           k % 2 == 0 ? collectResultsRunnable : collectResultsTimedGetRunnable;
@@ -751,21 +768,21 @@ public class AbstractFutureTest extends TestCase {
     final AtomicReference<AbstractFuture<String>> currentFuture = Atomics.newReference();
     final AtomicBoolean setFutureSuccess = new AtomicBoolean();
     final AtomicBoolean cancellationSuccess = new AtomicBoolean();
-    Callable<Void> cancelRunnable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> cancelRunnable =
+        new Callable<@Nullable Void>() {
           @Override
-          public Void call() {
+          public @Nullable Void call() {
             cancellationSuccess.set(currentFuture.get().cancel(true));
             awaitUnchecked(barrier);
             return null;
           }
         };
-    Callable<Void> setFutureCompleteSuccessfullyRunnable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> setFutureCompleteSuccessfullyRunnable =
+        new Callable<@Nullable Void>() {
           final ListenableFuture<String> future = Futures.immediateFuture("hello");
 
           @Override
-          public Void call() {
+          public @Nullable Void call() {
             setFutureSuccess.set(currentFuture.get().setFuture(future));
             awaitUnchecked(barrier);
             return null;
@@ -1200,13 +1217,10 @@ public class AbstractFutureTest extends TestCase {
       throws InterruptedException {
     try {
       String got = future.get();
-      fail("Expected exception but got " + got);
+      throw new AssertionError("Expected exception but got " + got);
     } catch (ExecutionException e) {
       return e;
     }
-
-    // unreachable, but compiler doesn't know that fail() always throws
-    return null;
   }
 
   private static final class WaiterThread extends Thread {
@@ -1318,4 +1332,8 @@ public class AbstractFutureTest extends TestCase {
       interruptTaskWasCalled = true;
     }
   }
+
+  private static boolean isWindows() {
+    return OS_NAME.value().startsWith("Windows");
+  }
 }
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
index 5d90b15..f7266b2 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java
@@ -43,6 +43,7 @@ import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicReference;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit test for {@link AbstractScheduledService}.
@@ -52,7 +53,7 @@ import junit.framework.TestCase;
 public class AbstractScheduledServiceTest extends TestCase {
 
   volatile Scheduler configuration = newFixedDelaySchedule(0, 10, MILLISECONDS);
-  volatile ScheduledFuture<?> future = null;
+  volatile @Nullable ScheduledFuture<?> future = null;
 
   volatile boolean atFixedRateCalled = false;
   volatile boolean withFixedDelayCalled = false;
@@ -313,9 +314,9 @@ public class AbstractScheduledServiceTest extends TestCase {
     AtomicInteger numberOfTimesRunCalled = new AtomicInteger(0);
     AtomicInteger numberOfTimesExecutorCalled = new AtomicInteger(0);
     AtomicInteger numberOfTimesSchedulerCalled = new AtomicInteger(0);
-    volatile Exception runException = null;
-    volatile Exception startUpException = null;
-    volatile Exception shutDownException = null;
+    volatile @Nullable Exception runException = null;
+    volatile @Nullable Exception startUpException = null;
+    volatile @Nullable Exception shutDownException = null;
 
     @Override
     protected void runOneIteration() throws Exception {
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java b/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java
index fec9394..9ddcea9 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java
@@ -40,9 +40,9 @@ import junit.framework.TestSuite;
  * </ul>
  *
  * To force selection of our fallback strategies we load {@link AggregateFutureState} (and all of
- * {@code com.google.common.util.concurrent} in degenerate class loaders which make certain platform
- * classes unavailable. Then we construct a test suite so we can run the normal FuturesTest test
- * methods in these degenerate classloaders.
+ * {@code com.google.common.util.concurrent}) in degenerate class loaders which make certain
+ * platform classes unavailable. Then we construct a test suite so we can run the normal FuturesTest
+ * test methods in these degenerate classloaders.
  */
 
 public class AggregateFutureStateFallbackAtomicHelperTest extends TestCase {
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java b/android/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java
index 5bc92dc..b4766bc 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java
@@ -26,6 +26,7 @@ import java.security.Permission;
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit tests for {@link Callables}.
@@ -90,10 +91,10 @@ public class CallablesTest extends TestCase {
   public void testRenaming() throws Exception {
     String oldName = Thread.currentThread().getName();
     final Supplier<String> newName = Suppliers.ofInstance("MyCrazyThreadName");
-    Callable<Void> callable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> callable =
+        new Callable<@Nullable Void>() {
           @Override
-          public Void call() throws Exception {
+          public @Nullable Void call() throws Exception {
             assertEquals(Thread.currentThread().getName(), newName.get());
             return null;
           }
@@ -107,10 +108,10 @@ public class CallablesTest extends TestCase {
     String oldName = Thread.currentThread().getName();
     final Supplier<String> newName = Suppliers.ofInstance("MyCrazyThreadName");
     class MyException extends Exception {}
-    Callable<Void> callable =
-        new Callable<Void>() {
+    Callable<@Nullable Void> callable =
+        new Callable<@Nullable Void>() {
           @Override
-          public Void call() throws Exception {
+          public @Nullable Void call() throws Exception {
             assertEquals(Thread.currentThread().getName(), newName.get());
             throw new MyException();
           }
@@ -141,10 +142,10 @@ public class CallablesTest extends TestCase {
     try {
       final String oldName = Thread.currentThread().getName();
       Supplier<String> newName = Suppliers.ofInstance("MyCrazyThreadName");
-      Callable<Void> callable =
-          new Callable<Void>() {
+      Callable<@Nullable Void> callable =
+          new Callable<@Nullable Void>() {
             @Override
-            public Void call() throws Exception {
+            public @Nullable Void call() throws Exception {
               assertEquals(Thread.currentThread().getName(), oldName);
               return null;
             }
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/CycleDetectingLockFactoryTest.java b/android/guava-tests/test/com/google/common/util/concurrent/CycleDetectingLockFactoryTest.java
index 2b1dd2f..bf388b0 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/CycleDetectingLockFactoryTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/CycleDetectingLockFactoryTest.java
@@ -16,6 +16,7 @@
 
 package com.google.common.util.concurrent;
 
+import static com.google.common.truth.Truth.assertThat;
 
 import com.google.common.base.Joiner;
 import com.google.common.util.concurrent.CycleDetectingLockFactory.Policies;
@@ -26,8 +27,6 @@ import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 import junit.framework.TestCase;
 
 /**
@@ -543,16 +542,6 @@ public class CycleDetectingLockFactoryTest extends TestCase {
   // "LockA -> LockB \b.*\b LockB -> LockC \b.*\b LockC -> LockA"
   private void checkMessage(IllegalStateException exception, String... expectedLockCycle) {
     String regex = Joiner.on("\\b.*\\b").join(expectedLockCycle);
-    assertContainsRegex(regex, exception.getMessage());
-  }
-
-  // TODO(cpovirk): consider adding support for regex to Truth
-  private static void assertContainsRegex(String expectedRegex, String actual) {
-    Pattern pattern = Pattern.compile(expectedRegex);
-    Matcher matcher = pattern.matcher(actual);
-    if (!matcher.find()) {
-      String actualDesc = (actual == null) ? "null" : ('<' + actual + '>');
-      fail("expected to contain regex:<" + expectedRegex + "> but was:" + actualDesc);
-    }
+    assertThat(exception).hasMessageThat().containsMatch(regex);
   }
 }
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java
index 068287c..1dafb3b 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java
@@ -37,6 +37,7 @@ import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Logger;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /** Tests for {@link ExecutionSequencer} */
 public class ExecutionSequencerTest extends TestCase {
@@ -44,7 +45,7 @@ public class ExecutionSequencerTest extends TestCase {
   ExecutorService executor;
 
   private ExecutionSequencer serializer;
-  private SettableFuture<Void> firstFuture;
+  private SettableFuture<@Nullable Void> firstFuture;
   private TestCallable firstCallable;
 
   @Override
@@ -76,7 +77,8 @@ public class ExecutionSequencerTest extends TestCase {
     @SuppressWarnings({"unused", "nullness"})
     Future<?> possiblyIgnoredError = serializer.submitAsync(firstCallable, directExecutor());
     TestCallable secondCallable = new TestCallable(Futures.<Void>immediateFuture(null));
-    ListenableFuture<Void> secondFuture = serializer.submitAsync(secondCallable, directExecutor());
+    ListenableFuture<@Nullable Void> secondFuture =
+        serializer.submitAsync(secondCallable, directExecutor());
     TestCallable thirdCallable = new TestCallable(Futures.<Void>immediateFuture(null));
     @SuppressWarnings({"unused", "nullness"})
     Future<?> possiblyIgnoredError1 = serializer.submitAsync(thirdCallable, directExecutor());
@@ -90,7 +92,7 @@ public class ExecutionSequencerTest extends TestCase {
 
   public void testCancellationMultipleThreads() throws Exception {
     final BlockingCallable blockingCallable = new BlockingCallable();
-    ListenableFuture<Void> unused = serializer.submit(blockingCallable, executor);
+    ListenableFuture<@Nullable Void> unused = serializer.submit(blockingCallable, executor);
     ListenableFuture<Boolean> future2 =
         serializer.submit(
             new Callable<Boolean>() {
@@ -117,7 +119,7 @@ public class ExecutionSequencerTest extends TestCase {
 
   public void testSecondTaskWaitsForFirstEvenIfCancelled() throws Exception {
     final BlockingCallable blockingCallable = new BlockingCallable();
-    ListenableFuture<Void> future1 = serializer.submit(blockingCallable, executor);
+    ListenableFuture<@Nullable Void> future1 = serializer.submit(blockingCallable, executor);
     ListenableFuture<Boolean> future2 =
         serializer.submit(
             new Callable<Boolean>() {
@@ -153,12 +155,12 @@ public class ExecutionSequencerTest extends TestCase {
   public void testCancellationWithReferencedObject() throws Exception {
     Object toBeGCed = new Object();
     WeakReference<Object> ref = new WeakReference<>(toBeGCed);
-    final SettableFuture<Void> settableFuture = SettableFuture.create();
+    final SettableFuture<@Nullable Void> settableFuture = SettableFuture.create();
     ListenableFuture<?> ignored =
         serializer.submitAsync(
-            new AsyncCallable<Void>() {
+            new AsyncCallable<@Nullable Void>() {
               @Override
-              public ListenableFuture<Void> call() {
+              public ListenableFuture<@Nullable Void> call() {
                 return settableFuture;
               }
             },
@@ -195,9 +197,9 @@ public class ExecutionSequencerTest extends TestCase {
     final Future<?>[] thingToCancel = new Future<?>[1];
     results.add(
         serializer.submit(
-            new Callable<Void>() {
+            new Callable<@Nullable Void>() {
               @Override
-              public Void call() {
+              public @Nullable Void call() {
                 thingToCancel[0].cancel(false);
                 return null;
               }
@@ -223,13 +225,13 @@ public class ExecutionSequencerTest extends TestCase {
   }
 
   public void testAvoidsStackOverflow_manySubmitted() throws Exception {
-    final SettableFuture<Void> settableFuture = SettableFuture.create();
-    ArrayList<ListenableFuture<Void>> results = new ArrayList<>(50_001);
+    final SettableFuture<@Nullable Void> settableFuture = SettableFuture.create();
+    ArrayList<ListenableFuture<@Nullable Void>> results = new ArrayList<>(50_001);
     results.add(
         serializer.submitAsync(
-            new AsyncCallable<Void>() {
+            new AsyncCallable<@Nullable Void>() {
               @Override
-              public ListenableFuture<Void> call() {
+              public ListenableFuture<@Nullable Void> call() {
                 return settableFuture;
               }
             },
@@ -242,12 +244,12 @@ public class ExecutionSequencerTest extends TestCase {
   }
 
   public void testAvoidsStackOverflow_manyCancelled() throws Exception {
-    final SettableFuture<Void> settableFuture = SettableFuture.create();
-    ListenableFuture<Void> unused =
+    final SettableFuture<@Nullable Void> settableFuture = SettableFuture.create();
+    ListenableFuture<@Nullable Void> unused =
         serializer.submitAsync(
-            new AsyncCallable<Void>() {
+            new AsyncCallable<@Nullable Void>() {
               @Override
-              public ListenableFuture<Void> call() {
+              public ListenableFuture<@Nullable Void> call() {
                 return settableFuture;
               }
             },
@@ -270,12 +272,12 @@ public class ExecutionSequencerTest extends TestCase {
   }
 
   public void testAvoidsStackOverflow_alternatingCancelledAndSubmitted() throws Exception {
-    final SettableFuture<Void> settableFuture = SettableFuture.create();
-    ListenableFuture<Void> unused =
+    final SettableFuture<@Nullable Void> settableFuture = SettableFuture.create();
+    ListenableFuture<@Nullable Void> unused =
         serializer.submitAsync(
-            new AsyncCallable<Void>() {
+            new AsyncCallable<@Nullable Void>() {
               @Override
-              public ListenableFuture<Void> call() {
+              public ListenableFuture<@Nullable Void> call() {
                 return settableFuture;
               }
             },
@@ -344,12 +346,12 @@ public class ExecutionSequencerTest extends TestCase {
                   },
                   service)
               .get();
-      final SettableFuture<Void> settableFuture = SettableFuture.create();
+      final SettableFuture<@Nullable Void> settableFuture = SettableFuture.create();
       ListenableFuture<?> unused =
           serializer.submitAsync(
-              new AsyncCallable<Void>() {
+              new AsyncCallable<@Nullable Void>() {
                 @Override
-                public ListenableFuture<Void> call() {
+                public ListenableFuture<@Nullable Void> call() {
                   return settableFuture;
                 }
               },
@@ -359,9 +361,9 @@ public class ExecutionSequencerTest extends TestCase {
           // after some number of iterations, switch threads
           unused =
               serializer.submit(
-                  new Callable<Void>() {
+                  new Callable<@Nullable Void>() {
                     @Override
-                    public Void call() {
+                    public @Nullable Void call() {
                       holder.count++;
                       return null;
                     }
@@ -383,9 +385,9 @@ public class ExecutionSequencerTest extends TestCase {
           // Otherwise, schedule a task on directExecutor
           unused =
               serializer.submit(
-                  new Callable<Void>() {
+                  new Callable<@Nullable Void>() {
                     @Override
-                    public Void call() {
+                    public @Nullable Void call() {
                       holder.count++;
                       return null;
                     }
@@ -416,14 +418,14 @@ public class ExecutionSequencerTest extends TestCase {
     assertThat(second.toString()).contains(secondCallable.future.toString());
   }
 
-  private static class BlockingCallable implements Callable<Void> {
+  private static class BlockingCallable implements Callable<@Nullable Void> {
     private final CountDownLatch startLatch = new CountDownLatch(1);
     private final CountDownLatch stopLatch = new CountDownLatch(1);
 
     private volatile boolean running = false;
 
     @Override
-    public Void call() throws InterruptedException {
+    public @Nullable Void call() throws InterruptedException {
       running = true;
       startLatch.countDown();
       stopLatch.await();
@@ -444,17 +446,17 @@ public class ExecutionSequencerTest extends TestCase {
     }
   }
 
-  private static final class TestCallable implements AsyncCallable<Void> {
+  private static final class TestCallable implements AsyncCallable<@Nullable Void> {
 
-    private final ListenableFuture<Void> future;
+    private final ListenableFuture<@Nullable Void> future;
     private boolean called = false;
 
-    private TestCallable(ListenableFuture<Void> future) {
+    private TestCallable(ListenableFuture<@Nullable Void> future) {
       this.future = future;
     }
 
     @Override
-    public ListenableFuture<Void> call() throws Exception {
+    public ListenableFuture<@Nullable Void> call() throws Exception {
       called = true;
       return future;
     }
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/ForwardingObjectTester.java b/android/guava-tests/test/com/google/common/util/concurrent/ForwardingObjectTester.java
index 84b0426..ad391ef 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/ForwardingObjectTester.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/ForwardingObjectTester.java
@@ -28,7 +28,7 @@ import java.lang.reflect.Method;
 import java.util.Arrays;
 
 /**
- * Tester for typical subclass of {@link ForwardingObject} by using EasyMock partial mocks.
+ * Tester for typical subclass of {@link ForwardingObject} by using Mockito.
  *
  * @author Ben Yu
  */
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java b/android/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java
index 5a1464d..2efdebe 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java
@@ -21,19 +21,17 @@ import static com.google.common.util.concurrent.Futures.addCallback;
 import static com.google.common.util.concurrent.MoreExecutors.directExecutor;
 
 import com.google.common.annotations.GwtCompatible;
-import com.google.common.annotations.GwtIncompatible;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.Executor;
-import javax.annotation.CheckForNull;
 import junit.framework.TestCase;
-import org.mockito.Mockito;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Test for {@link FutureCallback}.
  *
  * @author Anthony Zana
  */
-@GwtCompatible(emulated = true)
+@GwtCompatible
 public class FutureCallbackTest extends TestCase {
   public void testSameThreadSuccess() {
     SettableFuture<String> f = SettableFuture.create();
@@ -89,38 +87,60 @@ public class FutureCallbackTest extends TestCase {
     addCallback(f, callback, directExecutor());
   }
 
-  public void testRuntimeExeceptionFromGet() {
+  public void testRuntimeExceptionFromGet() {
     RuntimeException e = new IllegalArgumentException("foo not found");
     ListenableFuture<String> f = UncheckedThrowingFuture.throwingRuntimeException(e);
     MockCallback callback = new MockCallback(e);
     addCallback(f, callback, directExecutor());
   }
 
-  @GwtIncompatible // Mockito
   public void testOnSuccessThrowsRuntimeException() throws Exception {
     RuntimeException exception = new RuntimeException();
     String result = "result";
     SettableFuture<String> future = SettableFuture.create();
-    @SuppressWarnings("unchecked") // Safe for a mock
-    FutureCallback<String> callback = Mockito.mock(FutureCallback.class);
+    int[] successCalls = new int[1];
+    int[] failureCalls = new int[1];
+    FutureCallback<String> callback =
+        new FutureCallback<String>() {
+          @Override
+          public void onSuccess(String result) {
+            successCalls[0]++;
+            throw exception;
+          }
+
+          @Override
+          public void onFailure(Throwable t) {
+            failureCalls[0]++;
+          }
+        };
     addCallback(future, callback, directExecutor());
-    Mockito.doThrow(exception).when(callback).onSuccess(result);
     future.set(result);
     assertEquals(result, future.get());
-    Mockito.verify(callback).onSuccess(result);
-    Mockito.verifyNoMoreInteractions(callback);
+    assertThat(successCalls[0]).isEqualTo(1);
+    assertThat(failureCalls[0]).isEqualTo(0);
   }
 
-  @GwtIncompatible // Mockito
   public void testOnSuccessThrowsError() throws Exception {
     class TestError extends Error {}
     TestError error = new TestError();
     String result = "result";
     SettableFuture<String> future = SettableFuture.create();
-    @SuppressWarnings("unchecked") // Safe for a mock
-    FutureCallback<String> callback = Mockito.mock(FutureCallback.class);
+    int[] successCalls = new int[1];
+    int[] failureCalls = new int[1];
+    FutureCallback<String> callback =
+        new FutureCallback<String>() {
+          @Override
+          public void onSuccess(String result) {
+            successCalls[0]++;
+            throw error;
+          }
+
+          @Override
+          public void onFailure(Throwable t) {
+            failureCalls[0]++;
+          }
+        };
     addCallback(future, callback, directExecutor());
-    Mockito.doThrow(error).when(callback).onSuccess(result);
     try {
       future.set(result);
       fail("Should have thrown");
@@ -128,8 +148,8 @@ public class FutureCallbackTest extends TestCase {
       assertSame(error, e);
     }
     assertEquals(result, future.get());
-    Mockito.verify(callback).onSuccess(result);
-    Mockito.verifyNoMoreInteractions(callback);
+    assertThat(successCalls[0]).isEqualTo(1);
+    assertThat(failureCalls[0]).isEqualTo(0);
   }
 
   public void testWildcardFuture() {
@@ -157,8 +177,8 @@ public class FutureCallbackTest extends TestCase {
   }
 
   private final class MockCallback implements FutureCallback<String> {
-    @CheckForNull private String value = null;
-    @CheckForNull private Throwable failure = null;
+    @Nullable private String value = null;
+    @Nullable private Throwable failure = null;
     private boolean wasCalled = false;
 
     MockCallback(String expectedValue) {
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java
index 6fa2a32..c46801b 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java
@@ -88,9 +88,9 @@ import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.logging.LogRecord;
 import java.util.logging.Logger;
-import javax.annotation.CheckForNull;
 import junit.framework.AssertionFailedError;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Unit tests for {@link Futures}.
@@ -141,7 +141,7 @@ public class FuturesTest extends TestCase {
   }
 
   public void testImmediateVoidFuture() throws Exception {
-    ListenableFuture<Void> voidFuture = immediateVoidFuture();
+    ListenableFuture<@Nullable Void> voidFuture = immediateVoidFuture();
 
     assertThat(getDone(voidFuture)).isNull();
     assertThat(getDoneFromTimeoutOverload(voidFuture)).isNull();
@@ -388,7 +388,7 @@ public class FuturesTest extends TestCase {
         new AsyncFunction<Foo, Bar>() {
           @Override
           public ListenableFuture<Bar> apply(Foo unused) {
-            throw new AssertionFailedError("Unexpeted call to apply.");
+            throw new AssertionFailedError("Unexpected call to apply.");
           }
         };
     assertTrue(transformAsync(input, function, directExecutor()).cancel(false));
@@ -402,7 +402,7 @@ public class FuturesTest extends TestCase {
         new AsyncFunction<Foo, Bar>() {
           @Override
           public ListenableFuture<Bar> apply(Foo unused) {
-            throw new AssertionFailedError("Unexpeted call to apply.");
+            throw new AssertionFailedError("Unexpected call to apply.");
           }
         };
     assertTrue(transformAsync(input, function, directExecutor()).cancel(true));
@@ -1662,7 +1662,7 @@ public class FuturesTest extends TestCase {
   }
 
   private static <I, O> AsyncFunction<I, O> constantAsyncFunction(
-      final ListenableFuture<O> output) {
+      final @Nullable ListenableFuture<O> output) {
     return new AsyncFunction<I, O>() {
       @Override
       public ListenableFuture<O> apply(I input) {
@@ -1978,7 +1978,7 @@ public class FuturesTest extends TestCase {
             pendingRunnables.add(runnable);
           }
         };
-    ListenableFuture<Void> future = submit(runnable, executor);
+    ListenableFuture<@Nullable Void> future = submit(runnable, executor);
     assertThat(future.isDone()).isFalse();
     assertThat(executedRunnables).isEmpty();
     assertThat(pendingRunnables).hasSize(1);
@@ -1997,7 +1997,7 @@ public class FuturesTest extends TestCase {
             throw exception;
           }
         };
-    ListenableFuture<Void> future = submit(runnable, directExecutor());
+    ListenableFuture<@Nullable Void> future = submit(runnable, directExecutor());
     try {
       getDone(future);
       fail();
@@ -2110,7 +2110,8 @@ public class FuturesTest extends TestCase {
     assertFalse(callableCalled.get());
   }
 
-  private static <T> AsyncCallable<T> constantAsyncCallable(final ListenableFuture<T> returnValue) {
+  private static <T> AsyncCallable<T> constantAsyncCallable(
+      final @Nullable ListenableFuture<T> returnValue) {
     return new AsyncCallable<T>() {
       @Override
       public ListenableFuture<T> call() {
@@ -3677,7 +3678,7 @@ public class FuturesTest extends TestCase {
   @GwtIncompatible // used only in GwtIncompatible tests
   private static class TestException extends Exception {
 
-    TestException(@CheckForNull Throwable cause) {
+    TestException(@Nullable Throwable cause) {
       super(cause);
     }
   }
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java b/android/guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java
index adeb2d1..9054ea9 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/GeneratedMonitorTest.java
@@ -32,6 +32,7 @@ import java.util.concurrent.FutureTask;
 import java.util.concurrent.TimeUnit;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Generated tests for {@link Monitor}.
@@ -435,7 +436,11 @@ public class GeneratedMonitorTest extends TestCase {
   private final CountDownLatch callCompletedLatch;
 
   private GeneratedMonitorTest(
-      Method method, Scenario scenario, boolean fair, Timeout timeout, Outcome expectedOutcome) {
+      Method method,
+      Scenario scenario,
+      boolean fair,
+      @Nullable Timeout timeout,
+      Outcome expectedOutcome) {
     super(nameFor(method, scenario, fair, timeout, expectedOutcome));
     this.method = method;
     this.scenario = scenario;
@@ -469,7 +474,7 @@ public class GeneratedMonitorTest extends TestCase {
             runChosenTest();
           }
         };
-    final FutureTask<Void> task = new FutureTask<>(runChosenTest, null);
+    final FutureTask<@Nullable Void> task = new FutureTask<>(runChosenTest, null);
     startThread(
         new Runnable() {
           @Override
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/InterruptibleTaskTest.java b/android/guava-tests/test/com/google/common/util/concurrent/InterruptibleTaskTest.java
index 0df083f..6d15913 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/InterruptibleTaskTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/InterruptibleTaskTest.java
@@ -23,6 +23,7 @@ import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.LockSupport;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 public final class InterruptibleTaskTest extends TestCase {
 
@@ -30,10 +31,10 @@ public final class InterruptibleTaskTest extends TestCase {
   // transition to DONE
   public void testInterruptThrows() throws Exception {
     final CountDownLatch isInterruptibleRegistered = new CountDownLatch(1);
-    InterruptibleTask<Void> task =
-        new InterruptibleTask<Void>() {
+    InterruptibleTask<@Nullable Void> task =
+        new InterruptibleTask<@Nullable Void>() {
           @Override
-          Void runInterruptibly() throws Exception {
+          @Nullable Void runInterruptibly() throws Exception {
             BrokenChannel bc = new BrokenChannel();
             bc.doBegin();
             isInterruptibleRegistered.countDown();
@@ -52,7 +53,7 @@ public final class InterruptibleTaskTest extends TestCase {
           }
 
           @Override
-          void afterRanInterruptiblySuccess(Void result) {}
+          void afterRanInterruptiblySuccess(@Nullable Void result) {}
 
           @Override
           void afterRanInterruptiblyFailure(Throwable error) {}
@@ -100,10 +101,10 @@ public final class InterruptibleTaskTest extends TestCase {
   public void testInterruptIsSlow() throws Exception {
     final CountDownLatch isInterruptibleRegistered = new CountDownLatch(1);
     final SlowChannel slowChannel = new SlowChannel();
-    final InterruptibleTask<Void> task =
-        new InterruptibleTask<Void>() {
+    final InterruptibleTask<@Nullable Void> task =
+        new InterruptibleTask<@Nullable Void>() {
           @Override
-          Void runInterruptibly() throws Exception {
+          @Nullable Void runInterruptibly() throws Exception {
             slowChannel.doBegin();
             isInterruptibleRegistered.countDown();
             try {
@@ -126,7 +127,7 @@ public final class InterruptibleTaskTest extends TestCase {
           }
 
           @Override
-          void afterRanInterruptiblySuccess(Void result) {}
+          void afterRanInterruptiblySuccess(@Nullable Void result) {}
 
           @Override
           void afterRanInterruptiblyFailure(Throwable error) {}
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTest.java b/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTest.java
new file mode 100644
index 0000000..5c12696
--- /dev/null
+++ b/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTest.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (C) 2023 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.google.common.util.concurrent;
+
+import static com.google.common.truth.Truth.assertWithMessage;
+
+import java.util.concurrent.Executor;
+import java.util.concurrent.Future;
+import junit.framework.TestCase;
+
+/** Test for {@link ListenableFuture}. */
+public class ListenableFutureTest extends TestCase {
+  public void testNoNewApis() throws Exception {
+    assertWithMessage(
+            "Do not add new methods to ListenableFuture. Its API needs to continue to match the"
+                + " version we released in a separate artifact com.google.guava:listenablefuture.")
+        .that(ListenableFuture.class.getDeclaredMethods())
+        .asList()
+        .containsExactly(
+            ListenableFuture.class.getMethod("addListener", Runnable.class, Executor.class));
+    assertWithMessage(
+            "Do not add new supertypes to ListenableFuture. Its API needs to continue to match the"
+                + " version we released in a separate artifact com.google.guava:listenablefuture.")
+        .that(ListenableFuture.class.getInterfaces())
+        .asList()
+        .containsExactly(Future.class);
+  }
+}
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java b/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java
index 575ed06..5c99bc8 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java
@@ -29,7 +29,7 @@ import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
-import javax.annotation.CheckForNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * Used to test listenable future implementations.
@@ -67,7 +67,7 @@ public class ListenableFutureTester {
     exec.shutdown();
   }
 
-  public void testCompletedFuture(@CheckForNull Object expectedValue)
+  public void testCompletedFuture(@Nullable Object expectedValue)
       throws InterruptedException, ExecutionException {
     assertTrue(future.isDone());
     assertFalse(future.isCancelled());
@@ -94,7 +94,7 @@ public class ListenableFutureTester {
     }
   }
 
-  public void testFailedFuture(@CheckForNull String message) throws InterruptedException {
+  public void testFailedFuture(@Nullable String message) throws InterruptedException {
     assertTrue(future.isDone());
     assertFalse(future.isCancelled());
 
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java b/android/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java
index aac6173..dab6d92 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java
@@ -72,6 +72,7 @@ import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
+import org.checkerframework.checker.nullness.qual.Nullable;
 import org.mockito.InOrder;
 import org.mockito.Mockito;
 
@@ -185,9 +186,9 @@ public class MoreExecutorsTest extends JSR166TestCase {
                 try {
                   Future<?> future =
                       executor.submit(
-                          new Callable<Void>() {
+                          new Callable<@Nullable Void>() {
                             @Override
-                            public Void call() throws Exception {
+                            public @Nullable Void call() throws Exception {
                               // WAIT #1
                               barrier.await(1, TimeUnit.SECONDS);
 
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java b/android/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java
index 4071354..a2773ba 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/RateLimiterTest.java
@@ -35,7 +35,6 @@ import java.util.Locale;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 import junit.framework.TestCase;
-import org.easymock.EasyMock;
 import org.mockito.Mockito;
 
 /**
@@ -564,24 +563,9 @@ public class RateLimiterTest extends TestCase {
     }
   }
 
-  /*
-   * Note: Mockito appears to lose its ability to Mock doGetRate as of Android 21. If we start
-   * testing with that version or newer, we'll need to suppress this test (or see if Mockito can be
-   * changed to support this).
-   */
+  @AndroidIncompatible // Mockito loses its ability to mock doGetRate as of Android 21
   public void testMockingMockito() throws Exception {
     RateLimiter mock = Mockito.mock(RateLimiter.class);
-    doTestMocking(mock);
-  }
-
-  @AndroidIncompatible // EasyMock Class Extension doesn't appear to work on Android.
-  public void testMockingEasyMock() throws Exception {
-    RateLimiter mock = EasyMock.createNiceMock(RateLimiter.class);
-    EasyMock.replay(mock);
-    doTestMocking(mock);
-  }
-
-  private static void doTestMocking(RateLimiter mock) throws Exception {
     for (Method method : RateLimiter.class.getMethods()) {
       if (!isStatic(method.getModifiers())
           && !NOT_WORKING_ON_MOCKS.contains(method.getName())
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java
index 80e7ab2..cbb6c1c 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java
@@ -310,7 +310,7 @@ public class SequentialExecutorTest extends TestCase {
       executor.execute(errorTask);
       service.execute(barrierTask); // submit directly to the service
       // the barrier task runs after the error task so we know that the error has been observed by
-      // SequentialExecutor by the time the barrier is satified
+      // SequentialExecutor by the time the barrier is satisfied
       barrier.await(1, TimeUnit.SECONDS);
       executor.execute(barrierTask);
       // timeout means the second task wasn't even tried
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java b/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java
index 7db6b06..958be19 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java
@@ -492,7 +492,7 @@ public class ServiceManagerTest extends TestCase {
           }
         };
     stoppingThread.start();
-    // this should be super fast since the only non stopped service is a NoOpService
+    // this should be super fast since the only non-stopped service is a NoOpService
     stoppingThread.join(1000);
     assertFalse("stopAsync has deadlocked!.", stoppingThread.isAlive());
     failLeave.countDown(); // release the background thread
@@ -611,7 +611,7 @@ public class ServiceManagerTest extends TestCase {
   }
 
   /**
-   * This service will shutdown very quickly after stopAsync is called and uses a background thread
+   * This service will shut down very quickly after stopAsync is called and uses a background thread
    * so that we know that the stopping() listeners will execute on a different thread than the
    * terminated() listeners.
    */
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/SimpleTimeLimiterTest.java b/android/guava-tests/test/com/google/common/util/concurrent/SimpleTimeLimiterTest.java
index 3540686..37ef84f 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/SimpleTimeLimiterTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/SimpleTimeLimiterTest.java
@@ -278,7 +278,7 @@ public class SimpleTimeLimiterTest extends TestCase {
         finished = true;
         return input;
       } catch (InterruptedException e) {
-        return null;
+        throw new AssertionError();
       }
     }
 
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/TestThread.java b/android/guava-tests/test/com/google/common/util/concurrent/TestThread.java
index f85d313..ef3b274 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/TestThread.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/TestThread.java
@@ -28,8 +28,8 @@ import java.lang.reflect.Method;
 import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
-import javax.annotation.CheckForNull;
 import junit.framework.AssertionFailedError;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /**
  * A helper for concurrency testing. One or more {@code TestThread} instances are instantiated in a
@@ -58,7 +58,7 @@ public final class TestThread<L> extends Thread implements TearDown {
   private final SynchronousQueue<Request> requestQueue = new SynchronousQueue<>();
   private final SynchronousQueue<Response> responseQueue = new SynchronousQueue<>();
 
-  private Throwable uncaughtThrowable = null;
+  private @Nullable Throwable uncaughtThrowable = null;
 
   public TestThread(L lockLikeObject, String threadName) {
     super(threadName);
@@ -168,7 +168,7 @@ public final class TestThread<L> extends Thread implements TearDown {
    * Asserts that a prior call that had caused this thread to block or wait has since returned
    * normally.
    */
-  public void assertPriorCallReturns(@CheckForNull String methodName) throws Exception {
+  public void assertPriorCallReturns(@Nullable String methodName) throws Exception {
     assertEquals(null, getResponse(methodName).getResult());
   }
 
@@ -176,7 +176,7 @@ public final class TestThread<L> extends Thread implements TearDown {
    * Asserts that a prior call that had caused this thread to block or wait has since returned the
    * expected boolean value.
    */
-  public void assertPriorCallReturns(boolean expected, @CheckForNull String methodName)
+  public void assertPriorCallReturns(boolean expected, @Nullable String methodName)
       throws Exception {
     assertEquals(expected, getResponse(methodName).getResult());
   }
@@ -275,7 +275,7 @@ public final class TestThread<L> extends Thread implements TearDown {
     final Object result;
     final Throwable throwable;
 
-    Response(String methodName, Object result, Throwable throwable) {
+    Response(String methodName, @Nullable Object result, @Nullable Throwable throwable) {
       this.methodName = methodName;
       this.result = result;
       this.throwable = throwable;
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java b/android/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java
index e735ae0..e58d3ee 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java
@@ -33,6 +33,7 @@ import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
 import junit.framework.TestCase;
+import org.checkerframework.checker.nullness.qual.Nullable;
 
 /** Test case for {@link TrustedListenableFutureTask}. */
 @GwtCompatible(emulated = true)
@@ -172,11 +173,11 @@ public class TrustedListenableFutureTaskTest extends TestCase {
   public void testToString() throws Exception {
     final CountDownLatch enterLatch = new CountDownLatch(1);
     final CountDownLatch exitLatch = new CountDownLatch(1);
-    final TrustedListenableFutureTask<Void> task =
+    final TrustedListenableFutureTask<@Nullable Void> task =
         TrustedListenableFutureTask.create(
-            new Callable<Void>() {
+            new Callable<@Nullable Void>() {
               @Override
-              public Void call() throws Exception {
+              public @Nullable Void call() throws Exception {
                 enterLatch.countDown();
                 new CountDownLatch(1).await(); // wait forever
                 return null;
@@ -205,7 +206,7 @@ public class TrustedListenableFutureTaskTest extends TestCase {
     exitLatch.await();
   }
 
-  @GwtIncompatible // used only in GwtIncomaptible tests
+  @GwtIncompatible // used only in GwtIncompatible tests
   private void awaitUnchecked(CyclicBarrier barrier) {
     try {
       barrier.await();
diff --git a/android/guava-tests/test/com/google/common/util/concurrent/WrappingExecutorServiceTest.java b/android/guava-tests/test/com/google/common/util/concurrent/WrappingExecutorServiceTest.java
index fdb2c54..5cbc7c2 100644
--- a/android/guava-tests/test/com/google/common/util/concurrent/WrappingExecutorServiceTest.java
+++ b/android/guava-tests/test/com/google/common/util/concurrent/WrappingExecutorServiceTest.java
@@ -188,7 +188,7 @@ public class WrappingExecutorServiceTest extends TestCase {
     }
   }
 
-  // TODO: If this test can ever depend on EasyMock or the like, use it instead.
+  // TODO: If this test can ever depend on Mockito or the like, use it instead.
   private static final class MockExecutor implements ExecutorService {
     private String lastMethodCalled = "";
     private long lastTimeoutInMillis = -1;

diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/FindNodeTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/FindNodeTest.java
index c927bca..1143dd3 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/FindNodeTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/FindNodeTest.java
@@ -21,13 +21,16 @@
 
 package com.github.javaparser.ast;
 
+import static com.github.javaparser.StaticJavaParser.parse;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
+import java.util.function.Predicate;
+
+import org.junit.jupiter.api.Test;
+
 import com.github.javaparser.ast.expr.MethodCallExpr;
 import com.github.javaparser.ast.stmt.BlockStmt;
 import com.github.javaparser.ast.stmt.TryStmt;
-import org.junit.jupiter.api.Test;
-
-import static com.github.javaparser.StaticJavaParser.parse;
-import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**
  * Some tests for finding descendant and ancestor nodes.
@@ -86,13 +89,14 @@ class FindNodeTest {
         MethodCallExpr methodCallExpr = cu.findFirst(MethodCallExpr.class).orElse(null);
 
         // find the finally block that the method call expression foo() is in
-        BlockStmt actual = methodCallExpr.findAncestor(BlockStmt.class, bs -> {
+        Predicate<BlockStmt> predicate = (bs) -> {
             if (bs.getParentNode().isPresent() && bs.getParentNode().get() instanceof TryStmt) {
                 TryStmt ancestralTryStmt = (TryStmt) bs.getParentNode().get();
                 return bs == ancestralTryStmt.getFinallyBlock().orElse(null);
             }
             return false;
-        }).orElse(null);
+        };
+        BlockStmt actual = methodCallExpr.findAncestor(predicate, BlockStmt.class).orElse(null);
 
         BlockStmt expected = cu.getType(0).getMember(0)
                 .asMethodDeclaration().getBody().get().getStatement(0)
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/WalkFindTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/WalkFindTest.java
index 8e21f12..21d1125 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/ast/WalkFindTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/ast/WalkFindTest.java
@@ -1,20 +1,22 @@
 package com.github.javaparser.ast;
 
-import com.github.javaparser.ast.body.FieldDeclaration;
-import com.github.javaparser.ast.body.VariableDeclarator;
-import com.github.javaparser.ast.expr.Expression;
-import com.github.javaparser.ast.expr.IntegerLiteralExpr;
-import com.github.javaparser.ast.expr.SimpleName;
-import org.junit.jupiter.api.Test;
+import static com.github.javaparser.StaticJavaParser.parse;
+import static com.github.javaparser.StaticJavaParser.parseExpression;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 
 import java.util.List;
 import java.util.Optional;
 import java.util.stream.Collectors;
 
-import static com.github.javaparser.StaticJavaParser.parse;
-import static com.github.javaparser.StaticJavaParser.parseExpression;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertFalse;
+import org.junit.jupiter.api.Test;
+
+import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
+import com.github.javaparser.ast.body.FieldDeclaration;
+import com.github.javaparser.ast.body.VariableDeclarator;
+import com.github.javaparser.ast.expr.Expression;
+import com.github.javaparser.ast.expr.IntegerLiteralExpr;
+import com.github.javaparser.ast.expr.SimpleName;
 
 public class WalkFindTest {
     @Test
@@ -30,6 +32,18 @@ public class WalkFindTest {
         SimpleName x = cu.getClassByName("X").get().getMember(0).asFieldDeclaration().getVariables().get(0).getName();
         assertEquals("int x;", x.findAncestor(FieldDeclaration.class).get().toString());
     }
+    
+    @Test
+    void findParentFromTypes() {
+        CompilationUnit cu = parse("class X{Integer x;}");
+        VariableDeclarator vd = cu.getClassByName("X").get().getMember(0).asFieldDeclaration().getVariables().get(0);
+        assertEquals(FieldDeclaration.class.getName(),
+                vd.findAncestor(new Class[] { CompilationUnit.class, ClassOrInterfaceDeclaration.class, FieldDeclaration.class }).get().getClass()
+                        .getName());
+        assertEquals(ClassOrInterfaceDeclaration.class.getName(),
+                vd.findAncestor(new Class[] { CompilationUnit.class, ClassOrInterfaceDeclaration.class }).get().getClass()
+                        .getName());
+    }
 
     @Test
     void cantFindCompilationUnit() {
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/Issue3440Test.java b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/Issue3440Test.java
new file mode 100755
index 0000000..e2b0e09
--- /dev/null
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/Issue3440Test.java
@@ -0,0 +1,42 @@
+package com.github.javaparser.printer.lexicalpreservation;
+
+/*
+ * Copyright (C) 2007-2010 JÃºlio Vilmar Gesser.
+ * Copyright (C) 2011, 2013-2019 The JavaParser Team.
+ *
+ * This file is part of JavaParser.
+ *
+ * JavaParser can be used either under the terms of
+ * a) the GNU Lesser General Public License as published by
+ *     the Free Software Foundation, either version 3 of the License, or
+ *     (at your option) any later version.
+ * b) the terms of the Apache License
+ *
+ * You should have received a copy of both licenses in LICENCE.LGPL and
+ * LICENCE.APACHE. Please refer to those files for details.
+ *
+ * JavaParser is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License for more details.
+ */
+
+import org.junit.jupiter.api.Test;
+
+import com.github.javaparser.ast.NodeList;
+import com.github.javaparser.ast.stmt.SwitchEntry;
+import com.github.javaparser.utils.TestUtils;
+
+public class Issue3440Test extends AbstractLexicalPreservingTest {
+
+    @Test
+    void test3440() {
+        considerCode("public class Foo { public void bar() { switch(1) {case 1: break; } } }");
+        String expected = "public class Foo { public void bar() { switch(1) {case 1:  } } }";
+        LexicalPreservingPrinter.setup(cu);
+        SwitchEntry entry = cu.findFirst(SwitchEntry.class).get();
+        entry.setStatements(new NodeList<>());
+        TestUtils.assertEqualsStringIgnoringEol(expected, LexicalPreservingPrinter.print(cu));
+    }
+    
+}

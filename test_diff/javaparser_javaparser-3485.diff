diff --git a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/utils/SymbolSolverCollectionStrategyTest.java b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/utils/SymbolSolverCollectionStrategyTest.java
index 66347bf..0f79a33 100644
--- a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/utils/SymbolSolverCollectionStrategyTest.java
+++ b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/utils/SymbolSolverCollectionStrategyTest.java
@@ -21,20 +21,25 @@
 
 package com.github.javaparser.symbolsolver.utils;
 
+import static com.github.javaparser.utils.CodeGenerationUtils.classLoaderRoot;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
+import java.io.IOException;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.Arrays;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicInteger;
+import java.util.stream.Collectors;
+
+import org.junit.jupiter.api.Test;
+
 import com.github.javaparser.ParseResult;
 import com.github.javaparser.ast.CompilationUnit;
 import com.github.javaparser.ast.body.MethodDeclaration;
 import com.github.javaparser.utils.Log;
 import com.github.javaparser.utils.ProjectRoot;
 import com.github.javaparser.utils.SourceRoot;
-import org.junit.jupiter.api.Test;
-
-import java.io.IOException;
-import java.nio.file.Path;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import static com.github.javaparser.utils.CodeGenerationUtils.classLoaderRoot;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 class SymbolSolverCollectionStrategyTest {
 
@@ -62,4 +67,19 @@ class SymbolSolverCollectionStrategyTest {
         // not too many MethodDeclarations should be unresolved
         assertTrue(unresolved.get() < 10);
     }
+    
+    @Test
+    void resolveMultiSourceRoots() {
+        String[] relativeRootDir = {"/src/main/java-templates", "src/main/java", "src/main/javacc-support", "target/generated-sources/javacc", "target/generated-sources/java-templates", "src/main/java-templates"};
+        Path mainDirectory = classLoaderRoot(SymbolSolverCollectionStrategyTest.class).resolve("../../../javaparser-core").normalize();
+        ProjectRoot projectRoot = new SymbolSolverCollectionStrategy().collect(mainDirectory);
+        List<com.github.javaparser.utils.SourceRoot> sourceRoots = projectRoot.getSourceRoots();
+        // get all source root directories
+        List<String> roots = projectRoot.getSourceRoots().stream().map(s -> s.getRoot().toString()).collect(Collectors.toList());
+        // verify each member of the list
+        Arrays.stream(relativeRootDir).forEach(rrd -> {
+            Path p = Paths.get(mainDirectory.toString(), rrd);
+            assertTrue(roots.contains(p.toString()));
+        });
+    }
 }

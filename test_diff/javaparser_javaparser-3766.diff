diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java
index 75e8aab..29c3c83 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/LexicalPreservingPrinterTest.java
@@ -1755,5 +1755,63 @@ class LexicalPreservingPrinterTest extends AbstractLexicalPreservingTest {
         assertTransformedToString(expectedCode, cu);
 
     }
+    
+    // issue 3216 LexicalPreservingPrinter add Wrong indentation when removing comments
+    @Test
+    void removedIndentationLineCommentsPrinted() {
+		considerCode("public class Foo {\n" +
+    			"  //line \n" +
+    			"  void mymethod() {\n" +
+    			"  }\n" +
+    			"}");
+		String expected =
+				"public class Foo {\n" + 
+		    	"  void mymethod() {\n" +
+		    	"  }\n" +
+		    	"}";
+    	cu.getAllContainedComments().get(0).remove();
+    	System.out.println(LexicalPreservingPrinter.print(cu));
+    	assertEqualsStringIgnoringEol(expected, LexicalPreservingPrinter.print(cu));
+    }
+    
+    // issue 3216 LexicalPreservingPrinter add Wrong indentation when removing comments
+    @Test
+    void removedIndentationBlockCommentsPrinted() {
+    	considerCode("public class Foo {\n" +
+    			"  /*\n" +
+    			"  *Block comment coming through\n" +
+    			"  */\n" +
+    			"  void mymethod() {\n" +
+    			"  }\n" +
+    			"}");
+    	String expected =
+    			"public class Foo {\n" +
+    	    	"  void mymethod() {\n" +
+    	    	"  }\n" +
+    	    	"}";
+    	cu.getAllContainedComments().get(0).remove();
+    	
+    	assertEqualsStringIgnoringEol(expected, LexicalPreservingPrinter.print(cu));
+    }
+    
+ // issue 3216 LexicalPreservingPrinter add Wrong indentation when removing comments
+    @Test
+    void removedIndentationJavaDocCommentsPrinted() {
+        considerCode("public class Foo {\n" +
+                "  /**\n" +
+                "   *JavaDoc comment coming through\n" +
+                "   */\n" +
+                "  void mymethod() {\n" +
+                "  }\n" +
+                "}");
+        String expected =
+        		"public class Foo {\n" +
+                "  void mymethod() {\n" +
+                "  }\n" +
+                "}";
+        cu.getAllContainedComments().get(0).remove();
+
+        assertEqualsStringIgnoringEol(expected, LexicalPreservingPrinter.print(cu));
+    }
 
 }
diff --git a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/body/AnnotationMemberDeclarationTransformationsTest.java b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/body/AnnotationMemberDeclarationTransformationsTest.java
index f00c746..29bc5a1 100644
--- a/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/body/AnnotationMemberDeclarationTransformationsTest.java
+++ b/javaparser-core-testing/src/test/java/com/github/javaparser/printer/lexicalpreservation/transformations/ast/body/AnnotationMemberDeclarationTransformationsTest.java
@@ -161,7 +161,7 @@ class AnnotationMemberDeclarationTransformationsTest extends AbstractLexicalPres
     void removingJavadoc() {
         AnnotationMemberDeclaration it = consider("/**Cool this annotation!*/ int foo();");
         assertTrue(it.getJavadocComment().get().remove());
-        assertTransformedToString("@interface AD {  int foo(); }", it.getParentNode().get());
+        assertTransformedToString("@interface AD { int foo(); }", it.getParentNode().get());
     }
 
     @Test

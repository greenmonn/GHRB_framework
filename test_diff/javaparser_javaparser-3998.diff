diff --git a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/JavaParserFacadeResolutionTest.java b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/JavaParserFacadeResolutionTest.java
index 76cb949..8cac015 100644
--- a/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/JavaParserFacadeResolutionTest.java
+++ b/javaparser-symbol-solver-testing/src/test/java/com/github/javaparser/symbolsolver/resolution/JavaParserFacadeResolutionTest.java
@@ -250,6 +250,49 @@ class JavaParserFacadeResolutionTest extends AbstractResolutionTest {
         assertEquals("java.util.List<int[]>", resolvedType.describe());
     }
 
+    @Test
+    void resolveTypeParameterFromReferenceArrayArgument() {
+        String sourceCode = "" +
+                "import java.util.Arrays;\n" +
+                "\n" +
+                "public class Main {\n" +
+                "    public void main(String[] args) {\n" +
+                "        Arrays.asList(args);\n" +
+                "    }\n" +
+                "}";
+
+        JavaParser parser = createParserWithResolver(defaultTypeSolver());
+        CompilationUnit cu = parser.parse(sourceCode).getResult().get();
+
+        MethodCallExpr mce = cu.findFirst(MethodCallExpr.class).get();
+
+        ResolvedType resolvedType = mce.calculateResolvedType();
+
+        assertEquals("java.util.List<java.lang.String>", resolvedType.describe());
+    }
+
+    @Test
+    void resolveTypeParameterFromPrimitiveArrayArgumentOnNonGenericExpectedParameter() {
+        String sourceCode = "" +
+        		"import java.util.OptionalDouble;\n" +
+				"import java.util.stream.IntStream;\n" +
+                "\n" +
+                "public class Main {\n" +
+                "	OptionalDouble pre(int[] values) {\n" +
+				"		return IntStream.of(values).map(s -> s).average();\n" +
+				"	}\n" +
+                "}";
+
+        JavaParser parser = createParserWithResolver(defaultTypeSolver());
+        CompilationUnit cu = parser.parse(sourceCode).getResult().get();
+
+        MethodCallExpr mce = cu.findFirst(MethodCallExpr.class).get();
+
+        ResolvedType resolvedType = mce.calculateResolvedType();
+
+        assertEquals("java.util.OptionalDouble", resolvedType.describe());
+    }
+
     // See issue 3725
     @Test
     void resolveVarTypeInForEachLoopFromIterableExpression2() {

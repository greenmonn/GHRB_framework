diff --git a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/Bla.java b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/Bla.java
index a81184b..eeeb6f1 100644
--- a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/Bla.java
+++ b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/Bla.java
@@ -1,2 +1,2 @@
-class X {
-}
+class X {
+}
diff --git a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/module-info.java b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/module-info.java
index 119be4e..a4a0ddb 100644
--- a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/module-info.java
+++ b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/module-info.java
@@ -1,2 +1,2 @@
-module M.N {
-}
+module M.N {
+}
diff --git a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info/demo/Main.java b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info/demo/Main.java
index c8db096..60dca7d 100644
--- a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info/demo/Main.java
+++ b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info/demo/Main.java
@@ -1,46 +1,46 @@
-package demo;
-
-import com.github.javaparser.ParseResult;
-import com.github.javaparser.ast.CompilationUnit;
-import com.github.javaparser.utils.ParserCollectionStrategy;
-import com.github.javaparser.utils.ProjectRoot;
-import com.github.javaparser.utils.SourceRoot;
-import java.io.IOException;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
-/* If there is a module declaration in the root directory, JavaParser doesn't find any .java files. */
-public class Main {
-
-    public static void main(String[] args) {
-        if (args.length < 1) {
-            System.err.println("Usage: provide one or more directory names to process");
-            System.exit(1);
-        }
-        for (String dir : args) {
-            process(dir);
-        }
-    }
-
-    private static void process(String dir) {
-        Path root = Paths.get(dir);
-        Callback cb = new Callback();
-        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);
-        projectRoot.getSourceRoots().forEach(sourceRoot -> {
-            try {
-                sourceRoot.parse("", cb);
-            } catch (IOException e) {
-                System.err.println("IOException: " + e);
-            }
-        });
-    }
-
-    private static class Callback implements SourceRoot.Callback {
-
-        @Override
-        public Result process(Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {
-            System.out.printf("Found %s%n", absolutePath);
-            return Result.SAVE;
-        }
-    }
-}
+package demo;
+
+import com.github.javaparser.ParseResult;
+import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.utils.ParserCollectionStrategy;
+import com.github.javaparser.utils.ProjectRoot;
+import com.github.javaparser.utils.SourceRoot;
+import java.io.IOException;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+/* If there is a module declaration in the root directory, JavaParser doesn't find any .java files. */
+public class Main {
+
+    public static void main(String[] args) {
+        if (args.length < 1) {
+            System.err.println("Usage: provide one or more directory names to process");
+            System.exit(1);
+        }
+        for (String dir : args) {
+            process(dir);
+        }
+    }
+
+    private static void process(String dir) {
+        Path root = Paths.get(dir);
+        Callback cb = new Callback();
+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);
+        projectRoot.getSourceRoots().forEach(sourceRoot -> {
+            try {
+                sourceRoot.parse("", cb);
+            } catch (IOException e) {
+                System.err.println("IOException: " + e);
+            }
+        });
+    }
+
+    private static class Callback implements SourceRoot.Callback {
+
+        @Override
+        public Result process(Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {
+            System.out.printf("Found %s%n", absolutePath);
+            return Result.SAVE;
+        }
+    }
+}
diff --git a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info/demo/module-info.java b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info/demo/module-info.java
index abd7417..38c78e1 100644
--- a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info/demo/module-info.java
+++ b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info/demo/module-info.java
@@ -1,2 +1,2 @@
-module demo {
-}
+module demo {
+}
diff --git a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info_in_root/demo/Main.java b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info_in_root/demo/Main.java
index c8db096..60dca7d 100644
--- a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info_in_root/demo/Main.java
+++ b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info_in_root/demo/Main.java
@@ -1,46 +1,46 @@
-package demo;
-
-import com.github.javaparser.ParseResult;
-import com.github.javaparser.ast.CompilationUnit;
-import com.github.javaparser.utils.ParserCollectionStrategy;
-import com.github.javaparser.utils.ProjectRoot;
-import com.github.javaparser.utils.SourceRoot;
-import java.io.IOException;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
-/* If there is a module declaration in the root directory, JavaParser doesn't find any .java files. */
-public class Main {
-
-    public static void main(String[] args) {
-        if (args.length < 1) {
-            System.err.println("Usage: provide one or more directory names to process");
-            System.exit(1);
-        }
-        for (String dir : args) {
-            process(dir);
-        }
-    }
-
-    private static void process(String dir) {
-        Path root = Paths.get(dir);
-        Callback cb = new Callback();
-        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);
-        projectRoot.getSourceRoots().forEach(sourceRoot -> {
-            try {
-                sourceRoot.parse("", cb);
-            } catch (IOException e) {
-                System.err.println("IOException: " + e);
-            }
-        });
-    }
-
-    private static class Callback implements SourceRoot.Callback {
-
-        @Override
-        public Result process(Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {
-            System.out.printf("Found %s%n", absolutePath);
-            return Result.SAVE;
-        }
-    }
-}
+package demo;
+
+import com.github.javaparser.ParseResult;
+import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.utils.ParserCollectionStrategy;
+import com.github.javaparser.utils.ProjectRoot;
+import com.github.javaparser.utils.SourceRoot;
+import java.io.IOException;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+/* If there is a module declaration in the root directory, JavaParser doesn't find any .java files. */
+public class Main {
+
+    public static void main(String[] args) {
+        if (args.length < 1) {
+            System.err.println("Usage: provide one or more directory names to process");
+            System.exit(1);
+        }
+        for (String dir : args) {
+            process(dir);
+        }
+    }
+
+    private static void process(String dir) {
+        Path root = Paths.get(dir);
+        Callback cb = new Callback();
+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);
+        projectRoot.getSourceRoots().forEach(sourceRoot -> {
+            try {
+                sourceRoot.parse("", cb);
+            } catch (IOException e) {
+                System.err.println("IOException: " + e);
+            }
+        });
+    }
+
+    private static class Callback implements SourceRoot.Callback {
+
+        @Override
+        public Result process(Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {
+            System.out.printf("Found %s%n", absolutePath);
+            return Result.SAVE;
+        }
+    }
+}
diff --git a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info_in_root/module-info.java b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info_in_root/module-info.java
index abd7417..38c78e1 100644
--- a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info_in_root/module-info.java
+++ b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/with_module_info_in_root/module-info.java
@@ -1,2 +1,2 @@
-module demo {
-}
+module demo {
+}
diff --git a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/without_module_info/demo/Main.java b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/without_module_info/demo/Main.java
index c8db096..60dca7d 100644
--- a/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/without_module_info/demo/Main.java
+++ b/javaparser-core-testing/src/test/resources/com/github/javaparser/utils/projectroot/issue2615/without_module_info/demo/Main.java
@@ -1,46 +1,46 @@
-package demo;
-
-import com.github.javaparser.ParseResult;
-import com.github.javaparser.ast.CompilationUnit;
-import com.github.javaparser.utils.ParserCollectionStrategy;
-import com.github.javaparser.utils.ProjectRoot;
-import com.github.javaparser.utils.SourceRoot;
-import java.io.IOException;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-
-/* If there is a module declaration in the root directory, JavaParser doesn't find any .java files. */
-public class Main {
-
-    public static void main(String[] args) {
-        if (args.length < 1) {
-            System.err.println("Usage: provide one or more directory names to process");
-            System.exit(1);
-        }
-        for (String dir : args) {
-            process(dir);
-        }
-    }
-
-    private static void process(String dir) {
-        Path root = Paths.get(dir);
-        Callback cb = new Callback();
-        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);
-        projectRoot.getSourceRoots().forEach(sourceRoot -> {
-            try {
-                sourceRoot.parse("", cb);
-            } catch (IOException e) {
-                System.err.println("IOException: " + e);
-            }
-        });
-    }
-
-    private static class Callback implements SourceRoot.Callback {
-
-        @Override
-        public Result process(Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {
-            System.out.printf("Found %s%n", absolutePath);
-            return Result.SAVE;
-        }
-    }
-}
+package demo;
+
+import com.github.javaparser.ParseResult;
+import com.github.javaparser.ast.CompilationUnit;
+import com.github.javaparser.utils.ParserCollectionStrategy;
+import com.github.javaparser.utils.ProjectRoot;
+import com.github.javaparser.utils.SourceRoot;
+import java.io.IOException;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+/* If there is a module declaration in the root directory, JavaParser doesn't find any .java files. */
+public class Main {
+
+    public static void main(String[] args) {
+        if (args.length < 1) {
+            System.err.println("Usage: provide one or more directory names to process");
+            System.exit(1);
+        }
+        for (String dir : args) {
+            process(dir);
+        }
+    }
+
+    private static void process(String dir) {
+        Path root = Paths.get(dir);
+        Callback cb = new Callback();
+        ProjectRoot projectRoot = new ParserCollectionStrategy().collect(root);
+        projectRoot.getSourceRoots().forEach(sourceRoot -> {
+            try {
+                sourceRoot.parse("", cb);
+            } catch (IOException e) {
+                System.err.println("IOException: " + e);
+            }
+        });
+    }
+
+    private static class Callback implements SourceRoot.Callback {
+
+        @Override
+        public Result process(Path localPath, Path absolutePath, ParseResult<CompilationUnit> result) {
+            System.out.printf("Found %s%n", absolutePath);
+            return Result.SAVE;
+        }
+    }
+}

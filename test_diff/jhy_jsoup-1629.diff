diff --git a/src/test/java/org/jsoup/TextUtil.java b/src/test/java/org/jsoup/TextUtil.java
index ca49bef..54bf5b7 100644
--- a/src/test/java/org/jsoup/TextUtil.java
+++ b/src/test/java/org/jsoup/TextUtil.java
@@ -8,12 +8,23 @@ import java.util.regex.Pattern;
  @author Jonathan Hedley, jonathan@hedley.net */
 public class TextUtil {
     static Pattern stripper = Pattern.compile("\\r?\\n\\s*");
+    static Pattern stripLines = Pattern.compile("\\r?\\n?");
+    static Pattern spaceCollapse = Pattern.compile("\\s{2,}");
+    static Pattern tagSpaceCollapse = Pattern.compile(">\\s+<");
     static Pattern stripCRs = Pattern.compile("\\r*");
 
     public static String stripNewlines(String text) {
         return stripper.matcher(text).replaceAll("");
     }
 
+    public static String normalizeSpaces(String text) {
+        text = stripLines.matcher(text).replaceAll("");
+        text = stripper.matcher(text).replaceAll("");
+        text = spaceCollapse.matcher(text).replaceAll(" ");
+        text = tagSpaceCollapse.matcher(text).replaceAll("><");
+        return text;
+    }
+
     public static String stripCRs(String text) {
         return stripCRs.matcher(text).replaceAll("");
     }
diff --git a/src/test/java/org/jsoup/helper/W3CDomTest.java b/src/test/java/org/jsoup/helper/W3CDomTest.java
index c2253bf..1c172a4 100644
--- a/src/test/java/org/jsoup/helper/W3CDomTest.java
+++ b/src/test/java/org/jsoup/helper/W3CDomTest.java
@@ -4,6 +4,7 @@ import org.jsoup.Jsoup;
 import org.jsoup.TextUtil;
 import org.jsoup.integration.ParseTest;
 import org.jsoup.nodes.Element;
+import org.jsoup.nodes.TextNode;
 import org.junit.jupiter.api.Test;
 import org.w3c.dom.Document;
 import org.w3c.dom.DocumentType;
@@ -23,6 +24,7 @@ import java.io.File;
 import java.io.IOException;
 import java.io.StringReader;
 import java.nio.charset.StandardCharsets;
+import java.util.Locale;
 import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.*;
@@ -259,27 +261,28 @@ public class W3CDomTest {
     @Test
     public void testRoundTripDoctype() {
         // TODO - not super happy with this output - but plain DOM doesn't let it out, and don't want to rebuild the writer
+        // because we have Saxon on the test classpath, the transformer will change to that, and so case may change (e.g. Java base in META, Saxon is meta for HTML)
         String base = "<!DOCTYPE html><p>One</p>";
-        assertEquals("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>",
+        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>",
             output(base, true));
-        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head/><body><p>One</p></body></html>", output(base, false));
+        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head/><body><p>One</p></body></html>", output(base, false));
 
         String publicDoc = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";
-        assertEquals("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(publicDoc, true));
+        assertEqualsIgnoreCase("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(publicDoc, true));
         // different impls will have different XML formatting. OpenJDK 13 default gives this: <body /> but others have <body/>, so just check start
         assertTrue(output(publicDoc, false).startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC"));
 
         String systemDoc = "<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\">";
-        assertEquals("<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(systemDoc, true));
-        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html><head/><body/></html>", output(systemDoc, false));
+        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(systemDoc, true));
+        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html><head/><body/></html>", output(systemDoc, false));
 
         String legacyDoc = "<!DOCTYPE html SYSTEM \"about:legacy-compat\">";
-        assertEquals("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(legacyDoc, true));
-        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head/><body/></html>", output(legacyDoc, false));
+        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(legacyDoc, true));
+        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head/><body/></html>", output(legacyDoc, false));
 
         String noDoctype = "<p>One</p>";
-        assertEquals("<html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>", output(noDoctype, true));
-        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body><p>One</p></body></html>", output(noDoctype, false));
+        assertEqualsIgnoreCase("<html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>", output(noDoctype, true));
+        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body><p>One</p></body></html>", output(noDoctype, false));
     }
 
     private String output(String in, boolean modeHtml) {
@@ -287,7 +290,30 @@ public class W3CDomTest {
         Document w3c = W3CDom.convert(jdoc);
 
         Map<String, String> properties = modeHtml ? W3CDom.OutputHtml() : W3CDom.OutputXml();
-        return TextUtil.stripNewlines(W3CDom.asString(w3c, properties));
+        return TextUtil.normalizeSpaces(W3CDom.asString(w3c, properties));
+    }
+
+    private void assertEqualsIgnoreCase(String want, String have) {
+        assertEquals(want.toLowerCase(Locale.ROOT), have.toLowerCase(Locale.ROOT));
+    }
+
+    @Test public void convertsElementsAndMaintainsSource() {
+        org.jsoup.nodes.Document jdoc = Jsoup.parse("<body><div><p>One</div><div><p>Two");
+        W3CDom w3CDom = new W3CDom();
+        Element jDiv = jdoc.selectFirst("div");
+        assertNotNull(jDiv);
+        Document doc = w3CDom.fromJsoup(jDiv);
+        Node div = doc.getFirstChild();
+
+        assertEquals("div", div.getLocalName());
+        assertEquals(jDiv, div.getUserData(W3CDom.SourceProperty));
+
+        Node textNode = div.getFirstChild().getFirstChild();
+        assertEquals("One", textNode.getTextContent());
+        assertEquals(Node.TEXT_NODE, textNode.getNodeType());
+
+        org.jsoup.nodes.TextNode jText = (TextNode) jDiv.childNode(0).childNode(0);
+        assertEquals(jText, textNode.getUserData(W3CDom.SourceProperty));
     }
 
 }
diff --git a/src/test/java/org/jsoup/select/XpathTest.java b/src/test/java/org/jsoup/select/XpathTest.java
new file mode 100644
index 0000000..e207be5
--- /dev/null
+++ b/src/test/java/org/jsoup/select/XpathTest.java
@@ -0,0 +1,177 @@
+package org.jsoup.select;
+
+import org.jsoup.Jsoup;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Parser;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import javax.xml.xpath.XPath;
+import javax.xml.xpath.XPathFactory;
+import javax.xml.xpath.XPathFactoryConfigurationException;
+import javax.xml.xpath.XPathFunctionResolver;
+import javax.xml.xpath.XPathVariableResolver;
+
+import java.util.stream.Stream;
+
+import static org.jsoup.helper.W3CDom.XPathFactoryProperty;
+import static org.junit.jupiter.api.Assertions.*;
+
+public class XpathTest {
+
+    @Test
+    public void supportsXpath() {
+        String html = "<body><div><p>One</div><div><p>Two</div><div>Three</div>";
+        Document doc = Jsoup.parse(html);
+
+        Elements els = doc.selectXpath("//div/p");
+        assertEquals(2, els.size());
+        assertEquals("One", els.get(0).text());
+        assertEquals("Two", els.get(1).text());
+    }
+
+    @Test public void supportsXpathFromElement() {
+        String html = "<body><div><p>One</div><div><p>Two</div><div>Three</div>";
+        Document doc = Jsoup.parse(html);
+
+        Element div = doc.selectFirst("div");
+        assertNotNull(div);
+
+        Elements els = div.selectXpath("/div/p");
+        assertEquals(1, els.size());
+        assertEquals("One", els.get(0).text());
+        assertEquals("p", els.get(0).tagName());
+
+        assertEquals(0, div.selectXpath("//body").size());
+        assertEquals(1, doc.selectXpath("//body").size());
+    }
+
+    @Test public void emptyElementsIfNoResults() {
+        Document doc = Jsoup.parse("<p>One<p>Two");
+        assertEquals(0, doc.selectXpath("//div").size());
+    }
+
+    @Test
+    public void throwsSelectException() {
+        Document doc = Jsoup.parse("<p>One<p>Two");
+        boolean threw = false;
+        try {
+            doc.selectXpath("//???");
+        } catch (Selector.SelectorParseException e) {
+            threw = true;
+            // checks exception message within jsoup's control, rest may be JDK impl specific
+            // was - Could not evaluate XPath query [//???]: javax.xml.transform.TransformerException: A location step was expected following the '/' or '//' token.
+            assertTrue(e.getMessage().startsWith("Could not evaluate XPath query [//???]:"));
+        }
+        assertTrue(threw);
+    }
+
+    @Test
+    public void supportsNamespaces() {
+        String xhtml = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";;
+        Document doc = Jsoup.parse(xhtml, Parser.xmlParser());
+        Elements elements = doc.selectXpath("//*[local-name()='body']");
+        assertEquals(1, elements.size());
+        assertEquals("One", elements.first().id());
+    }
+
+    @Test
+    public void canDitchNamespaces() {
+        String xhtml = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";;
+        Document doc = Jsoup.parse(xhtml, Parser.xmlParser());
+        doc.select("[xmlns]").removeAttr("xmlns");
+        Elements elements = doc.selectXpath("//*[local-name()='body']");
+        assertEquals(1, elements.size());
+
+        elements = doc.selectXpath("//body");
+        assertEquals(1, elements.size());
+        assertEquals("One", elements.first().id());
+    }
+
+    @ParameterizedTest
+    @MethodSource("provideEvaluators")
+    void cssAndXpathEquivalents(Document doc, String css, String xpath) {
+        Elements fromCss = doc.select(css);
+        Elements fromXpath = doc.selectXpath(xpath);
+
+        assertTrue(fromCss.size() >= 1);
+        assertTrue(fromXpath.size() >= 1);
+        // tests same size, order, and contents
+        assertEquals(fromCss, fromXpath);
+    }
+
+    private static Stream<Arguments> provideEvaluators() {
+        String html = "<div id=1><div id=2><p class=foo>Hello</p></div></div><DIV id=3>";
+        Document doc = Jsoup.parse(html);
+
+        return Stream.of(
+           Arguments.of(doc, "DIV", "//div"),
+           Arguments.of(doc, "div > p.foo", "//div/p[@class]"),
+           Arguments.of(doc, "div + div", "//div/following-sibling::div[1]"),
+           Arguments.of(doc, "p:containsOwn(Hello)", "//p[contains(text(),\"Hello\")]")
+        );
+    }
+
+    @Test
+    public void canSupplyAlternateFactoryImpl() {
+        // previously we had a test to load Saxon and do an XPath 2.0 query. But we know Saxon works and so that's
+        // redundant - really just need to test that an alternate XPath factory can be used
+
+        System.setProperty(XPathFactoryProperty, AlternateXpathFactory.class.getName());
+
+        String xhtml = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";
+        boolean threw = false;
+        try {
+            Document doc = Jsoup.parse(xhtml, Parser.xmlParser());
+            Elements elements = doc.selectXpath("//*:body");
+
+        } catch (IllegalArgumentException e) {
+            assertTrue(e.getMessage().contains("Sorry, no can do!"));
+            threw = true;
+        }
+        assertTrue(threw);
+        System.clearProperty(XPathFactoryProperty);
+
+
+    }
+
+    // minimal, no-op implementation class to verify users can load a factory to support XPath 2.0 etc
+    public static class AlternateXpathFactory extends XPathFactory {
+        public AlternateXpathFactory() {
+            super();
+        }
+
+        @Override
+        public boolean isObjectModelSupported(String objectModel) {
+            return true;
+        }
+
+        @Override
+        public void setFeature(String name, boolean value) throws XPathFactoryConfigurationException {
+
+        }
+
+        @Override
+        public boolean getFeature(String name) throws XPathFactoryConfigurationException {
+            return true;
+        }
+
+        @Override
+        public void setXPathVariableResolver(XPathVariableResolver resolver) {
+
+        }
+
+        @Override
+        public void setXPathFunctionResolver(XPathFunctionResolver resolver) {
+
+        }
+
+        @Override
+        public XPath newXPath() {
+            throw new IllegalArgumentException("Sorry, no can do!");
+        }
+    }
+}

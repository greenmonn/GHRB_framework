diff --git a/src/test/java/org/jsoup/internal/StringUtilTest.java b/src/test/java/org/jsoup/internal/StringUtilTest.java
index 1956084..2f4fff5 100644
--- a/src/test/java/org/jsoup/internal/StringUtilTest.java
+++ b/src/test/java/org/jsoup/internal/StringUtilTest.java
@@ -24,7 +24,34 @@ public class StringUtilTest {
         assertEquals(" ", StringUtil.padding(1));
         assertEquals("  ", StringUtil.padding(2));
         assertEquals("               ", StringUtil.padding(15));
-        assertEquals("                              ", StringUtil.padding(45)); // we tap out at 30
+        assertEquals("                              ", StringUtil.padding(45)); // we default to tap out at 30
+
+        // memoization is up to 21 blocks (0 to 20 spaces) and exits early before min checks making maxPaddingWidth unused
+        assertEquals("", StringUtil.padding(0, -1));
+        assertEquals("                    ", StringUtil.padding(20, -1));
+
+        // this test escapes memoization and continues through
+        assertEquals("                     ", StringUtil.padding(21, -1));
+
+        // this test escapes memoization and using unlimited length (-1) will allow requested spaces
+        assertEquals("                              ", StringUtil.padding(30, -1));
+        assertEquals("                                             ", StringUtil.padding(45, -1));
+
+        // we tap out at 0 for this test
+        assertEquals("", StringUtil.padding(0, 0));
+
+        // as memoization is escaped, setting zero for max padding will not allow any requested width
+        assertEquals("", StringUtil.padding(21, 0));
+
+        // we tap out at 30 for these tests making > 30 use 30
+        assertEquals("", StringUtil.padding(0, 30));
+        assertEquals(" ", StringUtil.padding(1, 30));
+        assertEquals("  ", StringUtil.padding(2, 30));
+        assertEquals("               ", StringUtil.padding(15, 30));
+        assertEquals("                              ", StringUtil.padding(45, 30));
+
+        // max applies regardless of memoized
+        assertEquals(5, StringUtil.padding(20, 5).length());
     }
 
     @Test public void paddingInACan() {
diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index 52afb83..563442b 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -2,6 +2,7 @@ package org.jsoup.nodes;
 
 import org.jsoup.Jsoup;
 import org.jsoup.TextUtil;
+import org.jsoup.internal.StringUtil;
 import org.jsoup.parser.ParseSettings;
 import org.jsoup.parser.Parser;
 import org.jsoup.parser.Tag;
@@ -430,6 +431,38 @@ public class ElementTest {
         assertEquals("<html>\n<head></head>\n<body>\n<div>\n<p>Hello there</p>\n</div>\n</body>\n</html>", doc.html());
     }
 
+    @Test void testIndentLevel() {
+        // deep to test default and extended max
+        StringBuilder divs = new StringBuilder();
+        for (int i = 0; i < 40; i++) {
+            divs.append("<div>");
+        }
+        divs.append("Foo");
+        Document doc = Jsoup.parse(divs.toString());
+        Document.OutputSettings settings = doc.outputSettings();
+
+        int defaultMax = 30;
+        assertEquals(defaultMax, settings.maxPaddingWidth());
+        String html = doc.html();
+        assertTrue(html.contains("                              <div>\n" +
+            "                              Foo\n" +
+            "                              </div>"));
+
+        settings.maxPaddingWidth(32);
+        assertEquals(32, settings.maxPaddingWidth());
+        html = doc.html();
+        assertTrue(html.contains("                                <div>\n" +
+            "                                Foo\n" +
+            "                                </div>"));
+
+        settings.maxPaddingWidth(-1);
+        assertEquals(-1, settings.maxPaddingWidth());
+        html = doc.html();
+        assertTrue(html.contains("                                         <div>\n" +
+            "                                          Foo\n" +
+            "                                         </div>"));
+    }
+
     @Test
     public void testNotPretty() {
         Document doc = Jsoup.parse("<div>   \n<p>Hello\n there\n</p></div>");

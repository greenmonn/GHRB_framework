diff --git a/src/test/java/org/jsoup/helper/DataUtilTest.java b/src/test/java/org/jsoup/helper/DataUtilTest.java
index 59027ae..10074d4 100644
--- a/src/test/java/org/jsoup/helper/DataUtilTest.java
+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java
@@ -1,11 +1,14 @@
 package org.jsoup.helper;
 
 import org.jsoup.Jsoup;
+import org.jsoup.integration.ParseTest;
 import org.jsoup.nodes.Document;
 import org.jsoup.parser.Parser;
 import org.junit.jupiter.api.Test;
 
 import java.io.*;
+import java.nio.ByteBuffer;
+import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 
@@ -37,12 +40,7 @@ public class DataUtilTest {
     }
 
     private InputStream stream(String data, String charset) {
-        try {
-            return new ByteArrayInputStream(data.getBytes(charset));
-        } catch (UnsupportedEncodingException e) {
-            fail();
-        }
-        return null;
+        return new ByteArrayInputStream(data.getBytes(Charset.forName(charset)));
     }
 
     @Test
@@ -180,7 +178,7 @@ public class DataUtilTest {
 
     @Test
     public void noExtraNULLBytes() throws IOException {
-    	final byte[] b = "<html><head><meta charset=\"UTF-8\"></head><body><div><u>ü</u>ü</div></body></html>".getBytes("UTF-8");
+    	final byte[] b = "<html><head><meta charset=\"UTF-8\"></head><body><div><u>ü</u>ü</div></body></html>".getBytes(StandardCharsets.UTF_8);
     	
     	Document doc = Jsoup.parse(new ByteArrayInputStream(b), null, "");
     	assertFalse( doc.outerHtml().contains("\u0000") );
@@ -201,7 +199,7 @@ public class DataUtilTest {
                 "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" +
                         "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">" +
                         "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">Hellö Wörld!</html>"
-        ).getBytes(encoding));
+        ).getBytes(Charset.forName(encoding)));
 
         Document doc = Jsoup.parse(soup, null, "");
         assertEquals("Hellö Wörld!", doc.body().text());
@@ -232,4 +230,49 @@ public class DataUtilTest {
         assertEquals("This is not gzipped", doc.title());
         assertEquals("And should still be readable.", doc.selectFirst("p").text());
     }
+
+    // an input stream to give a range of output sizes, that changes on each read
+    static class VaryingReadInputStream extends InputStream {
+        final InputStream in;
+        int stride = 0;
+
+        VaryingReadInputStream(InputStream in) {
+            this.in = in;
+        }
+
+        public int read() throws IOException {
+            return in.read();
+        }
+
+        public int read(byte[] b) throws IOException {
+            return in.read(b, 0, Math.min(b.length, ++stride));
+        }
+
+        public int read(byte[] b, int off, int len) throws IOException {
+            return in.read(b, off, Math.min(len, ++stride));
+        }
+    }
+
+    @Test
+    void handlesChunkedInputStream() throws IOException {
+        File inputFile = ParseTest.getFile("/htmltests/large.html");
+        String input = ParseTest.getFileAsString(inputFile);
+        VaryingReadInputStream stream = new VaryingReadInputStream(ParseTest.inputStreamFrom(input));
+
+        Document expected = Jsoup.parse(input, "https://example.com");
+        Document doc = Jsoup.parse(stream, null, "https://example.com");
+        assertTrue(doc.hasSameValue(expected));
+    }
+
+    @Test
+    void handlesUnlimitedRead() throws IOException {
+        File inputFile = ParseTest.getFile("/htmltests/large.html");
+        String input = ParseTest.getFileAsString(inputFile);
+        VaryingReadInputStream stream = new VaryingReadInputStream(ParseTest.inputStreamFrom(input));
+
+        ByteBuffer byteBuffer = DataUtil.readToByteBuffer(stream, 0);
+        String read = new String(byteBuffer.array());
+
+        assertEquals(input, read);
+    }
 }
diff --git a/src/test/java/org/jsoup/helper/HttpConnectionTest.java b/src/test/java/org/jsoup/helper/HttpConnectionTest.java
index 3ed9cf9..840d8a8 100644
--- a/src/test/java/org/jsoup/helper/HttpConnectionTest.java
+++ b/src/test/java/org/jsoup/helper/HttpConnectionTest.java
@@ -9,7 +9,13 @@ import org.junit.jupiter.api.Test;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.*;
 
@@ -249,9 +255,23 @@ public class HttpConnectionTest {
     }
 
     @Test public void encodeUrl() throws MalformedURLException {
-        URL url1 = new URL("http://test.com/?q=white space");
-        URL url2 = HttpConnection.encodeUrl(url1);
-        assertEquals("http://test.com/?q=white%20space", url2.toExternalForm());
+        URL url1 = new URL("https://test.com/foo bar/[One]?q=white space#frag");
+        URL url2 = new UrlBuilder(url1).build();
+        assertEquals("https://test.com/foo%20bar/%5BOne%5D?q=white+space#frag", url2.toExternalForm());
+    }
+
+    @Test void encodedUrlDoesntDoubleEncode() throws MalformedURLException {
+        URL url1 = new URL("https://test.com/foo bar/[One]?q=white space#frag ment");
+        URL url2 = new UrlBuilder(url1).build();
+        URL url3 = new UrlBuilder(url2).build();
+        assertEquals("https://test.com/foo%20bar/%5BOne%5D?q=white+space#frag%20ment", url2.toExternalForm());
+        assertEquals("https://test.com/foo%20bar/%5BOne%5D?q=white+space#frag%20ment", url3.toExternalForm());
+    }
+
+    @Test void connectToEncodedUrl() {
+        Connection connect = Jsoup.connect("https://example.com/a%20b%20c?query+string");
+        URL url = connect.request().url();
+        assertEquals("https://example.com/a%20b%20c?query+string", url.toExternalForm());
     }
 
     @Test public void noUrlThrowsValidationError() throws IOException {
@@ -283,6 +303,18 @@ public class HttpConnectionTest {
         assertEquals(puny, req.url().toExternalForm());
     }
 
+    @Test void supportsIdnWithPort() throws MalformedURLException {
+        String idn = "https://www.测试.测试:9001/foo.html?bar";
+        String puny = "https://www.xn--0zwm56d.xn--0zwm56d:9001/foo.html?bar";
+
+        Connection con = Jsoup.connect(idn);
+        assertEquals(puny, con.request().url().toExternalForm());
+
+        HttpConnection.Request req = new HttpConnection.Request();
+        req.url(new URL(idn));
+        assertEquals(puny, req.url().toExternalForm());
+    }
+
     @Test public void validationErrorsOnExecute() throws IOException {
         Connection con = new HttpConnection();
         boolean urlThrew = false;
@@ -293,4 +325,15 @@ public class HttpConnectionTest {
         }
         assertTrue(urlThrew);
     }
+
+    @Test void testMalformedException() {
+        boolean threw = false;
+        try {
+            Jsoup.connect("jsoup.org/test");
+        } catch (IllegalArgumentException e) {
+            threw = true;
+            assertEquals("The supplied URL, 'jsoup.org/test', is malformed. Make sure it is an absolute URL, and starts with 'http://' or 'https://'. See https://jsoup.org/cookbook/extracting-data/working-with-urls", e.getMessage());
+        }
+        assertTrue(threw);
+    }
 }
diff --git a/src/test/java/org/jsoup/helper/ValidateTest.java b/src/test/java/org/jsoup/helper/ValidateTest.java
index 138e532..c7a093c 100644
--- a/src/test/java/org/jsoup/helper/ValidateTest.java
+++ b/src/test/java/org/jsoup/helper/ValidateTest.java
@@ -3,8 +3,9 @@ package org.jsoup.helper;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
-public class ValidateTest {
+import static org.junit.jupiter.api.Assertions.*;
 
+public class ValidateTest {
     @Test
     public void testNotNull() {
         Validate.notNull("foo");
@@ -16,4 +17,30 @@ public class ValidateTest {
         }
         Assertions.assertTrue(threw);
     }
+
+    @Test void stacktraceFiltersOutValidateClass() {
+        boolean threw = false;
+        try {
+            Validate.notNull(null);
+        } catch (ValidationException e) {
+            threw = true;
+            assertEquals("Object must not be null", e.getMessage());
+            StackTraceElement[] stackTrace = e.getStackTrace();
+            for (StackTraceElement trace : stackTrace) {
+                assertNotEquals(trace.getClassName(), Validate.class.getName());
+            }
+            assertTrue(stackTrace.length >= 1);
+        }
+        Assertions.assertTrue(threw);
+    }
+
+    @Test void nonnullParam() {
+        boolean threw = true;
+        try {
+            Validate.notNullParam(null, "foo");
+        } catch (ValidationException e) {
+            assertEquals("The parameter 'foo' must not be null.", e.getMessage());
+        }
+        assertTrue(threw);
+    }
 }
diff --git a/src/test/java/org/jsoup/helper/W3CDomTest.java b/src/test/java/org/jsoup/helper/W3CDomTest.java
index 09fc66f..c1daeb5 100644
--- a/src/test/java/org/jsoup/helper/W3CDomTest.java
+++ b/src/test/java/org/jsoup/helper/W3CDomTest.java
@@ -7,7 +7,6 @@ import org.jsoup.nodes.Element;
 import org.jsoup.nodes.TextNode;
 import org.junit.jupiter.api.Test;
 import org.w3c.dom.Document;
-import org.w3c.dom.DocumentType;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.xml.sax.InputSource;
@@ -62,7 +61,7 @@ public class W3CDomTest {
         assertEquals(0, meta.getLength());
 
         String out = W3CDom.asString(wDoc, W3CDom.OutputXml());
-        String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head><title>W3c</title></head><body><p class=\"one\" id=\"12\">Text</p><!-- comment --><invalid>What<script>alert('!')</script></invalid></body></html>";
+        String expected = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>W3c</title></head><body><p class=\"one\" id=\"12\">Text</p><!-- comment --><invalid>What<script>alert('!')</script></invalid></body></html>";
         assertEquals(expected, TextUtil.stripNewlines(out));
 
         Document roundTrip = parseXml(out, true);
@@ -74,47 +73,11 @@ public class W3CDomTest {
         String furtherOut = W3CDom.asString(wDoc, properties);
         assertTrue(furtherOut.length() > out.length()); // wanted to assert formatting, but actual indentation is platform specific so breaks in CI
         String furtherExpected =
-            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head><title>W3c</title></head><body><p class=\"one\" id=\"12\">Text</p><!-- comment --><invalid>What<script>alert('!')</script></invalid></body></html>";
+            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><title>W3c</title></head><body><p class=\"one\" id=\"12\">Text</p><!-- comment --><invalid>What<script>alert('!')</script></invalid></body></html>";
         assertEquals(furtherExpected, TextUtil.stripNewlines(furtherOut)); // on windows, DOM will write newlines as \r\n
     }
 
     @Test
-    public void convertsGoogle() throws IOException {
-        File in = ParseTest.getFile("/htmltests/google-ipod.html.gz");
-        org.jsoup.nodes.Document doc = Jsoup.parse(in, "UTF8");
-
-        W3CDom w3c = new W3CDom();
-        Document wDoc = w3c.fromJsoup(doc);
-        Node htmlEl = wDoc.getChildNodes().item(1);
-        assertNull(htmlEl.getNamespaceURI());
-        assertEquals("html", htmlEl.getLocalName());
-        assertEquals("html", htmlEl.getNodeName());
-
-        DocumentType doctype = wDoc.getDoctype();
-        Node doctypeNode = wDoc.getChildNodes().item(0);
-        assertSame(doctype, doctypeNode);
-        assertEquals("html", doctype.getName());
-
-        String xml = W3CDom.asString(wDoc, W3CDom.OutputXml());
-        assertTrue(xml.contains("ipod"));
-
-        Document roundTrip = parseXml(xml, true);
-        assertEquals("Images", roundTrip.getElementsByTagName("a").item(0).getTextContent());
-    }
-
-    @Test
-    public void convertsGoogleLocation() throws IOException {
-        File in = ParseTest.getFile("/htmltests/google-ipod.html.gz");
-        org.jsoup.nodes.Document doc = Jsoup.parse(in, "UTF8");
-
-        W3CDom w3c = new W3CDom();
-        Document wDoc = w3c.fromJsoup(doc);
-
-        String out = w3c.asString(wDoc);
-        assertEquals(doc.location(), wDoc.getDocumentURI());
-    }
-
-    @Test
     public void namespacePreservation() throws IOException {
         File in = ParseTest.getFile("/htmltests/namespaces.xhtml");
         org.jsoup.nodes.Document jsoupDoc;
@@ -187,7 +150,7 @@ public class W3CDomTest {
 
         Document w3Doc = W3CDom.convert(jsoupDoc);
         String xml = W3CDom.asString(w3Doc, W3CDom.OutputXml());
-        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body name=\"\" style=\"color: red\"/></html>", xml);
+        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html xmlns=\"http://www.w3.org/1999/xhtml\"><head/><body name=\"\" style=\"color: red\"/></html>", xml);
     }
 
     @Test
@@ -198,7 +161,7 @@ public class W3CDomTest {
 
         Document w3Doc = W3CDom.convert(jsoupDoc);
         String out = W3CDom.asString(w3Doc, W3CDom.OutputHtml());
-        String expected = "<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p hành=\"1\" hình=\"2\">unicode attr names</p></body></html>";
+        String expected = "<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p hành=\"1\" hình=\"2\">unicode attr names</p></body></html>";
         assertEquals(expected, TextUtil.stripNewlines(out));
     }
 
@@ -211,7 +174,7 @@ public class W3CDomTest {
 
         Document w3Doc = W3CDom.convert(jsoupDoc);
         String out = W3CDom.asString(w3Doc, W3CDom.OutputHtml());
-        String expected = "<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p hnh=\"2\">unicode attr names coerced</p></body></html>";
+        String expected = "<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p hnh=\"2\">unicode attr names coerced</p></body></html>";
         assertEquals(expected, TextUtil.stripNewlines(out));
     }
 
@@ -221,7 +184,7 @@ public class W3CDomTest {
 
         Document w3Doc = W3CDom.convert(jsoup);
         String xml = W3CDom.asString(w3Doc, W3CDom.OutputXml());
-        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body>&lt;インセンティブで高収入！&gt;Text <p>More</p></body></html>", xml);
+        assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html xmlns=\"http://www.w3.org/1999/xhtml\"><head/><body>&lt;インセンティブで高収入！&gt;Text <p>More</p></body></html>", xml);
     }
 
     @Test
@@ -232,7 +195,7 @@ public class W3CDomTest {
         Document w3Doc = new W3CDom().fromJsoup(doc);
         Node htmlEl = w3Doc.getFirstChild();
 
-        assertNull(htmlEl.getNamespaceURI());
+        assertEquals("http://www.w3.org/1999/xhtml", htmlEl.getNamespaceURI());
         assertEquals("html", htmlEl.getLocalName());
         assertEquals("html", htmlEl.getNodeName());
 
@@ -247,7 +210,7 @@ public class W3CDomTest {
         W3CDom w3c = new W3CDom();
         String html = "<html><body><div>hello</div></body></html>";
         Document dom = w3c.fromJsoup(Jsoup.parse(html));
-        NodeList nodeList = xpath(dom, "//body");// no ns, so needs no prefix
+        NodeList nodeList = xpath(dom, "//*[local-name()=\"body\"]");// namespace aware; HTML namespace is default
         assertEquals("div", nodeList.item(0).getLocalName());
 
         // default output is namespace aware, so query needs to be as well
@@ -278,6 +241,31 @@ public class W3CDomTest {
         assertNull(nodeList);
     }
 
+    @Test
+    public void xhtmlNoNamespace() throws XPathExpressionException {
+        W3CDom w3c = new W3CDom();
+        String html = "<html><body><div>hello</div></body></html>";
+        w3c.namespaceAware(false);
+        Document dom = w3c.fromJsoup(Jsoup.parse(html));
+        NodeList nodeList = xpath(dom, "//body");// no namespace
+        assertEquals(1, nodeList.getLength());
+        assertEquals("div", nodeList.item(0).getLocalName());
+    }
+
+    @Test
+    void canDisableNamespaces() throws XPathExpressionException {
+        W3CDom w3c = new W3CDom();
+        assertTrue(w3c.namespaceAware());
+
+        w3c.namespaceAware(false);
+        assertFalse(w3c.namespaceAware());
+
+        String html = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";
+        Document dom = w3c.fromJsoup(Jsoup.parse(html));
+        NodeList nodeList = xpath(dom, "//body");// no ns, so needs no prefix
+        assertEquals("div", nodeList.item(0).getLocalName());
+    }
+
     private NodeList xpath(Document w3cDoc, String query) throws XPathExpressionException {
         XPathExpression xpath = XPathFactory.newInstance().newXPath().compile(query);
         return ((NodeList) xpath.evaluate(w3cDoc, XPathConstants.NODE));
@@ -288,26 +276,25 @@ public class W3CDomTest {
         // TODO - not super happy with this output - but plain DOM doesn't let it out, and don't want to rebuild the writer
         // because we have Saxon on the test classpath, the transformer will change to that, and so case may change (e.g. Java base in META, Saxon is meta for HTML)
         String base = "<!DOCTYPE html><p>One</p>";
-        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>",
-            output(base, true));
-        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head/><body><p>One</p></body></html>", output(base, false));
+        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>", output(base, true));
+        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head/><body><p>One</p></body></html>", output(base, false));
 
         String publicDoc = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">";
-        assertEqualsIgnoreCase("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(publicDoc, true));
+        assertEqualsIgnoreCase("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(publicDoc, true));
         // different impls will have different XML formatting. OpenJDK 13 default gives this: <body /> but others have <body/>, so just check start
         assertTrue(output(publicDoc, false).startsWith("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html PUBLIC"));
 
         String systemDoc = "<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\">";
-        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(systemDoc, true));
-        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html><head/><body/></html>", output(systemDoc, false));
+        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(systemDoc, true));
+        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"exampledtdfile.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head/><body/></html>", output(systemDoc, false));
 
         String legacyDoc = "<!DOCTYPE html SYSTEM \"about:legacy-compat\">";
-        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(legacyDoc, true));
-        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html><head/><body/></html>", output(legacyDoc, false));
+        assertEqualsIgnoreCase("<!DOCTYPE html SYSTEM \"about:legacy-compat\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body></body></html>", output(legacyDoc, true));
+        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE html SYSTEM \"about:legacy-compat\"><html xmlns=\"http://www.w3.org/1999/xhtml\"><head/><body/></html>", output(legacyDoc, false));
 
         String noDoctype = "<p>One</p>";
-        assertEqualsIgnoreCase("<html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>", output(noDoctype, true));
-        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body><p>One</p></body></html>", output(noDoctype, false));
+        assertEqualsIgnoreCase("<html xmlns=\"http://www.w3.org/1999/xhtml\"><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"></head><body><p>One</p></body></html>", output(noDoctype, true));
+        assertEqualsIgnoreCase("<?xml version=\"1.0\" encoding=\"UTF-8\"?><html xmlns=\"http://www.w3.org/1999/xhtml\"><head/><body><p>One</p></body></html>", output(noDoctype, false));
     }
 
     private String output(String in, boolean modeHtml) {
@@ -322,6 +309,24 @@ public class W3CDomTest {
         assertEquals(want.toLowerCase(Locale.ROOT), have.toLowerCase(Locale.ROOT));
     }
 
+
+    @Test
+    public void canOutputHtmlWithoutNamespace() {
+        String html = "<p>One</p>";
+        org.jsoup.nodes.Document jdoc = Jsoup.parse(html);
+        W3CDom w3c = new W3CDom();
+        w3c.namespaceAware(false);
+
+        String asHtml = W3CDom.asString(w3c.fromJsoup(jdoc), W3CDom.OutputHtml());
+        String asXtml = W3CDom.asString(w3c.fromJsoup(jdoc), W3CDom.OutputXml());
+        assertEqualsIgnoreCase(
+            "<html><head><meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"></head><body><p>one</p></body></html>",
+            asHtml);
+        assertEqualsIgnoreCase(
+            "<?xml version=\"1.0\" encoding=\"UTF-8\"?><html><head/><body><p>One</p></body></html>",
+            asXtml);
+    }
+
     @Test public void convertsElementsAndMaintainsSource() {
         org.jsoup.nodes.Document jdoc = Jsoup.parse("<body><div><p>One</div><div><p>Two");
         W3CDom w3CDom = new W3CDom();
diff --git a/src/test/java/org/jsoup/integration/ConnectTest.java b/src/test/java/org/jsoup/integration/ConnectTest.java
index 28e79da..07f9d2e 100644
--- a/src/test/java/org/jsoup/integration/ConnectTest.java
+++ b/src/test/java/org/jsoup/integration/ConnectTest.java
@@ -3,6 +3,7 @@ package org.jsoup.integration;
 import org.jsoup.Connection;
 import org.jsoup.HttpStatusException;
 import org.jsoup.Jsoup;
+import org.jsoup.helper.DataUtil;
 import org.jsoup.helper.W3CDom;
 import org.jsoup.integration.servlets.*;
 import org.jsoup.internal.StringUtil;
@@ -12,7 +13,6 @@ import org.jsoup.nodes.FormElement;
 import org.jsoup.parser.HtmlTreeBuilder;
 import org.jsoup.parser.Parser;
 import org.jsoup.parser.XmlTreeBuilder;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -21,6 +21,7 @@ import java.io.FileInputStream;
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.net.URLDecoder;
 import java.util.List;
 import java.util.Map;
 
@@ -41,11 +42,6 @@ public class ConnectTest {
         echoUrl = EchoServlet.Url;
     }
 
-    @AfterAll
-    public static void tearDown() {
-        TestServer.stop();
-    }
-
     @Test
     public void canConnectToLocalServer() throws IOException {
         String url = HelloServlet.Url;
@@ -264,7 +260,7 @@ public class ConnectTest {
     @Test
     public void postFiles() throws IOException {
         File thumb = ParseTest.getFile("/htmltests/thumb.jpg");
-        File html = ParseTest.getFile("/htmltests/google-ipod.html.gz");
+        File html = ParseTest.getFile("/htmltests/large.html");
 
         Document res = Jsoup
             .connect(EchoServlet.Url)
@@ -278,8 +274,8 @@ public class ConnectTest {
 
         assertEquals("application/octet-stream", ihVal("Part secondPart ContentType", res));
         assertEquals("secondPart", ihVal("Part secondPart Name", res));
-        assertEquals("google-ipod.html.gz", ihVal("Part secondPart Filename", res));
-        assertEquals("12212", ihVal("Part secondPart Size", res));
+        assertEquals("large.html", ihVal("Part secondPart Filename", res));
+        assertEquals("280735", ihVal("Part secondPart Size", res));
 
         assertEquals("image/jpeg", ihVal("Part firstPart ContentType", res));
         assertEquals("firstPart", ihVal("Part firstPart Name", res));
@@ -517,15 +513,12 @@ public class ConnectTest {
     @Test
     public void handlesUnknownEscapesAcrossBuffer() throws IOException {
         String localPath = "/htmltests/escapes-across-buffer.html";
-        String url =
-            "https://gist.githubusercontent.com/krystiangorecki/d3bad50ef5615f06b077438607423533/raw/71adfdf81121282ea936510ed6cfe440adeb2d83/JsoupIssue1218.html";
         String localUrl = FileServlet.urlTo(localPath);
 
-        Document docFromGithub = Jsoup.connect(url).get(); // different chunks meant GH would error but local not...
         Document docFromLocalServer = Jsoup.connect(localUrl).get();
         Document docFromFileRead = Jsoup.parse(ParseTest.getFile(localPath), "UTF-8");
 
-        String text = docFromGithub.body().text();
+        String text = docFromLocalServer.body().text();
         assertEquals(14766, text.length());
         assertEquals(text, docFromLocalServer.body().text());
         assertEquals(text, docFromFileRead.body().text());
@@ -542,7 +535,7 @@ public class ConnectTest {
         FormElement form = forms.get(0);
         Connection post = form.submit();
 
-        File uploadFile = ParseTest.getFile("/htmltests/google-ipod.html.gz");
+        File uploadFile = ParseTest.getFile("/htmltests/large.html");
         FileInputStream stream = new FileInputStream(uploadFile);
 
         Connection.KeyVal fileData = post.data("_file");
@@ -655,7 +648,7 @@ public class ConnectTest {
         Connection.Response largeRes = Jsoup.connect(url).maxBodySize(300 * 1024).execute(); // does not crop
         Connection.Response unlimitedRes = Jsoup.connect(url).maxBodySize(0).execute();
 
-        int actualDocText = 269541;
+        int actualDocText = 269535;
         assertEquals(actualDocText, defaultRes.parse().text().length());
         assertEquals(49165, smallRes.parse().text().length());
         assertEquals(196577, mediumRes.parse().text().length());
@@ -671,4 +664,100 @@ public class ConnectTest {
         assertEquals("Large HTML", doc1.title());
         assertEquals("Large HTML", doc2.title());
     }
+
+    @Test
+    public void maxBodySizeInReadToByteBuffer() throws IOException {
+        // https://github.com/jhy/jsoup/issues/1774
+        // when calling readToByteBuffer, contents were not buffered up
+        String url = FileServlet.urlTo("/htmltests/large.html"); // 280 K
+
+        Connection.Response defaultRes = Jsoup.connect(url).execute();
+        Connection.Response smallRes = Jsoup.connect(url).maxBodySize(50 * 1024).execute(); // crops
+        Connection.Response mediumRes = Jsoup.connect(url).maxBodySize(200 * 1024).execute(); // crops
+        Connection.Response largeRes = Jsoup.connect(url).maxBodySize(300 * 1024).execute(); // does not crop
+        Connection.Response unlimitedRes = Jsoup.connect(url).maxBodySize(0).execute();
+
+        int actualDocText = 280735;
+        assertEquals(actualDocText, defaultRes.body().length());
+        assertEquals(50 * 1024, smallRes.body().length());
+        assertEquals(200 * 1024, mediumRes.body().length());
+        assertEquals(actualDocText, largeRes.body().length());
+        assertEquals(actualDocText, unlimitedRes.body().length());
+    }
+
+    @Test void formLoginFlow() throws IOException {
+        String echoUrl = EchoServlet.Url;
+        String cookieUrl = CookieServlet.Url;
+
+        String startUrl = FileServlet.urlTo("/htmltests/form-tests.html");
+        Document loginDoc = Jsoup.connect(startUrl).get();
+        FormElement form = loginDoc.expectForm("#login");
+        assertNotNull(form);
+        form.expectFirst("[name=username]").val("admin");
+        form.expectFirst("[name=password]").val("Netscape engineers are weenies!");
+
+        // post it- should go to Cookie then bounce to Echo
+        Connection submit = form.submit();
+        assertEquals(Connection.Method.POST, submit.request().method());
+        Connection.Response postRes = submit.execute();
+        assertEquals(echoUrl, postRes.url().toExternalForm());
+        assertEquals(Connection.Method.GET, postRes.method());
+        Document resultDoc = postRes.parse();
+        assertEquals("One=EchoServlet; One=Root", ihVal("Cookie", resultDoc));
+        // should be no form data sent to the echo redirect
+        assertEquals("", ihVal("Query String", resultDoc));
+
+        // new request to echo, should not have form data, but should have cookies from implicit session
+        Document newEcho = submit.newRequest().url(echoUrl).get();
+        assertEquals("One=EchoServlet; One=Root", ihVal("Cookie", newEcho));
+        assertEquals("", ihVal("Query String", newEcho));
+
+        Document cookieDoc = submit.newRequest().url(cookieUrl).get();
+        assertEquals("CookieServlet", ihVal("One", cookieDoc)); // different cookie path
+
+    }
+
+    @Test void formLoginFlow2() throws IOException {
+        String echoUrl = EchoServlet.Url;
+        String cookieUrl = CookieServlet.Url;
+        String startUrl = FileServlet.urlTo("/htmltests/form-tests.html");
+
+        Connection session = Jsoup.newSession();
+        Document loginDoc = session.newRequest().url(startUrl).get();
+        FormElement form = loginDoc.expectForm("#login2");
+        assertNotNull(form);
+        String username = "admin";
+        form.expectFirst("[name=username]").val(username);
+        String password = "Netscape engineers are weenies!";
+        form.expectFirst("[name=password]").val(password);
+
+        Connection submit = form.submit();
+        assertEquals(username, submit.data("username").value());
+        assertEquals(password, submit.data("password").value());
+
+        Connection.Response postRes = submit.execute();
+        assertEquals(cookieUrl, postRes.url().toExternalForm());
+        assertEquals(Connection.Method.POST, postRes.method());
+        Document resultDoc = postRes.parse();
+
+        Document echo2 = resultDoc.connection().newRequest().url(echoUrl).get();
+        assertEquals("", ihVal("Query String", echo2)); // should not re-send the data
+        assertEquals("One=EchoServlet; One=Root", ihVal("Cookie", echo2));
+    }
+
+    @Test void preservesUrlFragment() throws IOException {
+        // confirms https://github.com/jhy/jsoup/issues/1686
+        String url = EchoServlet.Url + "#fragment";
+        Document doc = Jsoup.connect(url).get();
+        assertEquals(url, doc.location());
+    }
+
+    @Test void fetchUnicodeUrl() throws IOException {
+        String url = EchoServlet.Url + "/✔/?鍵=値";
+        Document doc = Jsoup.connect(url).get();
+
+        assertEquals("/✔/", ihVal("Path Info", doc));
+        assertEquals("%E9%8D%B5=%E5%80%A4", ihVal("Query String", doc));
+        assertEquals("鍵=値", URLDecoder.decode(ihVal("Query String", doc), DataUtil.UTF_8.name()));
+    }
 }
diff --git a/src/test/java/org/jsoup/integration/ParseTest.java b/src/test/java/org/jsoup/integration/ParseTest.java
index 0bcbb8e..0c5cb2b 100644
--- a/src/test/java/org/jsoup/integration/ParseTest.java
+++ b/src/test/java/org/jsoup/integration/ParseTest.java
@@ -25,100 +25,6 @@ import static org.junit.jupiter.api.Assertions.*;
  * @author Jonathan Hedley, jonathan@hedley.net
  */
 public class ParseTest {
-
-    @Test
-    public void testSmhBizArticle() throws IOException {
-        File in = getFile("/htmltests/smh-biz-article-1.html.gz");
-        Document doc = Jsoup.parse(in, "UTF-8",
-                "http://www.smh.com.au/business/the-boards-next-fear-the-female-quota-20100106-lteq.html");
-        assertEquals("The board’s next fear: the female quota",
-                doc.title()); // note that the apos in the source is a literal ’ (8217), not escaped or '
-        assertEquals("en", doc.select("html").attr("xml:lang"));
-
-        Elements articleBody = doc.select(".articleBody > *");
-        assertEquals(17, articleBody.size());
-        // todo: more tests!
-
-    }
-
-    @Test
-    public void testNewsHomepage() throws IOException {
-        File in = getFile("/htmltests/news-com-au-home.html.gz");
-        Document doc = Jsoup.parse(in, "UTF-8", "http://www.news.com.au/");
-        assertEquals("News.com.au | News from Australia and around the world online | NewsComAu", doc.title());
-        assertEquals("Brace yourself for Metro meltdown", doc.select(".id1225817868581 h4").text().trim());
-
-        Element a = doc.select("a[href=/entertainment/horoscopes]").first();
-        assertEquals("/entertainment/horoscopes", a.attr("href"));
-        assertEquals("http://www.news.com.au/entertainment/horoscopes", a.attr("abs:href"));
-
-        Element hs = doc.select("a[href*=naughty-corners-are-a-bad-idea]").first();
-        assertEquals(
-                "http://www.heraldsun.com.au/news/naughty-corners-are-a-bad-idea-for-kids/story-e6frf7jo-1225817899003",
-                hs.attr("href"));
-        assertEquals(hs.attr("href"), hs.attr("abs:href"));
-    }
-
-    @Test
-    public void testGoogleSearchIpod() throws IOException {
-        File in = getFile("/htmltests/google-ipod.html.gz");
-        Document doc = Jsoup.parse(in, "UTF-8", "http://www.google.com/search?hl=en&q=ipod&aq=f&oq=&aqi=g10");
-        assertEquals("ipod - Google Search", doc.title());
-        Elements results = doc.select("h3.r > a");
-        assertEquals(12, results.size());
-        assertEquals(
-                "http://news.google.com/news?hl=en&q=ipod&um=1&ie=UTF-8&ei=uYlKS4SbBoGg6gPf-5XXCw&sa=X&oi=news_group&ct=title&resnum=1&ved=0CCIQsQQwAA",
-                results.get(0).attr("href"));
-        assertEquals("http://www.apple.com/itunes/",
-                results.get(1).attr("href"));
-    }
-
-    @Test
-    public void testYahooJp() throws IOException {
-        File in = getFile("/htmltests/yahoo-jp.html.gz");
-        Document doc = Jsoup.parse(in, "UTF-8", "http://www.yahoo.co.jp/index.html"); // http charset is utf-8.
-        assertEquals("Yahoo! JAPAN", doc.title());
-        Element a = doc.select("a[href=t/2322m2]").first();
-        assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/t/2322m2",
-                a.attr("abs:href")); // session put into <base>
-        assertEquals("全国、人気の駅ランキング", a.text());
-    }
-
-    @Test
-    public void testBaidu() throws IOException {
-        // tests <meta http-equiv="Content-Type" content="text/html;charset=gb2312">
-        File in = getFile("/htmltests/baidu-cn-home.html");
-        Document doc = Jsoup.parse(in, null,
-                "http://www.baidu.com/"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse
-        Element submit = doc.select("#su").first();
-        assertEquals("百度一下", submit.attr("value"));
-
-        // test from attribute match
-        submit = doc.select("input[value=百度一下]").first();
-        assertEquals("su", submit.id());
-        Element newsLink = doc.select("a:contains(新)").first();
-        assertEquals("http://news.baidu.com", newsLink.absUrl("href"));
-
-        // check auto-detect from meta
-        assertEquals("GB2312", doc.outputSettings().charset().displayName());
-        assertEquals("<title>百度一下，你就知道      </title>", doc.select("title").outerHtml());
-
-        doc.outputSettings().charset("ascii");
-        assertEquals("<title>&#x767e;&#x5ea6;&#x4e00;&#x4e0b;&#xff0c;&#x4f60;&#x5c31;&#x77e5;&#x9053;      </title>",
-                doc.select("title").outerHtml());
-    }
-
-    @Test
-    public void testBaiduVariant() throws IOException {
-        // tests <meta charset> when preceded by another <meta>
-        File in = getFile("/htmltests/baidu-variant.html");
-        Document doc = Jsoup.parse(in, null,
-                "http://www.baidu.com/"); // http charset is gb2312, but NOT specifying it, to test http-equiv parse
-        // check auto-detect from meta
-        assertEquals("GB2312", doc.outputSettings().charset().displayName());
-        assertEquals("<title>百度一下，你就知道</title>", doc.select("title").outerHtml());
-    }
-
     @Test
     public void testHtml5Charset() throws IOException {
         // test that <meta charset="gb2312"> works
@@ -151,24 +57,6 @@ public class ParseTest {
     }
 
     @Test
-    public void testNytArticle() throws IOException {
-        // has tags like <nyt_text>
-        File in = getFile("/htmltests/nyt-article-1.html.gz");
-        Document doc = Jsoup.parse(in, null, "http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp");
-
-        Element headline = doc.select("nyt_headline[version=1.0]").first();
-        assertEquals("As BP Lays Out Future, It Will Not Include Hayward", headline.text());
-    }
-
-    @Test
-    public void testYahooArticle() throws IOException {
-        File in = getFile("/htmltests/yahoo-article-1.html.gz");
-        Document doc = Jsoup.parse(in, "UTF-8", "http://news.yahoo.com/s/nm/20100831/bs_nm/us_gm_china");
-        Element p = doc.select("p:contains(Volt will be sold in the United States)").first();
-        assertEquals("In July, GM said its electric Chevrolet Volt will be sold in the United States at $41,000 -- $8,000 more than its nearest competitor, the Nissan Leaf.", p.text());
-    }
-
-    @Test
     public void testLowercaseUtf8Charset() throws IOException {
         File in = getFile("/htmltests/lowercase-charset-test.html");
         Document doc = Jsoup.parse(in, null);
diff --git a/src/test/java/org/jsoup/integration/SessionIT.java b/src/test/java/org/jsoup/integration/SessionIT.java
index 29fff08..0bcdb17 100644
--- a/src/test/java/org/jsoup/integration/SessionIT.java
+++ b/src/test/java/org/jsoup/integration/SessionIT.java
@@ -3,11 +3,9 @@ package org.jsoup.integration;
 import org.jsoup.Connection;
 import org.jsoup.Jsoup;
 import org.jsoup.UncheckedIOException;
-import org.jsoup.integration.servlets.EchoServlet;
 import org.jsoup.integration.servlets.FileServlet;
 import org.jsoup.integration.servlets.SlowRider;
 import org.jsoup.nodes.Document;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -23,25 +21,20 @@ public class SessionIT {
         TestServer.start();
     }
 
-    @AfterAll
-    public static void tearDown() {
-        TestServer.stop();
-    }
-
     @Test
     public void multiThread() throws InterruptedException {
         int numThreads = 20;
         int numThreadLoops = 5;
         String[] urls = {
-            FileServlet.urlTo("/htmltests/smh-biz-article-1.html.gz"),
-            FileServlet.urlTo("/htmltests/news-com-au-home.html.gz"),
-            FileServlet.urlTo("/htmltests/google-ipod.html.gz"),
+            FileServlet.urlTo("/htmltests/medium.html"),
+            FileServlet.urlTo("/htmltests/upload-form.html"),
+            FileServlet.urlTo("/htmltests/comments.html"),
             FileServlet.urlTo("/htmltests/large.html"),
         };
         String[] titles = {
-            "The board’s next fear: the female quota",
-            "News.com.au | News from Australia and around the world online | NewsComAu",
-            "ipod - Google Search",
+            "Medium HTML",
+            "Upload Form Test",
+            "A Certain Kind of Test",
             "Large HTML"
         };
         ThreadCatcher catcher = new ThreadCatcher();
diff --git a/src/test/java/org/jsoup/integration/SessionTest.java b/src/test/java/org/jsoup/integration/SessionTest.java
index 1de2e0c..8926405 100644
--- a/src/test/java/org/jsoup/integration/SessionTest.java
+++ b/src/test/java/org/jsoup/integration/SessionTest.java
@@ -8,7 +8,6 @@ import org.jsoup.integration.servlets.FileServlet;
 import org.jsoup.nodes.Document;
 import org.jsoup.parser.Parser;
 import org.jsoup.select.Elements;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -24,11 +23,6 @@ public class SessionTest {
         TestServer.start();
     }
 
-    @AfterAll
-    public static void tearDown() {
-        TestServer.stop();
-    }
-
     private static Elements keyEls(String key, Document doc) {
         return doc.select("th:contains(" + key + ") + td");
     }
diff --git a/src/test/java/org/jsoup/integration/TestServer.java b/src/test/java/org/jsoup/integration/TestServer.java
index 6af7c21..fa370d1 100644
--- a/src/test/java/org/jsoup/integration/TestServer.java
+++ b/src/test/java/org/jsoup/integration/TestServer.java
@@ -5,12 +5,11 @@ import org.eclipse.jetty.server.ServerConnector;
 import org.eclipse.jetty.servlet.ServletHandler;
 import org.jsoup.integration.servlets.BaseServlet;
 
-import java.util.concurrent.atomic.AtomicInteger;
+import java.net.InetSocketAddress;
 
 public class TestServer {
-    private static final Server jetty = new Server(0);
+    private static final Server jetty = new Server(new InetSocketAddress("localhost", 0));
     private static final ServletHandler handler = new ServletHandler();
-    private static AtomicInteger latch = new AtomicInteger(0);
 
     static {
         jetty.setHandler(handler);
@@ -21,26 +20,10 @@ public class TestServer {
 
     public static void start() {
         synchronized (jetty) {
-            int count = latch.getAndIncrement();
-            if (count == 0) {
-                try {
-                    jetty.start();
-                } catch (Exception e) {
-                    throw new IllegalStateException(e);
-                }
-            }
-        }
-    }
-
-    public static void stop() {
-        synchronized (jetty) {
-            int count = latch.getAndDecrement();
-            if (count == 0) {
-                try {
-                    jetty.stop();
-                } catch (Exception e) {
-                    throw new IllegalStateException(e);
-                }
+            try {
+                jetty.start(); // jetty will safely no-op a start on an already running instance
+            } catch (Exception e) {
+                throw new IllegalStateException(e);
             }
         }
     }
diff --git a/src/test/java/org/jsoup/integration/servlets/EchoServlet.java b/src/test/java/org/jsoup/integration/servlets/EchoServlet.java
index 9931f97..f5bf2ce 100644
--- a/src/test/java/org/jsoup/integration/servlets/EchoServlet.java
+++ b/src/test/java/org/jsoup/integration/servlets/EchoServlet.java
@@ -67,6 +67,7 @@ public class EchoServlet extends BaseServlet {
         // some get items
         write(w, "Method", req.getMethod());
         write(w, "Request URI", req.getRequestURI());
+        write(w, "Path Info", req.getPathInfo());
         write(w, "Query String", req.getQueryString());
 
         // request headers (why is it an enumeration?)
diff --git a/src/test/java/org/jsoup/internal/StringUtilTest.java b/src/test/java/org/jsoup/internal/StringUtilTest.java
index 2f4fff5..84cca12 100644
--- a/src/test/java/org/jsoup/internal/StringUtilTest.java
+++ b/src/test/java/org/jsoup/internal/StringUtilTest.java
@@ -147,6 +147,15 @@ public class StringUtilTest {
         assertEquals("http://example.com/b/c/g#s/../x", resolve("http://example.com/b/c/d;p?q", "g#s/../x"));
     }
 
+    @Test void stripsControlCharsFromUrls() {
+        // should resovle to an absolute url:
+        assertEquals("foo:bar", resolve("\nhttps://\texample.com/", "\r\nfo\to:ba\br"));
+    }
+
+    @Test void allowsSpaceInUrl() {
+        assertEquals("https://example.com/foo bar/", resolve("HTTPS://example.com/example/", "../foo bar/"));
+    }
+
     @Test
     void isAscii() {
         assertTrue(StringUtil.isAscii(""));
diff --git a/src/test/java/org/jsoup/nodes/CommentTest.java b/src/test/java/org/jsoup/nodes/CommentTest.java
index fe1c136..c622f18 100644
--- a/src/test/java/org/jsoup/nodes/CommentTest.java
+++ b/src/test/java/org/jsoup/nodes/CommentTest.java
@@ -41,6 +41,20 @@ public class CommentTest {
         assertEquals("<!-- a simple comment -->", c1.outerHtml());
     }
 
+    @Test void stableIndentInBlock() {
+        String html = "<div><!-- comment --> Text</div><p><!-- comment --> Text</p>";
+        Document doc = Jsoup.parse(html);
+        String out = doc.body().html();
+        assertEquals("<div>\n" +
+            " <!-- comment --> Text\n" +
+            "</div>\n" +
+            "<p><!-- comment --> Text</p>", out);
+
+        Document doc2 = Jsoup.parse(out);
+        String out2 = doc2.body().html();
+        assertEquals(out, out2);
+    }
+
     @Test
     public void testClone() {
         Comment c1 = comment.clone();
diff --git a/src/test/java/org/jsoup/nodes/DocumentTest.java b/src/test/java/org/jsoup/nodes/DocumentTest.java
index 47b7ccb..6a242cf 100644
--- a/src/test/java/org/jsoup/nodes/DocumentTest.java
+++ b/src/test/java/org/jsoup/nodes/DocumentTest.java
@@ -14,6 +14,7 @@ import org.junit.jupiter.api.Test;
 import java.io.*;
 import java.nio.charset.Charset;
 import java.nio.charset.StandardCharsets;
+import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.*;
 
@@ -55,15 +56,15 @@ public class DocumentTest {
     @Test public void testOutputEncoding() {
         Document doc = Jsoup.parse("<p title=π>π & < > </p>");
         // default is utf-8
-        assertEquals("<p title=\"π\">π &amp; &lt; &gt; </p>", doc.body().html());
+        assertEquals("<p title=\"π\">π &amp; &lt; &gt;</p>", doc.body().html());
         assertEquals("UTF-8", doc.outputSettings().charset().name());
 
         doc.outputSettings().charset("ascii");
         assertEquals(Entities.EscapeMode.base, doc.outputSettings().escapeMode());
-        assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt; </p>", doc.body().html());
+        assertEquals("<p title=\"&#x3c0;\">&#x3c0; &amp; &lt; &gt;</p>", doc.body().html());
 
         doc.outputSettings().escapeMode(Entities.EscapeMode.extended);
-        assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt; </p>", doc.body().html());
+        assertEquals("<p title=\"&pi;\">&pi; &amp; &lt; &gt;</p>", doc.body().html());
     }
 
     @Test public void testXhtmlReferences() {
@@ -109,11 +110,17 @@ public class DocumentTest {
         Document doc = Jsoup.parse("<title>Hello</title> <p>One<p>Two");
         Document clone = doc.clone();
 
-        assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()));
+        assertEquals("<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()));
         clone.title("Hello there");
-        clone.select("p").first().text("One more").attr("id", "1");
-        assertEquals("<html><head><title>Hello there</title> </head><body><p id=\"1\">One more</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()));
-        assertEquals("<html><head><title>Hello</title> </head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()));
+        clone.expectFirst("p").text("One more").attr("id", "1");
+        assertEquals("<html><head><title>Hello there</title></head><body><p id=\"1\">One more</p><p>Two</p></body></html>", TextUtil.stripNewlines(clone.html()));
+        assertEquals("<html><head><title>Hello</title></head><body><p>One</p><p>Two</p></body></html>", TextUtil.stripNewlines(doc.html()));
+    }
+
+    @Test void testBasicIndent() {
+        Document doc = Jsoup.parse("<title>Hello</title> <p>One<p>Two");
+        String expect = "<html>\n <head>\n  <title>Hello</title>\n </head>\n <body>\n  <p>One</p>\n  <p>Two</p>\n </body>\n</html>";
+        assertEquals(expect, doc.html());
     }
 
     @Test public void testClonesDeclarations() {
@@ -126,18 +133,15 @@ public class DocumentTest {
     }
 
     @Test public void testLocation() throws IOException {
-    	File in = ParseTest.getFile("/htmltests/yahoo-jp.html.gz");
-        Document doc = Jsoup.parse(in, "UTF-8", "http://www.yahoo.co.jp/index.html");
+        // tests location vs base href
+        File in = ParseTest.getFile("/htmltests/basehref.html");
+        Document doc = Jsoup.parse(in, "UTF-8", "http://example.com/");
         String location = doc.location();
         String baseUri = doc.baseUri();
-        assertEquals("http://www.yahoo.co.jp/index.html",location);
-        assertEquals("http://www.yahoo.co.jp/_ylh=X3oDMTB0NWxnaGxsBF9TAzIwNzcyOTYyNjUEdGlkAzEyBHRtcGwDZ2Ex/",baseUri);
-        in = ParseTest.getFile("/htmltests/nyt-article-1.html.gz");
-        doc = Jsoup.parse(in, null, "http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp");
-        location = doc.location();
-        baseUri = doc.baseUri();
-        assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp",location);
-        assertEquals("http://www.nytimes.com/2010/07/26/business/global/26bp.html?hp",baseUri);
+        assertEquals("http://example.com/", location);
+        assertEquals("https://example.com/path/file.html?query", baseUri);
+        assertEquals("./anotherfile.html", doc.expectFirst("a").attr("href"));
+        assertEquals("https://example.com/path/anotherfile.html", doc.expectFirst("a").attr("abs:href"));
     }
 
     @Test public void testLocationFromString() {
@@ -526,4 +530,43 @@ public class DocumentTest {
             "</html>";
         assertEquals(expected, doc.html());
     }
+
+    @Test void forms() {
+        String html = "<body><form id=1><input name=foo></form><form id=2><input name=bar>";
+        Document doc = Jsoup.parse(html);
+
+        List<FormElement> forms = doc.forms();
+        assertEquals(2, forms.size());
+        FormElement form = forms.get(1);
+        assertEquals(1, form.elements().size());
+        assertEquals("bar", form.elements().first().attr("name"));
+
+        String emptyHtml = "<body>";
+        Document emptyDoc = Jsoup.parse(emptyHtml);
+        assertEquals(0, emptyDoc.forms().size());
+    }
+
+    @Test void expectForm() {
+        String html = "<body><div name=form></div><form id=1 name=form><input name=foo></form><form id=2><input name=bar>";
+        Document doc = Jsoup.parse(html);
+
+        // test finds first <form>
+        FormElement formEl1 = doc.expectForm("[name=form]");
+        assertEquals("1", formEl1.id()); // and not the div
+
+        FormElement formEl2 = doc.expectForm("form");
+        assertEquals("1", formEl2.id());
+
+        FormElement formEl3 = doc.expectForm("form:has([name=bar])");
+        assertEquals("2", formEl3.id());
+
+        boolean threw = false;
+        try {
+            FormElement nix = doc.expectForm("div");
+        } catch (IllegalArgumentException e) {
+            threw = true;
+        }
+        assertTrue(threw);
+
+    }
 }
diff --git a/src/test/java/org/jsoup/nodes/ElementIT.java b/src/test/java/org/jsoup/nodes/ElementIT.java
index 80557bb..ff57cef 100644
--- a/src/test/java/org/jsoup/nodes/ElementIT.java
+++ b/src/test/java/org/jsoup/nodes/ElementIT.java
@@ -1,12 +1,12 @@
 package org.jsoup.nodes;
 
 import org.jsoup.Jsoup;
+import org.jsoup.select.Elements;
 import org.junit.jupiter.api.Test;
 
 import java.util.List;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class ElementIT {
     @Test
@@ -78,4 +78,60 @@ public class ElementIT {
 
         assertTrue(runtime <= 10000);
     }
+
+    // These overflow tests take a couple seconds to run, so are in the slow tests
+    @Test void hasTextNoOverflow() {
+        // hasText() was recursive, so could overflow
+        Document doc = new Document("https://example.com/");
+        Element el = doc.body();
+        for (int i = 0; i <= 50000; i++) {
+            el = el.appendElement("p");
+        }
+        assertFalse(doc.hasText());
+        el.text("Hello");
+        assertTrue(doc.hasText());
+        assertEquals(el.text(), doc.text());
+    }
+
+    @Test void dataNoOverflow() {
+        // data() was recursive, so could overflow
+        Document doc = new Document("https://example.com/");
+        Element el = doc.body();
+        for (int i = 0; i <= 50000; i++) {
+            el = el.appendElement("p");
+        }
+        Element script = el.appendElement("script");
+        script.text("script"); // holds data nodes, so inserts as data, not text
+        assertFalse(script.hasText());
+        assertEquals("script", script.data());
+        assertEquals(el.data(), doc.data());
+    }
+
+    @Test void parentsNoOverflow() {
+        // parents() was recursive, so could overflow
+        Document doc = new Document("https://example.com/");
+        Element el = doc.body();
+        int num = 50000;
+        for (int i = 0; i <= num; i++) {
+            el = el.appendElement("p");
+        }
+        Elements parents = el.parents();
+        assertEquals(num+2, parents.size()); // +2 for html and body
+        assertEquals(doc, el.ownerDocument());
+    }
+
+    @Test void wrapNoOverflow() {
+        // deepChild was recursive, so could overflow if presented with a fairly insane wrap
+        Document doc = new Document("https://example.com/");
+        Element el = doc.body().appendElement("p");
+        int num = 50000;
+        StringBuilder sb = new StringBuilder();
+        for (int i = 0; i <= num; i++) {
+            sb.append("<div>");
+        }
+        el.wrap(sb.toString());
+        String html = doc.body().html();
+        assertTrue(html.startsWith("<div>"));
+        assertEquals(num + 3, el.parents().size());
+    }
 }
diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index f1a6556..41809af 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -2,7 +2,7 @@ package org.jsoup.nodes;
 
 import org.jsoup.Jsoup;
 import org.jsoup.TextUtil;
-import org.jsoup.internal.StringUtil;
+import org.jsoup.helper.ValidationException;
 import org.jsoup.parser.ParseSettings;
 import org.jsoup.parser.Parser;
 import org.jsoup.parser.Tag;
@@ -23,6 +23,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.regex.Pattern;
 import java.util.stream.Stream;
 
 import static org.junit.jupiter.api.Assertions.*;
@@ -32,7 +33,7 @@ import static org.junit.jupiter.api.Assertions.*;
 
  @author Jonathan Hedley */
 public class ElementTest {
-    private String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";
+    private final String reference = "<div id=div1><p>Hello</p><p>Another <b>element</b></p><div id=div2><img src=foo.png></div></div>";
 
     private static void validateScriptContents(String src, Element el) {
         assertEquals("", el.text()); // it's not text
@@ -156,6 +157,14 @@ public class ElementTest {
         assertEquals("<pre><code><span><b>code\n\ncode</b></span></code></pre>", doc.body().html());
     }
 
+    @Test void doesNotWrapBlocksInPre() {
+        // https://github.com/jhy/jsoup/issues/1891
+        String h = "<pre><span><foo><div>TEST\n TEST</div></foo></span></pre>";
+        Document doc = Jsoup.parse(h);
+        assertEquals("TEST\n TEST", doc.wholeText());
+        assertEquals(h, doc.body().html());
+    }
+
     @Test
     public void testBrHasSpace() {
         Document doc = Jsoup.parse("<p>Hello<br>there</p>");
@@ -176,6 +185,17 @@ public class ElementTest {
         assertEquals("Hello there now", doc.text());
     }
 
+    @Test public void textHasSpacesAfterBlock() {
+        Document doc = Jsoup.parse("<div>One</div><div>Two</div><span>Three</span><p>Fou<i>r</i></p>");
+        String text = doc.text();
+        String wholeText = doc.wholeText();
+
+        assertEquals("One Two Three Four", text);
+        assertEquals("OneTwoThreeFour",wholeText);
+
+        assertEquals("OneTwo",Jsoup.parse("<span>One</span><span>Two</span>").text());
+    }
+
     @Test
     public void testWholeText() {
         Document doc = Jsoup.parse("<p> Hello\nthere &nbsp;  </p>");
@@ -197,6 +217,28 @@ public class ElementTest {
         assertEquals("this", p.nextElementSibling().text());
         assertEquals("Hello", p.firstElementSibling().text());
         assertEquals("element", p.lastElementSibling().text());
+        assertNull(p.lastElementSibling().nextElementSibling());
+        assertNull(p.firstElementSibling().previousElementSibling());
+    }
+
+    @Test public void nextElementSibling() {
+        Document doc = Jsoup.parse("<p>One</p>Two<p>Three</p>");
+        Element el = doc.expectFirst("p");
+        assertNull(el.previousElementSibling());
+        Element next = el.nextElementSibling();
+        assertNotNull(next);
+        assertEquals("Three", next.text());
+        assertNull(next.nextElementSibling());
+    }
+
+    @Test public void prevElementSibling() {
+        Document doc = Jsoup.parse("<p>One</p>Two<p>Three</p>");
+        Element el = doc.expectFirst("p:contains(Three)");
+        assertNull(el.nextElementSibling());
+        Element prev = el.previousElementSibling();
+        assertNotNull(prev);
+        assertEquals("One", prev.text());
+        assertNull(prev.previousElementSibling());
     }
 
     @Test
@@ -222,7 +264,7 @@ public class ElementTest {
     @Test
     public void testFirstAndLastSiblings() {
         Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three");
-        Element div = doc.selectFirst("div");
+        Element div = doc.expectFirst("div");
         Element one = div.child(0);
         Element two = div.child(1);
         Element three = div.child(2);
@@ -231,6 +273,8 @@ public class ElementTest {
         assertSame(one, two.firstElementSibling());
         assertSame(three, three.lastElementSibling());
         assertSame(three, two.lastElementSibling());
+        assertNull(one.previousElementSibling());
+        assertNull(three.nextElementSibling());
     }
 
     @Test
@@ -244,6 +288,10 @@ public class ElementTest {
         assertEquals("div", parents.get(1).tagName());
         assertEquals("body", parents.get(2).tagName());
         assertEquals("html", parents.get(3).tagName());
+
+        Element orphan = new Element("p");
+        Elements none = orphan.parents();
+        assertEquals(0, none.size());
     }
 
     @Test
@@ -536,7 +584,7 @@ public class ElementTest {
         Document doc = Jsoup.parse("<title>Hello there</title> <div><p>Hello</p><p>there</p></div> <div>Another</div>");
         assertEquals("<title>Hello there</title>", doc.select("title").first().outerHtml());
         assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>", doc.select("div").first().outerHtml());
-        assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div> \n<div>\n Another\n</div>", doc.select("body").first().html());
+        assertEquals("<div>\n <p>Hello</p>\n <p>there</p>\n</div>\n<div>\n Another\n</div>", doc.select("body").first().html());
     }
 
     @Test
@@ -625,6 +673,7 @@ public class ElementTest {
         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");
         Element div = doc.getElementById("1");
         div.appendText(" there & now >");
+        assertEquals ("Hello there & now >", div.text());
         assertEquals("<p>Hello</p> there &amp; now &gt;", TextUtil.stripNewlines(div.html()));
     }
 
@@ -683,6 +732,20 @@ public class ElementTest {
         }
     }
 
+    @Test void prependNodes() {
+        Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");
+        Element p = doc.expectFirst("p");
+        p.prepend("Text <!-- comment --> ");
+        assertEquals("Text <!-- comment --> Hello", TextUtil.stripNewlines(p.html()));
+    }
+
+    @Test void appendNodes() {
+        Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");
+        Element p = doc.expectFirst("p");
+        p.append(" Text <!-- comment -->");
+        assertEquals("Hello Text <!-- comment -->", TextUtil.stripNewlines(p.html()));
+    }
+
     @Test
     public void testSetHtml() {
         Document doc = Jsoup.parse("<div id=1><p>Hello</p></div>");
@@ -1158,6 +1221,50 @@ public class ElementTest {
         assertSame(divC, doc.select(divC.cssSelector()).first());
     }
 
+    @Test public void cssSelectorEscaped() {
+        // https://github.com/jhy/jsoup/issues/1742
+        Document doc = Jsoup.parse("<p\\p>One</p\\p> <p id='one.two'>Two</p> <p class='one.two:three/four'>Three</p>");
+        Element one = doc.expectFirst("p\\\\p");
+        Elements ps = doc.select("p");
+        Element two = ps.get(0);
+        Element three = ps.get(1);
+
+        String oneSelect = one.cssSelector();
+        assertEquals("html > body > p\\\\p", oneSelect);
+        assertEquals(one, doc.expectFirst(oneSelect));
+
+        String twoSelect = two.cssSelector();
+        assertEquals("#one\\.two", twoSelect);
+        assertEquals(two, doc.expectFirst(twoSelect));
+
+        String threeSelect = three.cssSelector();
+        assertEquals("html > body > p.one\\.two\\:three\\/four", threeSelect);
+        assertEquals(three, doc.expectFirst(threeSelect));
+    }
+
+    @Test public void cssEscapedAmp() {
+        Document doc = Jsoup.parse("<p class='\\&'>One</p>");
+        Element one = doc.expectFirst(".\\\\\\&"); // tested matches js querySelector
+        assertEquals("One", one.text());
+
+        String q = one.cssSelector();
+        assertEquals("html > body > p.\\\\\\&", q);
+        assertEquals(one, doc.expectFirst(q));
+    }
+
+    @Test public void cssSelectorEscapedClass() {
+        // example in https://github.com/jhy/jsoup/issues/838
+        String html = "<div class='B\\&W\\?'><div class=test>Text</div></div>";
+        Document parse = Jsoup.parse(html);
+        Element el = parse.expectFirst(".test");
+        assertEquals("Text", el.text());
+
+        String q = el.cssSelector();
+        assertEquals("html > body > div.B\\\\\\&W\\\\\\? > div.test", q);
+        Element found = parse.expectFirst(q);
+        assertEquals(found, el);
+    }
+
     @Test
     public void testClassNames() {
         Document doc = Jsoup.parse("<div class=\"c1 c2\">C</div>");
@@ -2210,10 +2317,436 @@ public class ElementTest {
         // testcase for https://github.com/jhy/jsoup/issues/1437
         String html = "<p>Hello<br>World</p>";
         Document doc = Jsoup.parse(html);
+        doc.outputSettings().prettyPrint(false); // otherwise html serializes as Hello<br>\n World.
         Element p = doc.select("p").first();
         assertNotNull(p);
         assertEquals(html, p.outerHtml());
         assertEquals("Hello World", p.text());
         assertEquals("Hello\nWorld", p.wholeText());
     }
-}
\ No newline at end of file
+
+    @Test void wrapTextAfterBr() {
+        // https://github.com/jhy/jsoup/issues/1858
+        String html = "<p>Hello<br>there<br>now.</p>";
+        Document doc = Jsoup.parse(html);
+        assertEquals("<p>Hello<br>\n there<br>\n now.</p>", doc.body().html());
+    }
+
+    @Test void prettyprintBrInBlock() {
+        String html = "<div><br> </div>";
+        Document doc = Jsoup.parse(html);
+        assertEquals("<div>\n <br>\n</div>", doc.body().html()); // not div\n br\n \n/div
+    }
+
+    @Test void prettyprintBrWhenNotFirstChild() {
+        // https://github.com/jhy/jsoup/issues/1911
+        String h = "<div><p><br>Foo</p><br></div>";
+        Document doc = Jsoup.parse(h);
+        assertEquals("<div>\n" +
+            " <p><br>\n  Foo</p>\n" +
+            " <br>\n" +
+            "</div>", doc.body().html());
+        // br gets wrapped if in div, but not in p (block vs inline), but always wraps after
+    }
+
+    @Test void preformatFlowsToChildTextNodes() {
+        // https://github.com/jhy/jsoup/issues/1776
+        String html = "<div><pre>One\n<span>\nTwo</span>\n <span>  \nThree</span>\n <span>Four <span>Five</span>\n  Six\n</pre>";
+        Document doc = Jsoup.parse(html);
+        doc.outputSettings().indentAmount(2).prettyPrint(true);
+
+        Element div = doc.selectFirst("div");
+        assertNotNull(div);
+        String actual = div.outerHtml();
+        String expect = "<div>\n" +
+            "  <pre>One\n" +
+            "<span>\n" +
+            "Two</span>\n" +
+            " <span>  \n" +
+            "Three</span>\n" +
+            " <span>Four <span>Five</span>\n" +
+            "  Six\n" +
+            "</span></pre>\n" +
+            "</div>";
+        assertEquals(expect, actual);
+
+        String expectText = "One\n" +
+            "\n" +
+            "Two\n" +
+            "   \n" +
+            "Three\n" +
+            " Four Five\n" +
+            "  Six\n";
+        assertEquals(expectText, div.wholeText());
+
+        String expectOwn = "One\n" +
+            "\n" +
+            " \n" +
+            " ";
+        assertEquals(expectOwn, div.child(0).wholeOwnText());
+    }
+
+    @Test void inlineInBlockShouldIndent() {
+        // was inconsistent between <div>\n<span> and <div><span> - former would print inline, latter would wrap(!)
+        String html = "<div>One <span>Hello</span><span>!</span></div><div>\n<span>There</span></div><div> <span>Now</span></div>";
+        Document doc = Jsoup.parse(html);
+        assertEquals(
+            "<div>\n" +
+                " One <span>Hello</span><span>!</span>\n" +
+                "</div>\n" +
+                "<div>\n" +
+                " <span>There</span>\n" +
+                "</div>\n" +
+                "<div>\n" +
+                " <span>Now</span>\n" +
+                "</div>",
+            doc.body().html());
+    }
+
+    @Test void testExpectFirst() {
+        Document doc = Jsoup.parse("<p>One</p><p>Two <span>Three</span> <span>Four</span>");
+
+        Element span = doc.expectFirst("span");
+        assertEquals("Three", span.text());
+
+        assertNull(doc.selectFirst("div"));
+        boolean threw = false;
+        try {
+            Element div = doc.expectFirst("div");
+        } catch (IllegalArgumentException e) {
+            threw = true;
+        }
+        assertTrue(threw);
+    }
+
+    @Test void testExpectFirstMessage() {
+        Document doc = Jsoup.parse("<p>One</p><p>Two <span>Three</span> <span>Four</span>");
+        boolean threw = false;
+        Element p = doc.expectFirst("P");
+        try {
+            Element span = p.expectFirst("span.doesNotExist");
+        } catch (ValidationException e) {
+            threw = true;
+            assertEquals("No elements matched the query 'span.doesNotExist' on element 'p'.", e.getMessage());
+        }
+        assertTrue(threw);
+    }
+
+    @Test void testExpectFirstMessageDoc() {
+        Document doc = Jsoup.parse("<p>One</p><p>Two <span>Three</span> <span>Four</span>");
+        boolean threw = false;
+        Element p = doc.expectFirst("P");
+        try {
+            Element span = doc.expectFirst("span.doesNotExist");
+        } catch (ValidationException e) {
+            threw = true;
+            assertEquals("No elements matched the query 'span.doesNotExist' in the document.", e.getMessage());
+        }
+        assertTrue(threw);
+    }
+
+    @Test void spanRunsMaintainSpace() {
+        // https://github.com/jhy/jsoup/issues/1787
+        Document doc = Jsoup.parse("<p><span>One</span>\n<span>Two</span>\n<span>Three</span></p>");
+        String text = "One Two Three";
+        Element body = doc.body();
+        assertEquals(text, body.text());
+
+        Element p = doc.expectFirst("p");
+        String html = p.html();
+        p.html(html);
+        assertEquals(text, body.text());
+
+        assertEquals("<p><span>One</span> <span>Two</span> <span>Three</span></p>", body.html());
+    }
+
+    @Test void doctypeIsPrettyPrinted() {
+        // resolves underlying issue raised in https://github.com/jhy/jsoup/pull/1664
+        Document doc1 = Jsoup.parse("<!--\nlicense\n-->\n \n<!doctype html>\n<html>");
+        Document doc2 = Jsoup.parse("\n  <!doctype html><html>");
+        Document doc3 = Jsoup.parse("<!doctype html>\n<html>");
+        Document doc4 = Jsoup.parse("\n<!doctype html>\n<html>");
+        Document doc5 = Jsoup.parse("\n<!--\n comment \n -->  <!doctype html>\n<html>");
+        Document doc6 = Jsoup.parse("<!--\n comment \n -->  <!doctype html>\n<html>");
+
+        assertEquals("<!--\nlicense\n-->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc1.html());
+        doc1.outputSettings().prettyPrint(false);
+        assertEquals("<!--\nlicense\n--><!doctype html>\n<html><head></head><body></body></html>", doc1.html());
+        // note that the whitespace between the comment and the doctype is not retained, in Initial state
+
+        assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc2.html());
+        assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc3.html());
+        assertEquals("<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc4.html());
+        assertEquals("<!--\n comment \n -->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc5.html());
+        assertEquals("<!--\n comment \n -->\n<!doctype html>\n<html>\n <head></head>\n <body></body>\n</html>", doc6.html());
+    }
+
+    @Test void textnodeInBlockIndent() {
+        String html ="<div>\n{{ msg }} \n </div>\n<div>\n{{ msg }} \n </div>";
+        Document doc = Jsoup.parse(html);
+        assertEquals("<div>\n {{ msg }}\n</div>\n<div>\n {{ msg }}\n</div>", doc.body().html());
+    }
+
+    @Test void stripTrailing() {
+        String html = "<p> This <span>is </span>fine. </p>";
+        Document doc = Jsoup.parse(html);
+        assertEquals("<p>This <span>is </span>fine.</p>", doc.body().html());
+    }
+
+    @Test void elementIndentAndSpaceTrims() {
+        String html = "<body><div> <p> One Two </p> <a>  Hello </a><p>\nSome text \n</p>\n </div>";
+        Document doc = Jsoup.parse(html);
+        assertEquals("<div>\n" +
+            " <p>One Two</p><a> Hello </a>\n" +
+            " <p>Some text</p>\n" +
+            "</div>", doc.body().html());
+    }
+
+    @Test void divAInlineable() {
+        String html = "<body><div> <a>Text</a>";
+        Document doc = Jsoup.parse(html);
+        assertEquals("<div>\n" +
+            " <a>Text</a>\n" +
+            "</div>", doc.body().html());
+    }
+
+    @Test void noDanglingSpaceAfterCustomElement() {
+        // https://github.com/jhy/jsoup/issues/1852
+        String html = "<bar><p/>\n</bar>";
+        Document doc = Jsoup.parse(html);
+        assertEquals("<bar>\n <p></p>\n</bar>", doc.body().html());
+
+        html = "<foo>\n  <bar />\n</foo>";
+        doc = Jsoup.parse(html);
+        assertEquals("<foo>\n <bar />\n</foo>", doc.body().html());
+    }
+
+    @Test void spanInBlockTrims() {
+        String html = "<p>Lorem ipsum</p>\n<span>Thanks</span>";
+        Document doc = Jsoup.parse(html);
+        String outHtml = doc.body().html();
+        assertEquals("<p>Lorem ipsum</p><span>Thanks</span>", outHtml);
+    }
+
+    @Test void replaceWithSelf() {
+        // https://github.com/jhy/jsoup/issues/1843
+        Document doc = Jsoup.parse("<p>One<p>Two");
+        Elements ps = doc.select("p");
+        Element first = ps.first();
+
+        assertNotNull(first);
+        first.replaceWith(first);
+        assertEquals(ps.get(1), first.nextSibling());
+        assertEquals("<p>One</p>\n<p>Two</p>", first.parent().html());
+    }
+
+    @Test void select() {
+        Evaluator eval = QueryParser.parse("div");
+        Document doc = Jsoup.parse(reference);
+        Elements els = doc.select("div");
+        Elements els2 = doc.select(eval);
+        assertEquals(els, els2);
+    }
+
+    @Test void insertChildrenValidation() {
+        Document doc = Jsoup.parse(reference);
+        Element div = doc.expectFirst("div");
+        Throwable ex = assertThrows(ValidationException.class, () -> div.insertChildren(20, new Element("div")));
+        assertEquals("Insert position out of bounds.", ex.getMessage());
+    }
+
+    @Test void cssSelectorNoDoc() {
+        Element el = new Element("div");
+        el.id("one");
+        assertEquals("#one", el.cssSelector());
+    }
+
+    @Test void cssSelectorNoParent() {
+        Element el = new Element("div");
+        assertEquals("div", el.cssSelector());
+    }
+
+    @Test void orphanSiblings() {
+        Element el = new Element("div");
+        assertEquals(0, el.siblingElements().size());
+        assertEquals(0, el.nextElementSiblings().size());
+        assertEquals(0, el.previousElementSiblings().size());
+        assertNull(el.nextElementSibling());
+        assertNull(el.previousElementSibling());
+    }
+
+    @Test void getElementsByAttributeStarting() {
+        Document doc = Jsoup.parse("<div data-one=1 data-two=2 id=1><p data-one=3 id=2>Text</div><div>");
+        Elements els = doc.getElementsByAttributeStarting(" data- ");
+        assertEquals(2, els.size());
+        assertEquals("1", els.get(0).id());
+        assertEquals("2", els.get(1).id());
+        assertEquals(0, doc.getElementsByAttributeStarting("not-data").size());
+    }
+
+    @Test void getElementsByAttributeValueNot() {
+        Document doc = Jsoup.parse("<div data-one=1 data-two=2 id=1><p data-one=3 id=2>Text</div><div id=3>");
+        Elements els = doc.body().getElementsByAttributeValueNot("data-one", "1");
+        assertEquals(3, els.size()); // the body, p, and last div
+        assertEquals("body", els.get(0).normalName());
+        assertEquals("2", els.get(1).id());
+        assertEquals("3", els.get(2).id());
+    }
+
+    @Test void getElementsByAttributeValueStarting() {
+        Document doc = Jsoup.parse("<a href=one1></a><a href=one2></a><a href=else</a>");
+        Elements els = doc.getElementsByAttributeValueStarting("href", "one");
+        assertEquals(2, els.size());
+        assertEquals("one1", els.get(0).attr("href"));
+        assertEquals("one2", els.get(1).attr("href"));
+    }
+
+    @Test void getElementsByAttributeValueEnding() {
+        Document doc = Jsoup.parse("<a href=1one></a><a href=2one></a><a href=else</a>");
+        Elements els = doc.getElementsByAttributeValueEnding("href", "one");
+        assertEquals(2, els.size());
+        assertEquals("1one", els.get(0).attr("href"));
+        assertEquals("2one", els.get(1).attr("href"));
+    }
+
+    @Test void getElementsByAttributeValueContaining() {
+        Document doc = Jsoup.parse("<a href=1one></a><a href=2one></a><a href=else</a>");
+        Elements els = doc.getElementsByAttributeValueContaining("href", "on");
+        assertEquals(2, els.size());
+        assertEquals("1one", els.get(0).attr("href"));
+        assertEquals("2one", els.get(1).attr("href"));
+    }
+
+    @Test void getElementsByAttributeValueMatchingPattern() {
+        Document doc = Jsoup.parse("<a href=1one></a><a href=2one></a><a href=else</a>");
+        Elements els = doc.getElementsByAttributeValueMatching("href", Pattern.compile("^\\d\\w+"));
+        assertEquals(2, els.size());
+        assertEquals("1one", els.get(0).attr("href"));
+        assertEquals("2one", els.get(1).attr("href"));
+    }
+
+    @Test void getElementsByAttributeValueMatching() {
+        Document doc = Jsoup.parse("<a href=1one></a><a href=2one></a><a href=else</a>");
+        Elements els = doc.getElementsByAttributeValueMatching("href", "^\\d\\w+");
+        assertEquals(2, els.size());
+        assertEquals("1one", els.get(0).attr("href"));
+        assertEquals("2one", els.get(1).attr("href"));
+    }
+
+    @Test void getElementsByAttributeValueMatchingValidation() {
+        Document doc = Jsoup.parse(reference);
+        Throwable ex = assertThrows(IllegalArgumentException.class,
+            () -> doc.getElementsByAttributeValueMatching("key", "\\x"));
+        assertEquals("Pattern syntax error: \\x", ex.getMessage());
+    }
+
+    @Test void getElementsByIndexEquals() {
+        Document doc = Jsoup.parse("<a href=1one></a><a href=2one></a><a href=else</a>");
+        Elements els = doc.body().getElementsByIndexEquals(1);
+        assertEquals(2, els.size());
+        assertEquals("body", els.get(0).normalName());
+        assertEquals("2one", els.get(1).attr("href"));
+    }
+
+    @Test void getElementsContainingText() {
+        Document doc = Jsoup.parse("<div id=1>One</div><div>Two</div>");
+        Elements els = doc.body().getElementsContainingText("one");
+        assertEquals(2, els.size());
+        assertEquals("body", els.get(0).normalName());
+        assertEquals("1", els.get(1).id());
+    }
+
+    @Test void getElementsContainingOwnText() {
+        Document doc = Jsoup.parse("<div id=1>One</div><div>Two</div>");
+        Elements els = doc.body().getElementsContainingOwnText("one");
+        assertEquals(1, els.size());
+        assertEquals("1", els.get(0).id());
+    }
+
+    @Test void getElementsMatchingTextValidation() {
+        Document doc = Jsoup.parse(reference);
+        Throwable ex = assertThrows(IllegalArgumentException.class,
+            () -> doc.getElementsMatchingText("\\x"));
+        assertEquals("Pattern syntax error: \\x", ex.getMessage());
+    }
+
+    @Test void getElementsMatchingText() {
+        Document doc = Jsoup.parse("<div id=1>One</div><div>Two</div>");
+        Elements els = doc.body().getElementsMatchingText("O\\w+");
+        assertEquals(2, els.size());
+        assertEquals("body", els.get(0).normalName());
+        assertEquals("1", els.get(1).id());
+    }
+
+    @Test void getElementsMatchingOwnText() {
+        Document doc = Jsoup.parse("<div id=1>One</div><div>Two</div>");
+        Elements els = doc.body().getElementsMatchingOwnText("O\\w+");
+        assertEquals(1, els.size());
+        assertEquals("1", els.get(0).id());
+    }
+
+    @Test void getElementsMatchingOwnTextValidation() {
+        Document doc = Jsoup.parse(reference);
+        Throwable ex = assertThrows(IllegalArgumentException.class,
+            () -> doc.getElementsMatchingOwnText("\\x"));
+        assertEquals("Pattern syntax error: \\x", ex.getMessage());
+    }
+
+    @Test void hasText() {
+        Document doc = Jsoup.parse("<div id=1><p><i>One</i></p></div><div id=2>Two</div><div id=3><script>data</script> </div>");
+        assertTrue(doc.getElementById("1").hasText());
+        assertTrue(doc.getElementById("2").hasText());
+        assertFalse(doc.getElementById("3").hasText());
+    }
+
+    @Test void dataInCdataNode() {
+        Element el = new Element("div");
+        CDataNode cdata = new CDataNode("Some CData");
+        el.appendChild(cdata);
+        assertEquals("Some CData", el.data());
+
+        Document parse = Jsoup.parse("One <![CDATA[Hello]]>");
+        assertEquals("Hello", parse.data());
+    }
+
+    @Test void outerHtmlAppendable() {
+        // tests not string builder flow
+        Document doc = Jsoup.parse("<div>One</div>");
+        StringBuffer buffer = new StringBuffer();
+        doc.body().outerHtml(buffer);
+        assertEquals("\n<body>\n <div>\n  One\n </div>\n</body>", buffer.toString());
+        StringBuilder builder = new StringBuilder();
+        doc.body().outerHtml(builder);
+        assertEquals("<body>\n <div>\n  One\n </div>\n</body>", builder.toString());
+    }
+
+    @Test void rubyInline() {
+        String html = "<ruby>T<rp>(</rp><rtc>!</rtc><rt>)</rt></ruby>";
+        Document doc = Jsoup.parse(html);
+        assertEquals(html, doc.body().html());
+    }
+
+    @Test void nestedFormatAsInlinePrintsAsBlock() {
+        // https://github.com/jhy/jsoup/issues/1926
+        String h = "        <table>\n" +
+            "            <tr>\n" +
+            "                <td>\n" +
+            "                    <p style=\"display:inline;\">A</p>\n" +
+            "                    <p style=\"display:inline;\">B</p>\n" +
+            "                </td>\n" +
+            "            </tr>\n" +
+            "        </table>";
+        Document doc = Jsoup.parse(h);
+        String out = doc.body().html();
+        assertEquals("<table>\n" +
+            " <tbody>\n" +
+            "  <tr>\n" +
+            "   <td>\n" +
+            "    <p style=\"display:inline;\">A</p>\n" +
+            "    <p style=\"display:inline;\">B</p></td>\n" +
+            "  </tr>\n" +
+            " </tbody>\n" +
+            "</table>", out);
+        // todo - I would prefer the </td> to wrap down there - but need to reimplement pretty printer to simplify and track indented state
+    }
+}
diff --git a/src/test/java/org/jsoup/nodes/FormElementTest.java b/src/test/java/org/jsoup/nodes/FormElementTest.java
index c64cbbf..ee7702e 100644
--- a/src/test/java/org/jsoup/nodes/FormElementTest.java
+++ b/src/test/java/org/jsoup/nodes/FormElementTest.java
@@ -7,7 +7,6 @@ import org.jsoup.integration.servlets.CookieServlet;
 import org.jsoup.integration.servlets.EchoServlet;
 import org.jsoup.integration.servlets.FileServlet;
 import org.jsoup.select.Elements;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 
@@ -27,11 +26,6 @@ public class FormElementTest {
         TestServer.start();
     }
 
-    @AfterAll
-    public static void tearDown() {
-        TestServer.stop();
-    }
-
     @Test public void hasAssociatedControls() {
         //"button", "fieldset", "input", "keygen", "object", "output", "select", "textarea"
         String html = "<form id=1><button id=1><fieldset id=2 /><input id=3><keygen id=4><object id=5><output id=6>" +
diff --git a/src/test/java/org/jsoup/nodes/NodeTest.java b/src/test/java/org/jsoup/nodes/NodeTest.java
index af9db4d..e0622be 100644
--- a/src/test/java/org/jsoup/nodes/NodeTest.java
+++ b/src/test/java/org/jsoup/nodes/NodeTest.java
@@ -3,6 +3,7 @@ package org.jsoup.nodes;
 import org.jsoup.Jsoup;
 import org.jsoup.TextUtil;
 import org.jsoup.parser.Tag;
+import org.jsoup.select.Elements;
 import org.jsoup.select.NodeVisitor;
 import org.junit.jupiter.api.Test;
 
@@ -156,6 +157,14 @@ public class NodeTest {
         assertEquals("<span>two</span> three", TextUtil.stripNewlines(p.html()));
     }
 
+    @Test void removeOnOrphanIsNoop() {
+        // https://github.com/jhy/jsoup/issues/1898
+        Element node = new Element("div");
+        assertNull(node.parentNode());
+        node.remove();
+        assertNull(node.parentNode());
+    }
+
     @Test public void testReplace() {
         Document doc = Jsoup.parse("<p>One <span>two</span> three</p>");
         Element p = doc.select("p").first();
@@ -200,6 +209,25 @@ public class NodeTest {
         assertEquals("<p>One <em>four</em><i>five</i><b>two</b> three</p>", doc.body().html());
     }
 
+    @Test void beforeShuffle() {
+        // https://github.com/jhy/jsoup/issues/1898
+        Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
+        Element div = doc.select("div").get(0);
+        Elements ps = doc.select("p");
+        Element p1 = ps.get(0);
+        Element p2 = ps.get(1);
+        Element p3 = ps.get(2);
+
+        p2.before(p1);
+        p3.before(p2);
+        // ^ should be no-ops, they are already before
+        assertEquals("One Two Three", div.text());
+
+        p2.before(p1);
+        p1.before(p3);
+        assertEquals("Three One Two", div.text());
+    }
+
     @Test public void after() {
         Document doc = Jsoup.parse("<p>One <b>two</b> three</p>");
         Element newNode = new Element(Tag.valueOf("em"), "");
@@ -212,6 +240,25 @@ public class NodeTest {
         assertEquals("<p>One <b>two</b><i>five</i><em>four</em> three</p>", doc.body().html());
     }
 
+    @Test void afterShuffle() {
+        // https://github.com/jhy/jsoup/issues/1898
+        Document doc = Jsoup.parse("<div><p>One<p>Two<p>Three</div>");
+        Element div = doc.select("div").get(0);
+        Elements ps = doc.select("p");
+        Element p1 = ps.get(0);
+        Element p2 = ps.get(1);
+        Element p3 = ps.get(2);
+
+        p1.after(p2);
+        p2.after(p3);
+        // ^ should be no-ops, they are already before
+        assertEquals("One Two Three", div.text());
+
+        p3.after(p1);
+        p1.after(p2);
+        assertEquals("Three One Two", div.text());
+    }
+
     @Test public void unwrap() {
         Document doc = Jsoup.parse("<div>One <span>Two <b>Three</b></span> Four</div>");
         Element span = doc.select("span").first();
@@ -369,4 +416,50 @@ public class NodeTest {
         assertEquals(1, docClone.childNodes().size()); // check did not get the second div as the owner's children
         assertEquals(textClone, docClone.childNode(0)); // note not the head or the body -- not normalized
     }
+
+    @Test
+    void firstAndLastChild() {
+        String html = "<div>One <span>Two</span> <a href></a> Three</div>";
+        Document doc = Jsoup.parse(html);
+        Element div = doc.selectFirst("div");
+        Element a = doc.selectFirst("a");
+        assertNotNull(div);
+        assertNotNull(a);
+
+        // nodes
+        TextNode first = (TextNode) div.firstChild();
+        assertEquals("One ", first.text());
+
+        TextNode last = (TextNode) div.lastChild();
+        assertEquals(" Three", last.text());
+
+        assertNull(a.firstChild());
+        assertNull(a.lastChild());
+
+        // elements
+        Element firstEl = div.firstElementChild();
+        assertEquals("span", firstEl.tagName());
+
+        Element lastEl = div.lastElementChild();
+        assertEquals("a", lastEl.tagName());
+
+        assertNull(a.firstElementChild());
+        assertNull(a.lastElementChild());
+
+        assertNull(firstEl.firstElementChild());
+        assertNull(firstEl.lastElementChild());
+    }
+
+    @Test void nodeName() {
+        Element div = new Element("DIV");
+        assertEquals("DIV", div.tagName());
+        assertEquals("DIV", div.nodeName());
+        assertEquals("div", div.normalName());
+        assertTrue(div.isNode("div"));
+        assertTrue(Node.isNode(div, "div"));
+
+        TextNode text = new TextNode("Some Text");
+        assertEquals("#text", text.nodeName());
+        assertEquals("#text", text.normalName());
+    }
 }
diff --git a/src/test/java/org/jsoup/nodes/PositionTest.java b/src/test/java/org/jsoup/nodes/PositionTest.java
new file mode 100644
index 0000000..069d5c6
--- /dev/null
+++ b/src/test/java/org/jsoup/nodes/PositionTest.java
@@ -0,0 +1,206 @@
+package org.jsoup.nodes;
+
+import org.jsoup.Jsoup;
+import org.jsoup.integration.servlets.FileServlet;
+import org.jsoup.parser.Parser;
+import org.jsoup.select.Elements;
+import org.jsoup.select.NodeTraversor;
+import org.junit.jupiter.api.Test;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+/**
+ Functional tests for the Position tracking behavior (across nodes, treebuilder, etc.)
+ */
+class PositionTest {
+    static Parser TrackingParser = Parser.htmlParser().setTrackPosition(true);
+
+    @Test void parserTrackDefaults() {
+        Parser htmlParser = Parser.htmlParser();
+        assertFalse(htmlParser.isTrackPosition());
+        htmlParser.setTrackPosition(true);
+        assertTrue(htmlParser.isTrackPosition());
+
+        Parser xmlParser = Parser.htmlParser();
+        assertFalse(xmlParser.isTrackPosition());
+        xmlParser.setTrackPosition(true);
+        assertTrue(xmlParser.isTrackPosition());
+    }
+
+    @Test void tracksPosition() {
+        String html = "<p id=1\n class=foo>\n<span>Hello\n &reg;\n there &copy.</span> now.\n <!-- comment --> ";
+        Document doc = Jsoup.parse(html, TrackingParser);
+
+        Element body = doc.expectFirst("body");
+        Element p = doc.expectFirst("p");
+        Element span = doc.expectFirst("span");
+        TextNode text = (TextNode) span.firstChild();
+        assertNotNull(text);
+        TextNode now = (TextNode) span.nextSibling();
+        assertNotNull(now);
+        Comment comment = (Comment) now.nextSibling();
+        assertNotNull(comment);
+
+        assertFalse(body.sourceRange().isTracked());
+
+        Range pRange = p.sourceRange();
+        assertEquals("1,1:0-2,12:19", pRange.toString());
+
+        // no explicit P closer
+        Range pEndRange = p.endSourceRange();
+        assertFalse(pEndRange.isTracked());
+
+        Range.Position pStart = pRange.start();
+        assertTrue(pStart.isTracked());
+        assertEquals(0, pStart.pos());
+        assertEquals(1, pStart.columnNumber());
+        assertEquals(1, pStart.lineNumber());
+        assertEquals("1,1:0", pStart.toString());
+
+        Range.Position pEnd = pRange.end();
+        assertTrue(pStart.isTracked());
+        assertEquals(19, pEnd.pos());
+        assertEquals(12, pEnd.columnNumber());
+        assertEquals(2, pEnd.lineNumber());
+        assertEquals("2,12:19", pEnd.toString());
+
+        assertEquals("3,1:20", span.sourceRange().start().toString());
+        assertEquals("3,7:26", span.sourceRange().end().toString());
+
+        // span end tag
+        Range spanEnd = span.endSourceRange();
+        assertTrue(spanEnd.isTracked());
+        assertEquals("5,14:52-5,21:59", spanEnd.toString());
+
+        String wholeText = text.getWholeText();
+        assertEquals("Hello\n ®\n there ©.", wholeText);
+        String textOrig = "Hello\n &reg;\n there &copy.";
+        Range textRange = text.sourceRange();
+        assertEquals(textRange.end().pos() -  textRange.start().pos(), textOrig.length());
+        assertEquals("3,7:26", textRange.start().toString());
+        assertEquals("5,14:52", textRange.end().toString());
+
+        assertEquals("6,2:66", comment.sourceRange().start().toString());
+        assertEquals("6,18:82", comment.sourceRange().end().toString());
+    }
+
+    @Test void tracksMarkup() {
+        String html = "<!doctype\nhtml>\n<title>jsoup &copy;\n2022</title><body>\n<![CDATA[\n<jsoup>\n]]>";
+        Document doc = Jsoup.parse(html, TrackingParser);
+
+        DocumentType doctype = doc.documentType();
+        assertNotNull(doctype);
+        assertEquals("html", doctype.name());
+        assertEquals("1,1:0-2,6:15", doctype.sourceRange().toString());
+
+        Element title = doc.expectFirst("title");
+        TextNode titleText = (TextNode) title.firstChild();
+        assertNotNull(titleText);
+        assertEquals("jsoup ©\n2022", title.text());
+        assertEquals(titleText.getWholeText(), title.text());
+        assertEquals("3,1:16-3,8:23", title.sourceRange().toString());
+        assertEquals("3,8:23-4,5:40", titleText.sourceRange().toString());
+
+        CDataNode cdata = (CDataNode) doc.body().childNode(1);
+        assertEquals("\n<jsoup>\n", cdata.text());
+        assertEquals("5,1:55-7,4:76", cdata.sourceRange().toString());
+    }
+
+    @Test void tracksDataNodes() {
+        String html = "<head>\n<script>foo;\nbar()\n5 <= 4;</script>";
+        Document doc = Jsoup.parse(html, TrackingParser);
+
+        Element script = doc.expectFirst("script");
+        assertNotNull(script);
+        assertEquals("2,1:7-2,9:15", script.sourceRange().toString());
+        DataNode data = (DataNode) script.firstChild();
+        assertNotNull(data);
+        assertEquals("2,9:15-4,8:33", data.sourceRange().toString());
+    }
+
+    @Test void tracksXml() {
+        String xml = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!doctype html>\n<rss url=foo>\nXML\n</rss>\n<!-- comment -->";
+        Document doc = Jsoup.parse(xml, Parser.xmlParser().setTrackPosition(true));
+
+        XmlDeclaration decl = (XmlDeclaration) doc.childNode(0);
+        assertEquals("1,1:0-1,39:38", decl.sourceRange().toString());
+
+        DocumentType doctype = (DocumentType) doc.childNode(2);
+        assertEquals("2,1:39-2,16:54", doctype.sourceRange().toString());
+
+        Element rss = doc.firstElementChild();
+        assertNotNull(rss);
+        assertEquals("3,1:55-3,14:68", rss.sourceRange().toString());
+        assertEquals("5,1:73-5,7:79", rss.endSourceRange().toString());
+
+        TextNode text = (TextNode) rss.firstChild();
+        assertNotNull(text);
+        assertEquals("3,14:68-5,1:73", text.sourceRange().toString());
+
+        Comment comment = (Comment) rss.nextSibling().nextSibling();
+        assertEquals("6,1:80-6,17:96", comment.sourceRange().toString());
+    }
+
+    @Test void tracksFromFetch() throws IOException {
+        String url = FileServlet.urlTo("/htmltests/large.html"); // 280 K
+        Document doc = Jsoup.connect(url).parser(TrackingParser).get();
+
+        Element firstP = doc.expectFirst("p");
+        assertNotNull(firstP);
+        assertEquals("4,1:53-4,4:56", firstP.sourceRange().toString());
+
+        Element p = doc.expectFirst("#xy");
+        assertNotNull(p);
+        assertEquals("1000,1:279646-1000,10:279655", p.sourceRange().toString());
+        assertEquals("1000,567:280212-1000,571:280216", p.endSourceRange().toString());
+
+        TextNode text = (TextNode) p.firstChild();
+        assertNotNull(text);
+        assertEquals("1000,10:279655-1000,357:280002", text.sourceRange().toString());
+    }
+
+    @Test void tracksFromXmlFetch() throws IOException {
+        String url = FileServlet.urlTo("/htmltests/test-rss.xml");
+        Document doc = Jsoup.connect(url).parser(Parser.xmlParser().setTrackPosition(true)).get();
+
+        Element item = doc.expectFirst("item + item");
+        assertNotNull(item);
+        assertEquals("13,5:496-13,11:502", item.sourceRange().toString());
+        assertEquals("17,5:779-17,12:786", item.endSourceRange().toString());
+    }
+
+    @Test void tracksTableMovedText() {
+        String html = "<table>foo<tr>bar<td>baz</td>qux</tr>coo</table>";
+        Document doc = Jsoup.parse(html, TrackingParser);
+
+        List<TextNode> textNodes = new ArrayList<>();
+        NodeTraversor.traverse((Node node, int depth) -> {
+            if (node instanceof TextNode) {
+                textNodes.add((TextNode) node);
+            }
+        }, doc);
+
+        assertEquals(5, textNodes.size());
+        assertEquals("1,8:7-1,11:10", textNodes.get(0).sourceRange().toString());
+        assertEquals("1,15:14-1,18:17", textNodes.get(1).sourceRange().toString());
+        assertEquals("1,22:21-1,25:24", textNodes.get(2).sourceRange().toString());
+        assertEquals("1,30:29-1,33:32", textNodes.get(3).sourceRange().toString());
+        assertEquals("1,38:37-1,41:40", textNodes.get(4).sourceRange().toString());
+    }
+
+    @Test void tracksClosingHtmlTagsInXml() {
+        // verifies https://github.com/jhy/jsoup/issues/1935
+        String xml = "<p>One</p><title>Two</title><data>Three</data>";
+        Document doc = Jsoup.parse(xml, Parser.xmlParser().setTrackPosition(true));
+        Elements els = doc.children();
+        for (Element el : els) {
+            assertTrue(el.sourceRange().isTracked());
+            assertTrue(el.endSourceRange().isTracked());
+        }
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/java/org/jsoup/nodes/TextNodeTest.java b/src/test/java/org/jsoup/nodes/TextNodeTest.java
index 18b7873..f20ca8e 100644
--- a/src/test/java/org/jsoup/nodes/TextNodeTest.java
+++ b/src/test/java/org/jsoup/nodes/TextNodeTest.java
@@ -2,6 +2,7 @@ package org.jsoup.nodes;
 
 import org.jsoup.Jsoup;
 import org.jsoup.TextUtil;
+import org.jsoup.helper.ValidationException;
 import org.jsoup.internal.StringUtil;
 import org.junit.jupiter.api.Test;
 
@@ -70,6 +71,19 @@ public class TextNodeTest {
         assertEquals("Hello <b>there</b>", TextUtil.stripNewlines(div.html())); // not great that we get \n<b>there there... must correct
     }
 
+    @Test void testSplitTextValidation() {
+        Document doc = Jsoup.parse("<div>Hello there</div>");
+        Element div = doc.expectFirst("div");
+        TextNode tn = (TextNode) div.childNode(0);
+        Throwable ex = assertThrows(ValidationException.class,
+            () -> tn.splitText(-5));
+        assertEquals("Split offset must be not be negative", ex.getMessage());
+
+        ex = assertThrows(ValidationException.class,
+            () -> tn.splitText(500));
+        assertEquals("Split offset must not be greater than current text length", ex.getMessage());
+    }
+
     @Test public void testWithSupplementaryCharacter(){
         Document doc = Jsoup.parse(new String(Character.toChars(135361)));
         TextNode t = doc.body().textNodes().get(0);
@@ -157,4 +171,58 @@ public class TextNodeTest {
         }
         assertTrue(foundFirst);
     }
+
+    @Test void createFromEncoded() {
+        TextNode tn = TextNode.createFromEncoded("&lt;One&gt;");
+        assertEquals("<One>", tn.text());
+    }
+
+    @Test void normaliseWhitespace() {
+        assertEquals(" One Two ", TextNode.normaliseWhitespace("  One \n Two\n"));
+    }
+
+    @Test void stripLeadingWhitespace() {
+        assertEquals("One Two  ", TextNode.stripLeadingWhitespace("\n One Two  "));
+    }
+
+    // Lead Node tests
+    @Test void leafNodeAttributes() {
+        TextNode t = new TextNode("First");
+
+        // will hit the !hasAttributes flow
+        t.attr(t.nodeName(), "One");
+        assertEquals("One", t.attr(t.nodeName()));
+        assertFalse(t.hasAttributes());
+
+        Attributes attr = t.attributes();
+        assertEquals(1, attr.asList().size()); // vivifies 'One' as an attribute
+        assertEquals("One", attr.get(t.nodeName()));
+        t.coreValue("Two");
+        assertEquals("Two", t.text());
+
+        // arbitrary attributes
+        assertFalse(t.hasAttr("foo"));
+        t.attr("foo", "bar");
+        assertTrue(t.hasAttr("foo"));
+        t.removeAttr("foo");
+        assertFalse(t.hasAttr("foo"));
+
+        assertEquals("", t.baseUri());
+        t.attr("href", "/foo.html");
+        assertEquals("", t.absUrl("href")); // cannot abs
+
+        Element p = new Element("p");
+        p.doSetBaseUri("https://example.com/");
+        p.appendChild(t);
+        assertEquals("https://example.com/foo.html", t.absUrl("href"));
+
+        assertEquals(0, t.childNodeSize());
+        assertSame(t, t.empty());
+        assertEquals(0, t.ensureChildNodes().size());
+
+        TextNode clone = t.clone();
+        assertTrue(t.hasSameValue(clone));
+        assertEquals("/foo.html", clone.attr("href"));
+        assertEquals("Two", clone.text());
+    }
 }
diff --git a/src/test/java/org/jsoup/parser/CharacterReaderTest.java b/src/test/java/org/jsoup/parser/CharacterReaderTest.java
index d9f2280..37d7494 100644
--- a/src/test/java/org/jsoup/parser/CharacterReaderTest.java
+++ b/src/test/java/org/jsoup/parser/CharacterReaderTest.java
@@ -1,5 +1,6 @@
 package org.jsoup.parser;
 
+import org.jsoup.UncheckedIOException;
 import org.jsoup.integration.ParseTest;
 import org.junit.jupiter.api.Test;
 
@@ -61,6 +62,12 @@ public class CharacterReaderTest {
 
         assertEquals(CharacterReader.EOF, r.consume());
         assertTrue(r.isEmpty());
+
+        // unconsume all remaining characters
+        for (int i = 0; i < 4; i++) {
+            r.unconsume();
+        }
+        assertThrows(UncheckedIOException.class, r::unconsume);
     }
 
     @Test public void mark() {
@@ -78,6 +85,12 @@ public class CharacterReaderTest {
         assertEquals(2, r.pos());
     }
 
+    @Test public void rewindToMark() {
+        CharacterReader r = new CharacterReader("nothing");
+        // marking should be invalid
+        assertThrows(UncheckedIOException.class, r::rewindToMark);
+    }
+
     @Test public void consumeToEnd() {
         String in = "one two three";
         CharacterReader r = new CharacterReader(in);
@@ -265,6 +278,20 @@ public class CharacterReaderTest {
         assertTrue(r.matchesAny(scan));
         assertEquals('\n', r.consume());
         assertFalse(r.matchesAny(scan));
+        // nothing to match
+        r.consumeToEnd();
+        assertTrue(r.isEmpty());
+        assertFalse(r.matchesAny(scan));
+    }
+
+    @Test public void matchesDigit() {
+        CharacterReader r = new CharacterReader("42");
+        r.consumeToEnd();
+        assertTrue(r.isEmpty());
+        // nothing to match
+        assertFalse(r.matchesDigit());
+        r.unconsume();
+        assertTrue(r.matchesDigit());
     }
 
     @Test public void cachesStrings() {
diff --git a/src/test/java/org/jsoup/parser/HtmlParserTest.java b/src/test/java/org/jsoup/parser/HtmlParserTest.java
index fd0f1d1..4172d0f 100644
--- a/src/test/java/org/jsoup/parser/HtmlParserTest.java
+++ b/src/test/java/org/jsoup/parser/HtmlParserTest.java
@@ -7,13 +7,16 @@ import org.jsoup.internal.StringUtil;
 import org.jsoup.nodes.*;
 import org.jsoup.safety.Safelist;
 import org.jsoup.select.Elements;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.Arguments;
+import org.junit.jupiter.params.provider.MethodSource;
 
 import java.io.ByteArrayInputStream;
 import java.io.File;
 import java.io.IOException;
 import java.util.List;
+import java.util.stream.Stream;
 
 import static org.jsoup.parser.ParseSettings.preserveCase;
 import static org.junit.jupiter.api.Assertions.*;
@@ -46,16 +49,25 @@ public class HtmlParserTest {
         assertEquals("foo > bar", p.attr("class"));
     }
 
-    @Test public void dropsDuplicateAttributes() {
-        String html = "<p One=One ONE=Two Two=two one=Three One=Four two=Five>Text</p>";
+    @ParameterizedTest @MethodSource("dupeAttributeData")
+    public void dropsDuplicateAttributes(String html, String expected) {
         Parser parser = Parser.htmlParser().setTrackErrors(10);
         Document doc = parser.parseInput(html, "");
 
-        Element p = doc.selectFirst("p");
-        assertEquals("<p one=\"One\" two=\"two\">Text</p>", p.outerHtml()); // normalized names due to lower casing
+        Element el = doc.expectFirst("body > *");
+        assertEquals(expected, el.outerHtml()); // normalized names due to lower casing
+        String tag = el.normalName();
 
         assertEquals(1, parser.getErrors().size());
-        assertEquals("Dropped duplicate attribute(s) in tag [p]", parser.getErrors().get(0).getErrorMessage());
+        assertEquals("Dropped duplicate attribute(s) in tag [" + tag + "]", parser.getErrors().get(0).getErrorMessage());
+    }
+
+    private static Stream<Arguments> dupeAttributeData() {
+        return Stream.of(
+            Arguments.of("<p One=One ONE=Two Two=two one=Three One=Four two=Five>Text</p>", "<p one=\"One\" two=\"two\">Text</p>"),
+            Arguments.of("<img One=One ONE=Two Two=two one=Three One=Four two=Five>", "<img one=\"One\" two=\"two\">"),
+            Arguments.of("<form One=One ONE=Two Two=two one=Three One=Four two=Five></form>", "<form one=\"One\" two=\"two\"></form>")
+        );
     }
 
     @Test public void retainsAttributesOfDifferentCaseIfSensitive() {
@@ -158,7 +170,7 @@ public class HtmlParserTest {
 
     @Test public void testSpaceAfterTag() {
         Document doc = Jsoup.parse("<div > <a name=\"top\"></a ><p id=1 >Hello</p></div>");
-        assertEquals("<div> <a name=\"top\"></a><p id=\"1\">Hello</p></div>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<div><a name=\"top\"></a><p id=\"1\">Hello</p></div>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void createsDocumentStructure() {
@@ -273,13 +285,13 @@ public class HtmlParserTest {
 
     @Test public void handlesNestedImplicitTable() {
         Document doc = Jsoup.parse("<table><td>1</td></tr> <td>2</td></tr> <td> <table><td>3</td> <td>4</td></table> <tr><td>5</table>");
-        assertEquals("<table><tbody><tr><td>1</td></tr> <tr><td>2</td></tr> <tr><td> <table><tbody><tr><td>3</td> <td>4</td></tr></tbody></table> </td></tr><tr><td>5</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<table><tbody><tr><td>1</td></tr><tr><td>2</td></tr><tr><td><table><tbody><tr><td>3</td><td>4</td></tr></tbody></table></td></tr><tr><td>5</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void handlesWhatWgExpensesTableExample() {
         // http://www.whatwg.org/specs/web-apps/current-work/multipage/tabular-data.html#examples-0
         Document doc = Jsoup.parse("<table> <colgroup> <col> <colgroup> <col> <col> <col> <thead> <tr> <th> <th>2008 <th>2007 <th>2006 <tbody> <tr> <th scope=rowgroup> Research and development <td> $ 1,109 <td> $ 782 <td> $ 712 <tr> <th scope=row> Percentage of net sales <td> 3.4% <td> 3.3% <td> 3.7% <tbody> <tr> <th scope=rowgroup> Selling, general, and administrative <td> $ 3,761 <td> $ 2,963 <td> $ 2,433 <tr> <th scope=row> Percentage of net sales <td> 11.6% <td> 12.3% <td> 12.6% </table>");
-        assertEquals("<table> <colgroup> <col> </colgroup><colgroup> <col> <col> <col> </colgroup><thead> <tr> <th> </th><th>2008 </th><th>2007 </th><th>2006 </th></tr></thead><tbody> <tr> <th scope=\"rowgroup\"> Research and development </th><td> $ 1,109 </td><td> $ 782 </td><td> $ 712 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 3.4% </td><td> 3.3% </td><td> 3.7% </td></tr></tbody><tbody> <tr> <th scope=\"rowgroup\"> Selling, general, and administrative </th><td> $ 3,761 </td><td> $ 2,963 </td><td> $ 2,433 </td></tr><tr> <th scope=\"row\"> Percentage of net sales </th><td> 11.6% </td><td> 12.3% </td><td> 12.6% </td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<table><colgroup><col></colgroup><colgroup><col><col><col></colgroup><thead><tr><th></th><th>2008</th><th>2007</th><th>2006</th></tr></thead><tbody><tr><th scope=\"rowgroup\">Research and development</th><td>$ 1,109</td><td>$ 782</td><td>$ 712</td></tr><tr><th scope=\"row\">Percentage of net sales</th><td>3.4%</td><td>3.3%</td><td>3.7%</td></tr></tbody><tbody><tr><th scope=\"rowgroup\">Selling, general, and administrative</th><td>$ 3,761</td><td>$ 2,963</td><td>$ 2,433</td></tr><tr><th scope=\"row\">Percentage of net sales</th><td>11.6%</td><td>12.3%</td><td>12.6%</td></tr></tbody></table>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void handlesTbodyTable() {
@@ -294,7 +306,7 @@ public class HtmlParserTest {
 
     @Test public void noTableDirectInTable() {
         Document doc = Jsoup.parse("<table> <td>One <td><table><td>Two</table> <table><td>Three");
-        assertEquals("<table> <tbody><tr><td>One </td><td><table><tbody><tr><td>Two</td></tr></tbody></table> <table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>",
+        assertEquals("<table><tbody><tr><td>One</td><td><table><tbody><tr><td>Two</td></tr></tbody></table><table><tbody><tr><td>Three</td></tr></tbody></table></td></tr></tbody></table>",
             TextUtil.stripNewlines(doc.body().html()));
     }
 
@@ -472,7 +484,7 @@ public class HtmlParserTest {
         // if a known tag, allow self closing outside of spec, but force an end tag. unknown tags can be self closing.
         String h = "<div id='1' /><script src='/foo' /><div id=2><img /><img></div><a id=3 /><i /><foo /><foo>One</foo> <hr /> hr text <hr> hr text two";
         Document doc = Jsoup.parse(h);
-        assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo> <hr> hr text <hr> hr text two", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<div id=\"1\"></div><script src=\"/foo\"></script><div id=\"2\"><img><img></div><a id=\"3\"></a><i></i><foo /><foo>One</foo><hr> hr text <hr> hr text two", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void handlesKnownEmptyNoFrames() {
@@ -568,7 +580,7 @@ public class HtmlParserTest {
     @Test public void normalisesDocument() {
         String h = "<!doctype html>One<html>Two<head>Three<link></head>Four<body>Five </body>Six </html>Seven ";
         Document doc = Jsoup.parse(h);
-        assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven </body></html>",
+        assertEquals("<!doctype html><html><head></head><body>OneTwoThree<link>FourFive Six Seven</body></html>",
             TextUtil.stripNewlines(doc.html()));
     }
 
@@ -599,7 +611,7 @@ public class HtmlParserTest {
     @Test public void testHgroup() {
         // jsoup used to not allow hgroup in h{n}, but that's not in spec, and browsers are OK
         Document doc = Jsoup.parse("<h1>Hello <h2>There <hgroup><h1>Another<h2>headline</hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup>");
-        assertEquals("<h1>Hello </h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup> <hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<h1>Hello</h1><h2>There <hgroup><h1>Another</h1><h2>headline</h2></hgroup><hgroup><h1>More</h1><p>stuff</p></hgroup></h2>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void testRelaxedTags() {
@@ -611,13 +623,13 @@ public class HtmlParserTest {
         // h* tags (h1 .. h9) in browsers can handle any internal content other than other h*. which is not per any
         // spec, which defines them as containing phrasing content only. so, reality over theory.
         Document doc = Jsoup.parse("<h1>Hello <div>There</div> now</h1> <h2>More <h3>Content</h3></h2>");
-        assertEquals("<h1>Hello <div>There</div> now</h1> <h2>More </h2><h3>Content</h3>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<h1>Hello <div>There</div> now</h1><h2>More</h2><h3>Content</h3>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void testSpanContents() {
         // like h1 tags, the spec says SPAN is phrasing only, but browsers and publisher treat span as a block tag
         Document doc = Jsoup.parse("<span>Hello <div>there</div> <span>now</span></span>");
-        assertEquals("<span>Hello <div>there</div> <span>now</span></span>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<span>Hello <div>there</div><span>now</span></span>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void testNoImagesInNoScriptInHead() {
@@ -638,13 +650,13 @@ public class HtmlParserTest {
     @Test public void testAFlowContents() {
         // html5 has <a> as either phrasing or block
         Document doc = Jsoup.parse("<a>Hello <div>there</div> <span>now</span></a>");
-        assertEquals("<a>Hello <div>there</div> <span>now</span></a>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<a>Hello <div>there</div><span>now</span></a>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void testFontFlowContents() {
         // html5 has no definition of <font>; often used as flow
         Document doc = Jsoup.parse("<font>Hello <div>there</div> <span>now</span></font>");
-        assertEquals("<font>Hello <div>there</div> <span>now</span></font>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<font>Hello <div>there</div><span>now</span></font>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void handlesMisnestedTagsBI() {
@@ -672,7 +684,7 @@ public class HtmlParserTest {
     }
 
     @Test public void handlesUnexpectedMarkupInTables() {
-        // whatwg - tests markers in active formatting (if they didn't work, would get in in table)
+        // whatwg - tests markers in active formatting (if they didn't work, would get in table)
         // also tests foster parenting
         String h = "<table><b><tr><td>aaa</td></tr>bbb</table>ccc";
         Document doc = Jsoup.parse(h);
@@ -720,15 +732,8 @@ public class HtmlParserTest {
         // and the <i> inside the table and does not leak out.
         String h = "<p><b>One</p> <table><tr><td><p><i>Three<p>Four</i></td></tr></table> <p>Five</p>";
         Document doc = Jsoup.parse(h);
-        String want = "<p><b>One</b></p><b> \n" +
-            " <table>\n" +
-            "  <tbody>\n" +
-            "   <tr>\n" +
-            "    <td><p><i>Three</i></p><p><i>Four</i></p></td>\n" +
-            "   </tr>\n" +
-            "  </tbody>\n" +
-            " </table> <p>Five</p></b>";
-        assertEquals(want, doc.body().html());
+        String want = "<p><b>One</b></p><b><table><tbody><tr><td><p><i>Three</i></p><p><i>Four</i></p></td></tr></tbody></table><p>Five</p></b>";
+        assertEquals(want, TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void commentBeforeHtml() {
@@ -777,7 +782,7 @@ public class HtmlParserTest {
 
         Document two = Jsoup.parse("<title>One<b>Two <p>Test</p>"); // no title, so <b> causes </title> breakout
         assertEquals("One", two.title());
-        assertEquals("<b>Two <p>Test</p></b>", two.body().html());
+        assertEquals("<b>Two \n <p>Test</p></b>", two.body().html());
     }
 
     @Test public void handlesUnclosedScriptAtEof() {
@@ -1175,7 +1180,8 @@ public class HtmlParserTest {
         Document doc = Parser.htmlParser()
             .settings(preserveCase)
             .parseInput(html, "");
-        assertEquals("<A>ONE </A><A>Two</A>", StringUtil.normaliseWhitespace(doc.body().html()));
+        //assertEquals("<A>ONE </A><A>Two</A>", StringUtil.normaliseWhitespace(doc.body().html()));
+        assertEquals("<A>ONE </A><A>Two</A>", doc.body().html());
     }
 
     @Test public void normalizesDiscordantTags() {
@@ -1191,7 +1197,7 @@ public class HtmlParserTest {
 
         assertTrue(Jsoup.isValid(html, Safelist.basic()));
         String clean = Jsoup.clean(html, Safelist.basic());
-        assertEquals("<p>test<br>test<br></p>", clean);
+        assertEquals("<p>test<br>\n test<br></p>", clean);
     }
 
     @Test public void selfClosingOnNonvoidIsError() {
@@ -1246,7 +1252,7 @@ public class HtmlParserTest {
         File in = ParseTest.getFile("/htmltests/comments.html");
         Document doc = Jsoup.parse(in, "UTF-8");
 
-        assertEquals("<!--?xml version=\"1.0\" encoding=\"utf-8\"?--><!-- so --><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><!-- what --> <html xml:lang=\"en\" lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"><!-- now --> <head><!-- then --> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>",
+        assertEquals("<!--?xml version=\"1.0\" encoding=\"utf-8\"?--><!-- so --> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"><!-- what --> <html xml:lang=\"en\" lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\"> <!-- now --> <head> <!-- then --> <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"> <title>A Certain Kind of Test</title> </head> <body> <h1>Hello</h1>h1&gt; (There is a UTF8 hidden BOM at the top of this file.) </body> </html>",
             StringUtil.normaliseWhitespace(doc.html()));
 
         assertEquals("A Certain Kind of Test", doc.head().select("title").text());
@@ -1399,15 +1405,14 @@ public class HtmlParserTest {
         String html = "\n<!doctype html>\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<p>One</p>\n</body>\n</html>\n";
         Document doc = Jsoup.parse(html);
         doc.outputSettings().prettyPrint(false);
-        assertEquals("<!doctype html>\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<p>One</p>\n\n</body></html>\n", doc.outerHtml());
+        assertEquals("<!doctype html>\n<html>\n<head>\n<title>Hello</title>\n</head>\n<body>\n<p>One</p>\n</body>\n</html>\n", doc.outerHtml());
     }
 
     @Test public void handleContentAfterBody() {
         String html = "<body>One</body>  <p>Hello!</p></html> <p>There</p>";
-        // todo - ideally would move that space afer /html to the body when the There <p> is seen
         Document doc = Jsoup.parse(html);
         doc.outputSettings().prettyPrint(false);
-        assertEquals("<html><head></head><body>One  <p>Hello!</p><p>There</p></body></html> ", doc.outerHtml());
+        assertEquals("<html><head></head><body>One<p>Hello!</p><p>There</p></body>  </html> ", doc.outerHtml());
     }
 
     @Test public void preservesTabs() {
@@ -1470,7 +1475,7 @@ public class HtmlParserTest {
         assertEquals(1, nodes.size());
         Node node = nodes.get(0);
         assertEquals("h2", node.nodeName());
-        assertEquals("<p><h2>text</h2></p>", node.parent().outerHtml());
+        assertEquals("<p>\n <h2>text</h2></p>", node.parent().outerHtml());
     }
 
     @Test public void nestedPFragments() {
@@ -1479,7 +1484,7 @@ public class HtmlParserTest {
         List<Node> nodes = new Document("").parser().parseFragmentInput(bareFragment, new Element("p"), "");
         assertEquals(2, nodes.size());
         Node node = nodes.get(0);
-        assertEquals("<p><p></p><a></a></p>", node.parent().outerHtml()); // mis-nested because fragment forced into the element, OK
+        assertEquals("<p>\n <p></p><a></a></p>", node.parent().outerHtml()); // mis-nested because fragment forced into the element, OK
     }
 
     @Test public void nestedAnchorAdoption() {
@@ -1487,7 +1492,7 @@ public class HtmlParserTest {
         String html = "<a>\n<b>\n<div>\n<a>test</a>\n</div>\n</b>\n</a>";
         Document doc = Jsoup.parse(html);
         assertNotNull(doc);
-        assertEquals("<a><b> </b></a><b><div><a></a><a>test</a></div> </b>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<a> <b> </b></a><b><div><a> </a><a>test</a></div></b>", TextUtil.stripNewlines(doc.body().html()));
     }
 
     @Test public void tagsMustStartWithAscii() {
@@ -1633,4 +1638,118 @@ public class HtmlParserTest {
         assertEquals("<template><select></select><input>&lt;</template>",
             TextUtil.stripNewlines(doc.head().html()));
     }
-}
\ No newline at end of file
+
+    @Test void errorsBeforeHtml() {
+        Parser parser = Parser.htmlParser();
+        parser.setTrackErrors(10);
+        Document doc = Jsoup.parse("<!doctype html><!doctype something></div>", parser);
+        ParseErrorList errors = parser.getErrors();
+        assertEquals(2, errors.size());
+        assertEquals("<1:36>: Unexpected Doctype token [<!doctype something>] when in state [BeforeHtml]", errors.get(0).toString());
+        assertEquals("<1:42>: Unexpected EndTag token [</div>] when in state [BeforeHtml]", errors.get(1).toString());
+        assertEquals("<!doctype html><html><head></head><body></body></html>", TextUtil.stripNewlines(doc.html()));
+    }
+
+    @Test void afterHeadReAdds() {
+        Parser parser = Parser.htmlParser();
+        parser.setTrackErrors(10);
+        Document doc = Jsoup.parse("<head></head><meta charset=UTF8><p>Hello", parser);
+        ParseErrorList errors = parser.getErrors();
+        assertEquals(1, errors.size());
+        assertEquals("<1:33>: Unexpected StartTag token [<meta  charset=\"UTF8\">] when in state [AfterHead]", errors.get(0).toString());
+        assertEquals("<html><head><meta charset=\"UTF8\"></head><body><p>Hello</p></body></html>", TextUtil.stripNewlines(doc.html()));
+        // meta gets added back into head
+    }
+
+    @Test void mergeHtmlAttributesFromBody() {
+        Document doc = Jsoup.parse("<html id=1 class=foo><body><html class=bar data=x><p>One");
+        assertEquals("<html id=\"1\" class=\"foo\" data=\"x\"><head></head><body><p>One</p></body></html>", TextUtil.stripNewlines(doc.html()));
+    }
+
+    @Test void mergeHtmlNoAttributesFromBody() {
+        Document doc = Jsoup.parse("<html id=1 class=foo><body><html><p>One");
+        assertEquals("<html id=\"1\" class=\"foo\"><head></head><body><p>One</p></body></html>", TextUtil.stripNewlines(doc.html()));
+    }
+
+    @Test void supportsRuby() {
+        String html = "<ruby><rbc><rb>10</rb><rb>31</rb><rb>2002</rb></rbc><rtc><rt>Month</rt><rt>Day</rt><rt>Year</rt></rtc><rtc><rt>Expiration Date</rt><rp>(*)</rtc></ruby>";
+        Parser parser = Parser.htmlParser();
+        parser.setTrackErrors(10);
+        Document doc = Jsoup.parse(html, parser);
+        ParseErrorList errors = parser.getErrors();
+        assertEquals(3, errors.size());
+        Element ruby = doc.expectFirst("ruby");
+        assertEquals(
+            "<ruby><rbc><rb>10</rb><rb>31</rb><rb>2002</rb></rbc><rtc><rt>Month</rt><rt>Day</rt><rt>Year</rt></rtc><rtc><rt>Expiration Date</rt><rp>(*)</rp></rtc></ruby>",
+            TextUtil.stripNewlines(ruby.outerHtml()));
+        assertEquals("<1:38>: Unexpected StartTag token [<rb>] when in state [InBody]", errors.get(2).toString()); // 3 errors from rb in rtc as undefined
+    }
+
+    @Test void rubyRpRtImplicitClose() {
+        String html = "<ruby><rp>(<rt>Hello<rt>Hello<rp>)</ruby>\n";
+        Parser parser = Parser.htmlParser();
+        parser.setTrackErrors(10);
+        Document doc = Jsoup.parse(html, parser);
+        assertEquals(0, parser.getErrors().size());
+        Element ruby = doc.expectFirst("ruby");
+        assertEquals(
+            "<ruby><rp>(</rp><rt>Hello</rt><rt>Hello</rt><rp>)</rp></ruby>",
+            TextUtil.stripNewlines(ruby.outerHtml()));
+    }
+
+    @Test void rubyScopeError() {
+        String html = "<ruby><div><rp>Hello";
+        Parser parser = Parser.htmlParser();
+        parser.setTrackErrors(10);
+        Document doc = Jsoup.parse(html, parser);
+        ParseErrorList errors = parser.getErrors();
+        assertEquals(2, errors.size());
+        Element ruby = doc.expectFirst("ruby");
+        assertEquals(
+            "<ruby><div><rp>Hello</rp></div></ruby>",
+            TextUtil.stripNewlines(ruby.outerHtml()));
+        assertEquals("<1:16>: Unexpected StartTag token [<rp>] when in state [InBody]", errors.get(0).toString());
+    }
+
+    @Test void errorOnEofIfOpen() {
+        String html = "<div>";
+        Parser parser = Parser.htmlParser();
+        parser.setTrackErrors(10);
+        Document doc = Jsoup.parse(html, parser);
+        ParseErrorList errors = parser.getErrors();
+        assertEquals(1, errors.size());
+        assertEquals("Unexpected EOF token [] when in state [InBody]", errors.get(0).getErrorMessage());
+    }
+
+    @Test void NoErrorOnEofIfBodyOpen() {
+        String html = "<body>";
+        Parser parser = Parser.htmlParser();
+        parser.setTrackErrors(10);
+        Document doc = Jsoup.parse(html, parser);
+        ParseErrorList errors = parser.getErrors();
+        assertEquals(0, errors.size());
+    }
+
+    @Test void htmlClose() {
+        // https://github.com/jhy/jsoup/issues/1851
+        String html = "<body><div>One</html>Two</div></body>";
+        Document doc = Jsoup.parse(html);
+        assertEquals("OneTwo", doc.expectFirst("body > div").text());
+    }
+
+    @Test void largeTextareaContents() {
+        // https://github.com/jhy/jsoup/issues/1929
+        StringBuilder sb = new StringBuilder();
+        int num = 2000;
+        for (int i = 0; i <= num; i++) {
+            sb.append("\n<text>foo</text>\n");
+        }
+        String textContent = sb.toString();
+        String sourceHtml = "<textarea>" + textContent + "</textarea>";
+
+        Document doc = Jsoup.parse(sourceHtml);
+        Element textArea = doc.expectFirst("textarea");
+
+        assertEquals(textContent, textArea.wholeText());
+    }
+}
diff --git a/src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java b/src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java
index e92c610..55b828e 100644
--- a/src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java
+++ b/src/test/java/org/jsoup/parser/HtmlTreeBuilderStateTest.java
@@ -45,7 +45,7 @@ public class HtmlTreeBuilderStateTest {
     public void ensureArraysAreSorted() {
         List<Object[]> constants = findConstantArrays(Constants.class);
         ensureSorted(constants);
-        assertEquals(38, constants.size());
+        assertEquals(39, constants.size());
     }
 
     @Test public void ensureTagSearchesAreKnownTags() {
@@ -75,9 +75,10 @@ public class HtmlTreeBuilderStateTest {
         String s = Jsoup.parse(html).toString();
         assertEquals("<html>\n" +
             " <head></head>\n" +
-            " <body><a href=\"#1\"> </a>\n" +
+            " <body>\n" +
+            "  <a href=\"#1\"> </a>\n" +
             "  <div>\n" +
-            "   <a href=\"#1\"></a><a href=\"#2\">child</a>\n" +
+            "   <a href=\"#1\"> </a><a href=\"#2\">child</a>\n" +
             "  </div>\n" +
             " </body>\n" +
             "</html>", s);
@@ -99,11 +100,12 @@ public class HtmlTreeBuilderStateTest {
         String s = Jsoup.parse(html).toString();
         assertEquals("<html>\n" +
             " <head></head>\n" +
-            " <body><a href=\"#1\"> </a>\n" +
+            " <body>\n" +
+            "  <a href=\"#1\"> </a>\n" +
             "  <div>\n" +
-            "   <a href=\"#1\"></a>\n" +
+            "   <a href=\"#1\"> </a>\n" +
             "   <div>\n" +
-            "    <a href=\"#1\"></a><a href=\"#2\">child</a>\n" +
+            "    <a href=\"#1\"> </a><a href=\"#2\">child</a>\n" +
             "   </div>\n" +
             "  </div>\n" +
             " </body>\n" +
diff --git a/src/test/java/org/jsoup/parser/ParserTest.java b/src/test/java/org/jsoup/parser/ParserTest.java
index 7a97f2c..d16ed65 100644
--- a/src/test/java/org/jsoup/parser/ParserTest.java
+++ b/src/test/java/org/jsoup/parser/ParserTest.java
@@ -6,6 +6,7 @@ import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -31,7 +32,7 @@ public class ParserTest {
     @Test
     public void testUtf8() throws IOException {
         // testcase for https://github.com/jhy/jsoup/issues/1557. no repro.
-        Document parsed = Jsoup.parse(new ByteArrayInputStream("<p>H\u00E9llo, w\u00F6rld!".getBytes("UTF-8")), null, "");
+        Document parsed = Jsoup.parse(new ByteArrayInputStream("<p>H\u00E9llo, w\u00F6rld!".getBytes(StandardCharsets.UTF_8)), null, "");
         String text = parsed.selectFirst("p").wholeText();
         assertEquals(text, "H\u00E9llo, w\u00F6rld!");
     }
diff --git a/src/test/java/org/jsoup/parser/TokenQueueTest.java b/src/test/java/org/jsoup/parser/TokenQueueTest.java
index 463a19e..86da694 100644
--- a/src/test/java/org/jsoup/parser/TokenQueueTest.java
+++ b/src/test/java/org/jsoup/parser/TokenQueueTest.java
@@ -6,8 +6,7 @@ import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.fail;
+import static org.junit.jupiter.api.Assertions.*;
 
 /**
  * Token queue tests.
@@ -47,6 +46,14 @@ public class TokenQueueTest {
         assertEquals("one ( ) \\", TokenQueue.unescape("one \\( \\) \\\\"));
     }
 
+    @Test public void unescape_2() {
+        assertEquals("\\&", TokenQueue.unescape("\\\\\\&"));
+    }
+
+    @Test public void escapeCssIdentifier() {
+        assertEquals("one\\#two\\.three\\/four\\\\five", TokenQueue.escapeCssIdentifier("one#two.three/four\\five"));
+    }
+
     @Test public void chompToIgnoreCase() {
         String t = "<textarea>one < two </TEXTarea>";
         TokenQueue tq = new TokenQueue(t);
@@ -106,4 +113,30 @@ public class TokenQueueTest {
         assertEquals("\n( foo2",doc.select("div:matches(" + Pattern.quote("(") + ")").get(0).childNode(0).toString());
         assertEquals("\n1) foo3",doc.select("div:matches(" + Pattern.quote("1)") + ")").get(0).childNode(0).toString());
     }
+
+    @Test public void consumeEscapedTag() {
+        TokenQueue q = new TokenQueue("p\\\\p p\\.p p\\:p p\\!p");
+
+        assertEquals("p\\p", q.consumeElementSelector());
+        assertTrue(q.consumeWhitespace());
+
+        assertEquals("p.p", q.consumeElementSelector());
+        assertTrue(q.consumeWhitespace());
+
+        assertEquals("p:p", q.consumeElementSelector());
+        assertTrue(q.consumeWhitespace());
+
+        assertEquals("p!p", q.consumeElementSelector());
+        assertTrue(q.isEmpty());
+    }
+
+    @Test public void consumeEscapedId() {
+        TokenQueue q = new TokenQueue("i\\.d i\\\\d");
+
+        assertEquals("i.d", q.consumeCssIdentifier());
+        assertTrue(q.consumeWhitespace());
+
+        assertEquals("i\\d", q.consumeCssIdentifier());
+        assertTrue(q.isEmpty());
+    }
 }
diff --git a/src/test/java/org/jsoup/parser/TokeniserTest.java b/src/test/java/org/jsoup/parser/TokeniserTest.java
index d7a6b10..bfdbb8e 100644
--- a/src/test/java/org/jsoup/parser/TokeniserTest.java
+++ b/src/test/java/org/jsoup/parser/TokeniserTest.java
@@ -5,7 +5,7 @@ import org.jsoup.nodes.*;
 import org.jsoup.select.Elements;
 import org.junit.jupiter.api.Test;
 
-import java.io.UnsupportedEncodingException;
+import java.nio.charset.Charset;
 import java.util.Arrays;
 
 import static org.jsoup.parser.CharacterReader.maxBufferLen;
@@ -165,9 +165,9 @@ public class TokeniserTest {
         assertEquals(1, parser.getErrors().size());
     }
 
-    @Test public void cp1252SubstitutionTable() throws UnsupportedEncodingException {
+    @Test public void cp1252SubstitutionTable() {
         for (int i = 0; i < Tokeniser.win1252Extensions.length; i++) {
-            String s = new String(new byte[]{ (byte) (i + Tokeniser.win1252ExtensionsStart) }, "Windows-1252");
+            String s = new String(new byte[]{ (byte) (i + Tokeniser.win1252ExtensionsStart) }, Charset.forName("Windows-1252"));
             assertEquals(1, s.length());
 
             // some of these characters are illegal
diff --git a/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java b/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java
index c254e8e..d359a52 100644
--- a/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java
+++ b/src/test/java/org/jsoup/parser/XmlTreeBuilderTest.java
@@ -94,7 +94,7 @@ public class XmlTreeBuilderTest {
     public void testDoesNotForceSelfClosingKnownTags() {
         // html will force "<br>one</br>" to logically "<br />One<br />". XML should be stay "<br>one</br> -- don't recognise tag.
         Document htmlDoc = Jsoup.parse("<br>one</br>");
-        assertEquals("<br>one\n<br>", htmlDoc.body().html());
+        assertEquals("<br>\none\n<br>", htmlDoc.body().html());
 
         Document xmlDoc = Jsoup.parse("<br>one</br>", "", Parser.xmlParser());
         assertEquals("<br>one</br>", xmlDoc.html());
diff --git a/src/test/java/org/jsoup/safety/CleanerTest.java b/src/test/java/org/jsoup/safety/CleanerTest.java
index f73e462..d7c6371 100644
--- a/src/test/java/org/jsoup/safety/CleanerTest.java
+++ b/src/test/java/org/jsoup/safety/CleanerTest.java
@@ -4,7 +4,10 @@ import org.jsoup.Jsoup;
 import org.jsoup.MultiLocaleExtension.MultiLocaleTest;
 import org.jsoup.TextUtil;
 import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
 import org.jsoup.nodes.Entities;
+import org.jsoup.nodes.Range;
+import org.jsoup.parser.Parser;
 import org.junit.jupiter.api.Test;
 
 import java.util.Locale;
@@ -64,6 +67,32 @@ public class CleanerTest {
         assertEquals("<p>Nice</p><blockquote>Hello</blockquote>", TextUtil.stripNewlines(cleanHtml));
     }
 
+    @Test void allAttributes() {
+        String h = "<div class=foo data=true><p class=bar>Text</p></div><blockquote cite='https://example.com'>Foo";
+        Safelist safelist = Safelist.relaxed();
+        safelist.addAttributes(":all", "class");
+        safelist.addAttributes("div", "data");
+
+        String clean1 = Jsoup.clean(h, safelist);
+        assertEquals("<div class=\"foo\" data=\"true\"><p class=\"bar\">Text</p></div><blockquote cite=\"https://example.com\">Foo</blockquote>", TextUtil.stripNewlines(clean1));
+
+        safelist.removeAttributes(":all", "class", "cite");
+
+        String clean2 = Jsoup.clean(h, safelist);
+        assertEquals("<div data=\"true\"><p>Text</p></div><blockquote>Foo</blockquote>", TextUtil.stripNewlines(clean2));
+    }
+
+    @Test void removeProtocols() {
+        String h = "<a href='any://example.com'>Link</a>";
+        Safelist safelist = Safelist.relaxed();
+        String clean1 = Jsoup.clean(h, safelist);
+        assertEquals("<a>Link</a>", clean1);
+
+        safelist.removeProtocols("a", "href", "ftp", "http", "https", "mailto");
+        String clean2 = Jsoup.clean(h, safelist); // all removed means any will work
+        assertEquals("<a href=\"any://example.com\">Link</a>", clean2);
+    }
+
     @Test public void testRemoveEnforcedAttributes() {
         String h = "<div><p><A HREF='HTTP://nice.com'>Nice</a></p><blockquote>Hello</blockquote>";
         String cleanHtml = Jsoup.clean(h, Safelist.basic().removeEnforcedAttribute("a", "rel"));
@@ -195,13 +224,13 @@ public class CleanerTest {
     @Test public void resolvesRelativeLinks() {
         String html = "<a href='/foo'>Link</a><img src='/bar'>";
         String clean = Jsoup.clean(html, "http://example.com/", Safelist.basicWithImages());
-        assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>\n<img src=\"http://example.com/bar\">", clean);
+        assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a><img src=\"http://example.com/bar\">", clean);
     }
 
     @Test public void preservesRelativeLinksIfConfigured() {
         String html = "<a href='/foo'>Link</a><img src='/bar'> <img src='javascript:alert()'>";
         String clean = Jsoup.clean(html, "http://example.com/", Safelist.basicWithImages().preserveRelativeLinks(true));
-        assertEquals("<a href=\"/foo\" rel=\"nofollow\">Link</a>\n<img src=\"/bar\"> \n<img>", clean);
+        assertEquals("<a href=\"/foo\" rel=\"nofollow\">Link</a><img src=\"/bar\"> <img>", clean);
     }
 
     @Test public void dropsUnresolvableRelativeLinks() {
@@ -210,13 +239,31 @@ public class CleanerTest {
         assertEquals("<a rel=\"nofollow\">Link</a>", clean);
     }
 
+    @Test void dropsConcealedJavascriptProtocolWhenRelativesLinksEnabled() {
+        Safelist safelist = Safelist.basic().preserveRelativeLinks(true);
+        String html = "<a href=\"&#0013;ja&Tab;va&Tab;script&#0010;:alert(1)\">Link</a>";
+        String clean = Jsoup.clean(html, "https://", safelist);
+        assertEquals("<a rel=\"nofollow\">Link</a>", clean);
+
+        String colon = "<a href=\"ja&Tab;va&Tab;script&colon;alert(1)\">Link</a>";
+        String cleanColon = Jsoup.clean(colon, "https://", safelist);
+        assertEquals("<a rel=\"nofollow\">Link</a>", cleanColon);
+    }
+
+    @Test void dropsConcealedJavascriptProtocolWhenRelativesLinksDisabled() {
+        Safelist safelist = Safelist.basic().preserveRelativeLinks(false);
+        String html = "<a href=\"ja&Tab;vas&#0013;cript:alert(1)\">Link</a>";
+        String clean = Jsoup.clean(html, "https://", safelist);
+        assertEquals("<a rel=\"nofollow\">Link</a>", clean);
+    }
+
     @Test public void handlesCustomProtocols() {
         String html = "<img src='cid:12345' /> <img src='data:gzzt' />";
         String dropped = Jsoup.clean(html, Safelist.basicWithImages());
-        assertEquals("<img> \n<img>", dropped);
+        assertEquals("<img> <img>", dropped);
 
         String preserved = Jsoup.clean(html, Safelist.basicWithImages().addProtocols("img", "src", "cid", "data"));
-        assertEquals("<img src=\"cid:12345\"> \n<img src=\"data:gzzt\">", preserved);
+        assertEquals("<img src=\"cid:12345\"> <img src=\"data:gzzt\">", preserved);
     }
 
     @Test public void handlesAllPseudoTag() {
@@ -339,4 +386,17 @@ public class CleanerTest {
         assertEquals(Document.OutputSettings.Syntax.xml, result.outputSettings().syntax());
         assertEquals("<p>test<br /></p>", result.body().html());
     }
+
+    @Test void preservesSourcePositionViaUserData() {
+        Document orig = Jsoup.parse("<script>xss</script>\n <p>Hello</p>", Parser.htmlParser().setTrackPosition(true));
+        Element p = orig.expectFirst("p");
+        Range origRange = p.sourceRange();
+        assertEquals("2,2:22-2,5:25", origRange.toString());
+
+        Document clean = new Cleaner(Safelist.relaxed()).clean(orig);
+        Element cleanP = clean.expectFirst("p");
+        Range cleanRange = cleanP.sourceRange();
+        assertEquals(cleanRange, origRange);
+        assertEquals(clean.endSourceRange(), orig.endSourceRange());
+    }
 }
diff --git a/src/test/java/org/jsoup/safety/SafelistTest.java b/src/test/java/org/jsoup/safety/SafelistTest.java
new file mode 100644
index 0000000..8b1c1ff
--- /dev/null
+++ b/src/test/java/org/jsoup/safety/SafelistTest.java
@@ -0,0 +1,65 @@
+package org.jsoup.safety;
+
+import org.jsoup.nodes.Attribute;
+import org.jsoup.nodes.Attributes;
+import org.jsoup.nodes.Element;
+import org.jsoup.parser.Tag;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+
+public class SafelistTest {
+    private static final String TEST_TAG = "testTag";
+    private static final String TEST_ATTRIBUTE = "testAttribute";
+    private static final String TEST_SCHEME = "valid-scheme";
+    private static final String TEST_VALUE = TEST_SCHEME + "://testValue";
+
+    @Test
+    public void testCopyConstructor_noSideEffectOnTags() {
+        Safelist safelist1 = Safelist.none().addTags(TEST_TAG);
+        Safelist safelist2 = new Safelist(safelist1);
+        safelist1.addTags("invalidTag");
+
+        assertFalse(safelist2.isSafeTag("invalidTag"));
+    }
+
+    @Test
+    public void testCopyConstructor_noSideEffectOnAttributes() {
+        Safelist safelist1 = Safelist.none().addAttributes(TEST_TAG, TEST_ATTRIBUTE);
+        Safelist safelist2 = new Safelist(safelist1);
+        safelist1.addAttributes(TEST_TAG, "invalidAttribute");
+
+        assertFalse(safelist2.isSafeAttribute(TEST_TAG, null, new Attribute("invalidAttribute", TEST_VALUE)));
+    }
+
+    @Test
+    public void testCopyConstructor_noSideEffectOnEnforcedAttributes() {
+        Safelist safelist1 = Safelist.none().addEnforcedAttribute(TEST_TAG, TEST_ATTRIBUTE, TEST_VALUE);
+        Safelist safelist2 = new Safelist(safelist1);
+        safelist1.addEnforcedAttribute(TEST_TAG, TEST_ATTRIBUTE, "invalidValue");
+
+        for (Attribute enforcedAttribute : safelist2.getEnforcedAttributes(TEST_TAG)) {
+            assertNotEquals("invalidValue", enforcedAttribute.getValue());
+        }
+    }
+
+    @Test
+    public void testCopyConstructor_noSideEffectOnProtocols() {
+        final String invalidScheme = "invalid-scheme";
+        Safelist safelist1 = Safelist.none()
+                .addAttributes(TEST_TAG, TEST_ATTRIBUTE)
+                .addProtocols(TEST_TAG, TEST_ATTRIBUTE, TEST_SCHEME);
+        Safelist safelist2 = new Safelist(safelist1);
+        safelist1.addProtocols(TEST_TAG, TEST_ATTRIBUTE, invalidScheme);
+
+        Attributes attributes = new Attributes();
+        Attribute invalidAttribute = new Attribute(TEST_ATTRIBUTE, invalidScheme + "://someValue");
+        attributes.put(invalidAttribute);
+        Element invalidElement = new Element(Tag.valueOf(TEST_TAG), "", attributes);
+
+        assertFalse(safelist2.isSafeAttribute(TEST_TAG, invalidElement, invalidAttribute));
+    }
+
+
+}
diff --git a/src/test/java/org/jsoup/select/ElementsTest.java b/src/test/java/org/jsoup/select/ElementsTest.java
index 20399e2..d189575 100644
--- a/src/test/java/org/jsoup/select/ElementsTest.java
+++ b/src/test/java/org/jsoup/select/ElementsTest.java
@@ -2,7 +2,13 @@ package org.jsoup.select;
 
 import org.jsoup.Jsoup;
 import org.jsoup.TextUtil;
-import org.jsoup.nodes.*;
+import org.jsoup.nodes.Comment;
+import org.jsoup.nodes.DataNode;
+import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
+import org.jsoup.nodes.FormElement;
+import org.jsoup.nodes.Node;
+import org.jsoup.nodes.TextNode;
 import org.junit.jupiter.api.Test;
 
 import java.util.List;
@@ -178,15 +184,18 @@ public class ElementsTest {
         String h = "<p><b>This</b> is <b>jsoup</b>.</p> <p>How do you like it?</p>";
         Document doc = Jsoup.parse(h);
         doc.select("p").wrap("<div></div>");
-        assertEquals("<div><p><b>This</b> is <b>jsoup</b>.</p></div> <div><p>How do you like it?</p></div>",
-                TextUtil.stripNewlines(doc.body().html()));
+        assertEquals(
+            "<div>\n <p><b>This</b> is <b>jsoup</b>.</p>\n</div>\n<div>\n <p>How do you like it?</p>\n</div>",
+            doc.body().html());
     }
 
     @Test public void unwrap() {
         String h = "<div><font>One</font> <font><a href=\"/\">Two</a></font></div";
         Document doc = Jsoup.parse(h);
         doc.select("font").unwrap();
-        assertEquals("<div>One <a href=\"/\">Two</a></div>", TextUtil.stripNewlines(doc.body().html()));
+        assertEquals("<div>\n" +
+            " One <a href=\"/\">Two</a>\n" +
+            "</div>", doc.body().html());
     }
 
     @Test public void unwrapP() {
diff --git a/src/test/java/org/jsoup/select/SelectorTest.java b/src/test/java/org/jsoup/select/SelectorTest.java
index b3780ac..5aa74a2 100644
--- a/src/test/java/org/jsoup/select/SelectorTest.java
+++ b/src/test/java/org/jsoup/select/SelectorTest.java
@@ -2,11 +2,13 @@ package org.jsoup.select;
 
 import org.jsoup.Jsoup;
 import org.jsoup.MultiLocaleExtension.MultiLocaleTest;
+import org.jsoup.TextUtil;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.parser.Parser;
 import org.junit.jupiter.api.Test;
 
+import java.util.IdentityHashMap;
 import java.util.Locale;
 
 import static org.junit.jupiter.api.Assertions.*;
@@ -29,6 +31,17 @@ public class SelectorTest {
         assertEquals(0, none.size());
     }
 
+    @Test public void byEscapedTag() {
+        // tested same result as js document.querySelector
+        Document doc = Jsoup.parse("<p.p>One</p.p> <p\\p>Two</p\\p>");
+
+        Element one = doc.expectFirst("p\\.p");
+        assertEquals("One", one.text());
+
+        Element two = doc.expectFirst("p\\\\p");
+        assertEquals("Two", two.text());
+    }
+
     @Test public void testById() {
         Elements els = Jsoup.parse("<div><p id=foo>Hello</p><p id=foo>Foo two!</p></div>").select("#foo");
         assertEquals(2, els.size());
@@ -39,6 +52,19 @@ public class SelectorTest {
         assertEquals(0, none.size());
     }
 
+    @Test public void byEscapedId() {
+        Document doc = Jsoup.parse("<p id='i.d'>One</p> <p id='i\\d'>Two</p> <p id='one-two/three'>Three</p>");
+
+        Element one = doc.expectFirst("#i\\.d");
+        assertEquals("One", one.text());
+
+        Element two = doc.expectFirst("#i\\\\d");
+        assertEquals("Two", two.text());
+
+        Element thr = doc.expectFirst("p#one-two\\/three");
+        assertEquals("Three", thr.text());
+    }
+
     @Test public void testByClass() {
         Elements els = Jsoup.parse("<p id=0 class='ONE two'><p id=1 class='one'><p id=2 class='two'>").select("P.One");
         assertEquals(2, els.size());
@@ -52,6 +78,13 @@ public class SelectorTest {
         assertEquals(1, els2.size());
     }
 
+    @Test public void byEscapedClass() {
+        Element els = Jsoup.parse("<p class='one.two#three'>One</p>");
+
+        Element one = els.expectFirst("p.one\\.two\\#three");
+        assertEquals("One", one.text());
+    }
+
     @Test public void testByClassCaseInsensitive() {
         String html = "<p Class=foo>One <p Class=Foo>Two <p class=FOO>Three <p class=farp>Four";
         Elements elsFromClass = Jsoup.parse(html).select("P.Foo");
@@ -907,6 +940,7 @@ public class SelectorTest {
     @Test public void matchText() {
         String html = "<p>One<br>Two</p>";
         Document doc = Jsoup.parse(html);
+        doc.outputSettings().prettyPrint(false);
         String origHtml = doc.html();
 
         Elements one = doc.select("p:matchText:first-child");
@@ -1110,4 +1144,24 @@ public class SelectorTest {
         Selector.SelectorParseException ex = new Selector.SelectorParseException("%&");
         assertEquals("%&", ex.getMessage());
     }
+
+    @Test public void evaluatorMemosAreReset() {
+        Evaluator eval = QueryParser.parse("p ~ p");
+        CombiningEvaluator.And andEval = (CombiningEvaluator.And) eval;
+        StructuralEvaluator.PreviousSibling prevEval = (StructuralEvaluator.PreviousSibling) andEval.evaluators.get(0);
+        IdentityHashMap<Element, IdentityHashMap<Element, Boolean>> map = prevEval.threadMemo.get();
+        assertEquals(0, map.size()); // no memo yet
+
+        Document doc1 = Jsoup.parse("<p>One<p>Two<p>Three");
+        Document doc2 = Jsoup.parse("<p>One2<p>Two2<p>Three2");
+
+        Elements s1 = doc1.select(eval);
+        assertEquals(2, s1.size());
+        assertEquals("Two", s1.first().text());
+        Elements s2 = doc2.select(eval);
+        assertEquals(2, s2.size());
+        assertEquals("Two2", s2.first().text());
+
+        assertEquals(1, map.size()); // root of doc 2
+    }
 }
diff --git a/src/test/java/org/jsoup/select/TraversorTest.java b/src/test/java/org/jsoup/select/TraversorTest.java
index 8d0667e..11a5167 100644
--- a/src/test/java/org/jsoup/select/TraversorTest.java
+++ b/src/test/java/org/jsoup/select/TraversorTest.java
@@ -95,7 +95,7 @@ public class TraversorTest {
                 return ("b".equals(node.nodeName())) ? FilterResult.REMOVE : FilterResult.CONTINUE;
             }
         }, doc.select("div"));
-        assertEquals("<div></div>\n<div>\n There be \n</div>", doc.select("body").html());
+        assertEquals("<div></div>\n<div>\n There be\n</div>", doc.select("body").html());
     }
 
     @Test
diff --git a/src/test/java/org/jsoup/select/XpathTest.java b/src/test/java/org/jsoup/select/XpathTest.java
index 2b3393a..ae27832 100644
--- a/src/test/java/org/jsoup/select/XpathTest.java
+++ b/src/test/java/org/jsoup/select/XpathTest.java
@@ -1,7 +1,6 @@
 package org.jsoup.select;
 
 import org.jsoup.Jsoup;
-import org.jsoup.nodes.Attribute;
 import org.jsoup.nodes.Document;
 import org.jsoup.nodes.Element;
 import org.jsoup.nodes.Node;
@@ -17,7 +16,6 @@ import javax.xml.xpath.XPathFactory;
 import javax.xml.xpath.XPathFactoryConfigurationException;
 import javax.xml.xpath.XPathFunctionResolver;
 import javax.xml.xpath.XPathVariableResolver;
-
 import java.util.List;
 import java.util.stream.Stream;
 
@@ -71,13 +69,18 @@ public class XpathTest {
             // checks exception message within jsoup's control, rest may be JDK impl specific
             // was - Could not evaluate XPath query [//???]: javax.xml.transform.TransformerException: A location step was expected following the '/' or '//' token.
             assertTrue(e.getMessage().startsWith("Could not evaluate XPath query [//???]:"));
+
+            // check we have a root cause
+            Throwable cause = e.getCause();
+            assertNotNull(cause);
+            assertNotSame(cause, e);
         }
         assertTrue(threw);
     }
 
     @Test
-    public void supportsNamespaces() {
-        String xhtml = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";;
+    public void supportsLocalname() {
+        String xhtml = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";
         Document doc = Jsoup.parse(xhtml, Parser.xmlParser());
         Elements elements = doc.selectXpath("//*[local-name()='body']");
         assertEquals(1, elements.size());
@@ -86,7 +89,7 @@ public class XpathTest {
 
     @Test
     public void canDitchNamespaces() {
-        String xhtml = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";;
+        String xhtml = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";
         Document doc = Jsoup.parse(xhtml, Parser.xmlParser());
         doc.select("[xmlns]").removeAttr("xmlns");
         Elements elements = doc.selectXpath("//*[local-name()='body']");
@@ -192,8 +195,45 @@ public class XpathTest {
         }
         assertTrue(threw);
         System.clearProperty(XPathFactoryProperty);
+    }
+
+    @Test
+    public void notNamespaceAware() {
+        String xhtml = "<html xmlns='http://www.w3.org/1999/xhtml'><body id='One'><div>hello</div></body></html>";
+        Document doc = Jsoup.parse(xhtml, Parser.xmlParser());
+        Elements elements = doc.selectXpath("//body");
+        assertEquals(1, elements.size());
+        assertEquals("One", elements.first().id());
+    }
+
+    @Test
+    public void supportsPrefixes() {
+        // example from https://www.w3.org/TR/xml-names/
+        String xml = "<?xml version=\"1.0\"?>\n" +
+            "<bk:book xmlns:bk='urn:loc.gov:books'\n" +
+            "         xmlns:isbn='urn:ISBN:0-395-36341-6'>\n" +
+            "    <bk:title>Cheaper by the Dozen</bk:title>\n" +
+            "    <isbn:number>1568491379</isbn:number>\n" +
+            "</bk:book>";
+        Document doc = Jsoup.parse(xml, Parser.xmlParser());
+
+        //Elements elements = doc.selectXpath("//bk:book/bk:title");
+        Elements elements = doc.selectXpath("//book/title");
+        assertEquals(1, elements.size());
+        assertEquals("Cheaper by the Dozen", elements.first().text());
+
+        // with prefix
+        Elements byPrefix = doc.selectXpath("//*[name()='bk:book']/*[name()='bk:title']");
+        assertEquals(1, byPrefix.size());
+        assertEquals("Cheaper by the Dozen", byPrefix.first().text());
 
+        Elements byLocalName = doc.selectXpath("//*[local-name()='book']/*[local-name()='title']");
+        assertEquals(1, byLocalName.size());
+        assertEquals("Cheaper by the Dozen", byLocalName.first().text());
 
+        Elements isbn = doc.selectXpath("//book/number");
+        assertEquals(1, isbn.size());
+        assertEquals("1568491379", isbn.first().text());
     }
 
     // minimal, no-op implementation class to verify users can load a factory to support XPath 2.0 etc

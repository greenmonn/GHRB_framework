diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/ResourcesRestServiceTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/ResourcesRestServiceTest.java
index 0c00fa86..f8f3345 100755
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/ResourcesRestServiceTest.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/account/ResourcesRestServiceTest.java
@@ -59,12 +59,14 @@ import java.util.Map;
 import java.util.Set;
 import java.util.function.Consumer;
 
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.empty;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
-import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
+import static org.keycloak.common.util.Encode.encodePathAsIs;
 
 /**
  * @author <a href="mailto:psilva@redhat.com">Pedro Igor</a>
@@ -302,7 +304,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
 
     @Test
     public void testGetResource() {
-        Resource resource = doGet("/" + getMyResources().get(0).getId(), Resource.class);
+        Resource resource = doGet("/" + encodePathAsIs(getMyResources().get(0).getId()), Resource.class);
 
         String uri = resource.getUri();
         int id = Integer.parseInt(uri.substring(uri.lastIndexOf('/') + 1));
@@ -318,14 +320,14 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
         OAuth2ErrorRepresentation response = doGet("/invalid_resource", OAuth2ErrorRepresentation.class);
         assertEquals("resource_not_found", response.getError());
 
-        response = doGet("/" + getMyResources().get(0).getId(), authzClient.obtainAccessToken("jdoe", "password").getToken(), OAuth2ErrorRepresentation.class);
+        response = doGet("/" + encodePathAsIs(getMyResources().get(0).getId()), authzClient.obtainAccessToken("jdoe", "password").getToken(), OAuth2ErrorRepresentation.class);
         assertEquals("invalid_resource", response.getError());
     }
 
     @Test
     public void testGetPermissions() throws Exception {
         Resource resource = getMyResources().get(0);
-        List<Permission> shares = doGet("/" + resource.getId() + "/permissions", new TypeReference<List<Permission>>() {});
+        List<Permission> shares = doGet("/" + encodePathAsIs(resource.getId()) + "/permissions", new TypeReference<List<Permission>>() {});
 
         assertEquals(1, shares.size());
 
@@ -348,11 +350,11 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
             permissions.add(permission);
         }
 
-        SimpleHttp.doPut(getAccountUrl("resources/" + resource.getId() + "/permissions"), httpClient)
+        SimpleHttp.doPut(getAccountUrl("resources/" + encodePathAsIs(resource.getId()) + "/permissions"), httpClient)
                 .auth(tokenUtil.getToken())
                 .json(permissions).asResponse();
 
-        shares = doGet("/" + resource.getId() + "/permissions", new TypeReference<List<Permission>>() {});
+        shares = doGet("/" + encodePathAsIs(resource.getId()) + "/permissions", new TypeReference<List<Permission>>() {});
 
         assertEquals(3, shares.size());
 
@@ -384,7 +386,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
         permissions.add(new Permission(users.get(users.size() - 1), "Scope A", "Scope B", "Scope C", "Scope D"));
 
         String resourceId = sharedResource.getId();
-        SimpleHttp.Response response = SimpleHttp.doPut(getAccountUrl("resources/" + resourceId + "/permissions"), httpClient)
+        SimpleHttp.Response response = SimpleHttp.doPut(getAccountUrl("resources/" + encodePathAsIs(resourceId) + "/permissions"), httpClient)
                 .auth(tokenUtil.getToken())
                 .json(permissions).asResponse();
 
@@ -408,7 +410,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
     public void failShareResourceInvalidPermissions() throws Exception {
         List<Permission> permissions = new ArrayList<>();
 
-        SimpleHttp.Response response = SimpleHttp.doPut(getAccountUrl("resources/" + getMyResources().get(0).getId() + "/permissions"), httpClient)
+        SimpleHttp.Response response = SimpleHttp.doPut(getAccountUrl("resources/" + encodePathAsIs(getMyResources().get(0).getId()) + "/permissions"), httpClient)
                 .auth(tokenUtil.getToken())
                 .json(permissions).asResponse();
 
@@ -434,7 +436,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
         final String resourcesUrl = getAccountUrl("resources");
         final String sharedWithOthersUrl = resourcesUrl + "/shared-with-others";
         final String sharedWithMeUrl = resourcesUrl + "/shared-with-me";
-        final String resourceUrl = resourcesUrl + "/" + resourceId;
+        final String resourceUrl = resourcesUrl + "/" + encodePathAsIs(resourceId);
         final String permissionsUrl = resourceUrl + "/permissions";
         final String requestsUrl = resourceUrl + "/permissions/requests";
 
@@ -473,7 +475,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
         permissions.add(new Permission(users.get(users.size() - 1), "Scope B", "Scope D"));
 
         String resourceId = sharedResource.getId();
-        SimpleHttp.Response response = SimpleHttp.doPut(getAccountUrl("resources/" + resourceId + "/permissions"), httpClient)
+        SimpleHttp.Response response = SimpleHttp.doPut(getAccountUrl("resources/" + encodePathAsIs(resourceId) + "/permissions"), httpClient)
                 .auth(tokenUtil.getToken())
                 .json(permissions).asResponse();
 
@@ -496,7 +498,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
     @Test
     public void testGetPermissionRequests() {
         Resource resource = getMyResources().get(0);
-        List<Permission> requests = doGet("/" + resource.getId() + "/permissions/requests",
+        List<Permission> requests = doGet("/" + encodePathAsIs(resource.getId()) + "/permissions/requests",
                 new TypeReference<List<Permission>>() {});
 
         assertTrue(requests.isEmpty());
@@ -526,7 +528,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
             }
         }
 
-        requests = doGet("/" + resource.getId() + "/permissions/requests",
+        requests = doGet("/" + encodePathAsIs(resource.getId()) + "/permissions/requests",
                 new TypeReference<List<Permission>>() {});
 
         assertEquals(3, requests.size());
@@ -560,7 +562,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
     @Test
     public void testApprovePermissionRequest() throws IOException {
         Resource resource = getMyResources().get(0);
-        List<Permission> requests = doGet("/" + resource.getId() + "/permissions/requests",
+        List<Permission> requests = doGet("/" + encodePathAsIs(resource.getId()) + "/permissions/requests",
                 new TypeReference<List<Permission>>() {});
 
         assertTrue(requests.isEmpty());
@@ -590,7 +592,7 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
             }
         }
 
-        requests = doGet("/" + resource.getId() + "/permissions/requests",
+        requests = doGet("/" + encodePathAsIs(resource.getId()) + "/permissions/requests",
                 new TypeReference<List<Permission>>() {});
 
         assertEquals(3, requests.size());
@@ -609,14 +611,14 @@ public class ResourcesRestServiceTest extends AbstractRestServiceTest {
             }
         }
 
-        SimpleHttp.doPut(getAccountUrl("resources/" + resource.getId() + "/permissions"), httpClient)
+        SimpleHttp.doPut(getAccountUrl("resources/" + encodePathAsIs(resource.getId()) + "/permissions"), httpClient)
                 .auth(tokenUtil.getToken())
                 .json(requests).asResponse();
 
-        requests = doGet("/" + resource.getId() + "/permissions/requests",
+        requests = doGet("/" + encodePathAsIs(resource.getId()) + "/permissions/requests",
                 new TypeReference<List<Permission>>() {});
 
-        assertTrue(requests.isEmpty());
+        assertThat(requests, empty());
 
         for (String user : Arrays.asList("alice", "jdoe")) {
             AbstractResourceService.ResourcePermission sharedResource = getSharedWithMe(user).stream()

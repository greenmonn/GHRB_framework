diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/BaseOperatorTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/BaseOperatorTest.java
index b2241df..33f0e72 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/BaseOperatorTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/BaseOperatorTest.java
@@ -41,6 +41,7 @@ import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.TestInfo;
 import org.keycloak.operator.Constants;
 import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;
+import org.keycloak.operator.testsuite.utils.K8sUtils;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -127,8 +128,7 @@ public abstract class BaseOperatorTest {
 
   private static void createRBACresourcesAndOperatorDeployment() throws FileNotFoundException {
     Log.info("Creating RBAC and Deployment into Namespace " + namespace);
-    k8sclient.load(new FileInputStream(TARGET_KUBERNETES_GENERATED_YML_FOLDER + deploymentTarget + ".yml"))
-            .inNamespace(namespace).forceConflicts().serverSideApply();
+    K8sUtils.set(k8sclient, new FileInputStream(TARGET_KUBERNETES_GENERATED_YML_FOLDER + deploymentTarget + ".yml"));
   }
 
   private static void cleanRBACresourcesAndOperatorDeployment() throws FileNotFoundException {
@@ -140,10 +140,8 @@ public abstract class BaseOperatorTest {
   private static void createCRDs() {
     Log.info("Creating CRDs");
     try {
-      var deploymentCRD = k8sclient.load(new FileInputStream(TARGET_KUBERNETES_GENERATED_YML_FOLDER + "keycloaks.k8s.keycloak.org-v1.yml"));
-      deploymentCRD.forceConflicts().serverSideApply();
-      var realmImportCRD = k8sclient.load(new FileInputStream(TARGET_KUBERNETES_GENERATED_YML_FOLDER + "keycloakrealmimports.k8s.keycloak.org-v1.yml"));
-      realmImportCRD.forceConflicts().serverSideApply();
+      K8sUtils.set(k8sclient, new FileInputStream(TARGET_KUBERNETES_GENERATED_YML_FOLDER + "keycloaks.k8s.keycloak.org-v1.yml"));
+      K8sUtils.set(k8sclient, new FileInputStream(TARGET_KUBERNETES_GENERATED_YML_FOLDER + "keycloakrealmimports.k8s.keycloak.org-v1.yml"));
     } catch (Exception e) {
       Log.warn("Failed to create Keycloak CRD, retrying", e);
       createCRDs();
@@ -177,7 +175,7 @@ public abstract class BaseOperatorTest {
   protected static void deployDB() {
     // DB
     Log.info("Creating new PostgreSQL deployment");
-    k8sclient.load(BaseOperatorTest.class.getResourceAsStream("/example-postgres.yaml")).inNamespace(namespace).forceConflicts().serverSideApply();
+    K8sUtils.set(k8sclient, BaseOperatorTest.class.getResourceAsStream("/example-postgres.yaml"));
 
     // Check DB has deployed and ready
     Log.info("Checking Postgres is running");
@@ -188,7 +186,7 @@ public abstract class BaseOperatorTest {
   }
 
   protected static void deployDBSecret() {
-    k8sclient.resource(getResourceFromFile("example-db-secret.yaml", Secret.class)).inNamespace(namespace).forceConflicts().serverSideApply();
+    K8sUtils.set(k8sclient, getResourceFromFile("example-db-secret.yaml", Secret.class));
   }
 
   protected static void deleteDB() {
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/ClusteringTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/ClusteringTest.java
index 38e85e7..fec1769 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/ClusteringTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/ClusteringTest.java
@@ -149,9 +149,8 @@ public class ClusteringTest extends BaseOperatorTest {
         	keycloak.getMetadata().setResourceVersion(null);
         	keycloak.getSpec().setInstances(targetInstances);
         });
-        var realm = k8sclient.load(getClass().getResourceAsStream("/token-test-realm.yaml")).inNamespace(namespace);
+        K8sUtils.set(k8sclient, getClass().getResourceAsStream("/token-test-realm.yaml"));
         var realmImportSelector = k8sclient.resources(KeycloakRealmImport.class).inNamespace(namespace).withName("example-token-test-kc");
-        realm.forceConflicts().serverSideApply();
 
         Log.info("Waiting for a stable Keycloak Cluster");
         Awaitility.await()
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakDeploymentTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakDeploymentTest.java
index 6da7162..46f266a 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakDeploymentTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakDeploymentTest.java
@@ -109,6 +109,7 @@ public class KeycloakDeploymentTest extends BaseOperatorTest {
             deployKeycloak(k8sclient, kc, false);
 
             Awaitility.await()
+                    .timeout(Duration.ofMinutes(2))
                     .during(Duration.ofSeconds(15)) // check if the Deployment is stable
                     .untilAsserted(() -> {
                         var c = k8sclient.apps().statefulSets().inNamespace(namespace).withName(deploymentName).get()
@@ -116,7 +117,7 @@ public class KeycloakDeploymentTest extends BaseOperatorTest {
                         assertThat(c.getImage()).isEqualTo("quay.io/keycloak/non-existing-keycloak");
                         assertThat(c.getEnv().stream()
                                 .anyMatch(e -> e.getName().equals(KeycloakDistConfigurator.getKeycloakOptionEnvVarName(dbConf.getName()))
-                                        && e.getValue().equals(dbConf.getValue())))
+                                        && dbConf.getValue().equals(e.getValue())))
                                 .isTrue();
                     });
 
@@ -215,22 +216,33 @@ public class KeycloakDeploymentTest extends BaseOperatorTest {
             Log.info("Trying to modify deployment");
 
             var deployment = k8sclient.apps().statefulSets().withName(deploymentName).get();
+
+            // unmanaged changes
             var labels = Map.of("address", "EvergreenTerrace742");
             var flandersEnvVar = new EnvVarBuilder().withName("NEIGHBOR").withValue("Stupid Flanders!").build();
-            var origSpecs = new StatefulSetSpecBuilder(deployment.getSpec()).build(); // deep copy
-
             deployment.getMetadata().getLabels().putAll(labels);
+
+            var expectedSpec = new StatefulSetSpecBuilder(deployment.getSpec()).editTemplate().editSpec()
+                    .editContainer(0).addToEnv(0, flandersEnvVar).endContainer().endSpec().endTemplate().build(); // deep copy
+
+            // managed changes
             deployment.getSpec().getTemplate().getSpec().getContainers().get(0).setEnv(List.of(flandersEnvVar));
-            k8sclient.resource(deployment).forceConflicts().serverSideApply();
+            String originalLabelValue = deployment.getMetadata().getLabels().put(Constants.MANAGED_BY_LABEL, "not-right");
+
+            deployment.getMetadata().setResourceVersion(null);
+            k8sclient.resource(deployment).update();
 
             Awaitility.await()
-                    .atMost(5, MINUTES)
+                    .atMost(1, MINUTES)
                     .pollDelay(1, SECONDS)
                     .ignoreExceptions()
                     .untilAsserted(() -> {
                         var d = k8sclient.apps().statefulSets().withName(deploymentName).get();
-                        assertThat(d.getMetadata().getLabels().entrySet().containsAll(labels.entrySet())).isTrue(); // additional labels should not be overwritten
-                        assertThat(d.getSpec()).isEqualTo(origSpecs); // specs should be reconciled back to original values
+                        // unmanaged changes won't get reverted
+                        assertThat(d.getMetadata().getLabels().entrySet().containsAll(labels.entrySet())).isTrue();
+                        // managed changes should get reverted
+                        assertThat(d.getSpec()).isEqualTo(expectedSpec); // specs should be reconciled expected merged state
+                        assertThat(d.getMetadata().getLabels().get(Constants.MANAGED_BY_LABEL)).isEqualTo(originalLabelValue);
                     });
         } catch (Exception e) {
             savePodLogs();
@@ -560,7 +572,7 @@ public class KeycloakDeploymentTest extends BaseOperatorTest {
                     .endMetadata()
                     .addToStringData(keyName, "/barfoo")
                     .build();
-            k8sclient.resource(httpRelativePathSecret).forceConflicts().serverSideApply();
+            K8sUtils.set(k8sclient, httpRelativePathSecret);
 
             kc.getSpec().getAdditionalOptions().add(new ValueOrSecret(Constants.KEYCLOAK_HTTP_RELATIVE_PATH_KEY,
                     new SecretKeySelectorBuilder()
@@ -655,7 +667,7 @@ public class KeycloakDeploymentTest extends BaseOperatorTest {
                                                    String secretDescriptorFilename) {
 
         Secret imagePullSecret = getResourceFromFile(secretDescriptorFilename, Secret.class);
-        k8sclient.resource(imagePullSecret).inNamespace(namespace).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, imagePullSecret);
         LocalObjectReference localObjRefAsSecretTmp = new LocalObjectReferenceBuilder().withName(imagePullSecret.getMetadata().getName()).build();
         keycloakCR.getSpec().setImagePullSecrets(Collections.singletonList(localObjRefAsSecretTmp));
     }
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java
index 8271247..0888f06 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakIngressTest.java
@@ -203,6 +203,7 @@ public class KeycloakIngressTest extends BaseOperatorTest {
 		});
 
         Awaitility.await()
+                .timeout(1, MINUTES)
                 .ignoreExceptions()
                 .untilAsserted(() -> {
                     var i = ingressSelector.get();
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakServicesTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakServicesTest.java
index 50ddb13..16f3783 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakServicesTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/KeycloakServicesTest.java
@@ -26,6 +26,7 @@ import org.keycloak.operator.controllers.KeycloakDiscoveryService;
 import org.keycloak.operator.controllers.KeycloakService;
 import org.keycloak.operator.testsuite.utils.K8sUtils;
 
+import java.time.Duration;
 import java.util.Map;
 
 import static org.assertj.core.api.Assertions.assertThat;
@@ -42,9 +43,10 @@ public class KeycloakServicesTest extends BaseOperatorTest {
         Log.info("Trying to delete the service");
         assertThat(serviceSelector.delete()).isNotNull();
         Awaitility.await()
+                .timeout(Duration.ofMinutes(1))
                 .untilAsserted(() -> assertThat(serviceSelector.get()).isNotNull());
 
-        K8sUtils.waitForKeycloakToBeReady(k8sclient, kc); // wait for reconciler to calm down to avoid race condititon
+        K8sUtils.waitForKeycloakToBeReady(k8sclient, kc); // wait for reconciler to calm down to avoid race condition
 
         Log.info("Trying to modify the service");
 
@@ -53,22 +55,29 @@ public class KeycloakServicesTest extends BaseOperatorTest {
         // ignoring current IP/s
         currentService.getSpec().setClusterIP(null);
         currentService.getSpec().setClusterIPs(null);
+
+        // an unmanaged change
+        currentService.getSpec().setSessionAffinity("ClientIP");
         var origSpecs = new ServiceSpecBuilder(currentService.getSpec()).build(); // deep copy
 
+        // a managed change
+        currentService.getSpec().getPorts().get(0).setProtocol("UDP");
+
         currentService.getMetadata().getLabels().putAll(labels);
-        currentService.getSpec().setSessionAffinity("ClientIP");
-        
+
         currentService.getMetadata().setResourceVersion(null);
-        k8sclient.resource(currentService).forceConflicts().serverSideApply();
+        k8sclient.resource(currentService).update();
 
         Awaitility.await()
+                .timeout(Duration.ofMinutes(1))
                 .untilAsserted(() -> {
                     var s = serviceSelector.get();
                     assertThat(s.getMetadata().getLabels().entrySet().containsAll(labels.entrySet())).isTrue(); // additional labels should not be overwritten
-                    // ignoring assigned IP/s
+                    // ignoring assigned IP/s and generated config
                     s.getSpec().setClusterIP(null);
                     s.getSpec().setClusterIPs(null);
-                    assertThat(s.getSpec()).isEqualTo(origSpecs); // specs should be reconciled back to original values
+                    s.getSpec().setSessionAffinityConfig(null);
+                    assertThat(s.getSpec()).isEqualTo(origSpecs); // managed spec fields should be reconciled back to original values
                 });
     }
 
@@ -82,6 +91,7 @@ public class KeycloakServicesTest extends BaseOperatorTest {
         Log.info("Trying to delete the discovery service");
         assertThat(discoveryServiceSelector.delete()).isNotNull();
         Awaitility.await()
+                .timeout(Duration.ofMinutes(1))
                 .untilAsserted(() -> assertThat(discoveryServiceSelector.get()).isNotNull());
 
         K8sUtils.waitForKeycloakToBeReady(k8sclient, kc); // wait for reconciler to calm down to avoid race condititon
@@ -93,20 +103,27 @@ public class KeycloakServicesTest extends BaseOperatorTest {
         // ignoring current IP/s
         currentDiscoveryService.getSpec().setClusterIP(null);
         currentDiscoveryService.getSpec().setClusterIPs(null);
-        var origDiscoverySpecs = new ServiceSpecBuilder(currentDiscoveryService.getSpec()).build(); // deep copy
 
         currentDiscoveryService.getMetadata().getLabels().putAll(labels);
+        // an unmanaged change
         currentDiscoveryService.getSpec().setSessionAffinity("ClientIP");
+        var origDiscoverySpecs = new ServiceSpecBuilder(currentDiscoveryService.getSpec()).build(); // deep copy
+
+        // a managed change
+        currentDiscoveryService.getSpec().getPorts().get(0).setProtocol("UDP");
 
-        discoveryServiceSelector.edit(ignored -> currentDiscoveryService);
+        currentDiscoveryService.getMetadata().setResourceVersion(null);
+        k8sclient.resource(currentDiscoveryService).update();
 
         Awaitility.await()
+                .timeout(Duration.ofMinutes(1))
                 .untilAsserted(() -> {
                     var ds = discoveryServiceSelector.get();
                     assertThat(ds.getMetadata().getLabels().entrySet().containsAll(labels.entrySet())).isTrue(); // additional labels should not be overwritten
-                    // ignoring assigned IP/s
+                    // ignoring assigned IP/s and generated config
                     ds.getSpec().setClusterIP(null);
                     ds.getSpec().setClusterIPs(null);
+                    ds.getSpec().setSessionAffinityConfig(null);
                     assertThat(ds.getSpec()).isEqualTo(origDiscoverySpecs); // specs should be reconciled back to original values
                 });
     }
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/PodTemplateTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/PodTemplateTest.java
index d91dbfe..0fa8439 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/PodTemplateTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/PodTemplateTest.java
@@ -28,6 +28,7 @@ import io.quarkus.test.junit.QuarkusTest;
 import org.awaitility.Awaitility;
 import org.junit.jupiter.api.Test;
 import org.keycloak.operator.testsuite.utils.CRAssert;
+import org.keycloak.operator.testsuite.utils.K8sUtils;
 import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;
 
 import java.util.Collections;
@@ -53,12 +54,8 @@ public class PodTemplateTest extends BaseOperatorTest {
 
     @Test
     public void testPodTemplateIsMerged() {
-        // Arrange
-        var keycloakWithPodTemplate = k8sclient
-                .load(getClass().getResourceAsStream("/correct-podtemplate-keycloak.yml"));
-
         // Act
-        keycloakWithPodTemplate.forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, getClass().getResourceAsStream("/correct-podtemplate-keycloak.yml"));
 
         // Assert
         Awaitility
@@ -99,7 +96,7 @@ public class PodTemplateTest extends BaseOperatorTest {
         plainKc.getSpec().getUnsupported().setPodTeplate(podTemplate);
 
         // Act
-        k8sclient.resource(plainKc).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, plainKc);
 
         // Assert
         Log.info("Getting status of Keycloak");
@@ -123,7 +120,7 @@ public class PodTemplateTest extends BaseOperatorTest {
         plainKc.getSpec().getUnsupported().setPodTeplate(podTemplate);
 
         // Act
-        k8sclient.resource(plainKc).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, plainKc);
 
         // Assert
         Log.info("Getting status of Keycloak");
@@ -149,7 +146,7 @@ public class PodTemplateTest extends BaseOperatorTest {
         plainKc.getSpec().getUnsupported().setPodTeplate(podTemplate);
 
         // Act
-        k8sclient.resource(plainKc).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, plainKc);
 
         // Assert
         Log.info("Getting status of Keycloak");
@@ -175,7 +172,7 @@ public class PodTemplateTest extends BaseOperatorTest {
         plainKc.getSpec().getUnsupported().setPodTeplate(podTemplate);
 
         // Act
-        k8sclient.resource(plainKc).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, plainKc);
 
         // Assert
         Log.info("Getting status of Keycloak");
@@ -193,7 +190,7 @@ public class PodTemplateTest extends BaseOperatorTest {
         String secretDescriptorFilename = "test-docker-registry-secret.yaml";
 
         Secret imagePullSecret = getResourceFromFile(secretDescriptorFilename, Secret.class);
-        k8sclient.resource(imagePullSecret).inNamespace(namespace).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, imagePullSecret);
         LocalObjectReference localObjRefAsSecretTmp = new LocalObjectReferenceBuilder().withName(imagePullSecret.getMetadata().getName()).build();
 
         assertThat(localObjRefAsSecretTmp.getName()).isNotNull();
@@ -209,7 +206,7 @@ public class PodTemplateTest extends BaseOperatorTest {
         plainKc.getSpec().getUnsupported().setPodTeplate(podTemplate);
 
         // Act
-        k8sclient.resource(plainKc).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, plainKc);
 
         // Assert
         Log.info("Getting status of Keycloak");
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/RealmImportTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/RealmImportTest.java
index 90049ff..fee18cf 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/RealmImportTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/RealmImportTest.java
@@ -27,6 +27,7 @@ import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.TestInfo;
 import org.junit.jupiter.api.condition.EnabledIfSystemProperty;
 import org.keycloak.operator.testsuite.utils.CRAssert;
+import org.keycloak.operator.testsuite.utils.K8sUtils;
 import org.keycloak.operator.controllers.KeycloakService;
 import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImport;
 import org.keycloak.operator.crds.v2alpha1.deployment.spec.UnsupportedSpec;
@@ -90,7 +91,7 @@ public class RealmImportTest extends BaseOperatorTest {
         deployKeycloak(k8sclient, kc, false);
 
         // Act
-        k8sclient.load(getClass().getResourceAsStream("/example-realm.yaml")).inNamespace(namespace).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, getClass().getResourceAsStream("/example-realm.yaml"));
 
         // Assert
         var crSelector = k8sclient
@@ -151,7 +152,7 @@ public class RealmImportTest extends BaseOperatorTest {
         deployKeycloak(k8sclient, keycloak, false);
 
         // Act
-        k8sclient.load(getClass().getResourceAsStream("/example-realm.yaml")).inNamespace(namespace).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, getClass().getResourceAsStream("/example-realm.yaml"));
 
         // Assert
         var crSelector = k8sclient
@@ -178,7 +179,7 @@ public class RealmImportTest extends BaseOperatorTest {
         deployKeycloak(k8sclient, getDefaultKeycloakDeployment(), true); // make sure there are no errors due to missing KC Deployment
 
         // Act
-        k8sclient.load(getClass().getResourceAsStream("/incorrect-realm.yaml")).inNamespace(namespace).forceConflicts().serverSideApply();
+        K8sUtils.set(k8sclient, getClass().getResourceAsStream("/incorrect-realm.yaml"));
 
         // Assert
         Awaitility.await()
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/WatchedSecretsTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/WatchedSecretsTest.java
index 1789f00..9e303ed 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/WatchedSecretsTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/WatchedSecretsTest.java
@@ -64,19 +64,19 @@ public class WatchedSecretsTest extends BaseOperatorTest {
             Log.info("Updating DB Secret, expecting restart");
             testDeploymentRestarted(Set.of(kc), Set.of(), () -> {
                 dbSecret.getData().put(UUID.randomUUID().toString(), "YmxhaGJsYWg=");
-                k8sclient.resource(dbSecret).forceConflicts().serverSideApply();
+                k8sclient.resource(dbSecret).update();
             });
 
             Log.info("Updating TLS Secret, expecting restart");
             testDeploymentRestarted(Set.of(kc), Set.of(), () -> {
                 tlsSecret.getData().put(UUID.randomUUID().toString(), "YmxhaGJsYWg=");
-                k8sclient.resource(tlsSecret).forceConflicts().serverSideApply();
+                k8sclient.resource(tlsSecret).update();
             });
 
             Log.info("Updating DB Secret metadata, NOT expecting restart");
             testDeploymentRestarted(Set.of(), Set.of(kc), () -> {
                 dbSecret.getMetadata().getLabels().put(UUID.randomUUID().toString(), "YmxhaGJsYWg");
-                k8sclient.resource(dbSecret).forceConflicts().serverSideApply();
+                k8sclient.resource(dbSecret).update();
             });
         } catch (Exception e) {
             savePodLogs();
@@ -98,7 +98,7 @@ public class WatchedSecretsTest extends BaseOperatorTest {
 
             dbSecret.getData().put("username",
                     Base64.getEncoder().encodeToString(username.getBytes()));
-            k8sclient.resource(dbSecret).forceConflicts().serverSideApply();
+            k8sclient.resource(dbSecret).update();
 
             Awaitility.await()
                     .ignoreExceptions()
@@ -146,7 +146,7 @@ public class WatchedSecretsTest extends BaseOperatorTest {
             testDeploymentRestarted(Set.of(), Set.of(kc), () -> {
                 var dbSecret = getDbSecret();
                 dbSecret.getMetadata().getLabels().put(UUID.randomUUID().toString(), "YmxhaGJsYWg");
-                k8sclient.resource(dbSecret).forceConflicts().serverSideApply();
+                k8sclient.resource(dbSecret).update();
             });
 
             Awaitility.await().untilAsserted(() -> {
@@ -180,7 +180,7 @@ public class WatchedSecretsTest extends BaseOperatorTest {
             Log.info("Updating DB Secret, expecting restart of both KCs");
             testDeploymentRestarted(Set.of(kc1, kc2), Set.of(), () -> {
                 dbSecret.getData().put(UUID.randomUUID().toString(), "YmxhaGJsYWg=");
-                k8sclient.resource(dbSecret).forceConflicts().serverSideApply();
+                k8sclient.resource(dbSecret).update();
             });
 
             Log.info("Updating KC1 to not to rely on DB Secret");
@@ -192,7 +192,7 @@ public class WatchedSecretsTest extends BaseOperatorTest {
             Log.info("Updating DB Secret, expecting restart of just KC2");
             testDeploymentRestarted(Set.of(kc2), Set.of(kc1), () -> {
                 dbSecret.getData().put(UUID.randomUUID().toString(), "YmxhaGJsYWg=");
-                k8sclient.resource(dbSecret).forceConflicts().serverSideApply();
+                k8sclient.resource(dbSecret).update();
             });
         }
         catch (Exception e) {
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/unit/KeycloakDistConfiguratorTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/unit/KeycloakDistConfiguratorTest.java
index 5cc60ab..058cbc5 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/unit/KeycloakDistConfiguratorTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/unit/KeycloakDistConfiguratorTest.java
@@ -166,6 +166,9 @@ public class KeycloakDistConfiguratorTest {
         assertWarningStatusFirstClassFields(distConfig, false, expectedFields);
         expectedValues.forEach((k, v) -> assertEnvVarNotPresent(container.getEnv(), getKeycloakOptionEnvVarName(k)));
 
+        // mimic what KeycloakDeployment does and set all additionalOptions as env first
+        expectedValues.forEach((k, v) -> container.getEnv().add(new EnvVar(getKeycloakOptionEnvVarName(k), v, null)));
+
         config.accept(distConfig);
 
         assertWarningStatusFirstClassFields(distConfig, true, expectedFields);
@@ -180,8 +183,7 @@ public class KeycloakDistConfiguratorTest {
         assertThat(envVars).isNotNull();
         assertEnvVarPresent(envVars, varName);
 
-        final String foundValue = envVars.stream().filter(f -> varName.equals(f.getName()))
-                .findFirst()
+        var matching = envVars.stream().filter(f -> varName.equals(f.getName()))
                 .map(envVar -> {
                     if (envVar.getValue() != null) {
                         return envVar.getValue();
@@ -192,8 +194,9 @@ public class KeycloakDistConfiguratorTest {
                     }
 
                     return null;
-                })
-                .orElse(null);
+                }).collect(Collectors.toList());
+        assertThat(matching.size()).isLessThan(2);
+        final String foundValue = matching.stream().findFirst().orElse(null);
 
         assertThat(foundValue).isNotNull();
         assertThat(foundValue).isEqualTo(expectedValue);
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/unit/PodTemplateTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/unit/PodTemplateTest.java
index 96b1935..b7adaf8 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/unit/PodTemplateTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/unit/PodTemplateTest.java
@@ -270,7 +270,7 @@ public class PodTemplateTest {
     }
 
     @Test
-    public void testAnnotationsAreMerged() {
+    public void testAnnotationsAreNotMerged() {
         // Arrange
         var existingDeployment = new StatefulSetBuilder()
                 .withNewSpec()
@@ -292,7 +292,6 @@ public class PodTemplateTest {
         var podTemplate = getDeployment(additionalPodTemplate, existingDeployment).getSpec().getTemplate();
 
         // Assert
-        assertThat(podTemplate.getMetadata().getAnnotations()).containsEntry("one", "1");
         assertThat(podTemplate.getMetadata().getAnnotations()).containsEntry("two", "2");
     }
 
diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/utils/K8sUtils.java b/operator/src/test/java/org/keycloak/operator/testsuite/utils/K8sUtils.java
index 0744e70..658afef 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/utils/K8sUtils.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/utils/K8sUtils.java
@@ -22,6 +22,7 @@ import io.fabric8.kubernetes.api.model.Pod;
 import io.fabric8.kubernetes.api.model.Secret;
 import io.fabric8.kubernetes.client.KubernetesClient;
 import io.fabric8.kubernetes.client.KubernetesClientException;
+import io.fabric8.kubernetes.client.dsl.Resource;
 import io.fabric8.kubernetes.client.utils.KubernetesResourceUtil;
 import io.fabric8.kubernetes.client.utils.Serialization;
 import io.quarkus.logging.Log;
@@ -30,9 +31,13 @@ import org.keycloak.operator.crds.v2alpha1.deployment.Keycloak;
 import org.keycloak.operator.crds.v2alpha1.deployment.KeycloakStatusCondition;
 import org.keycloak.operator.testsuite.integration.BaseOperatorTest;
 
+import java.io.InputStream;
+import java.net.HttpURLConnection;
+import java.util.List;
 import java.util.Objects;
 import java.util.UUID;
 import java.util.concurrent.TimeUnit;
+import java.util.stream.Collectors;
 
 /**
  * @author Vaclav Muzikar <vmuzikar@redhat.com>
@@ -57,13 +62,29 @@ public final class K8sUtils {
         deployKeycloak(client, kc, waitUntilReady, true);
     }
 
-    public static void deployKeycloak(KubernetesClient client, Keycloak kc, boolean waitUntilReady, boolean deployTlsSecret) {
-        client.resource(kc).forceConflicts().serverSideApply();
+    public static List<HasMetadata> set(KubernetesClient client, InputStream stream) {
+        return client.load(stream).items().stream().map(i -> set(client, i)).collect(Collectors.toList());
+    }
+
+    public static <T extends HasMetadata> T set(KubernetesClient client, T hasMetadata) {
+        Resource<T> resource = client.resource(hasMetadata);
+        try {
+            return resource.patch();
+        } catch (KubernetesClientException e) {
+            if (e.getCode() == HttpURLConnection.HTTP_NOT_FOUND) {
+                return resource.create();
+            }
+            throw e;
+        }
+    }
 
+    public static void deployKeycloak(KubernetesClient client, Keycloak kc, boolean waitUntilReady, boolean deployTlsSecret) {
         if (deployTlsSecret) {
-            client.resource(getDefaultTlsSecret()).inNamespace(kc.getMetadata().getNamespace()).serverSideApply();
+            set(client, getDefaultTlsSecret());
         }
 
+        set(client, kc);
+
         if (waitUntilReady) {
             waitForKeycloakToBeReady(client, kc);
         }

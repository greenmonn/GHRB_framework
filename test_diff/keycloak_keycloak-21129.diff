diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/BackwardsCompatibilityUserStorageTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/BackwardsCompatibilityUserStorageTest.java
index 7eb5126..9c81ebb 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/BackwardsCompatibilityUserStorageTest.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/federation/storage/BackwardsCompatibilityUserStorageTest.java
@@ -18,11 +18,14 @@
 
 package org.keycloak.testsuite.federation.storage;
 
+import com.fasterxml.jackson.core.type.TypeReference;
+import org.apache.http.impl.client.CloseableHttpClient;
 import org.jboss.arquillian.graphene.page.Page;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.keycloak.admin.client.resource.UserResource;
+import org.keycloak.broker.provider.util.SimpleHttp;
 import org.keycloak.common.Profile.Feature;
 import org.keycloak.common.util.MultivaluedHashMap;
 import org.keycloak.credential.CredentialModel;
@@ -30,10 +33,12 @@ import org.keycloak.models.RealmModel;
 import org.keycloak.models.UserModel;
 import org.keycloak.models.credential.OTPCredentialModel;
 import org.keycloak.models.utils.TimeBasedOTP;
+import org.keycloak.representations.account.CredentialMetadataRepresentation;
 import org.keycloak.representations.idm.ComponentRepresentation;
 import org.keycloak.representations.idm.CredentialRepresentation;
 import org.keycloak.representations.idm.RealmRepresentation;
 import org.keycloak.representations.idm.UserRepresentation;
+import org.keycloak.services.resources.account.AccountCredentialResource;
 import org.keycloak.storage.StorageId;
 import org.keycloak.storage.UserStorageProvider;
 import org.keycloak.testsuite.AbstractTestRealmKeycloakTest;
@@ -45,9 +50,12 @@ import org.keycloak.testsuite.pages.AppPage;
 import org.keycloak.testsuite.pages.LoginConfigTotpPage;
 import org.keycloak.testsuite.pages.LoginPage;
 import org.keycloak.testsuite.pages.LoginTotpPage;
+import org.keycloak.testsuite.util.OAuthClient;
 import org.keycloak.testsuite.util.TestAppHelper;
 
 import jakarta.ws.rs.core.Response;
+import org.keycloak.testsuite.util.TokenUtil;
+
 import java.io.IOException;
 import java.net.URISyntaxException;
 import java.util.Arrays;
@@ -196,7 +204,7 @@ public class BackwardsCompatibilityUserStorageTest extends AbstractTestRealmKeyc
     }
 
     @Test
-    public void testOTPSetupThroughAccountMgmtAndLogin() throws URISyntaxException, IOException {
+    public void testOTPSetupThroughAdminRESTAndLogin() throws URISyntaxException, IOException {
         String userId = addUserAndResetPassword("otp1", "pass");
         getCleanup().addUserId(userId);
 
@@ -216,7 +224,7 @@ public class BackwardsCompatibilityUserStorageTest extends AbstractTestRealmKeyc
         assertTrue(testAppHelper.login("otp1", "pass", totp.generateTOTP(totpSecret)));
         testAppHelper.logout();
 
-        // Disable OTP credential in account console
+        // Disable OTP credential by admin REST API
         testRealm().users().get(userId).disableCredentialType(Collections.singletonList(OTPCredentialModel.TYPE));
 
         assertUserDontHaveDBCredentials();
@@ -226,6 +234,47 @@ public class BackwardsCompatibilityUserStorageTest extends AbstractTestRealmKeyc
         loginSuccessAndLogout("otp1", "pass");
     }
 
+    // Issue 19575
+    @Test
+    public void testOTPSetupAndRemoveThroughAccountMgmtAndLogin() throws URISyntaxException, IOException {
+        String userId = addUserAndResetPassword("otp1", "pass");
+        getCleanup().addUserId(userId);
+
+        // Get token for account REST (OTP credential not yet required during direct-grant login)
+        TokenUtil tokenUtil = new TokenUtil("otp1", "pass");
+        String accountToken = tokenUtil.getToken();
+
+        // Setup OTP
+        String totpSecret = setupOTPForUserWithRequiredAction(userId);
+
+        assertUserDontHaveDBCredentials();
+        assertUserHasOTPCredentialInUserStorage(true);
+
+        try (CloseableHttpClient httpClient = oauth.getHttpClient().get()) {
+            String accountCredentialsUrl = OAuthClient.AUTH_SERVER_ROOT + "/realms/test/account/credentials";
+
+            // Get credentials by account REST. User should have OTP credential
+            List<CredentialMetadataRepresentation> otpCreds = getOtpCredentialFromAccountREST(accountCredentialsUrl, httpClient, tokenUtil);
+            Assert.assertEquals(1, otpCreds.size());
+            String otpCredentialId = otpCreds.get(0).getCredential().getId();
+
+            // Delete OTP credential from federated storage
+            int deleteStatus = SimpleHttp.doDelete(accountCredentialsUrl + "/" + otpCredentialId, httpClient)
+                .auth(accountToken).acceptJson().asStatus();
+            Assert.assertEquals(204, deleteStatus);
+
+            // Get credentials by account REST. User should not have OTP credential
+            otpCreds = getOtpCredentialFromAccountREST(accountCredentialsUrl, httpClient, tokenUtil);
+            Assert.assertEquals(0, otpCreds.size());
+        }
+
+        assertUserDontHaveDBCredentials();
+        assertUserHasOTPCredentialInUserStorage(false);
+
+        // Assert user can login without OTP
+        loginSuccessAndLogout("otp1", "pass");
+    }
+
     @Test
     public void testDisableCredentialsInUserStorage() throws URISyntaxException, IOException {
         String userId = addUserAndResetPassword("otp1", "pass");
@@ -309,6 +358,16 @@ public class BackwardsCompatibilityUserStorageTest extends AbstractTestRealmKeyc
         Assert.assertEquals(expectedUserHasOTP, hasUserOTP);
     }
 
+    private List<CredentialMetadataRepresentation> getOtpCredentialFromAccountREST(String accountCredentialsUrl, CloseableHttpClient httpClient, TokenUtil tokenUtil) throws IOException {
+        List<AccountCredentialResource.CredentialContainer> credentials = SimpleHttp.doGet(accountCredentialsUrl, httpClient)
+                .auth(tokenUtil.getToken()).asJson(new TypeReference<>() {});
+
+        return credentials.stream()
+                .filter(credentialContainer -> OTPCredentialModel.TYPE.equals(credentialContainer.getType()))
+                .map(AccountCredentialResource.CredentialContainer::getUserCredentialMetadatas)
+                .findFirst().get();
+    }
+
     @Override
     public void configureTestRealm(RealmRepresentation testRealm) {
 

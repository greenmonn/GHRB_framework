diff --git a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/UmaRepresentationTest.java b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/UmaRepresentationTest.java
index 37cd078..d4582c0 100644
--- a/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/UmaRepresentationTest.java
+++ b/testsuite/integration-arquillian/tests/base/src/test/java/org/keycloak/testsuite/authz/UmaRepresentationTest.java
@@ -21,15 +21,7 @@ import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.keycloak.admin.client.resource.RealmResource;
-import org.keycloak.authorization.AuthorizationProvider;
 import org.keycloak.authorization.client.resource.PermissionResource;
-import org.keycloak.authorization.model.ResourceServer;
-//import org.keycloak.forms.account.freemarker.model.AuthorizationBean;
-//import org.keycloak.forms.account.freemarker.model.AuthorizationBean.ResourceBean;
-import org.keycloak.models.ClientModel;
-import org.keycloak.models.KeycloakSession;
-import org.keycloak.models.RealmModel;
-import org.keycloak.models.UserModel;
 import org.keycloak.representations.idm.UserRepresentation;
 import org.keycloak.representations.idm.authorization.DecisionEffect;
 import org.keycloak.representations.idm.authorization.PermissionTicketRepresentation;
@@ -147,59 +139,4 @@ public class UmaRepresentationTest extends AbstractResourceServerTest {
         String description = policies.get(0).getPolicy().getDescription();
         Assert.assertTrue(description.startsWith("Resource owner (resource-server-test) grants access"));
     }
-
-    @Test
-    public void testCanRepresentResourceBeanOfResourceOwnedByUser() throws Exception {
-        resource = addResource("Resource A", "marta", true, "ScopeA");
-        testingClient.server().run(UmaRepresentationTest::testCanRepresentResourceBeanOfResourceOwnedByUser);
-    }
-
-    public static void testCanRepresentResourceBeanOfResourceOwnedByUser(KeycloakSession session) {
-//        RealmModel realm = session.realms().getRealmByName("authz-test");
-//        session.getContext().setRealm(realm);
-//        AuthorizationProvider authorization = session.getProvider(AuthorizationProvider.class);
-//
-//        AuthorizationBean authorizationBean  = new AuthorizationBean(session, realm, null, session.getContext().getUri());
-//        ClientModel client = session.getContext().getRealm().getClientByClientId("resource-server-test");
-//        UserModel user = session.users().getUserByUsername(session.getContext().getRealm(), "marta");
-//        ResourceServer resourceServer = authorization.getStoreFactory().getResourceServerStore().findByClient(client);
-//        ResourceBean resourceBean = authorizationBean.new ResourceBean(
-//            authorization.getStoreFactory().getResourceStore().findByName(
-//                    resourceServer, "Resource A", user.getId()
-//            )
-//        );
-//
-//        Assert.assertEquals("Resource A", resourceBean.getName());
-//        Assert.assertEquals("marta", resourceBean.getOwnerName());
-//        Assert.assertNotNull(resourceBean.getUserOwner());
-//        Assert.assertEquals("marta", resourceBean.getUserOwner().getUsername());
-//        Assert.assertNull(resourceBean.getClientOwner());
-    }
-
-    @Test
-    public void testCanRepresentResourceBeanOfResourceOwnedByClient() throws Exception {
-        resource = addResource("Resource A", getClient(getRealm()).toRepresentation().getId(), true, "ScopeA");
-        testingClient.server().run(UmaRepresentationTest::testCanRepresentResourceBeanOfResourceOwnedByClient);
-    }
-
-    public static void testCanRepresentResourceBeanOfResourceOwnedByClient(KeycloakSession session) {
-//        RealmModel realm = session.realms().getRealmByName("authz-test");
-//        session.getContext().setRealm(realm);
-//        AuthorizationProvider authorization = session.getProvider(AuthorizationProvider.class);
-//
-//        AuthorizationBean authorizationBean  = new AuthorizationBean(session, realm, null, session.getContext().getUri());
-//        ClientModel client = session.getContext().getRealm().getClientByClientId("resource-server-test");
-//        ResourceServer resourceServer = authorization.getStoreFactory().getResourceServerStore().findByClient(client);
-//        ResourceBean resourceBean = authorizationBean.new ResourceBean(
-//            authorization.getStoreFactory().getResourceStore().findByName(
-//                    resourceServer, "Resource A", client.getId()
-//            )
-//        );
-//
-//        Assert.assertEquals("Resource A", resourceBean.getName());
-//        Assert.assertEquals("resource-server-test", resourceBean.getOwnerName());
-//        Assert.assertNotNull(resourceBean.getClientOwner());
-//        Assert.assertEquals("resource-server-test", resourceBean.getClientOwner().getClientId());
-//        Assert.assertNull(resourceBean.getUserOwner());
-    }
 }

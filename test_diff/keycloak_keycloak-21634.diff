diff --git a/operator/src/test/java/org/keycloak/operator/testsuite/integration/CRDTest.java b/operator/src/test/java/org/keycloak/operator/testsuite/integration/CRDTest.java
index f75d3bb..58feb08 100644
--- a/operator/src/test/java/org/keycloak/operator/testsuite/integration/CRDTest.java
+++ b/operator/src/test/java/org/keycloak/operator/testsuite/integration/CRDTest.java
@@ -20,6 +20,7 @@ package org.keycloak.operator.testsuite.integration;
 import io.fabric8.junit.jupiter.api.KubernetesTest;
 import io.fabric8.kubernetes.api.model.HasMetadata;
 import io.fabric8.kubernetes.client.KubernetesClient;
+import io.fabric8.kubernetes.client.KubernetesClientException;
 import io.fabric8.kubernetes.client.dsl.Resource;
 
 import org.junit.jupiter.api.BeforeAll;
@@ -30,8 +31,10 @@ import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImport;
 import java.io.FileNotFoundException;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import org.keycloak.operator.crds.v2alpha1.realmimport.KeycloakRealmImportBuilder;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 @KubernetesTest
 public class CRDTest {
@@ -51,6 +54,20 @@ public class CRDTest {
     }
 
     @Test
+    public void testRealmImportWithoutRequiredFields() {
+        KeycloakRealmImport cr = new KeycloakRealmImportBuilder()
+                .withNewMetadata()
+                    .withName("invalid-realm")
+                .endMetadata()
+                .withNewSpec()
+                .endSpec()
+                .build();
+
+        var eMsg = assertThrows(KubernetesClientException.class, () -> client.resource(cr).create()).getMessage();
+        assertThat(eMsg).contains("spec.keycloakCRName: Required value", "spec.realm: Required value");
+    }
+
+    @Test
     public void testKeycloak() {
         roundTrip("/test-serialization-keycloak-cr.yml", Keycloak.class);
     }

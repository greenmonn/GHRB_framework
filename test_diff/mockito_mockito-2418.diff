diff --git a/src/test/java/org/mockito/InvocationFactoryTest.java b/src/test/java/org/mockito/InvocationFactoryTest.java
index 5837a7d..8864e05 100644
--- a/src/test/java/org/mockito/InvocationFactoryTest.java
+++ b/src/test/java/org/mockito/InvocationFactoryTest.java
@@ -9,8 +9,6 @@ import static org.junit.Assert.fail;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.withSettings;
 
-import java.util.concurrent.Callable;
-
 import org.junit.Test;
 import org.mockito.invocation.Invocation;
 import org.mockito.invocation.InvocationFactory;
@@ -70,23 +68,4 @@ public class InvocationFactoryTest extends TestBase {
         Object ret = Mockito.mockingDetails(mock).getMockHandler().handle(invocation);
         assertEquals("mocked", ret);
     }
-
-    @Test
-    public void deprecated_api_still_works() throws Throwable {
-        Invocation invocation =
-                Mockito.framework()
-                        .getInvocationFactory()
-                        .createInvocation(
-                                mock,
-                                withSettings().build(TestClass.class),
-                                TestClass.class.getDeclaredMethod("testMethod"),
-                                new Callable() {
-                                    public Object call() throws Exception {
-                                        return "mocked";
-                                    }
-                                });
-
-        Object ret = Mockito.mockingDetails(mock).getMockHandler().handle(invocation);
-        assertEquals("mocked", ret);
-    }
 }
diff --git a/src/test/java/org/mockito/MockitoTest.java b/src/test/java/org/mockito/MockitoTest.java
index b41dd20..687ae4c 100644
--- a/src/test/java/org/mockito/MockitoTest.java
+++ b/src/test/java/org/mockito/MockitoTest.java
@@ -45,11 +45,6 @@ public class MockitoTest {
     }
 
     @Test(expected = NotAMockException.class)
-    public void shouldValidateMockWhenVerifyingZeroInteractions() {
-        Mockito.verifyZeroInteractions("notMock");
-    }
-
-    @Test(expected = NotAMockException.class)
     public void shouldValidateMockWhenVerifyingNoInteractions() {
         Mockito.verifyNoInteractions("notMock");
     }
diff --git a/src/test/java/org/mockito/configuration/MockitoConfiguration.java b/src/test/java/org/mockito/configuration/MockitoConfiguration.java
index 5834485..ab65516 100644
--- a/src/test/java/org/mockito/configuration/MockitoConfiguration.java
+++ b/src/test/java/org/mockito/configuration/MockitoConfiguration.java
@@ -5,7 +5,6 @@
 package org.mockito.configuration;
 
 import org.mockito.stubbing.Answer;
-import org.mockitousage.configuration.CustomizedAnnotationForSmartMockTest;
 
 public class MockitoConfiguration extends DefaultMockitoConfiguration
         implements IMockitoConfiguration {
@@ -14,7 +13,7 @@ public class MockitoConfiguration extends DefaultMockitoConfiguration
 
     private boolean cleansStackTrace;
 
-    private AnnotationEngine overriddenEngine;
+    private org.mockito.plugins.AnnotationEngine overriddenEngine;
 
     private boolean enableClassCache = true;
 
@@ -29,7 +28,7 @@ public class MockitoConfiguration extends DefaultMockitoConfiguration
     }
 
     // for testing purposes, allow to override the annotation engine
-    public void overrideAnnotationEngine(AnnotationEngine engine) {
+    public void overrideAnnotationEngine(org.mockito.plugins.AnnotationEngine engine) {
         this.overriddenEngine = engine;
     }
 
@@ -48,14 +47,6 @@ public class MockitoConfiguration extends DefaultMockitoConfiguration
     }
 
     @Override
-    public AnnotationEngine getAnnotationEngine() {
-        if (this.overriddenEngine != null) {
-            return this.overriddenEngine;
-        }
-        return new CustomizedAnnotationForSmartMockTest.CustomInjectingAnnotationEngine();
-    }
-
-    @Override
     public boolean cleansStackTrace() {
         return cleansStackTrace;
     }
diff --git a/src/test/java/org/mockito/internal/InvalidStateDetectionTest.java b/src/test/java/org/mockito/internal/InvalidStateDetectionTest.java
index ae31893..be466a0 100644
--- a/src/test/java/org/mockito/internal/InvalidStateDetectionTest.java
+++ b/src/test/java/org/mockito/internal/InvalidStateDetectionTest.java
@@ -30,12 +30,10 @@ import org.mockitoutil.TestBase;
  *
  *    -on method call on mock
  *    -on verify
- *    -on verifyZeroInteractions
  *    -on verifyNoMoreInteractions
  *    -on verify in order
  *    -on stub
  */
-@SuppressWarnings({"unchecked", "deprecation"})
 public class InvalidStateDetectionTest extends TestBase {
 
     @Mock private IMethods mock;
@@ -61,9 +59,6 @@ public class InvalidStateDetectionTest extends TestBase {
         detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);
 
         when(mock.simpleMethod());
-        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);
-
-        when(mock.simpleMethod());
         detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);
 
         when(mock.simpleMethod());
@@ -89,9 +84,6 @@ public class InvalidStateDetectionTest extends TestBase {
         detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedStubbingException.class);
 
         doAnswer(null);
-        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedStubbingException.class);
-
-        doAnswer(null);
         detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedStubbingException.class);
 
         doAnswer(null);
@@ -114,9 +106,6 @@ public class InvalidStateDetectionTest extends TestBase {
         detectsAndCleansUp(new OnVerifyInOrder(), UnfinishedVerificationException.class);
 
         verify(mock);
-        detectsAndCleansUp(new OnVerifyZeroInteractions(), UnfinishedVerificationException.class);
-
-        verify(mock);
         detectsAndCleansUp(new OnVerifyNoMoreInteractions(), UnfinishedVerificationException.class);
 
         verify(mock);
@@ -128,22 +117,19 @@ public class InvalidStateDetectionTest extends TestBase {
 
     @Test
     public void shouldDetectMisplacedArgumentMatcher() {
-        Object ignored = anyObject();
+        Object ignored = any();
         detectsAndCleansUp(new OnVerify(), InvalidUseOfMatchersException.class);
 
-        ignored = anyObject();
+        ignored = any();
         detectsAndCleansUp(new OnVerifyInOrder(), InvalidUseOfMatchersException.class);
 
-        ignored = anyObject();
-        detectsAndCleansUp(new OnVerifyZeroInteractions(), InvalidUseOfMatchersException.class);
-
-        ignored = anyObject();
+        ignored = any();
         detectsAndCleansUp(new OnVerifyNoMoreInteractions(), InvalidUseOfMatchersException.class);
 
-        ignored = anyObject();
+        ignored = any();
         detectsAndCleansUp(new OnVerifyNoInteractions(), InvalidUseOfMatchersException.class);
 
-        ignored = anyObject();
+        ignored = any();
         detectsAndCleansUp(new OnDoAnswer(), InvalidUseOfMatchersException.class);
     }
 
@@ -198,13 +184,6 @@ public class InvalidStateDetectionTest extends TestBase {
         }
     }
 
-    private static class OnVerifyZeroInteractions implements DetectsInvalidState {
-        @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
-        public void detect(IMethods mock) {
-            verifyZeroInteractions(mock);
-        }
-    }
-
     private static class OnVerifyNoMoreInteractions implements DetectsInvalidState {
         @SuppressWarnings({"CheckReturnValue", "MockitoUsage"})
         public void detect(IMethods mock) {
diff --git a/src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java b/src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java
index d5590cc..48cf998 100644
--- a/src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java
+++ b/src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java
@@ -11,22 +11,12 @@ import org.assertj.core.api.Assertions;
 import org.junit.After;
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.configuration.AnnotationEngine;
 import org.mockito.internal.configuration.plugins.Plugins;
 import org.mockitoutil.ClassLoaders;
 import org.objenesis.Objenesis;
 
 public class GlobalConfigurationTest {
     @Test
-    public void returns_mockito_configuration_annotation_engine_if_non_default() throws Exception {
-        ConfigurationAccess.getConfig().overrideAnnotationEngine(new CustomAnnotationEngine());
-        assertThat(new GlobalConfiguration().getAnnotationEngine())
-                .isInstanceOf(CustomAnnotationEngine.class);
-        assertThat(new GlobalConfiguration().tryGetPluginAnnotationEngine())
-                .isInstanceOf(CustomAnnotationEngine.class);
-    }
-
-    @Test
     public void returns_mockito_annotation_engine_of_Plugins_if_no_MockitoConfiguration()
             throws Throwable {
         ClassLoader anotherWorld =
@@ -44,8 +34,6 @@ public class GlobalConfigurationTest {
                         new Runnable() {
                             @Override
                             public void run() {
-                                assertThat(new GlobalConfiguration().getAnnotationEngine())
-                                        .isInstanceOf(Plugins.getAnnotationEngine().getClass());
                                 assertThat(new GlobalConfiguration().tryGetPluginAnnotationEngine())
                                         .isInstanceOf(Plugins.getAnnotationEngine().getClass());
                             }
@@ -57,7 +45,7 @@ public class GlobalConfigurationTest {
         ConfigurationAccess.getConfig().overrideAnnotationEngine(null);
     }
 
-    private static class CustomAnnotationEngine implements AnnotationEngine {
+    private static class CustomAnnotationEngine implements org.mockito.plugins.AnnotationEngine {
         @Override
         public AutoCloseable process(Class<?> clazz, Object testInstance) {
             return new NoAction();
diff --git a/src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java b/src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java
index ab97bc5..44afe0b 100644
--- a/src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java
+++ b/src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java
@@ -12,7 +12,6 @@ import org.junit.Test;
 import org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker;
 import org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker;
 import org.mockito.internal.util.ConsoleMockitoLogger;
-import org.mockito.plugins.InstantiatorProvider;
 import org.mockito.plugins.InstantiatorProvider2;
 import org.mockito.plugins.MockMaker;
 import org.mockito.plugins.MockitoLogger;
@@ -23,7 +22,6 @@ public class DefaultMockitoPluginsTest extends TestBase {
     private DefaultMockitoPlugins plugins = new DefaultMockitoPlugins();
 
     @Test
-    @SuppressWarnings("deprecation")
     public void provides_plugins() throws Exception {
         assertEquals(
                 "org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker",
@@ -34,7 +32,6 @@ public class DefaultMockitoPluginsTest extends TestBase {
                 plugins.getDefaultPluginClass(PROXY_ALIAS));
         assertEquals(
                 ByteBuddyMockMaker.class, plugins.getDefaultPlugin(MockMaker.class).getClass());
-        assertNotNull(plugins.getDefaultPlugin(InstantiatorProvider.class));
         assertNotNull(plugins.getDefaultPlugin(InstantiatorProvider2.class));
         assertEquals(
                 ConsoleMockitoLogger.class,
diff --git a/src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java b/src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java
index dcfc7f6..4b70446 100644
--- a/src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java
+++ b/src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java
@@ -8,7 +8,7 @@ import static java.util.Arrays.asList;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.*;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;
 
 import java.io.File;
diff --git a/src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java b/src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java
index a95921b..273674f 100644
--- a/src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java
+++ b/src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java
@@ -8,7 +8,7 @@ import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.BDDMockito.willThrow;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
diff --git a/src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java b/src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java
index c0fed25..b109b7e 100644
--- a/src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java
+++ b/src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java
@@ -7,7 +7,7 @@ package org.mockito.internal.handler;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.fail;
 import static org.mockito.BDDMockito.given;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.mock;
 import static org.mockito.internal.progress.ThreadSafeMockingProgress.mockingProgress;
diff --git a/src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java b/src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java
index b79a1fc..285bfec 100644
--- a/src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java
+++ b/src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java
@@ -120,7 +120,7 @@ public class MatcherApplicationStrategyTest extends TestBase {
     }
 
     @Test
-    public void shouldAllowAnyVarargMatchEntireVararg() {
+    public void shouldAllowAnyMatchEntireVararg() {
         // given
         invocation = varargs("1", "2");
         matchers = asList(ANY);
@@ -135,7 +135,7 @@ public class MatcherApplicationStrategyTest extends TestBase {
     }
 
     @Test
-    public void shouldNotAllowAnyObjectWithMixedVarargs() {
+    public void shouldNotAllowAnyWithMixedVarargs() {
         // given
         invocation = mixedVarargs(1, "1", "2");
         matchers = asList(new Equals(1));
@@ -150,7 +150,7 @@ public class MatcherApplicationStrategyTest extends TestBase {
     }
 
     @Test
-    public void shouldAllowAnyObjectWithMixedVarargs() {
+    public void shouldAllowanyWithMixedVarargs() {
         // given
         invocation = mixedVarargs(1, "1", "2");
         matchers = asList(new Equals(1), ANY);
@@ -165,7 +165,7 @@ public class MatcherApplicationStrategyTest extends TestBase {
     }
 
     @Test
-    public void shouldAnyObjectVarargDealWithDifferentSizeOfArgs() {
+    public void shouldAnyDealWithDifferentSizeOfArgs() {
         // given
         invocation = mixedVarargs(1, "1", "2");
         matchers = asList(new Equals(1));
@@ -182,7 +182,7 @@ public class MatcherApplicationStrategyTest extends TestBase {
     }
 
     @Test
-    public void shouldMatchAnyVarargEvenIfOneOfTheArgsIsNull() {
+    public void shouldMatchAnyEvenIfOneOfTheArgsIsNull() {
         // given
         invocation = mixedVarargs(null, null, "2");
         matchers = asList(new Equals(null), ANY);
@@ -196,7 +196,7 @@ public class MatcherApplicationStrategyTest extends TestBase {
     }
 
     @Test
-    public void shouldMatchAnyVarargEvenIfMatcherIsDecorated() {
+    public void shouldMatchAnyEvenIfMatcherIsDecorated() {
         // given
         invocation = varargs("1", "2");
         matchers = asList(ANY);
@@ -210,7 +210,7 @@ public class MatcherApplicationStrategyTest extends TestBase {
     }
 
     @Test
-    public void shouldMatchAnyVarargEvenIfMatcherIsWrappedInHamcrestMatcher() {
+    public void shouldMatchAnyEvenIfMatcherIsWrappedInHamcrestMatcher() {
         // given
         invocation = varargs("1", "2");
         HamcrestArgumentMatcher argumentMatcher = new HamcrestArgumentMatcher(new IntMatcher());
diff --git a/src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java b/src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java
deleted file mode 100644
index 3e3fb8d..0000000
--- a/src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java
+++ /dev/null
@@ -1,82 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockito.internal.junit.util;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertEquals;
-
-import org.assertj.core.api.Assertions;
-import org.junit.Test;
-import org.junit.runner.Description;
-import org.junit.runner.notification.Failure;
-import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;
-import org.mockitoutil.TestBase;
-
-public class JUnitFailureHackerTest extends TestBase {
-
-    JUnitFailureHacker hacker = new JUnitFailureHacker();
-
-    @Test
-    public void shouldReplaceException() throws Exception {
-        // given
-        RuntimeException actualExc = new RuntimeException("foo");
-        Failure failure = new Failure(Description.EMPTY, actualExc);
-
-        // when
-        hacker.appendWarnings(failure, "unused stubbing");
-
-        // then
-        assertEquals(ExceptionIncludingMockitoWarnings.class, failure.getException().getClass());
-        assertEquals(actualExc, failure.getException().getCause());
-        Assertions.assertThat(actualExc.getStackTrace())
-                .isEqualTo(failure.getException().getStackTrace());
-    }
-
-    @Test
-    public void shouldAppendWarning() throws Exception {
-        Failure failure = new Failure(Description.EMPTY, new RuntimeException("foo"));
-
-        // when
-        hacker.appendWarnings(failure, "unused stubbing blah");
-
-        // then
-        assertThat(failure.getException()).hasMessageContaining("unused stubbing blah");
-    }
-
-    @Test
-    public void shouldNotAppendWhenNoWarnings() throws Exception {
-        RuntimeException ex = new RuntimeException("foo");
-        Failure failure = new Failure(Description.EMPTY, ex);
-
-        // when
-        hacker.appendWarnings(failure, "");
-
-        // then
-        assertEquals(ex, failure.getException());
-    }
-
-    @Test
-    public void shouldNotAppendWhenNullWarnings() throws Exception {
-        RuntimeException ex = new RuntimeException("foo");
-        Failure failure = new Failure(Description.EMPTY, ex);
-
-        // when
-        hacker.appendWarnings(failure, null);
-
-        // then
-        assertEquals(ex, failure.getException());
-    }
-
-    @Test
-    public void shouldPrintTheWarningSoICanSeeIt() throws Exception {
-        Failure failure = new Failure(Description.EMPTY, new RuntimeException("foo"));
-
-        // when
-        hacker.appendWarnings(failure, "unused stubbing blah");
-
-        // then
-        System.out.println(failure.getException());
-    }
-}
diff --git a/src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java b/src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java
index aecdcb4..47a8769 100644
--- a/src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java
+++ b/src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java
@@ -6,7 +6,7 @@ package org.mockito.internal.util.reflection;
 
 import static org.junit.Assert.*;
 import static org.mockito.BDDMockito.given;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.mock;
 
 import java.lang.reflect.Field;
diff --git a/src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java b/src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java
index e70d8aa..310218a 100644
--- a/src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java
+++ b/src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java
@@ -136,7 +136,7 @@ public class LenientCopyToolTest extends TestBase {
                 .doThrow(new IllegalStateException())
                 .doNothing()
                 .when(tool.accessor)
-                .set(any(Field.class), anyObject(), anyObject());
+                .set(any(Field.class), any(), any());
 
         // when
         tool.copyToMock(from, to);
diff --git a/src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java b/src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
index cb75496..9e63e8d 100644
--- a/src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
+++ b/src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
@@ -73,7 +73,7 @@ public class ParameterizedConstructorInstantiatorTest {
     public void should_instantiate_type_if_resolver_provide_matching_types() throws Exception {
         Observer observer = mock(Observer.class);
         Map map = mock(Map.class);
-        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>anyVararg()))
+        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>any()))
                 .willReturn(new Object[] {observer, map});
 
         new ParameterizedConstructorInstantiator(this, field("withMultipleConstructor"), resolver)
@@ -104,7 +104,7 @@ public class ParameterizedConstructorInstantiatorTest {
 
     @Test
     public void should_report_failure_if_constructor_throws_exception() throws Exception {
-        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>anyVararg()))
+        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>any()))
                 .willReturn(new Object[] {null});
 
         try {
@@ -120,7 +120,7 @@ public class ParameterizedConstructorInstantiatorTest {
     @Test
     public void should_instantiate_type_with_vararg_constructor() throws Exception {
         Observer[] vararg = new Observer[] {};
-        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>anyVararg()))
+        given(resolver.resolveTypeInstances(ArgumentMatchers.<Class<?>[]>any()))
                 .willReturn(new Object[] {"", vararg});
 
         new ParameterizedConstructorInstantiator(this, field("withVarargConstructor"), resolver)
diff --git a/src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java b/src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java
deleted file mode 100644
index a9b487c..0000000
--- a/src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockito.runners;
-
-import static org.junit.Assert.assertEquals;
-
-import org.junit.Before;
-import org.junit.Test;
-import org.junit.runner.Description;
-import org.junit.runner.manipulation.Filter;
-import org.junit.runner.manipulation.NoTestsRemainException;
-import org.junit.runner.notification.RunNotifier;
-import org.junit.runners.model.InitializationError;
-import org.mockito.internal.runners.InternalRunner;
-import org.mockito.internal.util.ConsoleMockitoLogger;
-import org.mockitoutil.TestBase;
-
-public class ConsoleSpammingMockitoJUnitRunnerTest extends TestBase {
-
-    private ConsoleSpammingMockitoJUnitRunner runner;
-
-    private MockitoLoggerStub loggerStub;
-
-    private RunNotifier notifier;
-
-    @Before
-    public void setup() throws InitializationError {
-        loggerStub = new MockitoLoggerStub();
-        notifier = new RunNotifier();
-    }
-
-    // TODO add sensible tests
-
-    @Test
-    public void shouldDelegateToGetDescription() throws Exception {
-        // given
-        final Description expectedDescription = Description.createSuiteDescription(this.getClass());
-        runner =
-                new ConsoleSpammingMockitoJUnitRunner(
-                        loggerStub,
-                        new InternalRunnerStub() {
-                            public Description getDescription() {
-                                return expectedDescription;
-                            }
-                        });
-
-        // when
-        Description description = runner.getDescription();
-
-        // then
-        assertEquals(expectedDescription, description);
-    }
-
-    public class MockitoLoggerStub extends ConsoleMockitoLogger {
-
-        StringBuilder loggedInfo = new StringBuilder();
-
-        public void log(Object what) {
-            super.log(what);
-            loggedInfo.append(what);
-        }
-
-        public String getLoggedInfo() {
-            return loggedInfo.toString();
-        }
-    }
-
-    static class InternalRunnerStub implements InternalRunner {
-
-        public Description getDescription() {
-            return null;
-        }
-
-        public void run(RunNotifier notifier) {}
-
-        public void filter(Filter filter) throws NoTestsRemainException {}
-    }
-}
diff --git a/src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java b/src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
index e3289f3..3ff4379 100644
--- a/src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
+++ b/src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java
@@ -7,7 +7,7 @@ package org.mockitousage;
 import static org.junit.Assert.assertEquals;
 import static org.mockito.BDDMockito.given;
 import static org.mockito.BDDMockito.willAnswer;
-import static org.mockito.Matchers.any;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.verify;
 
 import java.util.Date;
diff --git a/src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java b/src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java
deleted file mode 100644
index a02434c..0000000
--- a/src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockitousage.annotation;
-
-import static org.junit.Assert.*;
-
-import org.junit.After;
-import org.junit.Test;
-import org.mockito.InjectMocks;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-import org.mockito.configuration.AnnotationEngine;
-import org.mockito.configuration.DefaultMockitoConfiguration;
-import org.mockito.internal.configuration.ConfigurationAccess;
-import org.mockito.internal.configuration.IndependentAnnotationEngine;
-import org.mockitoutil.TestBase;
-
-public class DeprecatedAnnotationEngineApiTest extends TestBase {
-
-    @After
-    public void goBackToDefaultConfiguration() {
-        ConfigurationAccess.getConfig().overrideAnnotationEngine(null);
-    }
-
-    class SimpleTestCase {
-        @InjectMocks Tested tested = new Tested();
-        @Mock Dependency mock;
-    }
-
-    class Tested {
-        Dependency dependency;
-
-        public void setDependency(Dependency dependency) {
-            this.dependency = dependency;
-        }
-    }
-
-    class Dependency {}
-
-    @Test
-    public void shouldInjectMocksIfThereIsNoUserDefinedEngine() throws Exception {
-        // given
-        AnnotationEngine defaultEngine = new DefaultMockitoConfiguration().getAnnotationEngine();
-        ConfigurationAccess.getConfig().overrideAnnotationEngine(defaultEngine);
-        SimpleTestCase test = new SimpleTestCase();
-
-        // when
-        MockitoAnnotations.openMocks(test);
-
-        // then
-        assertNotNull(test.mock);
-        assertNotNull(test.tested.dependency);
-        assertSame(test.mock, test.tested.dependency);
-    }
-
-    @Test
-    public void shouldRespectUsersEngine() throws Exception {
-        // given
-        AnnotationEngine customizedEngine = new IndependentAnnotationEngine() {
-                    /**/
-                };
-        ConfigurationAccess.getConfig().overrideAnnotationEngine(customizedEngine);
-        SimpleTestCase test = new SimpleTestCase();
-
-        // when
-        MockitoAnnotations.openMocks(test);
-
-        // then
-        assertNotNull(test.mock);
-        assertNull(test.tested.dependency);
-    }
-}
diff --git a/src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java b/src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java
index 749beeb..736de4e 100644
--- a/src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java
+++ b/src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java
@@ -300,7 +300,7 @@ public class MocksSerializationForAnnotationTest extends TestBase implements Ser
     @Test
     public void should_serialize_real_partial_mock() throws Exception {
         // given
-        when(anyMock.matches(anyObject())).thenCallRealMethod();
+        when(anyMock.matches(any())).thenCallRealMethod();
 
         // when
         ByteArrayOutputStream serialized = serializeMock(anyMock);
diff --git a/src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java b/src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java
index f1a4069..0bd6d5b 100644
--- a/src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java
+++ b/src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java
@@ -312,7 +312,7 @@ public class MocksSerializationTest extends TestBase implements Serializable {
     public void should_serialize_real_partial_mock() throws Exception {
         // given
         Any mock = mock(Any.class, withSettings().serializable());
-        when(mock.matches(anyObject())).thenCallRealMethod();
+        when(mock.matches(any())).thenCallRealMethod();
 
         // when
         ByteArrayOutputStream serialized = serializeMock(mock);
diff --git a/src/test/java/org/mockitousage/basicapi/ResetTest.java b/src/test/java/org/mockitousage/basicapi/ResetTest.java
index 8f4d723..95f4730 100644
--- a/src/test/java/org/mockitousage/basicapi/ResetTest.java
+++ b/src/test/java/org/mockitousage/basicapi/ResetTest.java
@@ -57,7 +57,7 @@ public class ResetTest extends TestBase {
     public void shouldRemoveAllInteractions() throws Exception {
         mock.simpleMethod(1);
         reset(mock);
-        verifyZeroInteractions(mock);
+        verifyNoInteractions(mock);
     }
 
     @Test
@@ -76,14 +76,6 @@ public class ResetTest extends TestBase {
     }
 
     @Test
-    public void shouldStubbingNotBeTreatedAsInteraction() {
-        when(mock.simpleMethod("one")).thenThrow(new RuntimeException());
-        doThrow(new RuntimeException()).when(mock).simpleMethod("two");
-        reset(mock);
-        verifyZeroInteractions(mock);
-    }
-
-    @Test
     public void shouldStubbingNotBeTreatedAsInteractionVerifyNoInteractions() {
         when(mock.simpleMethod("one")).thenThrow(new RuntimeException());
         doThrow(new RuntimeException()).when(mock).simpleMethod("two");
diff --git a/src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java b/src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
index 4e9fc59..551c637 100644
--- a/src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
+++ b/src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java
@@ -121,18 +121,18 @@ public class UsingVarargsTest extends TestBase {
     }
 
     @Test
-    public void shouldVerifyWithAnyObject() {
+    public void shouldVerifyWithAny() {
         Foo foo = Mockito.mock(Foo.class);
         foo.varArgs("");
-        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());
-        Mockito.verify(foo).varArgs((String) Mockito.anyObject());
+        Mockito.verify(foo).varArgs((String[]) Mockito.any());
+        Mockito.verify(foo).varArgs((String) Mockito.any());
     }
 
     @Test
     public void shouldVerifyWithNullVarArgArray() {
         Foo foo = Mockito.mock(Foo.class);
         foo.varArgs((String[]) null);
-        Mockito.verify(foo).varArgs((String[]) Mockito.anyObject());
+        Mockito.verify(foo).varArgs((String[]) Mockito.any());
         Mockito.verify(foo).varArgs((String[]) null);
     }
 
@@ -175,7 +175,7 @@ public class UsingVarargsTest extends TestBase {
     // See bug #157
     public void shouldMatchEasilyEmptyVararg() throws Exception {
         // when
-        when(mock.foo(anyVararg())).thenReturn(-1);
+        when(mock.foo(any())).thenReturn(-1);
 
         // then
         assertEquals(-1, mock.foo());
diff --git a/src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java b/src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
index c426e91..ac46998 100644
--- a/src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
+++ b/src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java
@@ -20,7 +20,7 @@ public class ActualInvocationHasNullArgumentNPEBugTest extends TestBase {
     public void shouldAllowPassingNullArgument() {
         // given
         Fun mockFun = mock(Fun.class);
-        when(mockFun.doFun((String) anyObject())).thenReturn("value");
+        when(mockFun.doFun((String) any())).thenReturn("value");
 
         // when
         mockFun.doFun(null);
diff --git a/src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java b/src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
index e9b9c11..060aa04 100644
--- a/src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
+++ b/src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
@@ -5,7 +5,7 @@
 package org.mockitousage.bugs;
 
 import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 
 import org.junit.Test;
 import org.mockito.exceptions.misusing.WrongTypeOfReturnValue;
@@ -29,7 +29,7 @@ public class ClassCastExOnVerifyZeroInteractionsTest {
                             }
                         });
         test.m1();
-        verifyZeroInteractions(test);
+        verifyNoInteractions(test);
     }
 
     @Test(expected = WrongTypeOfReturnValue.class)
diff --git a/src/test/java/org/mockitousage/bugs/CompareMatcherTest.java b/src/test/java/org/mockitousage/bugs/CompareMatcherTest.java
index 2401995..dd6db3f 100644
--- a/src/test/java/org/mockitousage/bugs/CompareMatcherTest.java
+++ b/src/test/java/org/mockitousage/bugs/CompareMatcherTest.java
@@ -6,8 +6,8 @@ package org.mockitousage.bugs;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.AdditionalMatchers.leq;
-import static org.mockito.Matchers.argThat;
-import static org.mockito.Matchers.startsWith;
+import static org.mockito.ArgumentMatchers.argThat;
+import static org.mockito.ArgumentMatchers.startsWith;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
diff --git a/src/test/java/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java b/src/test/java/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java
index 3d8db84..4885d24 100644
--- a/src/test/java/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java
+++ b/src/test/java/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java
@@ -6,7 +6,7 @@ package org.mockitousage.bugs;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.when;
 
diff --git a/src/test/java/org/mockitousage/bugs/NPEWithCertainMatchersTest.java b/src/test/java/org/mockitousage/bugs/NPEWithCertainMatchersTest.java
index 8864de8..108f5f1 100644
--- a/src/test/java/org/mockitousage/bugs/NPEWithCertainMatchersTest.java
+++ b/src/test/java/org/mockitousage/bugs/NPEWithCertainMatchersTest.java
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.bugs;
 
-import static org.mockito.Matchers.*;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 
diff --git a/src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java b/src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
deleted file mode 100644
index c9112fa..0000000
--- a/src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
+++ /dev/null
@@ -1,52 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockitousage.bugs.varargs;
-
-import static org.mockito.Matchers.*;
-import static org.mockito.Mockito.times;
-import static org.mockito.Mockito.verify;
-
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockitoutil.TestBase;
-
-public class VarargsAndAnyObjectPicksUpExtraInvocationsTest extends TestBase {
-    public interface TableBuilder {
-        void newRow(String trAttributes, String... cells);
-    }
-
-    @Mock TableBuilder table;
-
-    @Test
-    public void shouldVerifyCorrectlyWithAnyVarargs() {
-        // when
-        table.newRow("qux", "foo", "bar", "baz");
-        table.newRow("abc", "def");
-
-        // then
-        verify(table, times(2)).newRow(anyString(), (String[]) anyVararg());
-    }
-
-    @Test
-    public void shouldVerifyCorrectlyNumberOfInvocationsUsingAnyVarargAndEqualArgument() {
-        // when
-        table.newRow("x", "foo", "bar", "baz");
-        table.newRow("x", "def");
-
-        // then
-        verify(table, times(2)).newRow(eq("x"), (String[]) anyVararg());
-    }
-
-    @Test
-    public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs() {
-        // when
-        table.newRow("qux", "foo", "bar", "baz");
-        table.newRow("abc", "def");
-
-        // then
-        verify(table).newRow(anyString(), eq("foo"), anyString(), anyString());
-        verify(table).newRow(anyString(), anyString());
-    }
-}
diff --git a/src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyPicksUpExtraInvocationsTest.java b/src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyPicksUpExtraInvocationsTest.java
new file mode 100644
index 0000000..f6f4417
--- /dev/null
+++ b/src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyPicksUpExtraInvocationsTest.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
+package org.mockitousage.bugs.varargs;
+
+import static org.mockito.ArgumentMatchers.*;
+import static org.mockito.Mockito.times;
+import static org.mockito.Mockito.verify;
+
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockitoutil.TestBase;
+
+public class VarargsAndAnyPicksUpExtraInvocationsTest extends TestBase {
+    public interface TableBuilder {
+        void newRow(String trAttributes, String... cells);
+    }
+
+    @Mock TableBuilder table;
+
+    @Test
+    public void shouldVerifyCorrectlyWithAny() {
+        // when
+        table.newRow("qux", "foo", "bar", "baz");
+        table.newRow("abc", "def");
+
+        // then
+        verify(table, times(2)).newRow(anyString(), (String[]) any());
+    }
+
+    @Test
+    public void shouldVerifyCorrectlyNumberOfInvocationsUsingAnyAndEqualArgument() {
+        // when
+        table.newRow("x", "foo", "bar", "baz");
+        table.newRow("x", "def");
+
+        // then
+        verify(table, times(2)).newRow(eq("x"), (String[]) any());
+    }
+
+    @Test
+    public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs() {
+        // when
+        table.newRow("qux", "foo", "bar", "baz");
+        table.newRow("abc", "def");
+
+        // then
+        verify(table).newRow(anyString(), eq("foo"), anyString(), anyString());
+        verify(table).newRow(anyString(), anyString());
+    }
+}
diff --git a/src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java b/src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
deleted file mode 100644
index a77782b..0000000
--- a/src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
+++ /dev/null
@@ -1,54 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockitousage.bugs.varargs;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.anyObject;
-import static org.mockito.Mockito.anyString;
-import static org.mockito.Mockito.anyVararg;
-import static org.mockito.Mockito.eq;
-import static org.mockito.Mockito.never;
-import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.when;
-
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockitoutil.TestBase;
-
-// see issue 62
-public class VarargsNotPlayingWithAnyObjectTest extends TestBase {
-
-    interface VarargMethod {
-        Object run(String... args);
-    }
-
-    @Mock VarargMethod mock;
-
-    @Test
-    public void shouldMatchAnyVararg() {
-        mock.run("a", "b");
-
-        verify(mock).run(anyString(), anyString());
-        verify(mock).run((String) anyObject(), (String) anyObject());
-
-        verify(mock).run((String[]) anyVararg());
-
-        verify(mock, never()).run();
-        verify(mock, never()).run(anyString(), eq("f"));
-    }
-
-    @Test
-    public void shouldAllowUsingAnyObjectForVarArgs() {
-        mock.run("a", "b");
-        verify(mock).run((String[]) anyObject());
-    }
-
-    @Test
-    public void shouldStubUsingAnyVarargs() {
-        when(mock.run((String[]) anyVararg())).thenReturn("foo");
-
-        assertEquals("foo", mock.run("a", "b"));
-    }
-}
diff --git a/src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyTest.java b/src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyTest.java
new file mode 100644
index 0000000..6e11a6a
--- /dev/null
+++ b/src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyTest.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
+package org.mockitousage.bugs.varargs;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.any;
+import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.eq;
+import static org.mockito.Mockito.never;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockitoutil.TestBase;
+
+// see issue 62
+public class VarargsNotPlayingWithAnyTest extends TestBase {
+
+    interface VarargMethod {
+        Object run(String... args);
+    }
+
+    @Mock VarargMethod mock;
+
+    @Test
+    public void shouldMatchAny() {
+        mock.run("a", "b");
+
+        verify(mock).run(anyString(), anyString());
+        verify(mock).run((String) any(), (String) any());
+
+        verify(mock).run((String[]) any());
+
+        verify(mock, never()).run();
+        verify(mock, never()).run(anyString(), eq("f"));
+    }
+
+    @Test
+    public void shouldAllowUsinganyForVarArgs() {
+        mock.run("a", "b");
+        verify(mock).run((String[]) any());
+    }
+
+    @Test
+    public void shouldStubUsingAny() {
+        when(mock.run((String[]) any())).thenReturn("foo");
+
+        assertEquals("foo", mock.run("a", "b"));
+    }
+}
diff --git a/src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java b/src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java
deleted file mode 100644
index b487063..0000000
--- a/src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockitousage.configuration;
-
-import static java.lang.annotation.ElementType.FIELD;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.verify;
-
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.Set;
-
-import org.junit.Test;
-import org.mockito.Mockito;
-import org.mockito.configuration.MockitoConfiguration;
-import org.mockito.internal.configuration.InjectingAnnotationEngine;
-import org.mockitousage.IMethods;
-import org.mockitoutil.TestBase;
-
-/**
- * @see MockitoConfiguration#getAnnotationEngine() for the custom smartmock injection engine
- */
-public class CustomizedAnnotationForSmartMockTest extends TestBase {
-
-    @SmartMock IMethods smartMock;
-
-    @Test
-    public void shouldUseCustomAnnotation() {
-        assertEquals(
-                "SmartMock should return empty String by default", "", smartMock.simpleMethod(1));
-        verify(smartMock).simpleMethod(1);
-    }
-
-    @Target({FIELD})
-    @Retention(RetentionPolicy.RUNTIME)
-    public @interface SmartMock {}
-
-    public static class CustomInjectingAnnotationEngine extends InjectingAnnotationEngine {
-        @Override
-        protected void onInjection(
-                Object testClassInstance,
-                Class<?> clazz,
-                Set<Field> mockDependentFields,
-                Set<Object> mocks) {
-            for (Field field : clazz.getDeclaredFields()) {
-                if (field.isAnnotationPresent(SmartMock.class)) {
-                    field.setAccessible(true);
-                    try {
-                        field.set(
-                                Modifier.isStatic(field.getModifiers()) ? null : testClassInstance,
-                                Mockito.mock(field.getType(), Mockito.RETURNS_SMART_NULLS));
-                    } catch (Exception exception) {
-                        throw new AssertionError(exception.getMessage());
-                    }
-                }
-            }
-        }
-    }
-}
diff --git a/src/test/java/org/mockitousage/customization/BDDMockitoTest.java b/src/test/java/org/mockitousage/customization/BDDMockitoTest.java
index 89ed109..db29117 100644
--- a/src/test/java/org/mockitousage/customization/BDDMockitoTest.java
+++ b/src/test/java/org/mockitousage/customization/BDDMockitoTest.java
@@ -263,27 +263,11 @@ public class BDDMockitoTest extends TestBase {
     }
 
     @Test
-    public void should_validate_that_mock_did_not_have_any_interactions() {
-        then(mock).shouldHaveZeroInteractions();
-    }
-
-    @Test
     public void should_validate_that_mock_had_no_interactions() {
         then(mock).shouldHaveNoInteractions();
     }
 
     @Test
-    public void should_fail_when_mock_had_unwanted_interactions() {
-        mock.booleanObjectReturningMethod();
-
-        try {
-            then(mock).shouldHaveZeroInteractions();
-            fail("should have reported this interaction wasn't wanted");
-        } catch (NoInteractionsWanted expected) {
-        }
-    }
-
-    @Test
     public void should_fail_when_mock_had_more_interactions_than_expected() {
         mock.booleanObjectReturningMethod();
         mock.byteObjectReturningMethod();
@@ -336,7 +320,7 @@ public class BDDMockitoTest extends TestBase {
         person.ride(bike);
 
         then(person).should(times(2)).ride(bike);
-        then(police).shouldHaveZeroInteractions();
+        then(police).shouldHaveNoInteractions();
     }
 
     @Test
diff --git a/src/test/java/org/mockitousage/debugging/NewMockito.java b/src/test/java/org/mockitousage/debugging/NewMockito.java
deleted file mode 100644
index 07cb625..0000000
--- a/src/test/java/org/mockitousage/debugging/NewMockito.java
+++ /dev/null
@@ -1,17 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockitousage.debugging;
-
-import org.mockito.Mockito;
-import org.mockito.MockitoDebugger;
-import org.mockito.internal.debugging.MockitoDebuggerImpl;
-
-// TODO get rid when debug() finally is out
-public class NewMockito extends Mockito {
-
-    public static MockitoDebugger debug() {
-        return new MockitoDebuggerImpl();
-    }
-}
diff --git a/src/test/java/org/mockitousage/debugging/StubbingLookupListenerCallbackTest.java b/src/test/java/org/mockitousage/debugging/StubbingLookupListenerCallbackTest.java
index 5a57833..aa22e53 100644
--- a/src/test/java/org/mockitousage/debugging/StubbingLookupListenerCallbackTest.java
+++ b/src/test/java/org/mockitousage/debugging/StubbingLookupListenerCallbackTest.java
@@ -94,7 +94,7 @@ public class StubbingLookupListenerCallbackTest extends TestBase {
         doReturn("java").when(mock).giveMeSomeString("coffee");
 
         // then
-        verifyZeroInteractions(listener);
+        verifyNoInteractions(listener);
     }
 
     @Test
@@ -170,7 +170,7 @@ public class StubbingLookupListenerCallbackTest extends TestBase {
         mock.doSomething("foo");
 
         // then
-        verifyZeroInteractions(listener, listener2);
+        verifyNoInteractions(listener, listener2);
     }
 
     @Test
diff --git a/src/test/java/org/mockitousage/examples/use/ExampleTest.java b/src/test/java/org/mockitousage/examples/use/ExampleTest.java
index ec2f407..4a068e3 100644
--- a/src/test/java/org/mockitousage/examples/use/ExampleTest.java
+++ b/src/test/java/org/mockitousage/examples/use/ExampleTest.java
@@ -89,7 +89,7 @@ public class ExampleTest {
 
         InOrder inOrder = inOrder(mockDatabase, mockCalculator);
 
-        inOrder.verify(mockCalculator).countNumberOfRelatedArticles((Article) anyObject());
-        inOrder.verify(mockDatabase, atLeastOnce()).save((Article) anyObject());
+        inOrder.verify(mockCalculator).countNumberOfRelatedArticles(any());
+        inOrder.verify(mockDatabase, atLeastOnce()).save(any());
     }
 }
diff --git a/src/test/java/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java b/src/test/java/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java
deleted file mode 100644
index d6cfd6e..0000000
--- a/src/test/java/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java
+++ /dev/null
@@ -1,90 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockitousage.junitrunner;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.*;
-
-import junit.framework.TestCase;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.junit.runner.JUnitCore;
-import org.junit.runner.Result;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.internal.exceptions.ExceptionIncludingMockitoWarnings;
-import org.mockito.runners.VerboseMockitoJUnitRunner;
-import org.mockitousage.IMethods;
-import org.mockitoutil.TestBase;
-
-// @RunWith(ConsoleSpammingMockitoJUnitRunner.class)
-@RunWith(VerboseMockitoJUnitRunner.class)
-// TODO
-public class VerboseMockitoRunnerTest extends TestBase {
-
-    @Mock private IMethods mock;
-
-    public static class NoWarnings {
-
-        @Test
-        @Ignore
-        public void test() {
-            IMethods mock = mock(IMethods.class);
-            mock.simpleMethod(1);
-            mock.otherMethod();
-
-            verify(mock).simpleMethod(1);
-            throw new RuntimeException("boo");
-        }
-    }
-
-    public static class ContainsWarnings extends TestCase {
-
-        public ContainsWarnings() {
-            super("test");
-        }
-
-        public void testIgnored() {}
-
-        public void _test() {
-            IMethods mock = mock(IMethods.class);
-
-            // some stubbing
-            when(mock.simpleMethod(1)).thenReturn("foo");
-            when(mock.otherMethod()).thenReturn("foo");
-            when(mock.booleanObjectReturningMethod()).thenReturn(false);
-
-            // stub called with different args:
-            String ret = mock.simpleMethod(2);
-
-            // assertion fails due to stub called with different args
-            assertEquals("foo", ret);
-        }
-    }
-
-    public void cleanStackTraces() {
-        makeStackTracesClean();
-    }
-
-    @Test
-    @Ignore
-    public void shouldContainWarnings() throws Exception {
-        // when
-        Result result = new JUnitCore().run(new ContainsWarnings());
-        // then
-        assertEquals(1, result.getFailures().size());
-        Throwable exception = result.getFailures().get(0).getException();
-        assertTrue(exception instanceof ExceptionIncludingMockitoWarnings);
-    }
-
-    @Test
-    @Ignore
-    public void shouldNotContainWarnings() throws Exception {
-        Result result = new JUnitCore().run(NoWarnings.class);
-        assertEquals(1, result.getFailures().size());
-        assertEquals("boo", result.getFailures().get(0).getException().getMessage());
-    }
-}
diff --git a/src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java b/src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
index 4701870..2f93ea1 100644
--- a/src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
+++ b/src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
@@ -5,7 +5,7 @@
 package org.mockitousage.matchers;
 
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.*;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.when;
 
 import org.junit.Before;
@@ -32,29 +32,6 @@ public class AnyXMatchersAcceptNullsTest extends TestBase {
     }
 
     @Test
-    public void shouldAcceptNullsInAnyObjectMatcher() {
-        when(mock.oneArg((Object) anyObject())).thenReturn("matched");
-
-        assertEquals(null, mock.forObject(null));
-    }
-
-    @Test
-    public void shouldNotAcceptNullInAnyXMatchers() {
-        when(mock.oneArg(anyString())).thenReturn("0");
-        when(mock.forList(anyListOf(String.class))).thenReturn("1");
-        when(mock.forMap(anyMapOf(String.class, String.class))).thenReturn("2");
-        when(mock.forCollection(anyCollectionOf(String.class))).thenReturn("3");
-        when(mock.forSet(anySetOf(String.class))).thenReturn("4");
-
-        assertEquals(null, mock.oneArg((Object) null));
-        assertEquals(null, mock.oneArg((String) null));
-        assertEquals(null, mock.forList(null));
-        assertEquals(null, mock.forMap(null));
-        assertEquals(null, mock.forCollection(null));
-        assertEquals(null, mock.forSet(null));
-    }
-
-    @Test
     public void shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers() {
         when(mock.forInteger(anyInt())).thenReturn("0");
         when(mock.forCharacter(anyChar())).thenReturn("1");
diff --git a/src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java b/src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
index 540f36a..66e6a20 100644
--- a/src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
+++ b/src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java
@@ -5,7 +5,7 @@
 package org.mockitousage.matchers;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.argThat;
+import static org.mockito.ArgumentMatchers.argThat;
 import static org.mockito.Mockito.verify;
 
 import org.junit.Test;
diff --git a/src/test/java/org/mockitousage/matchers/CustomMatchersTest.java b/src/test/java/org/mockitousage/matchers/CustomMatchersTest.java
index ddcb32a..c8dc40d 100644
--- a/src/test/java/org/mockitousage/matchers/CustomMatchersTest.java
+++ b/src/test/java/org/mockitousage/matchers/CustomMatchersTest.java
@@ -7,7 +7,7 @@ package org.mockitousage.matchers;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.*;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
diff --git a/src/test/java/org/mockitousage/matchers/GenericMatchersTest.java b/src/test/java/org/mockitousage/matchers/GenericMatchersTest.java
index 83a53bd..c779c5b 100644
--- a/src/test/java/org/mockitousage/matchers/GenericMatchersTest.java
+++ b/src/test/java/org/mockitousage/matchers/GenericMatchersTest.java
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.matchers;
 
-import static org.mockito.Matchers.anyObject;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.when;
 
 import java.util.Date;
@@ -29,7 +29,7 @@ public class GenericMatchersTest extends TestBase {
     @Test
     public void shouldCompile() {
         when(sorter.convertDate(new Date())).thenReturn("one");
-        when(sorter.convertDate((Date) anyObject())).thenReturn("two");
+        when(sorter.convertDate((Date) any())).thenReturn("two");
 
         // following requires warning suppression but allows setting anyList()
         when(sorter.sort(ArgumentMatchers.<String>anyList())).thenReturn(null);
diff --git a/src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java b/src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
index 338c072..ecd77ca 100644
--- a/src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
+++ b/src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java
@@ -7,7 +7,7 @@ package org.mockitousage.matchers;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.when;
 
@@ -41,8 +41,8 @@ public class InvalidUseOfMatchersTest {
     @Test
     public void should_detect_stupid_use_of_matchers_when_verifying() {
         mock.oneArg(true);
-        eq("that's the stupid way");
-        eq("of using matchers");
+        Object ignored = eq("that's the stupid way");
+        ignored = eq("of using matchers");
         try {
             Mockito.verify(mock).oneArg(true);
             fail();
diff --git a/src/test/java/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java b/src/test/java/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java
index bea1960..b90b547 100644
--- a/src/test/java/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java
+++ b/src/test/java/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java
@@ -4,8 +4,8 @@
  */
 package org.mockitousage.matchers;
 
-import static org.mockito.Matchers.anyBoolean;
-import static org.mockito.Matchers.anyString;
+import static org.mockito.ArgumentMatchers.anyBoolean;
+import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.verify;
 
 import org.junit.Ignore;
@@ -31,7 +31,7 @@ public class MatchersMixedWithRawArgumentsTest extends TestBase {
     // float: max-1
 
     // 1. how objenesis deal with primitive arrays (like byte[])?
-    // 2. Analisys of all matchers used by R2 project finished before anyObject() and so far proves
+    // 2. Analisys of all matchers used by R2 project finished before any() and so far proves
     // it's a good idea.
 
     @Ignore("prototyping new feature that allows to avoid eq() matchers when raw args passed")
diff --git a/src/test/java/org/mockitousage/matchers/MatchersTest.java b/src/test/java/org/mockitousage/matchers/MatchersTest.java
index 606cc76..c266862 100644
--- a/src/test/java/org/mockitousage/matchers/MatchersTest.java
+++ b/src/test/java/org/mockitousage/matchers/MatchersTest.java
@@ -20,7 +20,7 @@ import static org.mockito.AdditionalMatchers.lt;
 import static org.mockito.AdditionalMatchers.not;
 import static org.mockito.AdditionalMatchers.or;
 import static org.mockito.ArgumentMatchers.nullable;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyBoolean;
 import static org.mockito.Mockito.anyByte;
@@ -29,7 +29,6 @@ import static org.mockito.Mockito.anyDouble;
 import static org.mockito.Mockito.anyFloat;
 import static org.mockito.Mockito.anyInt;
 import static org.mockito.Mockito.anyLong;
-import static org.mockito.Mockito.anyObject;
 import static org.mockito.Mockito.anyShort;
 import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.contains;
@@ -48,12 +47,12 @@ import static org.mockito.Mockito.when;
 
 import java.math.BigDecimal;
 import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
 import java.util.RandomAccess;
 import java.util.regex.Pattern;
 
 import org.junit.Test;
+import org.mockito.ArgumentMatchers;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
@@ -284,9 +283,7 @@ public class MatchersTest extends TestBase {
         when(mock.oneArg(anyInt())).thenReturn("5");
         when(mock.oneArg(anyLong())).thenReturn("6");
         when(mock.oneArg(anyShort())).thenReturn("7");
-        when(mock.oneArg((String) anyObject())).thenReturn("8");
-        when(mock.oneArg(Mockito.<Object>anyObject())).thenReturn("9");
-        when(mock.oneArg(any(RandomAccess.class))).thenReturn("10");
+        when(mock.oneArg(any(RandomAccess.class))).thenReturn("8");
 
         assertEquals("0", mock.oneArg(true));
         assertEquals("0", mock.oneArg(false));
@@ -298,12 +295,8 @@ public class MatchersTest extends TestBase {
         assertEquals("5", mock.oneArg(1));
         assertEquals("6", mock.oneArg(1L));
         assertEquals("7", mock.oneArg((short) 1));
-        assertEquals("8", mock.oneArg("Test"));
 
-        assertEquals("9", mock.oneArg(new Object()));
-        assertEquals("9", mock.oneArg(new HashMap()));
-
-        assertEquals("10", mock.oneArg(new ArrayList()));
+        assertEquals("8", mock.oneArg(new ArrayList()));
     }
 
     @Test
@@ -455,14 +448,14 @@ public class MatchersTest extends TestBase {
 
     @Test
     public void null_matcher_for_primitive_wrappers() {
-        when(mock.forBoolean(isNull(Boolean.class))).thenReturn("ok");
-        when(mock.forInteger(isNull(Integer.class))).thenReturn("ok");
-        when(mock.forLong(isNull(Long.class))).thenReturn("ok");
-        when(mock.forByte(isNull(Byte.class))).thenReturn("ok");
-        when(mock.forShort(isNull(Short.class))).thenReturn("ok");
-        when(mock.forCharacter(isNull(Character.class))).thenReturn("ok");
-        when(mock.forDouble(isNull(Double.class))).thenReturn("ok");
-        when(mock.forFloat(isNull(Float.class))).thenReturn("ok");
+        when(mock.forBoolean(ArgumentMatchers.<Boolean>isNull())).thenReturn("ok");
+        when(mock.forInteger(ArgumentMatchers.<Integer>isNull())).thenReturn("ok");
+        when(mock.forLong(ArgumentMatchers.<Long>isNull())).thenReturn("ok");
+        when(mock.forByte(ArgumentMatchers.<Byte>isNull())).thenReturn("ok");
+        when(mock.forShort(ArgumentMatchers.<Short>isNull())).thenReturn("ok");
+        when(mock.forCharacter(ArgumentMatchers.<Character>isNull())).thenReturn("ok");
+        when(mock.forDouble(ArgumentMatchers.<Double>isNull())).thenReturn("ok");
+        when(mock.forFloat(ArgumentMatchers.<Float>isNull())).thenReturn("ok");
 
         assertEquals("ok", mock.forBoolean(null));
         assertEquals("ok", mock.forInteger(null));
diff --git a/src/test/java/org/mockitousage/matchers/MoreMatchersTest.java b/src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
index 825902f..c68d548 100644
--- a/src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
+++ b/src/test/java/org/mockitousage/matchers/MoreMatchersTest.java
@@ -6,7 +6,7 @@ package org.mockitousage.matchers;
 
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.junit.Assert.assertEquals;
-import static org.mockito.Matchers.*;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -15,7 +15,6 @@ import java.util.*;
 import org.assertj.core.api.ThrowableAssert;
 import org.junit.Test;
 import org.mockito.Mock;
-import org.mockito.Mockito;
 import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
 import org.mockitousage.IMethods;
 import org.mockitoutil.TestBase;
@@ -32,14 +31,6 @@ public class MoreMatchersTest extends TestBase {
     }
 
     @Test
-    public void any_should_be_actual_alias_to_anyObject() {
-        mock.simpleMethod((Object) null);
-
-        verify(mock).simpleMethod(Mockito.<Object>any());
-        verify(mock).simpleMethod(Mockito.<Object>anyObject());
-    }
-
-    @Test
     public void any_class_should_be_actual_alias_to_isA() {
         mock.simpleMethod(new ArrayList());
 
@@ -66,65 +57,4 @@ public class MoreMatchersTest extends TestBase {
                         })
                 .isInstanceOf(ArgumentsAreDifferent.class);
     }
-
-    @Test
-    public void should_help_out_with_unnecessary_casting_of_lists() {
-        // Below yields compiler warning:
-        // when(mock.listArgMethod(anyList())).thenReturn("list");
-        when(mock.listArgMethod(anyListOf(String.class))).thenReturn("list");
-
-        assertEquals("list", mock.listArgMethod(new LinkedList<String>()));
-        assertEquals("list", mock.listArgMethod(Collections.<String>emptyList()));
-    }
-
-    @Test
-    public void should_help_out_with_unnecessary_casting_of_sets() {
-        // Below yields compiler warning:
-        // when(mock.setArgMethod(anySet())).thenReturn("set");
-        when(mock.setArgMethod(anySetOf(String.class))).thenReturn("set");
-
-        assertEquals("set", mock.setArgMethod(new HashSet<String>()));
-        assertEquals("set", mock.setArgMethod(Collections.<String>emptySet()));
-    }
-
-    @Test
-    public void should_help_out_with_unnecessary_casting_of_maps() {
-        // Below yields compiler warning:
-        // when(mock.setArgMethod(anySet())).thenReturn("set");
-        when(mock.forMap(anyMapOf(String.class, String.class))).thenReturn("map");
-
-        assertEquals("map", mock.forMap(new HashMap<String, String>()));
-        assertEquals("map", mock.forMap(Collections.<String, String>emptyMap()));
-    }
-
-    @Test
-    public void should_help_out_with_unnecessary_casting_of_collections() {
-        // Below yields compiler warning:
-        // when(mock.setArgMethod(anySet())).thenReturn("set");
-        when(mock.collectionArgMethod(anyCollectionOf(String.class))).thenReturn("collection");
-
-        assertEquals("collection", mock.collectionArgMethod(new ArrayList<String>()));
-        assertEquals("collection", mock.collectionArgMethod(Collections.<String>emptyList()));
-    }
-
-    @Test
-    public void should_help_out_with_unnecessary_casting_of_iterables() {
-        // Below yields compiler warning:
-        // when(mock.setArgMethod(anySet())).thenReturn("set");
-        when(mock.iterableArgMethod(anyIterableOf(String.class))).thenReturn("iterable");
-
-        assertEquals("iterable", mock.iterableArgMethod(new ArrayList<String>()));
-        assertEquals("iterable", mock.iterableArgMethod(Collections.<String>emptyList()));
-    }
-
-    @Test
-    public void should_help_out_with_unnecessary_casting_of_nullity_checks() {
-        when(mock.objectArgMethod(isNull(LinkedList.class))).thenReturn("string");
-        when(mock.objectArgMethod(notNull(LinkedList.class))).thenReturn("string");
-        when(mock.objectArgMethod(isNotNull(LinkedList.class))).thenReturn("string");
-
-        assertEquals("string", mock.objectArgMethod(null));
-        assertEquals("string", mock.objectArgMethod("foo"));
-        assertEquals("string", mock.objectArgMethod("foo"));
-    }
 }
diff --git a/src/test/java/org/mockitousage/matchers/NewMatchersTest.java b/src/test/java/org/mockitousage/matchers/NewMatchersTest.java
index 6b26311..69ff3c4 100644
--- a/src/test/java/org/mockitousage/matchers/NewMatchersTest.java
+++ b/src/test/java/org/mockitousage/matchers/NewMatchersTest.java
@@ -29,51 +29,51 @@ public class NewMatchersTest extends TestBase {
 
     @Test
     public void shouldAllowAnyList() {
-        when(mock.forList(anyListOf(String.class))).thenReturn("matched");
+        when(mock.forList(anyList())).thenReturn("matched");
 
         assertEquals("matched", mock.forList(Arrays.asList("x", "y")));
         assertEquals(null, mock.forList(null));
 
-        verify(mock, times(1)).forList(anyListOf(String.class));
+        verify(mock, times(1)).forList(anyList());
     }
 
     @Test
     public void shouldAllowAnyCollection() {
-        when(mock.forCollection(anyCollectionOf(String.class))).thenReturn("matched");
+        when(mock.forCollection(anyCollection())).thenReturn("matched");
 
         assertEquals("matched", mock.forCollection(Arrays.asList("x", "y")));
         assertEquals(null, mock.forCollection(null));
 
-        verify(mock, times(1)).forCollection(anyCollectionOf(String.class));
+        verify(mock, times(1)).forCollection(anyCollection());
     }
 
     @Test
     public void shouldAllowAnyMap() {
-        when(mock.forMap(anyMapOf(String.class, String.class))).thenReturn("matched");
+        when(mock.forMap(anyMap())).thenReturn("matched");
 
         assertEquals("matched", mock.forMap(new HashMap<String, String>()));
         assertEquals(null, mock.forMap(null));
 
-        verify(mock, times(1)).forMap(anyMapOf(String.class, String.class));
+        verify(mock, times(1)).forMap(anyMap());
     }
 
     @Test
     public void shouldAllowAnySet() {
-        when(mock.forSet(anySetOf(String.class))).thenReturn("matched");
+        when(mock.forSet(anySet())).thenReturn("matched");
 
         assertEquals("matched", mock.forSet(new HashSet<String>()));
         assertEquals(null, mock.forSet(null));
 
-        verify(mock, times(1)).forSet(anySetOf(String.class));
+        verify(mock, times(1)).forSet(anySet());
     }
 
     @Test
     public void shouldAllowAnyIterable() {
-        when(mock.forIterable(anyIterableOf(String.class))).thenReturn("matched");
+        when(mock.forIterable(anyIterable())).thenReturn("matched");
 
         assertEquals("matched", mock.forIterable(new HashSet<String>()));
         assertEquals(null, mock.forIterable(null));
 
-        verify(mock, times(1)).forIterable(anyIterableOf(String.class));
+        verify(mock, times(1)).forIterable(anyIterable());
     }
 }
diff --git a/src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java b/src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java
index a2d497e..eac883c 100644
--- a/src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java
+++ b/src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.matchers;
 
-import static org.mockito.Matchers.refEq;
+import static org.mockito.ArgumentMatchers.refEq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
diff --git a/src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java b/src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
index 196f9d0..a618374 100644
--- a/src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
+++ b/src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java
@@ -39,9 +39,6 @@ public class DescriptiveMessagesOnMisuseTest extends TestBase {
         //        verifyNoMoreInteractions();
         //        verifyNoMoreInteractions(null);
         //        verifyNoMoreInteractions("");
-        //        verifyZeroInteractions();
-        //        verifyZeroInteractions(null);
-        //        verifyZeroInteractions("");
         //
         //        inOrder();
         //        inOrder(null);
diff --git a/src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java b/src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java
index 04690b9..a4b7294 100644
--- a/src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java
+++ b/src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java
@@ -9,7 +9,7 @@ import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
 import static org.mockito.Mockito.anyBoolean;
 import static org.mockito.Mockito.anyInt;
-import static org.mockito.Mockito.anyObject;
+import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.validateMockitoUsage;
 import static org.mockito.Mockito.verify;
@@ -39,8 +39,8 @@ public class DetectingMisusedMatchersTest extends TestBase {
         super.resetState();
     }
 
-    private void misplaced_anyObject_argument_matcher() {
-        Object ignored = anyObject();
+    private void misplaced_any_argument_matcher() {
+        Object ignored = any();
     }
 
     private void misplaced_anyInt_argument_matcher() {
@@ -53,7 +53,7 @@ public class DetectingMisusedMatchersTest extends TestBase {
 
     @Test
     public void should_fail_fast_when_argument_matchers_are_abused() {
-        misplaced_anyObject_argument_matcher();
+        misplaced_any_argument_matcher();
         try {
             mock(IMethods.class);
             fail();
@@ -68,7 +68,7 @@ public class DetectingMisusedMatchersTest extends TestBase {
             Observer observer = mock(Observer.class);
 
             misplaced_anyInt_argument_matcher();
-            misplaced_anyObject_argument_matcher();
+            misplaced_any_argument_matcher();
             misplaced_anyBoolean_argument_matcher();
 
             observer.update(null, null);
@@ -80,7 +80,7 @@ public class DetectingMisusedMatchersTest extends TestBase {
                     .hasMessageContaining(
                             "DetectingMisusedMatchersTest.misplaced_anyInt_argument_matcher")
                     .hasMessageContaining(
-                            "DetectingMisusedMatchersTest.misplaced_anyObject_argument_matcher")
+                            "DetectingMisusedMatchersTest.misplaced_any_argument_matcher")
                     .hasMessageContaining(
                             "DetectingMisusedMatchersTest.misplaced_anyBoolean_argument_matcher");
         }
@@ -90,7 +90,7 @@ public class DetectingMisusedMatchersTest extends TestBase {
     @Test
     public void shouldSayUnfinishedVerificationButNotInvalidUseOfMatchers() {
         assumeTrue("Does not apply for inline mocks", withFinal.getClass() != WithFinal.class);
-        verify(withFinal).finalMethod(anyObject());
+        verify(withFinal).finalMethod(any());
         try {
             verify(withFinal);
             fail();
diff --git a/src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java b/src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java
index 3fc1f56..8e9e759 100644
--- a/src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java
+++ b/src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java
@@ -5,7 +5,7 @@
 package org.mockitousage.misuse;
 
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyObject;
+import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -46,7 +46,7 @@ public class ExplicitFrameworkValidationTest extends TestBase {
 
     @Test
     public void shouldDetectMisplacedArgumentMatcher() {
-        anyObject();
+        Object ignored = any();
         try {
             Mockito.validateMockitoUsage();
             fail();
diff --git a/src/test/java/org/mockitousage/misuse/InvalidUsageTest.java b/src/test/java/org/mockitousage/misuse/InvalidUsageTest.java
index db690b4..ce418bf 100644
--- a/src/test/java/org/mockitousage/misuse/InvalidUsageTest.java
+++ b/src/test/java/org/mockitousage/misuse/InvalidUsageTest.java
@@ -32,11 +32,6 @@ public class InvalidUsageTest extends TestBase {
     }
 
     @Test(expected = MockitoException.class)
-    public void shouldRequireArgumentsWhenVerifyingZeroInteractions() {
-        verifyZeroInteractions();
-    }
-
-    @Test(expected = MockitoException.class)
     public void shouldRequireArgumentsWhenVerifyingNoInteractions() {
         verifyNoInteractions();
     }
@@ -105,17 +100,6 @@ public class InvalidUsageTest extends TestBase {
     }
 
     @Test
-    public void shouldNotMockObjectMethodsOnInterface() throws Exception {
-        ObjectLikeInterface inter = mock(ObjectLikeInterface.class);
-
-        Object ignored = inter.equals(null);
-        ignored = inter.toString();
-        ignored = inter.hashCode();
-
-        verifyZeroInteractions(inter);
-    }
-
-    @Test
     public void shouldNotMockObjectMethodsOnInterfaceVerifyNoInteractions() throws Exception {
         ObjectLikeInterface inter = mock(ObjectLikeInterface.class);
 
@@ -127,17 +111,6 @@ public class InvalidUsageTest extends TestBase {
     }
 
     @Test
-    public void shouldNotMockObjectMethodsOnClass() throws Exception {
-        Object clazz = mock(ObjectLikeInterface.class);
-
-        Object ignored = clazz.equals(null);
-        ignored = clazz.toString();
-        ignored = clazz.hashCode();
-
-        verifyZeroInteractions(clazz);
-    }
-
-    @Test
     public void shouldNotMockObjectMethodsOnClassVerifyNoInteractions() throws Exception {
         Object clazz = mock(ObjectLikeInterface.class);
 
diff --git a/src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java b/src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java
index a0b993d..dd5f390 100644
--- a/src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java
+++ b/src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java
@@ -5,13 +5,10 @@
 package org.mockitousage.plugins;
 
 import static org.junit.Assert.assertNotNull;
-import static org.mockito.Mockito.withSettings;
 
 import org.junit.Test;
 import org.mockito.Mockito;
-import org.mockito.internal.creation.instance.Instantiator;
 import org.mockito.plugins.AnnotationEngine;
-import org.mockito.plugins.InstantiatorProvider;
 import org.mockito.plugins.InstantiatorProvider2;
 import org.mockito.plugins.MockMaker;
 import org.mockito.plugins.MockitoLogger;
@@ -30,19 +27,8 @@ public class MockitoPluginsTest extends TestBase {
         assertNotNull(plugins.getDefaultPlugin(MockMaker.class));
         assertNotNull(plugins.getDefaultPlugin(StackTraceCleanerProvider.class));
         assertNotNull(plugins.getDefaultPlugin(PluginSwitch.class));
-        assertNotNull(plugins.getDefaultPlugin(InstantiatorProvider.class));
         assertNotNull(plugins.getDefaultPlugin(InstantiatorProvider2.class));
         assertNotNull(plugins.getDefaultPlugin(AnnotationEngine.class));
         assertNotNull(plugins.getDefaultPlugin(MockitoLogger.class));
     }
-
-    @SuppressWarnings("deprecation")
-    @Test
-    public void instantiator_provider_backwards_compatibility() {
-        InstantiatorProvider provider = plugins.getDefaultPlugin(InstantiatorProvider.class);
-        Instantiator instantiator =
-                provider.getInstantiator(withSettings().build(MockitoPluginsTest.class));
-
-        assertNotNull(instantiator.newInstance(MockitoPluginsTest.class));
-    }
 }
diff --git a/src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java b/src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java
index 89bdd66..da46788 100644
--- a/src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java
+++ b/src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java
@@ -4,7 +4,7 @@
  */
 package org.mockitousage.spies;
 
-import static org.mockito.Matchers.*;
+import static org.mockito.ArgumentMatchers.*;
 import static org.mockito.Mockito.spy;
 
 import java.util.Collection;
diff --git a/src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java b/src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
index ba6aed4..03d99be 100644
--- a/src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
+++ b/src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java
@@ -158,7 +158,7 @@ public class ModellingDescriptiveMessagesTest extends TestBase {
 
     @Test
     public void shouldMentionFinalAndObjectMethodsWhenMisplacedArgumentMatcher() {
-        when(mock.equals(anyObject())).thenReturn(false);
+        when(mock.equals(any())).thenReturn(false);
     }
 
     @Test
diff --git a/src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java b/src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java
index ec3a733..1734e53 100644
--- a/src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java
+++ b/src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java
@@ -9,7 +9,6 @@ import static org.mockito.Mockito.inOrder;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
 import static org.mockito.Mockito.when;
 import static org.mockitoutil.Conditions.firstMethodInStackTrace;
 
@@ -65,18 +64,6 @@ public class StackTraceFilteringTest extends TestBase {
     }
 
     @Test
-    public void shouldFilterStackTraceOnVerifyZeroInteractions() {
-        mock.oneArg(true);
-        try {
-            verifyZeroInteractions(mock);
-            fail();
-        } catch (NoInteractionsWanted e) {
-            Assertions.assertThat(e)
-                    .has(firstMethodInStackTrace("shouldFilterStackTraceOnVerifyZeroInteractions"));
-        }
-    }
-
-    @Test
     public void shouldFilterStackTraceOnVerifyNoInteractions() {
         mock.oneArg(true);
         try {
diff --git a/src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java b/src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java
index 375a204..15e4346 100644
--- a/src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java
+++ b/src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java
@@ -64,7 +64,7 @@ public class BasicStubbingTest extends TestBase {
         when(mock.simpleMethod("one")).thenThrow(new RuntimeException());
         doThrow(new RuntimeException()).when(mock).simpleMethod("two");
 
-        verifyZeroInteractions(mock);
+        verifyNoInteractions(mock);
     }
 
     @Test
@@ -85,7 +85,7 @@ public class BasicStubbingTest extends TestBase {
         }
 
         // anything that can cause state validation
-        verifyZeroInteractions(mock);
+        verifyNoInteractions(mock);
     }
 
     @Test
diff --git a/src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java b/src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java
index f424fab..b0c4b2d 100644
--- a/src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java
+++ b/src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java
@@ -262,11 +262,6 @@ public class BasicVerificationInOrderTest extends TestBase {
     }
 
     @Test(expected = NoInteractionsWanted.class)
-    public void shouldFailOnVerifyZeroInteractions() {
-        verifyZeroInteractions(mockOne);
-    }
-
-    @Test(expected = NoInteractionsWanted.class)
     public void shouldFailOnVerifyNoInteractions() {
         verifyNoInteractions(mockOne);
     }
diff --git a/src/test/java/org/mockitousage/verification/CustomVerificationTest.java b/src/test/java/org/mockitousage/verification/CustomVerificationTest.java
deleted file mode 100644
index 766bb1d..0000000
--- a/src/test/java/org/mockitousage/verification/CustomVerificationTest.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockitousage.verification;
-
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.verify;
-
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.exceptions.base.MockitoAssertionError;
-import org.mockito.internal.invocation.InvocationMatcher;
-import org.mockito.internal.verification.api.VerificationData;
-import org.mockito.invocation.Invocation;
-import org.mockito.verification.VerificationMode;
-import org.mockitousage.IMethods;
-import org.mockitoutil.TestBase;
-
-public class CustomVerificationTest extends TestBase {
-
-    @Mock IMethods mock;
-
-    @Test
-    public void custom_verification_with_old_api() {
-        // given:
-        mock.simpleMethod("a", 10);
-
-        // expect:
-        verify(mock, ignoreParametersUsingOldApi()).simpleMethod();
-
-        try {
-            verify(mock, ignoreParametersUsingOldApi()).otherMethod();
-            fail();
-        } catch (MockitoAssertionError e) {
-        }
-    }
-
-    // Old api still supported, see https://github.com/mockito/mockito/issues/730
-    private VerificationMode ignoreParametersUsingOldApi() {
-        return new VerificationMode() {
-            public void verify(VerificationData data) {
-                // use old api
-                InvocationMatcher target = data.getWanted();
-
-                // sanity check the new api
-                if (data.getTarget() != target) {
-                    throw new RuntimeException("Sanity check");
-                }
-
-                // look for the relevant invocation and exit if found
-                for (Invocation invocation : data.getAllInvocations()) {
-                    if (target.getInvocation()
-                            .getMethod()
-                            .getName()
-                            .equals(invocation.getMethod().getName())) {
-                        return;
-                    }
-                }
-
-                // verification failed!
-                throw new MockitoAssertionError(
-                        "Expected method with name: "
-                                + target
-                                + " not found in:\n"
-                                + data.getAllInvocations());
-            }
-
-            public VerificationMode description(String description) {
-                return this;
-            }
-        };
-    }
-}
diff --git a/src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java b/src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
index 94f6602..bae7c31 100644
--- a/src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
+++ b/src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java
@@ -181,26 +181,6 @@ public class DescriptiveMessagesWhenVerificationFailsTest extends TestBase {
     }
 
     @Test
-    public void should_print_first_unexpected_invocation_when_verifying_zero_interactions() {
-        mock.twoArgumentMethod(1, 2);
-        mock.threeArgumentMethod(1, "2", "3");
-
-        try {
-            verifyZeroInteractions(mock);
-            fail();
-        } catch (NoInteractionsWanted e) {
-            String expected = "\n" + "No interactions wanted here:" + "\n" + "-> at";
-
-            assertThat(e).hasMessageContaining(expected);
-
-            String expectedCause =
-                    "\n" + "But found this interaction on mock '" + mock + "':" + "\n" + "-> at";
-
-            assertThat(e).hasMessageContaining(expectedCause);
-        }
-    }
-
-    @Test
     public void should_print_first_unexpected_invocation_when_verifying_no_interactions() {
         mock.twoArgumentMethod(1, 2);
         mock.threeArgumentMethod(1, "2", "3");
diff --git a/src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java b/src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
index 367975d..72c75a9 100644
--- a/src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
+++ b/src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java
@@ -51,29 +51,6 @@ public class NoMoreInteractionsVerificationTest extends TestBase {
     }
 
     @Test
-    public void shouldVerifyNoInteractionsAsManyTimesAsYouWant() throws Exception {
-        verifyNoMoreInteractions(mock);
-        verifyNoMoreInteractions(mock);
-
-        verifyZeroInteractions(mock);
-        verifyZeroInteractions(mock);
-
-        verifyNoInteractions(mock);
-        verifyNoInteractions(mock);
-    }
-
-    @Test
-    public void shouldFailZeroInteractionsVerification() throws Exception {
-        mock.clear();
-
-        try {
-            verifyZeroInteractions(mock);
-            fail();
-        } catch (NoInteractionsWanted e) {
-        }
-    }
-
-    @Test
     public void shouldFailNoMoreInteractionsVerification() throws Exception {
         mock.clear();
 
@@ -136,7 +113,7 @@ public class NoMoreInteractionsVerificationTest extends TestBase {
 
         verifyNoMoreInteractions(list);
         try {
-            verifyZeroInteractions(map);
+            verifyNoInteractions(map);
             fail();
         } catch (NoInteractionsWanted e) {
         }
diff --git a/src/test/java/org/mockitousage/verification/OnlyVerificationTest.java b/src/test/java/org/mockitousage/verification/OnlyVerificationTest.java
index 64e5a6f..94eafe6 100644
--- a/src/test/java/org/mockitousage/verification/OnlyVerificationTest.java
+++ b/src/test/java/org/mockitousage/verification/OnlyVerificationTest.java
@@ -6,7 +6,7 @@ package org.mockitousage.verification;
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
-import static org.mockito.Matchers.anyInt;
+import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.Mockito.only;
 import static org.mockito.Mockito.verify;
 
diff --git a/src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java b/src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java
index 42f644d..472e184 100644
--- a/src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java
+++ b/src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java
@@ -7,7 +7,7 @@ package org.mockitousage.verification;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.Assert.fail;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.Matchers.eq;
+import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
diff --git a/src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java b/src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
index a543d38..77e7e46 100644
--- a/src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
+++ b/src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java
@@ -29,10 +29,10 @@ public class VerificationOnMultipleMocksUsingMatchersTest extends TestBase {
         map.put("test", 100);
         map.put("test two", 200);
 
-        verify(list).add(anyObject());
+        verify(list).add(any());
         verify(list).add(anyInt(), eq("test two"));
 
-        verify(map, times(2)).put(anyObject(), anyObject());
+        verify(map, times(2)).put(any(), any());
         verify(map).put(eq("test two"), eq(200));
 
         verifyNoMoreInteractions(list, map);
@@ -55,10 +55,9 @@ public class VerificationOnMultipleMocksUsingMatchersTest extends TestBase {
         verify(list, times(1)).add("two");
         verify(list, times(0)).add("three");
 
-        verify(map, times(2)).put(anyObject(), anyInt());
+        verify(map, times(2)).put(any(), anyInt());
 
         verifyNoMoreInteractions(list, map);
-        verifyZeroInteractions(set);
         verifyNoInteractions(set);
     }
 }
diff --git a/src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java b/src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java
index 85d37dd..6e916b7 100644
--- a/src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java
+++ b/src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java
@@ -7,14 +7,18 @@ package org.mockitousage.verification;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.fail;
-import static org.mockito.AdditionalMatchers.*;
-import static org.mockito.Matchers.*;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
+import static org.mockito.ArgumentMatchers.same;
+import static org.mockito.ArgumentMatchers.anyInt;
+import static org.mockito.ArgumentMatchers.isA;
+import static org.mockito.ArgumentMatchers.contains;
+import static org.mockito.AdditionalMatchers.geq;
+import static org.mockito.AdditionalMatchers.leq;
+import static org.mockito.AdditionalMatchers.and;
 
 import org.junit.Before;
 import org.junit.Test;
-import org.mockito.Matchers;
 import org.mockito.Mockito;
 import org.mockito.exceptions.verification.WantedButNotInvoked;
 import org.mockito.exceptions.verification.opentest4j.ArgumentsAreDifferent;
@@ -68,8 +72,7 @@ public class VerificationUsingMatchersTest extends TestBase {
 
         try {
             verify(mock)
-                    .threeArgumentMethod(
-                            and(geq(7), leq(10)), isA(String.class), Matchers.contains("123"));
+                    .threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains("123"));
             fail();
         } catch (ArgumentsAreDifferent e) {
         }
@@ -78,8 +81,7 @@ public class VerificationUsingMatchersTest extends TestBase {
 
         try {
             verify(mock)
-                    .threeArgumentMethod(
-                            and(geq(7), leq(10)), isA(String.class), Matchers.contains("123"));
+                    .threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains("123"));
             fail();
         } catch (ArgumentsAreDifferent e) {
         }
@@ -88,16 +90,13 @@ public class VerificationUsingMatchersTest extends TestBase {
 
         try {
             verify(mock)
-                    .threeArgumentMethod(
-                            and(geq(7), leq(10)), isA(String.class), Matchers.contains("123"));
+                    .threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains("123"));
             fail();
         } catch (ArgumentsAreDifferent e) {
         }
 
         mock.threeArgumentMethod(8, "", "123");
 
-        verify(mock)
-                .threeArgumentMethod(
-                        and(geq(7), leq(10)), isA(String.class), Matchers.contains("123"));
+        verify(mock).threeArgumentMethod(and(geq(7), leq(10)), isA(String.class), contains("123"));
     }
 }

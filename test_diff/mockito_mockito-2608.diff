diff --git a/src/test/java/org/mockito/internal/matchers/text/ValuePrinterTest.java b/src/test/java/org/mockito/internal/matchers/text/ValuePrinterTest.java
index 1ece06c..56b5e5f 100644
--- a/src/test/java/org/mockito/internal/matchers/text/ValuePrinterTest.java
+++ b/src/test/java/org/mockito/internal/matchers/text/ValuePrinterTest.java
@@ -9,7 +9,7 @@ import static org.junit.Assert.assertTrue;
 import static org.mockito.internal.matchers.text.ValuePrinter.print;
 
 import java.util.LinkedHashMap;
-
+import java.util.Map;
 import org.junit.Test;
 
 public class ValuePrinterTest {
@@ -24,29 +24,23 @@ public class ValuePrinterTest {
         assertThat(print(3.14d)).isEqualTo("3.14d");
         assertThat(print(3.14f)).isEqualTo("3.14f");
         assertThat(print(new int[] {1, 2})).isEqualTo("[1, 2]");
-        assertThat(
-                        print(
-                                new LinkedHashMap<String, Object>() {
-                                    {
-                                        put("foo", 2L);
-                                    }
-                                }))
-                .isEqualTo("{\"foo\" = 2L}");
-        assertThat(
-                        print(
-                                new LinkedHashMap<String, Object>() {
-                                    {
-                                        put("int passed as hex", 0x01);
-                                        put("byte", (byte) 0x01);
-                                        put("short", (short) 2);
-                                        put("int", 3);
-                                        put("long", 4L);
-                                        put("float", 2.71f);
-                                        put("double", 3.14d);
-                                    }
-                                }))
+
+        Map<String, Object> map1 = new LinkedHashMap<>();
+        map1.put("foo", 2L);
+        assertThat(print(map1)).isEqualTo("{\"foo\" = 2L}");
+
+        Map<String, Object> map2 = new LinkedHashMap<>();
+        map2.put("int passed as hex", 0x01);
+        map2.put("byte", (byte) 0x01);
+        map2.put("short", (short) 2);
+        map2.put("int", 3);
+        map2.put("long", 4L);
+        map2.put("float", 2.71f);
+        map2.put("double", 3.14d);
+        assertThat(print(map2))
                 .isEqualTo(
                         "{\"int passed as hex\" = 1, \"byte\" = (byte) 0x01, \"short\" = (short) 2, \"int\" = 3, \"long\" = 4L, \"float\" = 2.71f, \"double\" = 3.14d}");
+
         assertTrue(print(new UnsafeToString()).contains("UnsafeToString"));
         assertThat(print(new ToString())).isEqualTo("ToString");
         assertThat(print(new FormattedText("formatted"))).isEqualTo("formatted");
diff --git a/src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java b/src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
index 870f0ce..984e07d 100644
--- a/src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
+++ b/src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
@@ -16,7 +16,6 @@ import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
 import org.assertj.core.api.Assertions;
 import org.assertj.core.api.ThrowableAssert;
 import org.junit.Test;
@@ -307,20 +306,14 @@ public class ReturnsSmartNullsTest extends TestBase {
             should_return_a_empty_map_that_has_been_defined_with_method_generic_and_provided_in_var_args()
                     throws Throwable {
 
-        final Map<String, String> map1 =
-                new HashMap<String, String>() {
-                    {
-                        put("key-1", "value-1");
-                        put("key-2", "value-2");
-                    }
-                };
-        final Map<String, String> map2 =
-                new HashMap<String, String>() {
-                    {
-                        put("key-3", "value-1");
-                        put("key-4", "value-2");
-                    }
-                };
+        final Map<String, String> map1 = new HashMap<>();
+        map1.put("key-1", "value-1");
+        map1.put("key-2", "value-2");
+
+        final Map<String, String> map2 = new HashMap<>();
+        map2.put("key-3", "value-1");
+        map2.put("key-4", "value-2");
+
         Answer<Object> answer = new ReturnsSmartNulls();
 
         Object smartNull = answer.answer(invocationMethodWithVarArgs(new Map[] {map1, map2}));
diff --git a/src/test/java/org/mockito/internal/util/PlatformTest.java b/src/test/java/org/mockito/internal/util/PlatformTest.java
index b72c71d..d4c4533 100644
--- a/src/test/java/org/mockito/internal/util/PlatformTest.java
+++ b/src/test/java/org/mockito/internal/util/PlatformTest.java
@@ -8,7 +8,6 @@ import static org.assertj.core.api.Assertions.assertThat;
 
 import java.util.HashMap;
 import java.util.Map;
-
 import org.junit.Test;
 
 // Possible description on a IBM J9 VM (see #801)
@@ -75,23 +74,19 @@ public class PlatformTest {
         // https://stackoverflow.com/questions/35844985/how-do-we-get-sr-and-fp-of-ibm-jre-using-java
         //  -
         // https://www.ibm.com/support/knowledgecenter/SSYKE2_8.0.0/com.ibm.java.80.doc/user/build_number.html
-        Map<String, Boolean> versions =
-                new HashMap<String, Boolean>() {
-                    {
-                        put("1.8.0_92-b14", false);
-                        put("1.8.0-b24", true);
-                        put("1.8.0_5", true);
-                        put("1.8.0b5_u44", true);
-                        put("1.8.0b5_u92", false);
-                        put("1.7.0_4", false);
-                        put("1.4.0_03-b04", false);
-                        put("1.4.0_03-ea-b01", false);
-                        put("pxi3270_27sr4-20160303_03 (SR4)", false);
-                        put("pwi3260sr11-20120412_01 (SR11)", false);
-                        put("pwa6480sr1fp10-20150711_01 (SR1 FP10)", false);
-                        put("null", false);
-                    }
-                };
+        Map<String, Boolean> versions = new HashMap<>();
+        versions.put("1.8.0_92-b14", false);
+        versions.put("1.8.0-b24", true);
+        versions.put("1.8.0_5", true);
+        versions.put("1.8.0b5_u44", true);
+        versions.put("1.8.0b5_u92", false);
+        versions.put("1.7.0_4", false);
+        versions.put("1.4.0_03-b04", false);
+        versions.put("1.4.0_03-ea-b01", false);
+        versions.put("pxi3270_27sr4-20160303_03 (SR4)", false);
+        versions.put("pwi3260sr11-20120412_01 (SR11)", false);
+        versions.put("pwa6480sr1fp10-20150711_01 (SR1 FP10)", false);
+        versions.put("null", false);
 
         assertPlatformParsesCorrectlyVariousVersionScheme(versions);
     }
@@ -134,15 +129,11 @@ public class PlatformTest {
         // java.specification.version      1.9           9
         // java.vm.specification.version   1.9           9
         //
-        Map<String, Boolean> versions =
-                new HashMap<String, Boolean>() {
-                    {
-                        put("9-ea+73", false);
-                        put("9+100", false);
-                        put("9.1.2+62", false);
-                        put("9.0.1+20", false);
-                    }
-                };
+        Map<String, Boolean> versions = new HashMap<>();
+        versions.put("9-ea+73", false);
+        versions.put("9+100", false);
+        versions.put("9.1.2+62", false);
+        versions.put("9.0.1+20", false);
 
         assertPlatformParsesCorrectlyVariousVersionScheme(versions);
     }
diff --git a/src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java b/src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
index 045a8b6..efc3e8f 100644
--- a/src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
+++ b/src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java
@@ -24,6 +24,7 @@ import java.util.LinkedList;
 import java.util.Map;
 
 import org.assertj.core.api.Assertions;
+import org.assertj.core.api.ThrowableAssert.ThrowingCallable;
 import org.junit.Before;
 import org.junit.Test;
 import org.mockito.exceptions.base.MockitoException;
@@ -248,34 +249,34 @@ public class StubbingWithThrowablesTest extends TestBase {
                 .hasMessageContaining("Cannot stub with null throwable");
     }
 
-    @Test
-    public void shouldNotAllowSettingNullThrowableClass() {
-        assertThatThrownBy(
-                        () -> {
-                            when(mock.isEmpty()).thenThrow((Class) null);
-                        })
+    private void assertExceptionTypeCanNotBeNull(ThrowingCallable throwingCallable) {
+        assertThatThrownBy(throwingCallable)
                 .isInstanceOf(MockitoException.class)
                 .hasMessageContaining("Exception type cannot be null");
     }
 
     @Test
+    public void shouldNotAllowSettingNullThrowableClass() {
+        assertExceptionTypeCanNotBeNull(
+                () -> {
+                    when(mock.isEmpty()).thenThrow((Class) null);
+                });
+    }
+
+    @Test
     public void shouldNotAllowSettingNullThrowableClasses() {
-        assertThatThrownBy(
-                        () -> {
-                            when(mock.isEmpty()).thenThrow(RuntimeException.class, (Class[]) null);
-                        })
-                .isInstanceOf(MockitoException.class)
-                .hasMessageContaining("Exception type cannot be null");
+        assertExceptionTypeCanNotBeNull(
+                () -> {
+                    when(mock.isEmpty()).thenThrow(RuntimeException.class, (Class[]) null);
+                });
     }
 
     @Test
     public void shouldNotAllowSettingNullVarArgThrowableClass() {
-        assertThatThrownBy(
-                        () -> {
-                            when(mock.isEmpty()).thenThrow(RuntimeException.class, (Class) null);
-                        })
-                .isInstanceOf(MockitoException.class)
-                .hasMessageContaining("Exception type cannot be null");
+        assertExceptionTypeCanNotBeNull(
+                () -> {
+                    when(mock.isEmpty()).thenThrow(RuntimeException.class, (Class) null);
+                });
     }
 
     @Test

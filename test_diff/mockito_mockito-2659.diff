diff --git a/src/test/java/org/mockito/MockTest.java b/src/test/java/org/mockito/MockTest.java
new file mode 100644
index 0000000..e904ec5
--- /dev/null
+++ b/src/test/java/org/mockito/MockTest.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2022 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
+package org.mockito;
+
+import org.junit.Test;
+import org.junit.experimental.runners.Enclosed;
+import org.junit.runner.RunWith;
+import org.junit.runners.Parameterized;
+
+import static org.hamcrest.Matchers.not;
+import static org.junit.Assume.assumeThat;
+
+@RunWith(Enclosed.class)
+public class MockTest {
+
+    @RunWith(value = Parameterized.class)
+    public static class StrictnessToMockStrictnessTest {
+
+        public org.mockito.quality.Strictness strictness;
+
+        public StrictnessToMockStrictnessTest(org.mockito.quality.Strictness strictness) {
+            this.strictness = strictness;
+        }
+
+        @Test
+        public void should_have_matching_enum_in_mock_strictness_enum() {
+            Mock.Strictness.valueOf(strictness.name());
+        }
+
+        @Parameterized.Parameters(name = "{0}")
+        public static org.mockito.quality.Strictness[] data() {
+            return org.mockito.quality.Strictness.values();
+        }
+    }
+
+    @RunWith(value = Parameterized.class)
+    public static class MockStrictnessToStrictnessTest {
+
+        public Mock.Strictness strictness;
+
+        public MockStrictnessToStrictnessTest(Mock.Strictness strictness) {
+            this.strictness = strictness;
+        }
+
+        @Test
+        public void should_have_matching_enum_in_strictness_enum() {
+            assumeThat("Ignore NOT_SET", strictness, not(Mock.Strictness.TEST_LEVEL_DEFAULT));
+            org.mockito.quality.Strictness.valueOf(strictness.name());
+        }
+
+        @Parameterized.Parameters(name = "{0}")
+        public static Mock.Strictness[] data() {
+            return Mock.Strictness.values();
+        }
+    }
+}
diff --git a/src/test/java/org/mockitousage/strictness/StrictnessMockAnnotationTest.java b/src/test/java/org/mockitousage/strictness/StrictnessMockAnnotationTest.java
index c035b3d..7250555 100644
--- a/src/test/java/org/mockitousage/strictness/StrictnessMockAnnotationTest.java
+++ b/src/test/java/org/mockitousage/strictness/StrictnessMockAnnotationTest.java
@@ -7,6 +7,8 @@ package org.mockitousage.strictness;
 import org.assertj.core.api.Assertions;
 import org.junit.Rule;
 import org.junit.Test;
+import org.junit.experimental.runners.Enclosed;
+import org.junit.runner.RunWith;
 import org.mockito.Mock;
 import org.mockito.exceptions.misusing.PotentialStubbingProblem;
 import org.mockito.junit.MockitoJUnit;
@@ -16,28 +18,56 @@ import org.mockitousage.IMethods;
 
 import static org.mockito.Mockito.when;
 
+@RunWith(Enclosed.class)
 public class StrictnessMockAnnotationTest {
 
-    public @Rule MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);
+    public static class StrictStubsTest {
+        public @Rule MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);
 
-    @Mock(strictness = Strictness.LENIENT)
-    IMethods lenientMock;
+        @Mock(strictness = Mock.Strictness.LENIENT)
+        IMethods lenientMock;
 
-    @Mock IMethods regularMock;
+        @Mock IMethods regularMock;
 
-    @Test
-    public void mock_is_lenient() {
-        when(lenientMock.simpleMethod("1")).thenReturn("1");
+        @Test
+        public void mock_is_lenient() {
+            when(lenientMock.simpleMethod("1")).thenReturn("1");
 
-        // then lenient mock does not throw:
-        ProductionCode.simpleMethod(lenientMock, "3");
+            // then lenient mock does not throw:
+            ProductionCode.simpleMethod(lenientMock, "3");
+        }
+
+        @Test
+        public void mock_is_strict() {
+            when(regularMock.simpleMethod("2")).thenReturn("2");
+
+            Assertions.assertThatThrownBy(() -> ProductionCode.simpleMethod(regularMock, "4"))
+                    .isInstanceOf(PotentialStubbingProblem.class);
+        }
     }
 
-    @Test
-    public void mock_is_strict() {
-        when(regularMock.simpleMethod("2")).thenReturn("2");
+    public static class LenientStubsTest {
+        public @Rule MockitoRule rule = MockitoJUnit.rule().strictness(Strictness.LENIENT);
+
+        @Mock IMethods lenientMock;
+
+        @Mock(strictness = Mock.Strictness.STRICT_STUBS)
+        IMethods regularMock;
+
+        @Test
+        public void mock_is_lenient() {
+            when(lenientMock.simpleMethod("1")).thenReturn("1");
+
+            // then lenient mock does not throw:
+            ProductionCode.simpleMethod(lenientMock, "3");
+        }
+
+        @Test
+        public void mock_is_strict() {
+            when(regularMock.simpleMethod("2")).thenReturn("2");
 
-        Assertions.assertThatThrownBy(() -> ProductionCode.simpleMethod(regularMock, "4"))
-                .isInstanceOf(PotentialStubbingProblem.class);
+            Assertions.assertThatThrownBy(() -> ProductionCode.simpleMethod(regularMock, "4"))
+                    .isInstanceOf(PotentialStubbingProblem.class);
+        }
     }
 }

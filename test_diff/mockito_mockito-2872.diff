diff --git a/src/test/java/org/mockito/MockitoEnvTest.java b/src/test/java/org/mockito/MockitoEnvTest.java
new file mode 100644
index 0000000..1a162e9
--- /dev/null
+++ b/src/test/java/org/mockito/MockitoEnvTest.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2021 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
+package org.mockito;
+
+import static org.assertj.core.api.Assertions.assertThat;
+import static org.hamcrest.CoreMatchers.endsWith;
+import static org.hamcrest.CoreMatchers.not;
+import static org.hamcrest.CoreMatchers.nullValue;
+
+import org.junit.Assume;
+import org.junit.Test;
+import org.mockito.internal.configuration.plugins.DefaultMockitoPlugins;
+import org.mockito.internal.configuration.plugins.Plugins;
+import org.mockito.plugins.MemberAccessor;
+import org.mockito.plugins.MockMaker;
+
+public class MockitoEnvTest {
+    @Test
+    public void uses_default_mock_maker_from_env() {
+        final String mockMaker = System.getenv("MOCK_MAKER");
+        Assume.assumeThat(mockMaker, not(nullValue()));
+        Assume.assumeThat(mockMaker, endsWith("default"));
+
+        assertThat(DefaultMockitoPlugins.getDefaultPluginClass(MockMaker.class.getName()))
+                .isEqualTo(Plugins.getMockMaker().getClass().getName());
+    }
+
+    @Test
+    public void uses_mock_maker_from_env() {
+        final String mockMaker = System.getenv("MOCK_MAKER");
+        Assume.assumeThat(mockMaker, not(nullValue()));
+        Assume.assumeThat(mockMaker, not(endsWith("default")));
+
+        assertThat(DefaultMockitoPlugins.getDefaultPluginClass(mockMaker))
+                .isEqualTo(Plugins.getMockMaker().getClass().getName());
+    }
+
+    @Test
+    public void uses_default_member_accessor_from_env() {
+        final String memberAccessor = System.getenv("MEMBER_ACCESSOR");
+        Assume.assumeThat(memberAccessor, not(nullValue()));
+        Assume.assumeThat(memberAccessor, endsWith("default"));
+
+        assertThat(DefaultMockitoPlugins.getDefaultPluginClass(MemberAccessor.class.getName()))
+                .isEqualTo(Plugins.getMemberAccessor().getClass().getName());
+    }
+
+    @Test
+    public void uses_member_accessor_from_env() {
+        final String memberAccessor = System.getenv("MEMBER_ACCESSOR");
+        Assume.assumeThat(memberAccessor, not(nullValue()));
+        Assume.assumeThat(memberAccessor, not(endsWith("default")));
+
+        assertThat(DefaultMockitoPlugins.getDefaultPluginClass(memberAccessor))
+                .isEqualTo(Plugins.getMemberAccessor().getClass().getName());
+    }
+}
diff --git a/src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java b/src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java
index bf616f8..4efcb2b 100644
--- a/src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java
+++ b/src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java
@@ -4,6 +4,8 @@
  */
 package org.mockitousage.spies;
 
+import static org.hamcrest.CoreMatchers.instanceOf;
+import static org.hamcrest.CoreMatchers.not;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.doThrow;
@@ -13,8 +15,12 @@ import static org.mockito.Mockito.when;
 import static org.mockitoutil.Conditions.methodsInStackTrace;
 
 import org.assertj.core.api.Assertions;
+import org.junit.Assume;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.internal.configuration.plugins.Plugins;
+import org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker;
+import org.mockito.internal.util.reflection.ReflectionMemberAccessor;
 import org.mockitoutil.TestBase;
 
 @SuppressWarnings("unchecked")
@@ -104,6 +110,9 @@ public class PartialMockingWithSpiesTest extends TestBase {
 
     @Test
     public void shouldStackTraceGetFilteredOnUserExceptions() {
+        Assume.assumeThat(
+                Plugins.getMemberAccessor(), not(instanceOf(ReflectionMemberAccessor.class)));
+
         try {
             // when
             spy.getNameButDelegateToMethodThatThrows();
@@ -119,6 +128,30 @@ public class PartialMockingWithSpiesTest extends TestBase {
         }
     }
 
+    @Test
+    public void shouldStackTraceGetFilteredOnUserExceptionsReflection() {
+        Assume.assumeThat(Plugins.getMockMaker(), instanceOf(InlineByteBuddyMockMaker.class));
+        Assume.assumeThat(Plugins.getMemberAccessor(), instanceOf(ReflectionMemberAccessor.class));
+
+        try {
+            // when
+            spy.getNameButDelegateToMethodThatThrows();
+            fail();
+        } catch (Throwable t) {
+            // then
+            Assertions.assertThat(t)
+                    .has(
+                            methodsInStackTrace(
+                                    "throwSomeException",
+                                    "invoke0",
+                                    "invoke",
+                                    "invoke",
+                                    "invoke",
+                                    "getNameButDelegateToMethodThatThrows",
+                                    "shouldStackTraceGetFilteredOnUserExceptionsReflection"));
+        }
+    }
+
     //    @Test //manual verification
     public void verifyTheStackTrace() {
         spy.getNameButDelegateToMethodThatThrows();

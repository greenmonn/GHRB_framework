diff --git a/codec/src/test/java/io/netty/handler/codec/compression/AbstractDecoderTest.java b/codec/src/test/java/io/netty/handler/codec/compression/AbstractDecoderTest.java
index 099db80..2d708d8 100644
--- a/codec/src/test/java/io/netty/handler/codec/compression/AbstractDecoderTest.java
+++ b/codec/src/test/java/io/netty/handler/codec/compression/AbstractDecoderTest.java
@@ -31,13 +31,10 @@ import static org.junit.jupiter.api.Assertions.assertTrue;
 @TestInstance(TestInstance.Lifecycle.PER_CLASS)
 public abstract class AbstractDecoderTest extends AbstractCompressionTest {
 
-    protected static final ByteBuf WRAPPED_BYTES_SMALL;
-    protected static final ByteBuf WRAPPED_BYTES_LARGE;
-
-    static {
-        WRAPPED_BYTES_SMALL = Unpooled.wrappedBuffer(BYTES_SMALL);
-        WRAPPED_BYTES_LARGE = Unpooled.wrappedBuffer(BYTES_LARGE);
-    }
+    protected static final ByteBuf WRAPPED_BYTES_SMALL = Unpooled.unreleasableBuffer(
+            Unpooled.wrappedBuffer(BYTES_SMALL)).asReadOnly();
+    protected static final ByteBuf WRAPPED_BYTES_LARGE = Unpooled.unreleasableBuffer(
+            Unpooled.wrappedBuffer(BYTES_LARGE)).asReadOnly();
 
     protected EmbeddedChannel channel;
 
@@ -86,19 +83,19 @@ public abstract class AbstractDecoderTest extends AbstractCompressionTest {
     @ParameterizedTest
     @MethodSource("smallData")
     public void testDecompressionOfSmallChunkOfData(ByteBuf data) throws Exception {
-        testDecompression(WRAPPED_BYTES_SMALL, data);
+        testDecompression(WRAPPED_BYTES_SMALL.duplicate(), data);
     }
 
     @ParameterizedTest
     @MethodSource("largeData")
     public void testDecompressionOfLargeChunkOfData(ByteBuf data) throws Exception {
-        testDecompression(WRAPPED_BYTES_LARGE, data);
+        testDecompression(WRAPPED_BYTES_LARGE.duplicate(), data);
     }
 
     @ParameterizedTest
     @MethodSource("largeData")
     public void testDecompressionOfBatchedFlowOfData(ByteBuf data) throws Exception {
-        testDecompressionOfBatchedFlow(WRAPPED_BYTES_LARGE, data);
+        testDecompressionOfBatchedFlow(WRAPPED_BYTES_LARGE.duplicate(), data);
     }
 
     protected void testDecompression(final ByteBuf expected, final ByteBuf data) throws Exception {
diff --git a/codec/src/test/java/io/netty/handler/codec/compression/BrotliDecoderTest.java b/codec/src/test/java/io/netty/handler/codec/compression/BrotliDecoderTest.java
index dfd86538..a513d6e 100644
--- a/codec/src/test/java/io/netty/handler/codec/compression/BrotliDecoderTest.java
+++ b/codec/src/test/java/io/netty/handler/codec/compression/BrotliDecoderTest.java
@@ -41,8 +41,6 @@ public class BrotliDecoderTest {
     private static final Random RANDOM;
     private static final byte[] BYTES_SMALL = new byte[256];
     private static final byte[] BYTES_LARGE = new byte[256 * 1024];
-    private static final ByteBuf WRAPPED_BYTES_SMALL;
-    private static final ByteBuf WRAPPED_BYTES_LARGE;
     private static final byte[] COMPRESSED_BYTES_SMALL;
     private static final byte[] COMPRESSED_BYTES_LARGE;
 
@@ -52,8 +50,6 @@ public class BrotliDecoderTest {
             RANDOM = new Random();
             fillArrayWithCompressibleData(BYTES_SMALL);
             fillArrayWithCompressibleData(BYTES_LARGE);
-            WRAPPED_BYTES_SMALL = Unpooled.wrappedBuffer(BYTES_SMALL);
-            WRAPPED_BYTES_LARGE = Unpooled.wrappedBuffer(BYTES_LARGE);
             COMPRESSED_BYTES_SMALL = compress(BYTES_SMALL);
             COMPRESSED_BYTES_LARGE = compress(BYTES_LARGE);
         } catch (Throwable throwable) {
@@ -61,6 +57,11 @@ public class BrotliDecoderTest {
         }
     }
 
+    private static final ByteBuf WRAPPED_BYTES_SMALL = Unpooled.unreleasableBuffer(
+            Unpooled.wrappedBuffer(BYTES_SMALL)).asReadOnly();
+    private static final ByteBuf WRAPPED_BYTES_LARGE = Unpooled.unreleasableBuffer(
+            Unpooled.wrappedBuffer(BYTES_LARGE)).asReadOnly();
+
     static boolean isNotSupported() {
         return PlatformDependent.isOsx() && "aarch_64".equals(PlatformDependent.normalizedArch());
     }
@@ -111,13 +112,13 @@ public class BrotliDecoderTest {
     @ParameterizedTest
     @MethodSource("smallData")
     public void testDecompressionOfSmallChunkOfData(ByteBuf data) {
-        testDecompression(WRAPPED_BYTES_SMALL, data);
+        testDecompression(WRAPPED_BYTES_SMALL.duplicate(), data);
     }
 
     @ParameterizedTest
     @MethodSource("largeData")
     public void testDecompressionOfLargeChunkOfData(ByteBuf data) {
-        testDecompression(WRAPPED_BYTES_LARGE, data);
+        testDecompression(WRAPPED_BYTES_LARGE.duplicate(), data);
     }
 
     @ParameterizedTest

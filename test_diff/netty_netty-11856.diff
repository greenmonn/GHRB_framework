diff --git a/common/src/test/java/io/netty/util/internal/NativeLibraryLoaderTest.java b/common/src/test/java/io/netty/util/internal/NativeLibraryLoaderTest.java
index e51e8a3..f7d0d88 100644
--- a/common/src/test/java/io/netty/util/internal/NativeLibraryLoaderTest.java
+++ b/common/src/test/java/io/netty/util/internal/NativeLibraryLoaderTest.java
@@ -16,17 +16,31 @@
 package io.netty.util.internal;
 
 import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.condition.EnabledIf;
+import org.junit.jupiter.api.condition.EnabledOnOs;
+import org.junit.jupiter.api.function.Executable;
 
+import java.io.File;
 import java.io.FileNotFoundException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
 import java.util.UUID;
 
+import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.junit.jupiter.api.Assertions.fail;
+import static org.junit.jupiter.api.condition.OS.LINUX;
 
-public class NativeLibraryLoaderTest {
+class NativeLibraryLoaderTest {
+
+    private static final String OS_ARCH = System.getProperty("os.arch");
+    private boolean is_x86_64() {
+        return "x86_64".equals(OS_ARCH) || "amd64".equals(OS_ARCH);
+    }
 
     @Test
-    public void testFileNotFound() {
+    void testFileNotFound() {
         try {
             NativeLibraryLoader.load(UUID.randomUUID().toString(), NativeLibraryLoaderTest.class.getClassLoader());
             fail();
@@ -39,7 +53,7 @@ public class NativeLibraryLoaderTest {
     }
 
     @Test
-    public void testFileNotFoundWithNullClassLoader() {
+    void testFileNotFoundWithNullClassLoader() {
         try {
             NativeLibraryLoader.load(UUID.randomUUID().toString(), null);
             fail();
@@ -51,6 +65,38 @@ public class NativeLibraryLoaderTest {
         }
     }
 
+    @Test
+    @EnabledOnOs(LINUX)
+    @EnabledIf("is_x86_64")
+    void testMultipleResourcesInTheClassLoader() throws MalformedURLException {
+        URL url1 = new File("src/test/data/NativeLibraryLoader/1").toURI().toURL();
+        URL url2 = new File("src/test/data/NativeLibraryLoader/2").toURI().toURL();
+        final URLClassLoader loader = new URLClassLoader(new URL[] {url1, url2});
+        final String resourceName = "test1";
+
+        Exception ise = assertThrows(IllegalStateException.class, new Executable() {
+            @Override
+            public void execute() {
+                NativeLibraryLoader.load(resourceName, loader);
+            }
+        });
+        assertTrue(ise.getMessage()
+                    .contains("Multiple resources found for 'META-INF/native/lib" + resourceName + ".so'"));
+    }
+
+    @Test
+    @EnabledOnOs(LINUX)
+    @EnabledIf("is_x86_64")
+    void testSingleResourceInTheClassLoader() throws MalformedURLException {
+        URL url1 = new File("src/test/data/NativeLibraryLoader/1").toURI().toURL();
+        URL url2 = new File("src/test/data/NativeLibraryLoader/2").toURI().toURL();
+        URLClassLoader loader = new URLClassLoader(new URL[] {url1, url2});
+        String resourceName = "test2";
+
+        NativeLibraryLoader.load(resourceName, loader);
+        assertTrue(true);
+    }
+
     @SuppressJava6Requirement(reason = "uses Java 7+ Throwable#getSuppressed but is guarded by version checks")
     private static void verifySuppressedException(UnsatisfiedLinkError error,
             Class<?> expectedSuppressedExceptionClass) {

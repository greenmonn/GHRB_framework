diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00Test.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00Test.java
index 9d1606f..d84c903 100644
--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00Test.java
+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker00Test.java
@@ -23,9 +23,9 @@ import java.net.URI;
 public class WebSocketClientHandshaker00Test extends WebSocketClientHandshakerTest {
     @Override
     protected WebSocketClientHandshaker newHandshaker(URI uri, String subprotocol, HttpHeaders headers,
-                                                      boolean absoluteUpgradeUrl) {
+                                                      boolean absoluteUpgradeUrl, boolean generateOriginHeader) {
         return new WebSocketClientHandshaker00(uri, WebSocketVersion.V00, subprotocol, headers,
-          1024, 10000, absoluteUpgradeUrl);
+          1024, 10000, absoluteUpgradeUrl, generateOriginHeader);
     }
 
     @Override
diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07Test.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07Test.java
index 692bc3b..e3f04da 100644
--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07Test.java
+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker07Test.java
@@ -31,7 +31,7 @@ public class WebSocketClientHandshaker07Test extends WebSocketClientHandshakerTe
     public void testHostHeaderPreserved() {
         URI uri = URI.create("ws://localhost:9999");
         WebSocketClientHandshaker handshaker = newHandshaker(uri, null,
-                new DefaultHttpHeaders().set(HttpHeaderNames.HOST, "test.netty.io"), false);
+                new DefaultHttpHeaders().set(HttpHeaderNames.HOST, "test.netty.io"), false, true);
 
         FullHttpRequest request = handshaker.newHandshakeRequest();
         try {
@@ -44,10 +44,10 @@ public class WebSocketClientHandshaker07Test extends WebSocketClientHandshakerTe
 
     @Override
     protected WebSocketClientHandshaker newHandshaker(URI uri, String subprotocol, HttpHeaders headers,
-                                                      boolean absoluteUpgradeUrl) {
+                                                      boolean absoluteUpgradeUrl, boolean generateOriginHeader) {
         return new WebSocketClientHandshaker07(uri, WebSocketVersion.V07, subprotocol, false, headers,
           1024, true, false, 10000,
-          absoluteUpgradeUrl);
+          absoluteUpgradeUrl, generateOriginHeader);
     }
 
     @Override
diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08Test.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08Test.java
index 34c5fb7..aa8e11d 100644
--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08Test.java
+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker08Test.java
@@ -22,9 +22,9 @@ import java.net.URI;
 public class WebSocketClientHandshaker08Test extends WebSocketClientHandshaker07Test {
     @Override
     protected WebSocketClientHandshaker newHandshaker(URI uri, String subprotocol, HttpHeaders headers,
-                                                      boolean absoluteUpgradeUrl) {
+                                                      boolean absoluteUpgradeUrl, boolean generateOriginHeader) {
         return new WebSocketClientHandshaker08(uri, WebSocketVersion.V08, subprotocol, false, headers,
           1024, true, true, 10000,
-          absoluteUpgradeUrl);
+          absoluteUpgradeUrl, generateOriginHeader);
     }
 }
diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13Test.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13Test.java
index 2371cae..cd82f21 100644
--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13Test.java
+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshaker13Test.java
@@ -24,10 +24,10 @@ public class WebSocketClientHandshaker13Test extends WebSocketClientHandshaker07
 
     @Override
     protected WebSocketClientHandshaker newHandshaker(URI uri, String subprotocol, HttpHeaders headers,
-                                                      boolean absoluteUpgradeUrl) {
+                                                      boolean absoluteUpgradeUrl, boolean generateOriginHeader) {
         return new WebSocketClientHandshaker13(uri, WebSocketVersion.V13, subprotocol, false, headers,
           1024, true, true, 10000,
-          absoluteUpgradeUrl);
+          absoluteUpgradeUrl, generateOriginHeader);
     }
 
     @Override
diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerTest.java
index 1be884e..411e8ae 100644
--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerTest.java
+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketClientHandshakerTest.java
@@ -51,6 +51,7 @@ import static io.netty.handler.codec.http.HttpResponseStatus.SWITCHING_PROTOCOLS
 import static io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker13.WEBSOCKET_13_ACCEPT_GUID;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertInstanceOf;
 import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertNull;
@@ -59,10 +60,11 @@ import static org.junit.jupiter.api.Assertions.fail;
 
 public abstract class WebSocketClientHandshakerTest {
     protected abstract WebSocketClientHandshaker newHandshaker(URI uri, String subprotocol, HttpHeaders headers,
-                                                               boolean absoluteUpgradeUrl);
+                                                               boolean absoluteUpgradeUrl,
+                                                               boolean generateOriginHeader);
 
     protected WebSocketClientHandshaker newHandshaker(URI uri) {
-        return newHandshaker(uri, null, null, false);
+        return newHandshaker(uri, null, null, false, true);
     }
 
     protected abstract CharSequence getOriginHeaderName();
@@ -183,7 +185,7 @@ public abstract class WebSocketClientHandshakerTest {
     public void testSetOriginFromCustomHeaders() {
         HttpHeaders customHeaders = new DefaultHttpHeaders().set(getOriginHeaderName(), "http://example.com");
         WebSocketClientHandshaker handshaker = newHandshaker(URI.create("ws://server.example.com/chat"), null,
-                                                             customHeaders, false);
+                                                             customHeaders, false, true);
         FullHttpRequest request = handshaker.newHandshakeRequest();
         try {
             assertEquals("http://example.com", request.headers().get(getOriginHeaderName()));
@@ -192,6 +194,50 @@ public abstract class WebSocketClientHandshakerTest {
         }
     }
 
+    @Test
+    public void testOriginHeaderIsAbsentWhenGeneratingDisable() {
+        URI uri = URI.create("http://example.com/ws");
+        WebSocketClientHandshaker handshaker = newHandshaker(uri, null, null, false, false);
+        FullHttpRequest request = handshaker.newHandshakeRequest();
+        try {
+            assertFalse(request.headers().contains(getOriginHeaderName()));
+            assertEquals("/ws", request.uri());
+        } finally {
+            request.release();
+        }
+    }
+
+    @Test
+    public void testInvalidHostWhenIncorrectWebSocketURI() {
+        URI uri = URI.create("/ws");
+        EmbeddedChannel channel = new EmbeddedChannel(new HttpClientCodec());
+        final WebSocketClientHandshaker handshaker = newHandshaker(uri, null, null, false, true);
+        final ChannelFuture handshakeFuture = handshaker.handshake(channel);
+
+        assertFalse(handshakeFuture.isSuccess());
+        assertInstanceOf(IllegalArgumentException.class, handshakeFuture.cause());
+        assertEquals("Cannot generate the 'host' header value, webSocketURI should contain host" +
+                     " or passed through customHeaders", handshakeFuture.cause().getMessage());
+        assertFalse(channel.finish());
+    }
+
+    @Test
+    public void testInvalidOriginWhenIncorrectWebSocketURI() {
+        URI uri = URI.create("/ws");
+        EmbeddedChannel channel = new EmbeddedChannel(new HttpClientCodec());
+        HttpHeaders headers = new DefaultHttpHeaders();
+        headers.set(HttpHeaderNames.HOST, "localhost:80");
+        final WebSocketClientHandshaker handshaker = newHandshaker(uri, null, headers, false, true);
+        final ChannelFuture handshakeFuture = handshaker.handshake(channel);
+
+        assertFalse(handshakeFuture.isSuccess());
+        assertInstanceOf(IllegalArgumentException.class, handshakeFuture.cause());
+        assertEquals("Cannot generate the '" + getOriginHeaderName() + "' header value," +
+                     " webSocketURI should contain host or disable generateOriginHeader" +
+                     " or pass value through customHeaders", handshakeFuture.cause().getMessage());
+        assertFalse(channel.finish());
+    }
+
     private void testHostHeader(String uri, String expected) {
         testHeaderDefaultHttp(uri, HttpHeaderNames.HOST, expected);
     }
@@ -262,7 +308,7 @@ public abstract class WebSocketClientHandshakerTest {
     @Test
     public void testAbsoluteUpgradeUrlWithQuery() {
         URI uri = URI.create("ws://localhost:9999/path%20with%20ws?a=b%20c");
-        WebSocketClientHandshaker handshaker = newHandshaker(uri, null, null, true);
+        WebSocketClientHandshaker handshaker = newHandshaker(uri, null, null, true, true);
         FullHttpRequest request = handshaker.newHandshakeRequest();
         try {
             assertEquals("ws://localhost:9999/path%20with%20ws?a=b%20c", request.uri());
@@ -392,7 +438,7 @@ public abstract class WebSocketClientHandshakerTest {
         inputHeaders.add(getProtocolHeaderName(), bogusSubProtocol);
 
         String realSubProtocol = "realSubProtocol";
-        WebSocketClientHandshaker handshaker = newHandshaker(uri, realSubProtocol, inputHeaders, false);
+        WebSocketClientHandshaker handshaker = newHandshaker(uri, realSubProtocol, inputHeaders, false, true);
         FullHttpRequest request = handshaker.newHandshakeRequest();
         HttpHeaders outputHeaders = request.headers();
 
@@ -412,7 +458,7 @@ public abstract class WebSocketClientHandshakerTest {
     @Test
     public void testWebSocketClientHandshakeException() {
         URI uri = URI.create("ws://localhost:9999/exception");
-        WebSocketClientHandshaker handshaker = newHandshaker(uri, null, null, false);
+        WebSocketClientHandshaker handshaker = newHandshaker(uri, null, null, false, true);
         FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.UNAUTHORIZED);
         response.headers().set(HttpHeaderNames.WWW_AUTHENTICATE, "realm = access token required");
 

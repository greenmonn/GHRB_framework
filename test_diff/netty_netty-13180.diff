diff --git a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandlerTest.java b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandlerTest.java
index 82124a7..96c2085 100644
--- a/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandlerTest.java
+++ b/codec-http/src/test/java/io/netty/handler/codec/http/websocketx/extensions/WebSocketServerExtensionHandlerTest.java
@@ -25,6 +25,7 @@ import java.io.IOException;
 import java.util.Collections;
 import java.util.List;
 
+import io.netty.handler.codec.http.LastHttpContent;
 import org.junit.jupiter.api.Test;
 
 import static io.netty.handler.codec.http.websocketx.extensions.WebSocketExtensionTestUtil.*;
@@ -41,11 +42,18 @@ public class WebSocketServerExtensionHandlerTest {
             mock(WebSocketServerExtensionHandshaker.class, "mainHandshaker");
     WebSocketServerExtensionHandshaker fallbackHandshakerMock =
             mock(WebSocketServerExtensionHandshaker.class, "fallbackHandshaker");
+
+    WebSocketServerExtensionHandshaker main2HandshakerMock =
+            mock(WebSocketServerExtensionHandshaker.class, "main2Handshaker");
     WebSocketServerExtension mainExtensionMock =
             mock(WebSocketServerExtension.class, "mainExtension");
+
     WebSocketServerExtension fallbackExtensionMock =
             mock(WebSocketServerExtension.class, "fallbackExtension");
 
+    WebSocketServerExtension main2ExtensionMock =
+            mock(WebSocketServerExtension.class, "main2Extension");
+
     @Test
     public void testMainSuccess() {
         // initialize
@@ -229,4 +237,51 @@ public class WebSocketServerExtensionHandlerTest {
         assertNotNull(ch.pipeline().context(extensionHandler));
         assertTrue(ch.finish());
     }
+
+    @Test
+    public void testExtensionMultipleRequests() {
+        // initialize
+        when(mainHandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("main")))
+                .thenReturn(mainExtensionMock);
+
+        when(mainExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV1);
+        when(mainExtensionMock.newReponseData()).thenReturn(
+                new WebSocketExtensionData("main", Collections.<String, String>emptyMap()));
+        when(mainExtensionMock.newExtensionEncoder()).thenReturn(new DummyEncoder());
+        when(mainExtensionMock.newExtensionDecoder()).thenReturn(new DummyDecoder());
+
+        when(main2HandshakerMock.handshakeExtension(webSocketExtensionDataMatcher("main2")))
+                .thenReturn(main2ExtensionMock);
+
+        when(main2ExtensionMock.rsv()).thenReturn(WebSocketExtension.RSV1);
+        when(main2ExtensionMock.newReponseData()).thenReturn(
+                new WebSocketExtensionData("main2", Collections.<String, String>emptyMap()));
+        when(main2ExtensionMock.newExtensionEncoder()).thenReturn(new DummyEncoder());
+        when(main2ExtensionMock.newExtensionDecoder()).thenReturn(new DummyDecoder());
+
+        // execute
+        WebSocketServerExtensionHandler extensionHandler =
+                new WebSocketServerExtensionHandler(mainHandshakerMock, main2HandshakerMock);
+        EmbeddedChannel ch = new EmbeddedChannel(extensionHandler);
+
+        HttpRequest req = newUpgradeRequest("main");
+        assertTrue(ch.writeInbound(req));
+        assertTrue(ch.writeInbound(LastHttpContent.EMPTY_LAST_CONTENT));
+
+        HttpRequest req2 = newUpgradeRequest("main2");
+        assertTrue(ch.writeInbound(req2));
+        assertTrue(ch.writeInbound(LastHttpContent.EMPTY_LAST_CONTENT));
+
+        HttpResponse res = newUpgradeResponse(null);
+        assertTrue(ch.writeOutbound(res));
+        assertTrue(ch.writeOutbound(LastHttpContent.EMPTY_LAST_CONTENT));
+
+        res = ch.readOutbound();
+        assertEquals("main", res.headers().get(HttpHeaderNames.SEC_WEBSOCKET_EXTENSIONS));
+        LastHttpContent content = ch.readOutbound();
+        content.release();
+
+        assertNull(ch.pipeline().context(extensionHandler));
+        assertTrue(ch.finishAndReleaseAll());
+    }
 }

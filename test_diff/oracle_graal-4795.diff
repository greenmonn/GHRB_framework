diff --git a/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/NativeImageResourceUtils.java b/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/NativeImageResourceUtils.java
index b5d5e58..43dbc04 100644
--- a/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/NativeImageResourceUtils.java
+++ b/substratevm/src/com.oracle.svm.test/src/com/oracle/svm/test/NativeImageResourceUtils.java
@@ -34,14 +34,10 @@ import java.net.URLConnection;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 
-import org.graalvm.nativeimage.ImageSingletons;
 import org.graalvm.nativeimage.hosted.Feature;
-import org.graalvm.nativeimage.impl.ConfigurationCondition;
+import org.graalvm.nativeimage.hosted.RuntimeResourceAccess;
 import org.junit.Assert;
 
-import com.oracle.svm.core.configure.ResourcesRegistry;
-import com.oracle.svm.util.ModuleSupport;
-
 public class NativeImageResourceUtils {
 
     public static final String RESOURCE_DIR = "/resources";
@@ -51,22 +47,16 @@ public class NativeImageResourceUtils {
     // Register resources.
     public static final class TestFeature implements Feature {
         @Override
-        public void afterRegistration(AfterRegistrationAccess access) {
-            ModuleSupport.accessPackagesToClass(ModuleSupport.Access.EXPORT, TestFeature.class, false, "org.graalvm.sdk", "org.graalvm.nativeimage.impl");
-            ModuleSupport.accessPackagesToClass(ModuleSupport.Access.EXPORT, TestFeature.class, false, "org.graalvm.nativeimage.builder", "com.oracle.svm.core.configure");
-        }
-
-        @Override
         public void beforeAnalysis(BeforeAnalysisAccess access) {
-            ResourcesRegistry registry = ImageSingletons.lookup(ResourcesRegistry.class);
             // Remove leading / for the resource patterns
-            registry.addResources(ConfigurationCondition.alwaysTrue(), RESOURCE_DIR.substring(1));
-            registry.addResources(ConfigurationCondition.alwaysTrue(), RESOURCE_FILE_1.substring(1));
-            registry.addResources(ConfigurationCondition.alwaysTrue(), RESOURCE_FILE_2.substring(1));
+            Module resourceModule = TestFeature.class.getModule();
+            RuntimeResourceAccess.addResource(resourceModule, RESOURCE_DIR.substring(1));
+            RuntimeResourceAccess.addResource(resourceModule, RESOURCE_FILE_1.substring(1));
+            RuntimeResourceAccess.addResource(resourceModule, RESOURCE_FILE_2.substring(1));
 
             /** Needed for {@link #testURLExternalFormEquivalence()} */
             for (Module module : ModuleLayer.boot().modules()) {
-                registry.addResources(ConfigurationCondition.alwaysTrue(), module.getName() + ":" + "module-info.class");
+                RuntimeResourceAccess.addResource(module, "module-info.class");
             }
         }
     }

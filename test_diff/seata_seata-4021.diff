diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/BaseConfigPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/BaseConfigPropertiesTest.java
deleted file mode 100644
index f9cc1a9..0000000
--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/BaseConfigPropertiesTest.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- *  Copyright 1999-2019 Seata.io Group.
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package io.seata.spring.boot.autoconfigure;
-
-import org.junit.jupiter.api.AfterAll;
-import org.junit.jupiter.api.BeforeAll;
-import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-
-/**
- * @author slievrly
- */
-public class BaseConfigPropertiesTest {
-    protected static AnnotationConfigApplicationContext applicationContex;
-    protected static final String STR_TEST_AAA = "aaa";
-    protected static final String STR_TEST_BBB = "bbb";
-    protected static final String STR_TEST_CCC = "ccc";
-    protected static final String STR_TEST_DDD = "ddd";
-    protected static final String STR_TEST_EEE = "eee";
-    protected static final String STR_TEST_FFF = "fff";
-
-    @BeforeAll
-    public static void setUp() {
-        applicationContex = new AnnotationConfigApplicationContext(
-            new String[] {"io.seata.spring.boot.autoconfigure.properties.test"});
-        SeataCoreEnvironmentPostProcessor processor = new SeataCoreEnvironmentPostProcessor();
-        processor.postProcessEnvironment(null, null);
-    }
-
-    @AfterAll
-    public static void tearDown() {
-        if (null != applicationContex) {
-            applicationContex.close();
-        }
-    }
-
-}
\ No newline at end of file
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/BasePropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/BasePropertiesTest.java
new file mode 100644
index 0000000..2cc307d
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/BasePropertiesTest.java
@@ -0,0 +1,45 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure;
+
+import org.junit.jupiter.api.BeforeEach;
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+
+/**
+ * @author slievrly
+ */
+public class BasePropertiesTest {
+    protected static AnnotationConfigApplicationContext applicationContex;
+    protected static final String STR_TEST_AAA = "aaa";
+    protected static final String STR_TEST_BBB = "bbb";
+    protected static final String STR_TEST_CCC = "ccc";
+    protected static final String STR_TEST_DDD = "ddd";
+    protected static final String STR_TEST_EEE = "eee";
+    protected static final String STR_TEST_FFF = "fff";
+
+    protected static final long LONG_TEST_ONE = 1L;
+    protected static final long LONG_TEST_TWO = 2L;
+
+    @BeforeEach
+    public void setUp() {
+        applicationContex = new AnnotationConfigApplicationContext(
+            new String[] {"io.seata.spring.boot.autoconfigure.properties.config.test"});
+        SeataCoreEnvironmentPostProcessor processor = new SeataCoreEnvironmentPostProcessor();
+        processor.postProcessEnvironment(null, null);
+    }
+
+}
\ No newline at end of file
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/CorePropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/CorePropertiesTest.java
index 393e13f..210a778 100644
--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/CorePropertiesTest.java
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/CorePropertiesTest.java
@@ -19,13 +19,6 @@ import io.seata.spring.boot.autoconfigure.properties.LogProperties;
 import io.seata.spring.boot.autoconfigure.properties.ShutdownProperties;
 import io.seata.spring.boot.autoconfigure.properties.ThreadFactoryProperties;
 import io.seata.spring.boot.autoconfigure.properties.TransportProperties;
-import io.seata.spring.boot.autoconfigure.properties.config.ConfigConsulProperties;
-import io.seata.spring.boot.autoconfigure.properties.config.ConfigCustomProperties;
-import io.seata.spring.boot.autoconfigure.properties.config.ConfigEtcd3Properties;
-import io.seata.spring.boot.autoconfigure.properties.config.ConfigFileProperties;
-import io.seata.spring.boot.autoconfigure.properties.config.ConfigNacosProperties;
-import io.seata.spring.boot.autoconfigure.properties.config.ConfigProperties;
-import io.seata.spring.boot.autoconfigure.properties.config.ConfigZooKeeperProperties;
 import io.seata.spring.boot.autoconfigure.properties.registry.RegistryConsulProperties;
 import io.seata.spring.boot.autoconfigure.properties.registry.RegistryCustomProperties;
 import io.seata.spring.boot.autoconfigure.properties.registry.RegistryEtcd3Properties;
@@ -89,43 +82,6 @@ public class CorePropertiesTest {
         assertEquals(100, context.getBean(LogProperties.class).getExceptionRate());
     }
 
-    @Test
-    public void testConfigConsulProperties() {
-        assertEquals("127.0.0.1:8500", context.getBean(ConfigConsulProperties.class).getServerAddr());
-    }
-
-    @Test
-    public void testConfigEtcd3Properties() {
-        assertEquals("http://localhost:2379", context.getBean(ConfigEtcd3Properties.class).getServerAddr());
-    }
-
-    @Test
-    public void testConfigFileProperties() {
-        assertEquals("file.conf", context.getBean(ConfigFileProperties.class).getName());
-    }
-
-    @Test
-    public void testConfigNacosProperties() {
-        assertEquals("localhost:8848", context.getBean(ConfigNacosProperties.class).getServerAddr());
-        assertEquals("", context.getBean(ConfigNacosProperties.class).getNamespace());
-    }
-
-    @Test
-    public void testConfigProperties() {
-        assertEquals("file", context.getBean(ConfigProperties.class).getType());
-    }
-
-    @Test
-    public void testConfigZooKeeperProperties() {
-        assertEquals("127.0.0.1:2181", context.getBean(ConfigZooKeeperProperties.class).getServerAddr());
-        assertEquals(6000L, context.getBean(ConfigZooKeeperProperties.class).getSessionTimeout());
-        assertEquals(2000L, context.getBean(ConfigZooKeeperProperties.class).getConnectTimeout());
-    }
-
-    @Test
-    public void testConfigCustomProperties() {
-        assertEquals("", context.getBean(ConfigCustomProperties.class).getName());
-    }
 
     @Test
     public void testRegistryConsulProperties() {
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ApolloPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ApolloPropertiesTest.java
new file mode 100644
index 0000000..facdcc1
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ApolloPropertiesTest.java
@@ -0,0 +1,60 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure.properties.config.test;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.config.Configuration;
+import io.seata.config.ExtConfigurationProvider;
+import io.seata.config.FileConfiguration;
+import io.seata.config.apollo.ApolloConfiguration;
+import io.seata.spring.boot.autoconfigure.BasePropertiesTest;
+import io.seata.spring.boot.autoconfigure.properties.config.ConfigApolloProperties;
+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
+import org.junit.jupiter.api.Test;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+
+/**
+ * @author slievrly
+ */
+@org.springframework.context.annotation.Configuration
+@Import(SpringApplicationContextProvider.class)
+class ApolloPropertiesTest extends BasePropertiesTest {
+
+    @Bean
+    public ConfigApolloProperties configApolloProperties() {
+        return new ConfigApolloProperties().setApolloMeta(STR_TEST_AAA).setApolloAccessKeySecret(STR_TEST_BBB).setAppId(
+            STR_TEST_CCC).setNamespace(STR_TEST_DDD).setCluster(STR_TEST_EEE).setApolloConfigService(STR_TEST_FFF);
+    }
+
+    @Test
+    public void testConfigApolloProperties() {
+        FileConfiguration configuration = mock(FileConfiguration.class);
+        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(
+            configuration);
+
+        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig(ApolloConfiguration.getApolloMetaFileKey()));
+        assertEquals(STR_TEST_BBB, currentConfiguration.getConfig(ApolloConfiguration.getApolloSecretFileKey()));
+        assertEquals(STR_TEST_CCC, currentConfiguration.getConfig(ApolloConfiguration.getApolloAppIdFileKey()));
+        assertEquals(STR_TEST_DDD, currentConfiguration.getConfig(ApolloConfiguration.getApolloNamespaceKey()));
+        assertEquals(STR_TEST_EEE, currentConfiguration.getConfig(ApolloConfiguration.getApolloCluster()));
+        assertEquals(STR_TEST_FFF, currentConfiguration.getConfig(ApolloConfiguration.getApolloConfigService()));
+    }
+}
\ No newline at end of file
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ConfigPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ConfigPropertiesTest.java
new file mode 100644
index 0000000..52ed16d
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ConfigPropertiesTest.java
@@ -0,0 +1,52 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure.properties.config.test;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.config.Configuration;
+import io.seata.config.ExtConfigurationProvider;
+import io.seata.config.FileConfiguration;
+import io.seata.spring.boot.autoconfigure.BasePropertiesTest;
+import io.seata.spring.boot.autoconfigure.properties.config.ConfigProperties;
+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
+import org.junit.jupiter.api.Test;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+
+/**
+ * @author slievrly
+ */
+@org.springframework.context.annotation.Configuration
+@Import(SpringApplicationContextProvider.class)
+public class ConfigPropertiesTest extends BasePropertiesTest {
+    @Bean
+    public ConfigProperties configProperties() {
+        return new ConfigProperties().setType(STR_TEST_AAA).setDataType(STR_TEST_BBB);
+    }
+
+    @Test
+    public void testConfigFileProperties() {
+        FileConfiguration configuration = mock(FileConfiguration.class);
+        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);
+
+        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig("config.type"));
+        assertEquals(STR_TEST_BBB, currentConfiguration.getConfig("config.dataType"));
+    }
+}
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ConsulPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ConsulPropertiesTest.java
new file mode 100644
index 0000000..96d7524
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ConsulPropertiesTest.java
@@ -0,0 +1,53 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure.properties.config.test;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.config.Configuration;
+import io.seata.config.ExtConfigurationProvider;
+import io.seata.config.FileConfiguration;
+import io.seata.spring.boot.autoconfigure.BasePropertiesTest;
+import io.seata.spring.boot.autoconfigure.properties.config.ConfigConsulProperties;
+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
+import org.junit.jupiter.api.Test;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+
+/**
+ * @author slievrly
+ */
+@org.springframework.context.annotation.Configuration
+@Import(SpringApplicationContextProvider.class)
+public class ConsulPropertiesTest extends BasePropertiesTest {
+    @Bean
+    public ConfigConsulProperties configConsulProperties() {
+        return new ConfigConsulProperties().setServerAddr(STR_TEST_AAA).setAclToken(STR_TEST_BBB).setKey(STR_TEST_CCC);
+    }
+
+    @Test
+    public void testConfigConsulProperties() {
+        FileConfiguration configuration = mock(FileConfiguration.class);
+        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);
+
+        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig("config.consul.serverAddr"));
+        assertEquals(STR_TEST_BBB, currentConfiguration.getConfig("config.consul.aclToken"));
+        assertEquals(STR_TEST_CCC, currentConfiguration.getConfig("config.consul.key"));
+    }
+}
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/CustomPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/CustomPropertiesTest.java
new file mode 100644
index 0000000..da1b9e2
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/CustomPropertiesTest.java
@@ -0,0 +1,53 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure.properties.config.test;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.config.Configuration;
+import io.seata.config.ExtConfigurationProvider;
+import io.seata.config.FileConfiguration;
+import io.seata.spring.boot.autoconfigure.BasePropertiesTest;
+import io.seata.spring.boot.autoconfigure.properties.config.ConfigCustomProperties;
+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
+import org.junit.jupiter.api.Test;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+
+/**
+ * @author slievrly
+ */
+@org.springframework.context.annotation.Configuration
+@Import(SpringApplicationContextProvider.class)
+public class CustomPropertiesTest extends BasePropertiesTest {
+
+    @Bean
+    public ConfigCustomProperties configCustomProperties() {
+        return new ConfigCustomProperties().setName(STR_TEST_AAA);
+    }
+
+    @Test
+    public void testConfigCustomProperties() {
+        FileConfiguration configuration = mock(FileConfiguration.class);
+        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);
+
+        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig("config.custom.name"));
+    }
+
+}
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/Etcd3PropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/Etcd3PropertiesTest.java
new file mode 100644
index 0000000..fb0158e
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/Etcd3PropertiesTest.java
@@ -0,0 +1,52 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure.properties.config.test;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.config.Configuration;
+import io.seata.config.ExtConfigurationProvider;
+import io.seata.config.FileConfiguration;
+import io.seata.spring.boot.autoconfigure.BasePropertiesTest;
+import io.seata.spring.boot.autoconfigure.properties.config.ConfigEtcd3Properties;
+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
+import org.junit.jupiter.api.Test;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+
+/**
+ * @author slievrly
+ */
+@org.springframework.context.annotation.Configuration
+@Import(SpringApplicationContextProvider.class)
+public class Etcd3PropertiesTest extends BasePropertiesTest {
+    @Bean
+    public ConfigEtcd3Properties configEtcd3Properties() {
+        return new ConfigEtcd3Properties().setServerAddr(STR_TEST_AAA).setKey(STR_TEST_BBB);
+    }
+
+    @Test
+    public void testConfigEtcd3Properties() {
+        FileConfiguration configuration = mock(FileConfiguration.class);
+        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);
+
+        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig("config.etcd3.serverAddr"));
+        assertEquals(STR_TEST_BBB, currentConfiguration.getConfig("config.etcd3.key"));
+    }
+}
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/FilePropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/FilePropertiesTest.java
new file mode 100644
index 0000000..5279dda
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/FilePropertiesTest.java
@@ -0,0 +1,51 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure.properties.config.test;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.config.Configuration;
+import io.seata.config.ExtConfigurationProvider;
+import io.seata.config.FileConfiguration;
+import io.seata.spring.boot.autoconfigure.BasePropertiesTest;
+import io.seata.spring.boot.autoconfigure.properties.config.ConfigFileProperties;
+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
+import org.junit.jupiter.api.Test;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+
+/**
+ * @author slievrly
+ */
+@org.springframework.context.annotation.Configuration
+@Import(SpringApplicationContextProvider.class)
+public class FilePropertiesTest extends BasePropertiesTest {
+    @Bean
+    public ConfigFileProperties configFileProperties() {
+        return new ConfigFileProperties().setName(STR_TEST_AAA);
+    }
+
+    @Test
+    public void testConfigFileProperties() {
+        FileConfiguration configuration = mock(FileConfiguration.class);
+        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);
+
+        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig("config.file.name"));
+    }
+}
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/NacosPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/NacosPropertiesTest.java
new file mode 100644
index 0000000..b035792
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/NacosPropertiesTest.java
@@ -0,0 +1,57 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure.properties.config.test;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.config.Configuration;
+import io.seata.config.ExtConfigurationProvider;
+import io.seata.config.FileConfiguration;
+import io.seata.config.nacos.NacosConfiguration;
+import io.seata.spring.boot.autoconfigure.BasePropertiesTest;
+import io.seata.spring.boot.autoconfigure.properties.config.ConfigNacosProperties;
+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
+import org.junit.jupiter.api.Test;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+
+/**
+ * @author slievrly
+ */
+@org.springframework.context.annotation.Configuration
+@Import(SpringApplicationContextProvider.class)
+public class NacosPropertiesTest extends BasePropertiesTest {
+    @Bean
+    public ConfigNacosProperties configNacosProperties() {
+        return new ConfigNacosProperties().setServerAddr(STR_TEST_AAA).setDataId(STR_TEST_BBB).setGroup(STR_TEST_CCC).setNamespace(STR_TEST_DDD).setUsername(STR_TEST_EEE).setPassword(STR_TEST_FFF);
+    }
+
+    @Test
+    public void testConfigNacosProperties() {
+        FileConfiguration configuration = mock(FileConfiguration.class);
+        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);
+
+        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig(NacosConfiguration.getNacosAddrFileKey()));
+        assertEquals(STR_TEST_BBB, currentConfiguration.getConfig(NacosConfiguration.getNacosDataIdKey()));
+        assertEquals(STR_TEST_CCC, currentConfiguration.getConfig(NacosConfiguration.getNacosGroupKey()));
+        assertEquals(STR_TEST_DDD, currentConfiguration.getConfig(NacosConfiguration.getNacosNameSpaceFileKey()));
+        assertEquals(STR_TEST_EEE, currentConfiguration.getConfig(NacosConfiguration.getNacosUserName()));
+        assertEquals(STR_TEST_FFF, currentConfiguration.getConfig(NacosConfiguration.getNacosPassword()));
+    }
+}
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ZooKeeperPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ZooKeeperPropertiesTest.java
new file mode 100644
index 0000000..2a2e5ed
--- /dev/null
+++ b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/config/test/ZooKeeperPropertiesTest.java
@@ -0,0 +1,57 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package io.seata.spring.boot.autoconfigure.properties.config.test;
+
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.config.Configuration;
+import io.seata.config.ExtConfigurationProvider;
+import io.seata.config.FileConfiguration;
+import io.seata.spring.boot.autoconfigure.BasePropertiesTest;
+import io.seata.spring.boot.autoconfigure.properties.config.ConfigZooKeeperProperties;
+import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
+import org.junit.jupiter.api.Test;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Import;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.mockito.Mockito.mock;
+
+/**
+ * @author slievrly
+ */
+@org.springframework.context.annotation.Configuration
+@Import(SpringApplicationContextProvider.class)
+public class ZooKeeperPropertiesTest extends BasePropertiesTest {
+    @Bean
+    public ConfigZooKeeperProperties configZooKeeperProperties() {
+        return new ConfigZooKeeperProperties().setNodePath(STR_TEST_AAA).setServerAddr(STR_TEST_BBB).setUsername(STR_TEST_CCC).setPassword(STR_TEST_DDD).setConnectTimeout(LONG_TEST_ONE).setSessionTimeout(LONG_TEST_TWO);
+    }
+
+    @Test
+    public void testConfigZooKeeperProperties() {
+        FileConfiguration configuration = mock(FileConfiguration.class);
+        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);
+
+        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig("config.zk.nodePath"));
+        assertEquals(STR_TEST_BBB, currentConfiguration.getConfig("config.zk.serverAddr"));
+        assertEquals(STR_TEST_CCC, currentConfiguration.getConfig("config.zk.username"));
+        assertEquals(STR_TEST_DDD, currentConfiguration.getConfig("config.zk.password"));
+        assertEquals(LONG_TEST_ONE, currentConfiguration.getLong("config.zk.connectTimeout"));
+        assertEquals(LONG_TEST_TWO, currentConfiguration.getLong("config.zk.sessionTimeout"));
+    }
+
+}
diff --git a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/test/ConfigApolloPropertiesTest.java b/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/test/ConfigApolloPropertiesTest.java
deleted file mode 100644
index 55a85e8..0000000
--- a/seata-spring-autoconfigure/seata-spring-autoconfigure-core/src/test/java/io/seata/spring/boot/autoconfigure/properties/test/ConfigApolloPropertiesTest.java
+++ /dev/null
@@ -1,60 +0,0 @@
-/*
- *  Copyright 1999-2019 Seata.io Group.
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package io.seata.spring.boot.autoconfigure.properties.test;
-
-import io.seata.common.loader.EnhancedServiceLoader;
-import io.seata.config.Configuration;
-import io.seata.config.ExtConfigurationProvider;
-import io.seata.config.FileConfiguration;
-import io.seata.config.apollo.ApolloConfiguration;
-import io.seata.spring.boot.autoconfigure.BaseConfigPropertiesTest;
-import io.seata.spring.boot.autoconfigure.properties.config.ConfigApolloProperties;
-import io.seata.spring.boot.autoconfigure.provider.SpringApplicationContextProvider;
-import org.junit.jupiter.api.Test;
-import org.springframework.context.annotation.Bean;
-import org.springframework.context.annotation.Import;
-
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.mockito.Mockito.mock;
-
-/**
- * @author slievrly
- */
-@org.springframework.context.annotation.Configuration
-@Import(SpringApplicationContextProvider.class)
-class ConfigApolloPropertiesTest extends BaseConfigPropertiesTest {
-
-    @Bean
-    public ConfigApolloProperties configApolloProperties() {
-        return new ConfigApolloProperties().setApolloMeta(STR_TEST_AAA).setApolloAccessKeySecret(STR_TEST_BBB).setAppId(
-            STR_TEST_CCC).setNamespace(STR_TEST_DDD).setCluster(STR_TEST_EEE).setApolloConfigService(STR_TEST_FFF);
-    }
-
-    @Test
-    public void testConfigApolloProperties() {
-        FileConfiguration configuration = mock(FileConfiguration.class);
-        Configuration currentConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(
-            configuration);
-
-        assertEquals(STR_TEST_AAA, currentConfiguration.getConfig(ApolloConfiguration.getApolloMetaFileKey()));
-        assertEquals(STR_TEST_BBB, currentConfiguration.getConfig(ApolloConfiguration.getApolloSecretFileKey()));
-        assertEquals(STR_TEST_CCC, currentConfiguration.getConfig(ApolloConfiguration.getApolloAppIdFileKey()));
-        assertEquals(STR_TEST_DDD, currentConfiguration.getConfig(ApolloConfiguration.getApolloNamespaceKey()));
-        assertEquals(STR_TEST_EEE, currentConfiguration.getConfig(ApolloConfiguration.getApolloCluster()));
-        assertEquals(STR_TEST_FFF, currentConfiguration.getConfig(ApolloConfiguration.getApolloConfigService()));
-    }
-}
\ No newline at end of file

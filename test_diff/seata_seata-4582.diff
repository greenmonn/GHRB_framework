diff --git a/server/src/test/java/io/seata/server/lock/redis/RedisLockManagerTest.java b/server/src/test/java/io/seata/server/lock/redis/RedisLockManagerTest.java
index 1dd756b..4c629aa 100644
--- a/server/src/test/java/io/seata/server/lock/redis/RedisLockManagerTest.java
+++ b/server/src/test/java/io/seata/server/lock/redis/RedisLockManagerTest.java
@@ -17,39 +17,30 @@ package io.seata.server.lock.redis;
 
 import java.io.IOException;
 
-import com.github.fppt.jedismock.RedisServer;
+import com.github.microwww.redis.RedisServer;
 import io.seata.core.exception.TransactionException;
 import io.seata.core.lock.Locker;
 import io.seata.server.lock.LockManager;
 import io.seata.server.session.BranchSession;
-import io.seata.server.storage.redis.JedisPooledFactory;
+import io.seata.server.session.redis.MockRedisServer;
 import io.seata.server.storage.redis.lock.RedisLockManager;
 import io.seata.server.storage.redis.lock.RedisLocker;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.ApplicationContext;
-import redis.clients.jedis.JedisPool;
-import redis.clients.jedis.JedisPoolConfig;
 
 /**
  * @author funkye
  */
 @SpringBootTest
 public class RedisLockManagerTest {
-    static RedisServer server = null;
     static LockManager lockManager = null;
 
     @BeforeAll
     public static void start(ApplicationContext context) throws IOException {
-        server = RedisServer.newRedisServer(6789);
-        server.start();
-        JedisPoolConfig poolConfig = new JedisPoolConfig();
-        poolConfig.setMinIdle(1);
-        poolConfig.setMaxIdle(10);
-        JedisPooledFactory.getJedisPoolInstance(new JedisPool(poolConfig, "127.0.0.1", 6789, 60000));
+        MockRedisServer.getInstance();
         lockManager = new RedisLockManagerForTest();
     }
 
@@ -94,12 +85,6 @@ public class RedisLockManagerTest {
             branchSession2.getLockKey()));
     }
 
-    @AfterAll
-    public static void after() {
-        server.stop();
-        server = null;
-    }
-
     public static class RedisLockManagerForTest extends RedisLockManager {
 
         public RedisLockManagerForTest() {}
diff --git a/server/src/test/java/io/seata/server/session/redis/MockRedisServer.java b/server/src/test/java/io/seata/server/session/redis/MockRedisServer.java
new file mode 100644
index 0000000..567b044
--- /dev/null
+++ b/server/src/test/java/io/seata/server/session/redis/MockRedisServer.java
@@ -0,0 +1,57 @@
+/*
+ *  Copyright 1999-2019 Seata.io Group.
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package io.seata.server.session.redis;
+
+import java.io.IOException;
+import com.github.microwww.redis.RedisServer;
+import io.seata.server.storage.redis.JedisPooledFactory;
+import redis.clients.jedis.JedisPool;
+import redis.clients.jedis.JedisPoolConfig;
+
+/**
+ * @author funkye
+ */
+public class MockRedisServer {
+
+    static {
+        RedisServer server = new RedisServer();
+        try {
+            server.listener("127.0.0.1", 6789);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        JedisPoolConfig poolConfig = new JedisPoolConfig();
+        poolConfig.setMinIdle(10);
+        poolConfig.setMaxIdle(100);
+        JedisPooledFactory.getJedisPoolInstance(new JedisPool(poolConfig, "127.0.0.1", 6789, 2000));
+        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
+            try {
+                server.close();
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }));
+    }
+
+    private static class Instance {
+        private static final MockRedisServer mockredis = new MockRedisServer();
+    }
+
+    public static MockRedisServer getInstance() {
+        return Instance.mockredis;
+    }
+
+}
diff --git a/server/src/test/java/io/seata/server/session/redis/RedisDistributedLockerTest.java b/server/src/test/java/io/seata/server/session/redis/RedisDistributedLockerTest.java
index c5e2013..331c536 100644
--- a/server/src/test/java/io/seata/server/session/redis/RedisDistributedLockerTest.java
+++ b/server/src/test/java/io/seata/server/session/redis/RedisDistributedLockerTest.java
@@ -16,116 +16,128 @@
 package io.seata.server.session.redis;
 
 import java.io.IOException;
+import java.net.UnknownHostException;
 
+import io.seata.common.XID;
+import io.seata.common.loader.EnhancedServiceLoader;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.context.ApplicationContext;
+import redis.clients.jedis.Jedis;
 import io.seata.core.store.DistributedLockDO;
 import io.seata.core.store.DistributedLocker;
 import io.seata.server.lock.distributed.DistributedLockerFactory;
 import io.seata.server.session.SessionHolder;
 import io.seata.server.storage.redis.JedisPooledFactory;
 import io.seata.server.store.StoreConfig.SessionMode;
-import org.junit.jupiter.api.Assertions;
-import redis.clients.jedis.JedisPool;
-import redis.clients.jedis.JedisPoolAbstract;
-import redis.clients.jedis.JedisPoolConfig;
+import static io.seata.server.store.StoreConfig.StoreMode;
 
 /**
  * @description redis distributed lock test
  *
- * ！！！！！Please use a true redis server to run the following test case ！！！！！
- * The redis mock framework(jedis-mock) can not support set(lockKey, lockValue, SetParams.setParams().nx())，the nx() will not effective.
- * So we can not use mock to test.
- * We need a true redis server to test!
- * ！！！！！Please use a true redis server to run the following test case ！！！！！
- *
- * @author  zhongxiang.wang
+ * @author zhongxiang.wang
+ * @author funkye
  */
+@SpringBootTest
 public class RedisDistributedLockerTest {
 
-    private static JedisPoolAbstract jedisPoolInstance;
     private String retryRollbacking = "RetryRollbacking";
     private String retryCommiting = "RetryCommiting";
     private String lockValue = "127.1.1.1:9081";
     private static DistributedLocker distributedLocker;
-
-//    @BeforeAll
-    public static void start() throws IOException {
-        JedisPoolConfig poolConfig = new JedisPoolConfig();
-        poolConfig.setMinIdle(1);
-        poolConfig.setMaxIdle(10);
-        jedisPoolInstance = JedisPooledFactory.getJedisPoolInstance(new JedisPool(poolConfig, "127.0.0.1", 6379, 60000));
-        distributedLocker = DistributedLockerFactory.getDistributedLocker(SessionMode.REDIS.getName());
+    private static Jedis jedis;
+
+    @BeforeAll
+    public static void start(ApplicationContext context) throws IOException {
+        EnhancedServiceLoader.unload(DistributedLocker.class);
+        MockRedisServer.getInstance();
+        DistributedLockerFactory.cleanLocker();
+        distributedLocker = DistributedLockerFactory.getDistributedLocker(StoreMode.REDIS.getName());
+        jedis = JedisPooledFactory.getJedisInstance();
     }
 
-//    @Test
+    @Test
     public void test_acquireScheduledLock_success() {
-        boolean acquire = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue, 60000l));
-        Assertions.assertEquals(true,acquire);
-        String lockValueExisted = jedisPoolInstance.getResource().get(retryRollbacking);
-        Assertions.assertEquals(lockValue,lockValueExisted);
-        boolean release = distributedLocker.releaseLock(new DistributedLockDO(retryRollbacking, lockValue,null));
-        Assertions.assertEquals(true,release);
-        Assertions.assertNull(jedisPoolInstance.getResource().get(retryRollbacking));
+        boolean acquire = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue, 60000L));
+        Assertions.assertTrue(acquire);
+        String lockValueExisted = jedis.get(retryRollbacking);
+        Assertions.assertEquals(lockValue, lockValueExisted);
+        boolean release = distributedLocker.releaseLock(new DistributedLockDO(retryRollbacking, lockValue, null));
+        Assertions.assertTrue(release);
+        Assertions.assertNull(jedis.get(retryRollbacking));
     }
 
-//    @Test
-    public void test_acquireScheduledLock_success_() {
+    @Test
+    public void test_acquireScheduledLock_success_() throws UnknownHostException {
         SessionHolder.init(SessionMode.REDIS);
         boolean accquire = SessionHolder.acquireDistributedLock(retryRollbacking);
-        Assertions.assertEquals(true,accquire);
-        String lockValueExisted = jedisPoolInstance.getResource().get(retryRollbacking);
-        Assertions.assertEquals("null:0",lockValueExisted);
+        Assertions.assertTrue(accquire);
+        String lockValueExisted = jedis.get(retryRollbacking);
+        Assertions.assertEquals(XID.getIpAddressAndPort(), lockValueExisted);
         boolean release = SessionHolder.releaseDistributedLock(retryRollbacking);
-        Assertions.assertEquals(true,release);
-        Assertions.assertNull(jedisPoolInstance.getResource().get(retryRollbacking));
+        Assertions.assertTrue(release);
+        Assertions.assertNull(jedis.get(retryRollbacking));
     }
 
-//    @Test
+    @Test
     public void test_acquireLock_concurrent() {
         //acquire the lock success
         boolean accquire = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue, 60000l));
-        Assertions.assertEquals(true,accquire);
-        String lockValueExisted = jedisPoolInstance.getResource().get(retryRollbacking);
+        Assertions.assertTrue(accquire);
+        String lockValueExisted = jedis.get(retryRollbacking);
         Assertions.assertEquals(lockValue,lockValueExisted);
 
         // concurrent acquire
-       for(int i = 0;i < 1000;i++){
+       for(int i = 0;i < 10;i++){
            boolean b = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue + i, 60000l));
-           Assertions.assertEquals(false,b);
+           Assertions.assertFalse(b);
        }
 
        //release the lock
        boolean release = distributedLocker.releaseLock(new DistributedLockDO(retryRollbacking, lockValue ,null));
-       Assertions.assertEquals(true,release);
-       Assertions.assertNull(jedisPoolInstance.getResource().get(retryRollbacking));
+       Assertions.assertTrue(release);
+       Assertions.assertNull(jedis.get(retryRollbacking));
 
        // other acquire the lock success
-       boolean c = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue + 1, 60000L));
-       Assertions.assertEquals(true,c);
+       boolean c = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue + 1, 2000L));
+        Assertions.assertTrue(c);
 
         //other2 acquire the lock failed
-        boolean d = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue + 2, 60000L));
-        Assertions.assertEquals(false,d);
+        boolean d = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue + 2, 2000L));
+        Assertions.assertFalse(d);
 
        //sleep 60s
         try {
-            Thread.sleep(60*1000);
+            Thread.sleep(2000);
         } catch (InterruptedException e) {
             e.printStackTrace();
         }
 
         //other2 acquire the lock
         boolean e = distributedLocker.acquireLock(new DistributedLockDO(retryRollbacking, lockValue + 2, 60000l));
-        Assertions.assertEquals(true,e);
+        Assertions.assertTrue(e);
 
         //clear
         boolean f = distributedLocker.releaseLock(new DistributedLockDO(retryRollbacking, lockValue + 2,null));
     }
 
-//    @Test
+    @Test
     public void test_acquireLock_false() {
-        String set = jedisPoolInstance.getResource().set(retryCommiting, lockValue);
+        String set = jedis.set(retryCommiting, lockValue);
         Assertions.assertEquals("OK",set);
-        boolean acquire = distributedLocker.acquireLock(new DistributedLockDO(retryCommiting, lockValue, 60000L));
-        Assertions.assertEquals(false,acquire);
+        boolean acquire = distributedLocker.acquireLock(new DistributedLockDO(retryCommiting, lockValue, 60000l));
+        Assertions.assertFalse(acquire);
+    }
+
+    @AfterAll
+    public static void after() throws IOException {
+        EnhancedServiceLoader.unload(DistributedLocker.class);
+        DistributedLockerFactory.cleanLocker();
+        DistributedLockerFactory.getDistributedLocker(StoreMode.FILE.getName());
+        jedis.close();
     }
+
 }
diff --git a/server/src/test/java/io/seata/server/session/redis/RedisSessionManagerTest.java b/server/src/test/java/io/seata/server/session/redis/RedisSessionManagerTest.java
index 4e4d07c..4a8a2d3 100644
--- a/server/src/test/java/io/seata/server/session/redis/RedisSessionManagerTest.java
+++ b/server/src/test/java/io/seata/server/session/redis/RedisSessionManagerTest.java
@@ -16,10 +16,12 @@
 package io.seata.server.session.redis;
 
 import java.io.IOException;
+import java.lang.reflect.Field;
 import java.util.List;
 
-import com.github.fppt.jedismock.RedisServer;
 import io.seata.common.XID;
+import io.seata.common.loader.EnhancedServiceLoader;
+import io.seata.common.util.CollectionUtils;
 import io.seata.core.exception.TransactionException;
 import io.seata.core.model.BranchStatus;
 import io.seata.core.model.BranchType;
@@ -29,17 +31,13 @@ import io.seata.server.session.BranchSession;
 import io.seata.server.session.GlobalSession;
 import io.seata.server.session.SessionCondition;
 import io.seata.server.session.SessionManager;
-import io.seata.server.storage.redis.JedisPooledFactory;
 import io.seata.server.storage.redis.session.RedisSessionManager;
 import io.seata.server.storage.redis.store.RedisTransactionStoreManager;
-import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.ApplicationContext;
-import redis.clients.jedis.JedisPool;
-import redis.clients.jedis.JedisPoolConfig;
 
 import static io.seata.common.DefaultValues.DEFAULT_TX_GROUP;
 
@@ -48,17 +46,12 @@ import static io.seata.common.DefaultValues.DEFAULT_TX_GROUP;
  */
 @SpringBootTest
 public class RedisSessionManagerTest {
-    private static RedisServer server = null;
     private static SessionManager sessionManager = null;
 
     @BeforeAll
     public static void start(ApplicationContext context) throws IOException {
-        server = RedisServer.newRedisServer(6789);
-        server.start();
-        JedisPoolConfig poolConfig = new JedisPoolConfig();
-        poolConfig.setMinIdle(1);
-        poolConfig.setMaxIdle(10);
-        JedisPooledFactory.getJedisPoolInstance(new JedisPool(poolConfig, "127.0.0.1", 6789, 60000));
+        MockRedisServer.getInstance();
+        EnhancedServiceLoader.unloadAll();
         RedisTransactionStoreManager transactionStoreManager = RedisTransactionStoreManager.getInstance();
         RedisSessionManager redisSessionManager = new RedisSessionManager();
         redisSessionManager.setTransactionStoreManager(transactionStoreManager);
@@ -80,7 +73,7 @@ public class RedisSessionManagerTest {
     }
 
     //Cause the jedismock can not mock the watch command,so I annotation it after I had tested this method and had successed.
-    //@Test
+    @Test
     public void test_updateGlobalSessionStatus() throws TransactionException {
         GlobalSession session = GlobalSession.createGlobalSession("test", "test", "test123", 100);
         String xid = XID.generateXID(session.getTransactionId());
@@ -299,7 +292,7 @@ public class RedisSessionManagerTest {
     }
 
     @Test
-    public void testReadSessionWithBranch() throws TransactionException {
+    public void testReadSessionWithBranch() throws TransactionException, NoSuchFieldException, IllegalAccessException {
         GlobalSession session = GlobalSession.createGlobalSession("test", "test", "test123", 100);
         String xid = XID.generateXID(session.getTransactionId());
         session.setXid(xid);
@@ -324,7 +317,10 @@ public class RedisSessionManagerTest {
         GlobalSession globalSession = sessionManager.findGlobalSession(xid,false);
         Assertions.assertEquals(session.getXid(),globalSession.getXid());
         Assertions.assertEquals(session.getTransactionId(),globalSession.getTransactionId());
-        Assertions.assertEquals(0,globalSession.getBranchSessions().size());
+        Class<?> clz = globalSession.getClass();
+        Field branchSessions = clz.getDeclaredField("branchSessions");
+        branchSessions.setAccessible(true);
+        Assertions.assertTrue(CollectionUtils.isEmpty((List<BranchSession>)branchSessions.get(globalSession)));
 
         globalSession = sessionManager.findGlobalSession(xid,true);
         Assertions.assertEquals(branchSession.getXid(),globalSession.getBranchSessions().get(0).getXid());
@@ -335,11 +331,4 @@ public class RedisSessionManagerTest {
         sessionManager.removeGlobalSession(session);
     }
 
-
-    @AfterAll
-    public static void after() {
-        server.stop();
-        server = null;
-    }
-
 }
diff --git a/server/src/test/java/io/seata/server/session/redis/RedisTransactionStoreManagerTest.java b/server/src/test/java/io/seata/server/session/redis/RedisTransactionStoreManagerTest.java
index 4b74e70..a4b8d85 100644
--- a/server/src/test/java/io/seata/server/session/redis/RedisTransactionStoreManagerTest.java
+++ b/server/src/test/java/io/seata/server/session/redis/RedisTransactionStoreManagerTest.java
@@ -20,21 +20,25 @@ import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import com.github.fppt.jedismock.RedisServer;
+import java.util.Set;
 import io.seata.common.XID;
 import io.seata.common.exception.RedisException;
+import io.seata.common.loader.EnhancedServiceLoader;
 import io.seata.common.util.BeanUtils;
+import io.seata.common.util.CollectionUtils;
 import io.seata.core.exception.TransactionException;
 import io.seata.server.console.param.GlobalSessionParam;
 import io.seata.server.console.vo.GlobalLockVO;
 import io.seata.core.model.GlobalStatus;
 import io.seata.server.console.vo.GlobalSessionVO;
 import io.seata.server.session.GlobalSession;
+import io.seata.server.session.SessionCondition;
 import io.seata.server.session.SessionManager;
 import io.seata.server.storage.redis.JedisPooledFactory;
 import io.seata.server.storage.redis.session.RedisSessionManager;
 import io.seata.server.storage.redis.store.RedisTransactionStoreManager;
 import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
@@ -42,8 +46,9 @@ import org.slf4j.LoggerFactory;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.context.ApplicationContext;
 import redis.clients.jedis.Jedis;
-import redis.clients.jedis.JedisPool;
-import redis.clients.jedis.JedisPoolConfig;
+import redis.clients.jedis.Pipeline;
+
+
 import static io.seata.server.storage.SessionConverter.convertToGlobalSessionVo;
 
 /**
@@ -54,18 +59,14 @@ public class RedisTransactionStoreManagerTest {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(RedisTransactionStoreManagerTest.class);
 
-    private static RedisServer server = null;
-    private static RedisTransactionStoreManager redisTransactionStoreManager = null;
-    private static SessionManager sessionManager = null;
+    private static volatile RedisTransactionStoreManager redisTransactionStoreManager = null;
+    private static volatile SessionManager sessionManager = null;
 
     @BeforeAll
     public static void start(ApplicationContext context) throws IOException {
-        server = RedisServer.newRedisServer(6789);
-        server.start();
-        JedisPoolConfig poolConfig = new JedisPoolConfig();
-        poolConfig.setMinIdle(1);
-        poolConfig.setMaxIdle(10);
-        JedisPooledFactory.getJedisPoolInstance(new JedisPool(poolConfig, "127.0.0.1", 6789, 60000));
+        MockRedisServer.getInstance();
+        EnhancedServiceLoader.unloadAll();
+        JedisPooledFactory.getJedisInstance().flushAll();
         redisTransactionStoreManager = RedisTransactionStoreManager.getInstance();
         RedisSessionManager redisSessionManager = new RedisSessionManager();
         redisSessionManager.setTransactionStoreManager(redisTransactionStoreManager);
@@ -73,7 +74,45 @@ public class RedisTransactionStoreManagerTest {
     }
 
     @Test
-    public void testInsertGlobalSessionDataAndQuery() throws TransactionException {
+    public synchronized void testBeginSortByTimeoutQuery() throws TransactionException, InterruptedException {
+        GlobalSession session1 = GlobalSession.createGlobalSession("test1", "test2", "test001", 500);
+        String xid1 = XID.generateXID(session1.getTransactionId());
+        session1.setXid(xid1);
+        session1.setTransactionId(session1.getTransactionId());
+        session1.setBeginTime(System.currentTimeMillis());
+        session1.setApplicationData("abc=878s1");
+        session1.setStatus(GlobalStatus.Begin);
+        GlobalSession session2 = GlobalSession.createGlobalSession("test3", "test4", "test002", 450);
+        String xid2 = XID.generateXID(session2.getTransactionId());
+        session2.setXid(xid2);
+        session2.setTransactionId(session2.getTransactionId());
+        session2.setBeginTime(System.currentTimeMillis());
+        session2.setApplicationData("abc1=878s2");
+        session2.setStatus(GlobalStatus.Begin);
+        SessionCondition sessionCondition = new SessionCondition(GlobalStatus.Begin);
+        sessionManager.addGlobalSession(session1);
+        sessionManager.addGlobalSession(session2);
+        List<GlobalSession> list = sessionManager.findGlobalSessions(sessionCondition);
+        for (GlobalSession globalSession : list) {
+            LOGGER.info("sorted xid: {},timeout: {}",globalSession.getXid(),globalSession.getTimeout()+globalSession.getBeginTime());
+        }
+        List<GlobalSession> list2 = (List<GlobalSession>)sessionManager.allSessions();
+        for (GlobalSession globalSession : list2) {
+            LOGGER.info("xid: {},timeout: {}",globalSession.getXid(),globalSession.getTimeout()+globalSession.getBeginTime());
+        }
+        Assertions.assertEquals(2, list2.size());
+        if(CollectionUtils.isNotEmpty(list)) {
+            Assertions.assertEquals(xid1, list.size() > 1 ? list.get(1).getXid() : list.get(0));
+            if (list.size() > 1 && list2.size() > 1) {
+                Assertions.assertNotEquals(list2.get(0).getXid(), list.get(0).getXid());
+            }
+            sessionManager.removeGlobalSession(session1);
+            sessionManager.removeGlobalSession(session2);
+        }
+    }
+
+    @Test
+    public synchronized void testInsertGlobalSessionDataAndQuery() throws TransactionException {
         GlobalSession session = GlobalSession.createGlobalSession("test", "test", "test123", 100);
         String xid = XID.generateXID(session.getTransactionId());
         session.setXid(xid);
@@ -177,7 +216,12 @@ public class RedisTransactionStoreManagerTest {
         final List<GlobalSession> globalSessionStatus = redisTransactionStoreManager.readSessionStatusByPage(param);
         LOGGER.info("the  globalSessionStatus result is:[{}]", globalSessionStatus);
         LOGGER.info("the  globalSessionStatus result size is:[{}]", globalSessionStatus);
-
+        sessionManager.removeGlobalSession(session1);
+        sessionManager.removeGlobalSession(session2);
+        sessionManager.removeGlobalSession(session3);
+        sessionManager.removeGlobalSession(session4);
+        sessionManager.removeGlobalSession(session5);
+        sessionManager.removeGlobalSession(session);
     }
 
     @Test
@@ -230,9 +274,8 @@ public class RedisTransactionStoreManagerTest {
     }
 
     @AfterAll
-    public static void after() {
-        server.stop();
-        server = null;
+    public static void close(){
+        redisTransactionStoreManager=null;
     }
 
 }

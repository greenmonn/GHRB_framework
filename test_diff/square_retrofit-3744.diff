diff --git a/retrofit/src/test/java/retrofit2/InvocationTest.java b/retrofit/src/test/java/retrofit2/InvocationTest.java
index 8ad2ad9..aed02f1 100644
--- a/retrofit/src/test/java/retrofit2/InvocationTest.java
+++ b/retrofit/src/test/java/retrofit2/InvocationTest.java
@@ -39,6 +39,9 @@ public final class InvocationTest {
         @Path("p1") String p1, @Query("p2") String p2, @Body RequestBody body);
   }
 
+  interface ExampleSub extends Example {
+  }
+
   @Test
   public void invocationObjectOnCallAndRequestTag() {
     Retrofit retrofit =
@@ -59,6 +62,38 @@ public final class InvocationTest {
   }
 
   @Test
+  public void invocationCorrectlyIdentifiesServiceMethodInvocation() {
+    Retrofit retrofit = new Retrofit.Builder()
+      .baseUrl("http://example.com/")
+      .callFactory(new OkHttpClient())
+      .build();
+
+    ExampleSub example = retrofit.create(ExampleSub.class);
+    RequestBody requestBody = RequestBody.create(MediaType.get("text/plain"), "three");
+    Call<ResponseBody> call = example.postMethod("one", "two", requestBody);
+
+    Invocation invocation = call.request().tag(Invocation.class);
+    assertThat(invocation).isNotNull();
+    assertThat(invocation.service()).isEqualTo(ExampleSub.class);
+    assertThat(invocation.instance()).isInstanceOf(Example.class);
+    assertThat(invocation.instance()).isInstanceOf(ExampleSub.class);
+    assertThat(invocation.instance()).isSameAs(example);
+    assertThat(invocation.method().getName()).isEqualTo("postMethod");
+    assertThat(invocation.method().getDeclaringClass()).isEqualTo(Example.class);
+    assertThat(invocation.arguments()).isEqualTo(Arrays.asList("one", "two", requestBody));
+  }
+
+  @Test
+  public void nullService() {
+    try {
+      Invocation.of(null, new Object(), Object.class.getDeclaredMethods()[0], Arrays.asList("one", "two"));
+      fail();
+    } catch (NullPointerException expected) {
+      assertThat(expected).hasMessage("service == null");
+    }
+  }
+
+  @Test
   public void nullMethod() {
     try {
       Invocation.of(null, Arrays.asList("one", "two"));
